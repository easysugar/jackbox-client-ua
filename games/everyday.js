(self.webpackChunkjackbox_tv = self.webpackChunkjackbox_tv || []).push([
    ["games/everyday"], {
        7851: (e, t, s) => {
            "use strict";
            s.r(t), s.d(t, {
                MainView: () => pA
            });
            var i = s(13469),
                o = s.n(i),
                n = s(24340),
                a = s(266),
                r = s(72316),
                l = s.n(r),
                d = s(63574),
                p = s.n(d);
            const c = l().Model.extend({
                    defaults: {
                        pendingState: null,
                        state: "normal",
                        playerText: null,
                        playerColor: null,
                        playerAvatar: null,
                        playerRole: null,
                        infoText: null,
                        infoAvatars: [],
                        infoColor: null,
                        infoRole: null,
                        alertQueue: [],
                        isAlerting: !1,
                        alertId: null,
                        alertText: null,
                        alertAvatars: [],
                        alertColor: null,
                        alertPoints: null
                    },
                    clearAlert() {
                        this.set({
                            isAlerting: !1,
                            alertId: null,
                            alertText: null,
                            alertAvatars: [],
                            alertColor: null,
                            alertPoints: null
                        })
                    },
                    setNextAlert() {
                        const e = this.get("alertQueue"),
                            t = e.shift();
                        this.set({
                            alertQueue: e,
                            isAlerting: !0,
                            alertId: t.id,
                            alertText: t.text,
                            alertAvatars: t.avatars,
                            alertColor: t.color,
                            infoRole: "NEEDS HELP",
                            alertPoints: t.points
                        })
                    }
                }),
                m = p().View.extend({
                    className: "info-bar",
                    model: new(l().Model),
                    infoModel: new c,
                    template: o().template('<div class="player-avatar avatar"></div> <div class="info-avatar collab0 avatar"></div> <div class="info-avatar collab1 avatar"></div> <div class="info-avatar collab2 avatar"></div> <div class="info-avatar collab3 avatar"></div> <div class="info-avatar collab4 avatar"></div> <div class="info-avatar collab5 avatar"></div> <div class="info-avatar collab6 avatar"></div> <div class="points"></div> <div class="bar background-color"></div> <div class="info-role role"><span></span></div> <div class="player-role role"><span></span></div> <div class="text info-text"></div> <div class="text player-text"></div>'),
                    alertTimeout: null,
                    events: {
                        click: "onClick"
                    },
                    infoBindings: {
                        ":el": {
                            attributes: [{
                                name: "class",
                                observe: ["isAlerting", "state", "collabType"],
                                onGet(e) {
                                    let [t, s, i] = e;
                                    if (t) return "alerting";
                                    let o = s;
                                    return i && (o += ` collab-${i}`), o
                                }
                            }]
                        },
                        ".bar": {
                            attributes: [{
                                name: "class",
                                observe: ["state", "alertColor", "playerColor", "infoColor"],
                                onGet(e) {
                                    let [t, s, i, o] = e;
                                    return "emergency" === t ? "" : s || ("normal" === t ? i : o || "")
                                }
                            }]
                        },
                        ".player-text": "playerText",
                        ".player-avatar": {
                            attributes: [{
                                name: "class",
                                observe: "playerAvatar",
                                onGet: e => e ? `visible ${e}` : ""
                            }]
                        },
                        ".info-text": {
                            observe: ["alertText", "infoText"],
                            onGet(e) {
                                let [t, s] = e;
                                return t || s || ""
                            }
                        },
                        ".player-role span": "playerRole",
                        ".player-role": {
                            classes: {
                                show: "playerRole"
                            }
                        },
                        ".info-role span": "infoRole",
                        ".info-role": {
                            classes: {
                                show: {
                                    observe: ["infoRole", "state", "isAlerting", "infoAvatars"],
                                    onGet(e) {
                                        let [t, s, i, o] = e;
                                        return !!t && (!!i || !("normal" === s && !i) && o.length > 0)
                                    }
                                }
                            }
                        },
                        ".points": {
                            observe: "alertPoints",
                            onGet: e => `+${e}`
                        }
                    },
                    initialize() {
                        this.listenTo(this.infoModel, "change:pendingState", this.onPendingStateChange), this.listenTo(this.infoModel, "change:alertQueue", this.onAlertQueueChange)
                    },
                    onRender() {
                        this.stickit(this.infoModel, this.infoBindings), this.addCollabBindings()
                    },
                    addCollabBindings() {
                        for (let e = 0; e <= 6; e++) this.addBinding(this.infoModel, `.info-avatar.collab${e}`, {
                            attributes: [{
                                name: "class",
                                observe: ["isAlerting", "state", "alertAvatars", "infoAvatars"],
                                onGet: t => {
                                    let [s, i, o, n] = t, a = "";
                                    return o.length > e ? (a += o[e], s && (a += " visible"), a) : (n.length > e && (a += n[e], "normal" !== i && (a += " visible")), a)
                                }
                            }]
                        })
                    },
                    onPendingStateChange(e, t) {
                        if (!t) return;
                        const s = this.infoModel.get("pendingState");
                        this.infoModel.set({
                            pendingState: null,
                            state: s
                        })
                    },
                    updateAlertingState() {
                        if (!this.alertTimeout) return this.infoModel.get("alertQueue").length ? (this.infoModel.setNextAlert(), void this.startAlertTimeout()) : (this.infoModel.set({
                            isAlerting: !1
                        }), void setTimeout((() => {
                            this.infoModel.clearAlert()
                        }), 1e3))
                    },
                    onAlertQueueChange(e, t) {
                        t && t.length && this.updateAlertingState()
                    },
                    startAlertTimeout() {
                        this.alertTimeout = setTimeout((() => {
                            this.alertTimeout && clearTimeout(this.alertTimeout), this.alertTimeout = null, this.updateAlertingState()
                        }), 3e3)
                    },
                    onClick() {
                        this.infoModel.get("isAlerting") && this.triggerMethod("client:message", {
                            action: "joinTask",
                            id: this.infoModel.get("alertId")
                        })
                    }
                });

            function h(e, t, s) {
                return t in e ? Object.defineProperty(e, t, {
                    value: s,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[t] = s, e
            }
            class u {
                get isCaptain() {
                    return !!this.data.captain && this.data.playerInfo.name === this.data.captain.name
                }
                get participants() {
                    return this.data.participant ? [this.data.participant] : this.data.participants ? this.data.participants : []
                }
                get otherParticipants() {
                    const e = this.data.participant ? [this.data.participant] : this.data.participants;
                    return e ? e.filter((e => e.name !== this.data.playerInfo.name)) : []
                }
                constructor(e, t) {
                    if (h(this, "currentState", void 0), h(this, "data", void 0), h(this, "update", {}), this.currentState = e, this.data = t, "Lobby" === t.state && t.lobbyState && "PostGame" === t.lobbyState) return this.update.playerText = null, this.update.playerColor = null, this.update.playerAvatar = null, this.update.playerRole = null, void this.setPendingState("unassigned");
                    if (this.parsePlayerData(t), t.alerts) {
                        const s = this.parseAlerts(t.alerts, t.tasks);
                        this.update.alertQueue = e.alertQueue.concat(s)
                    }
                    if (t.playerInfo && t.playerInfo.avatar) {
                        if ("EmergencyObserver" === t.state) return this.setPendingState("emergency"), void this.parseEmergencyData(t);
                        if ("EMERGENCY" === t.category) return this.setPendingState("emergency"), void this.parseEmergencyData(t);
                        if (t.isCanceledBy && t.isCanceledBy.captain) return this.setPendingState("collab"), void this.parseCanceledByData(t.isCanceledBy);
                        if (t.cancels) return this.setPendingState("collab"), void this.parseCancelerData(t.cancels);
                        if (t.participationType && "SOLO" !== t.participationType) switch (this.setPendingState("collab"), t.participationType) {
                            case "ALL":
                                this.parseAllCollabData(t);
                                break;
                            case "OPEN":
                                this.parseOpenCollabData(t);
                                break;
                            case "HELP":
                                this.parseHelpCollabData(t)
                        } else this.setPendingState("normal")
                    } else this.setPendingState("unassigned")
                }
                setPendingState(e) {
                    this.currentState.state !== e && (this.update.pendingState = e)
                }
                parseRoleFromAvatar(e) {
                    return e.includes("Adult") ? "ADULT" : e.includes("Child") ? "CHILD" : e.includes("Teen") ? "TEEN" : ""
                }
                parsePlayerData(e) {
                    this.update.playerText = e.playerInfo && e.playerInfo.name ? e.playerInfo.name : null, this.update.playerColor = e.playerInfo && e.playerInfo.avatar ? e.playerInfo.avatar : null, this.update.playerAvatar = e.playerInfo && e.playerInfo.avatar ? e.playerInfo.avatar : null, this.update.playerRole = e.playerInfo && e.playerInfo.role ? e.playerInfo.role.id : null
                }
                parseEmergencyData(e) {
                    e.playerThatCausedEmergency || (e.playerThatCausedEmergency = {
                        avatar: "Audience",
                        name: "The Cat"
                    }), this.update.infoColor = this.update.playerColor, this.update.infoAvatars = [e.playerThatCausedEmergency.avatar], this.update.infoText = `BLAME ${e.playerThatCausedEmergency.name}`, this.update.infoRole = "DID THIS"
                }
                parseCancelerData(e) {
                    const t = e.captain || {};
                    this.update.infoColor = this.update.playerColor, this.update.infoAvatars = [t.avatar], this.update.infoText = `STOPPING ${t.name}`, this.update.infoRole = "SELFISH"
                }
                parseCanceledByData(e) {
                    const t = e.captain || {};
                    this.update.infoColor = t.avatar, this.update.infoAvatars = [t.avatar], this.update.infoText = `${t.name} IS SCOLDING YOU`, this.update.infoRole = "KILLJOY"
                }
                parseAllCollabData(e) {
                    const t = this.otherParticipants;
                    this.update.infoColor = this.update.playerColor, this.update.infoAvatars = t.map((e => e.avatar)), e.waitingFor ? 1 === e.waitingFor.length ? this.update.infoText = "WAITING FOR 1 MORE" : (this.update.infoText = `WAITING FOR ${e.waitingFor.length} OTHERS`, this.update.infoRole = "THE FAM") : this.update.infoText = "EVERYONE IS HERE"
                }
                parseOpenCollabData(e) {
                    const t = e.captain,
                        s = this.participants,
                        i = this.otherParticipants;
                    return "WaitingForAny" === e.state ? (this.update.infoColor = this.update.playerColor, this.update.infoAvatars = [], void(this.update.infoText = "WAITING FOR HELPERS")) : t ? this.isCaptain ? (this.update.infoColor = this.update.playerColor, this.update.infoAvatars = s.map((e => e.avatar)), this.update.infoRole = this.parseContextualParticipantRole(e.state), this.update.playerRole = this.parseContextualCaptainRole(e.state), void(1 === s.length ? this.update.infoText = `${s[0].name} IS HELPING` : this.update.infoText = `YOU HAVE ${s.length} HELPERS`)) : (this.update.infoColor = t.avatar, this.update.infoAvatars = [t.avatar], this.update.infoRole = this.parseContextualParticipantRole(e.state), i.forEach((e => this.update.infoAvatars.push(e.avatar))), void(0 === i.length ? this.update.infoText = `HELPING ${t.name}` : this.update.infoText = `${t.name} HAS ${s.length} HELPERS`)) : (this.update.infoColor = this.update.playerColor, this.update.infoAvatars = [], void(this.update.infoText = "CAPTAIN HAS LEFT"))
                }
                parseHelpCollabData(e) {
                    const t = e.captain,
                        s = this.participants;
                    if (this.isCaptain) return this.update.infoColor = s[0].avatar, this.update.infoAvatars = [s[0].avatar], this.update.infoText = `WORKING WITH ${s[0].name}`, this.update.infoRole = this.parseContextualCaptainRole(e.state), void(this.update.playerRole = this.parseContextualParticipantRole(e.state));
                    this.update.infoColor = t.avatar, this.update.infoAvatars = [t.avatar], this.update.infoText = `WORKING WITH ${t.name}`, this.update.infoRole = this.parseContextualParticipantRole(e.state), this.update.playerRole = this.parseContextualCaptainRole(e.state)
                }
                parseContextualCaptainRole(e) {
                    switch (e = e.replace("Participant", "").replace("Captain", "")) {
                        case "FindMechanic":
                            return "DESCRIBER";
                        case "GatherMechanic":
                        case "GizmosMechanic":
                            return "INSTRUCTOR";
                        case "InstructionsMechanic":
                            return "ASSISTANT";
                        case "SearchMechanic":
                            return "SEARCHER";
                        case "TextMechanic":
                            return "READER";
                        case "TravelMechanic":
                            return "NAVIGATOR";
                        default:
                            return "HELPER"
                    }
                }
                parseContextualParticipantRole(e) {
                    switch (e = e.replace("Participant", "").replace("Captain", "")) {
                        case "FindMechanic":
                            return "FINDER";
                        case "GatherMechanic":
                            return "GATHERERS";
                        case "GizmosMechanic":
                            return "OPERATOR";
                        case "InstructionsMechanic":
                            return "INSTRUCTOR";
                        case "SearchMechanic":
                            return "SEARCHERS";
                        case "TextMechanic":
                            return "WRITER";
                        case "TravelMechanic":
                            return "DRIVER";
                        default:
                            return "NEEDER"
                    }
                }
                parseAlerts(e, t) {
                    return e.filter((e => e.task && "CANCELER" !== e.task.category)).map((e => {
                        t || (t = []);
                        const s = t.find((t => t.id === e.task.id));
                        return {
                            id: e.task.id,
                            text: `${e.player.name} needs help`,
                            avatars: [e.player.avatar],
                            color: e.player.avatar,
                            points: s ? s.participationPoints : 0
                        }
                    }))
                }
            }
            var g = s(9659);
            const y = p().View.extend({
                    className: "empty",
                    template: o().template('<p class="empty"></p>')
                }),
                b = p().View.extend({
                    tagName: "div",
                    className: "task",
                    template: o().template('<button> <div class="bar-container"> <div class="bar"></div> </div> <div class="task-icon"> <div class="clip"></div> </div> <p class="name"></p> </button> <div class="help-background"></div> <div class="alert-background background-color"></div> <p class="help-text text-color"></p> <div class="score"></div>'),
                    triggers: {
                        click: "button:join"
                    },
                    bindings: {
                        ":el": {
                            attributes: [{
                                name: "class",
                                observe: ["isNew", "isFreshAlert", "isOld", "category", "status", "alert"],
                                onGet: "parseClasses"
                            }]
                        },
                        ".name": {
                            observe: "name",
                            updateMethod: "html"
                        },
                        ".score": {
                            observe: "participationPoints",
                            onGet: e => `+${e}`,
                            classes: {
                                hidden: {
                                    observe: "participationPoints",
                                    onGet: e => !e
                                }
                            }
                        },
                        ".bar": {
                            attributes: [{
                                name: "style",
                                observe: "time",
                                onGet: e => !e || e.leftInMs <= 0 ? "" : `width: ${e.leftInMs/e.totalInMs*100}%`
                            }]
                        },
                        ".alert-background": {
                            attributes: [{
                                name: "class",
                                observe: "alert",
                                onGet: e => e ? e.player.avatar : ""
                            }]
                        },
                        ".help-text": {
                            observe: ["status", "alert"],
                            updateMethod: "html",
                            onGet(e) {
                                let [t, s] = e;
                                return this.model.isAvailableOpenOrAll() || "CAN_ASK_FOR_HELP" === t ? "ASK FOR HELP" : "WAITING_FOR_HELP" === t ? "WAITING FOR HELP" : s && this.model.needsHelp() ? `\n                            <div class="avatar head ${s.player.avatar}"></div>\n                            <span>HELP</span> ${s.player.name}\n                        ` : ""
                            },
                            attributes: [{
                                name: "class",
                                observe: "alert",
                                onGet: e => e ? e.player.avatar : ""
                            }]
                        },
                        ".task-icon": {
                            attributes: [{
                                name: "class",
                                observe: "theme",
                                onGet: e => e ? `theme-${e.toLowerCase()}` : ""
                            }]
                        }
                    },
                    initialize(e) {
                        e.model.get("isNew") && setTimeout((() => e.model.set({
                            isNew: !1
                        })), 300), this.listenTo(this.model, "change:isFreshAlert", this.onIsFreshAlertChange), this.onIsFreshAlertChange()
                    },
                    onRender() {
                        this.stickit()
                    },
                    onIsFreshAlertChange() {
                        this.model.get("isFreshAlert") && setTimeout((() => this.model.set({
                            isFreshAlert: !1
                        })), 2e3)
                    },
                    parseClasses(e) {
                        let [t, s, i, o, n] = e, a = o.toLowerCase();
                        return t && (a += " new"), s && (a += " fresh"), i && (a += " old"), (this.model.isHelpTask() || this.model.isAvailableOpenOrAll()) && (a += " help"), "WAITING_FOR_HELP" === n && (a += " waiting"), this.model.needsHelp() && (a += " needy"), a
                    }
                }),
                x = l().Model.extend({
                    defaults: {
                        disabled: !1
                    },
                    needsHelp() {
                        return this.get("alert") && "AVAILABLE" === this.get("status")
                    },
                    isAvailableOpenOrAll() {
                        const e = this.get("alert"),
                            t = this.get("status"),
                            s = this.get("participationType");
                        return !e && "AVAILABLE" === t && ("OPEN" === s || "ALL" === s)
                    },
                    isHelpTask() {
                        const e = this.get("status");
                        return "WAITING_FOR_HELP" === e || "CAN_ASK_FOR_HELP" === e || "BUSY" === e || !!this.needsHelp()
                    },
                    isImportant() {
                        return "STORY" === this.get("category") || "CANCELER" === this.get("category") || !!this.isAvailableOpenOrAll() || !!this.isHelpTask()
                    }
                }),
                f = l().Collection.extend({
                    model: x,
                    hasSet: !1,
                    comparator: (e, t) => {
                        const s = e.isImportant(),
                            i = t.isImportant();
                        return s && !i ? -1 : i && !s ? 1 : e.id < t.id ? -1 : 1
                    },
                    parseTasks(e) {
                        if (e && e.length || this.reset(), !this.length) return void l().Collection.prototype.set.apply(this, [e]);
                        const t = [],
                            s = [];
                        e.forEach((e => {
                            t.push(e.id), e.alert = e.alert || null, e.alert && s.push(e.id), this.findWhere({
                                id: e.id
                            }) ? e.isNew = !1 : (e.isNew = !0, e.alert && (e.isFreshAlert = !0))
                        })), this.each((e => {
                            const i = t.includes(e.get("id")),
                                o = s.includes(e.get("id"));
                            i ? e.get("isOld") && (e.set({
                                isOld: !1
                            }), o && e.set({
                                isFreshAlert: !0
                            })) : e.set({
                                isOld: !0
                            }), !e.get("alert") && o && e.set({
                                isFreshAlert: !0
                            })
                        })), this.add(e, {
                            merge: !0
                        })
                    }
                }),
                v = p().CollectionView.extend({
                    tagName: "div",
                    className: "tasks",
                    childView: b,
                    emptyView: y,
                    collection: new f,
                    timeLeftInterval: null,
                    initialize() {
                        this.startTimers()
                    },
                    onBeforeDestroy() {
                        this.pauseTimers()
                    },
                    startTimers() {
                        this.timeLeftInterval || (this.timeLeftInterval = setInterval(this.onInterval.bind(this), 500))
                    },
                    pauseTimers() {
                        this.timeLeftInterval && (clearInterval(this.timeLeftInterval), this.timeLeftInterval = null)
                    },
                    onInterval() {
                        this.collection.forEach((e => {
                            const t = e.get("time");
                            t && (t.leftInMs <= 0 || e.set({
                                time: {
                                    totalInMs: t.totalInMs,
                                    leftInMs: t.leftInMs - 500
                                }
                            }))
                        }))
                    }
                }),
                k = g.S.extend({
                    defaults: {
                        taskResult: null
                    }
                }),
                P = p().View.extend({
                    className: "scrollable tasks-list",
                    template: o().template('<div class="clamp"> <div class="title"></div> <div id="tasks-region"></div> </div>'),
                    model: new k,
                    tasksComponent: null,
                    regions: {
                        tasks: "#tasks-region"
                    },
                    events: {
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ":el": {
                            classes: {
                                dead: "isWaiting"
                            }
                        },
                        ".title": {
                            observe: "playerInfo",
                            onGet: e => `${e.role.id} TASK LIST`
                        },
                        ".empty": {
                            observe: "playerInfo",
                            onGet: e => `Chill... No ${e.role.id} Tasks Available Right Now`
                        },
                        ".success": {
                            observe: "taskResult",
                            visible: e => "SUCCESS" === e
                        },
                        ".failure": {
                            observe: "taskResult",
                            visible: e => "FAILURE" === e
                        }
                    },
                    initialize() {
                        this.model.set({
                            isWaiting: !0
                        }), this.tasksComponent = new v, this.listenTo(this.model, "change", this.update, this), this.listenTo(this.model, "change:isPaused", this.updatePaused, this), this.hasResult = !1, setTimeout((() => {
                            this.model.set({
                                isWaiting: !1
                            })
                        }), 500)
                    },
                    update() {
                        const e = this.model.get("tasks");
                        this.tasksComponent.collection.name = this.model.get("playerInfo").name, this.tasksComponent.collection.parseTasks(e), this.stickit()
                    },
                    updatePaused(e, t) {
                        this.tasksComponent && (t ? this.tasksComponent.pauseTimers() : this.tasksComponent.startTimers())
                    },
                    onRender() {
                        this.showChildView("tasks", this.tasksComponent), this.stickit()
                    },
                    onAttach() {
                        this.update(), this.updateResult()
                    },
                    onDestroy() {
                        this.tasksComponent.collection.reset()
                    },
                    updateResult() {
                        const e = this.model.get("taskResult");
                        e && (e.success ? this.triggerMethod("result", {
                            type: "success",
                            category: e.taskCategory.id.toLowerCase(),
                            points: e.taskCategory.participantPoints
                        }) : e.wasCanceled && e.playerThatCanceled ? this.triggerMethod("result", {
                            type: "fail",
                            message: `${e.playerThatCanceled.name}<br/>STOPPED</br>YOU!`
                        }) : this.triggerMethod("result", {
                            type: "fail"
                        }))
                    },
                    onChildviewChildviewButtonJoin(e) {
                        this.triggerMethod("client:message", {
                            action: "joinTask",
                            id: e.model.get("id")
                        })
                    }
                }),
                w = p().View.extend({
                    className: "result",
                    template: o().template('\n    <div class="particles"></div>\n    <div class="circle"></div>\n    <p class="message"></p>\n    <div class="count-up"></div>\n'),
                    model: new(l().Model),
                    hideTimer: null,
                    countUpInterval: null,
                    failText: ["TOO<br/>BAD", "NOT<br/>GREAT", "NO<br/>GOOD", "THUMBS<br/>DOWN"],
                    emergencyText: ["CRISIS<br/>AVERTED", "PHEW!", "MERCY!", "SAVED<br/>THE DAY", "THAT<br/>WAS<br/>CLOSE", "HEROIC<br/>SAVE", "THANK<br/>HADES"],
                    selfishText: ["DEVILISH", "YOU<br/>DEVIL!", "SNEAKY!", "HOPE<br/>YOU'RE<br/>HAPPY", "DEMONIC", "GOT AWAY WITH IT", "DIABOLICAL", "FIENDISH", "DEVIOUS", "SLY DEVIL", "NOBODY SAW", "AT WHAT<br/>COST?"],
                    cancelerText: ["FAMILY<br/>HERO", "YOU<br/>TELL 'EM!", "THIS IS<br/>YOUR<br/>HOUSE", "ORDER<br/>RESTORED", "FUN<br/>CANCELED", "JOY<br/>AVERTED", "RULES<br/>ARE<br/>RULES", "YOU ARE<br/>THE LAW", "KAPOW!"],
                    successText: ["NICE<br/>ONE", "GOT<br/>IT", "GOOD<br/>JOB", "GREAT<br/>WORK", "WELL<br/>DONE", "GREAT", "GOOD<br/>FOR YOU", "BEAUTIFUL", "YOU<br/>DID IT", "TERRIFIC", "NICE<br/>GOING", "MUY<br/>BIEN", "SUPERB", "KEEP<br/>IT UP", "WAY<br/>TO GO", "COOL<br/>MOVES", "HECK<br/>YEAH", "NOT<br/>BAD", "DEEECENT", "BRAVO"],
                    storyText: ["WOAH!", "HOLY<br/>SMOKES", "BIG<br/>POINTS", "HUGE", "SO GREAT", "MASSIVE<br/>WIN", "HUMDINGER", "SPICY", "DING<br/>DING", "YES<br/>PLEASE", "PLOT<br/>POINT"],
                    messages: {
                        EAT_BUGS: "Tasty!<br/>Chomp more!",
                        POSE_FOR_PIC: "Adorable!<br/>Keep hamming!",
                        SHOW_BELLY: "Good flop!<br/>Flop again!",
                        SHOW_CLAWS: "Great!<br/>Keep holding!",
                        FIGHT_VACUUM: "Nice!<br/>Keep fighting!",
                        DESTROY_LITTER: "Nice mess!<br/>Go again!",
                        LAY_ON_LAPTOP: "Great!<br/>Hold your<br/>ground!",
                        VOMIT: "Almost!<br/>Keep horking!",
                        DART_OUT: "Sneaky!<br/>Go again!",
                        SCRATCH_CHAIR: "Great!<br/>Scratch again!",
                        KNOCK_ITEMS: "Nice!<br/>Keep<br/>smacking!",
                        PAW_WATER: "Refreshing!<br/>Go again!",
                        SHOW_BELLY_TRAP: "Good flop!<br/>Flop again!"
                    },
                    bindings: {
                        ":el": {
                            observe: "type",
                            visible: !0,
                            attributes: [{
                                name: "class",
                                observe: ["type", "points", "category"],
                                onGet(e) {
                                    let [t, s, i] = e, o = t;
                                    return s && (o += " show-count-up"), i && (o += ` ${i}`), o
                                }
                            }]
                        },
                        ".particles": {
                            observe: "category",
                            updateMethod: "html",
                            onGet: "getParticleHTML"
                        },
                        ".message": {
                            observe: "message",
                            updateMethod: "html"
                        },
                        ".count-up": "countUp"
                    },
                    onRender() {
                        this.stickit()
                    },
                    getCannedMessage(e, t) {
                        return "success" === e ? "emergency" === t ? o().sample(this.emergencyText) : "selfish" === t ? o().sample(this.selfishText) : "canceler" === t ? o().sample(this.cancelerText) : "story" === t ? o().sample(this.storyText) : "audienceStep" === t ? o().sample(this.audienceStepText) : o().sample(this.successText) : o().sample(this.failText)
                    },
                    show(e) {
                        if ("success" !== e.type && "fail" !== e.type) throw new Error("Unknown Result Type");
                        this.model.set({
                            type: e.type,
                            category: e.category || "",
                            message: e.message || this.messages[e.messageKey] || this.getCannedMessage(e.type, e.category),
                            points: e.points
                        }), e.points && setTimeout((() => {
                            this.startCountUp(e.points)
                        }), 150), this.hideTimer && clearTimeout(this.hideTimer), this.hideTimer = setTimeout((() => {
                            this.hide()
                        }), 2500)
                    },
                    hide() {
                        this.model.clear()
                    },
                    startCountUp(e) {
                        let t = 15,
                            s = 0;
                        const i = Math.floor(e / 15);
                        this.countUpInterval = setInterval((() => {
                            if (0 === t) return clearInterval(this.countUpInterval), void this.model.set({
                                countUp: `+${e}`
                            });
                            this.model.set({
                                countUp: `+${s}`
                            }), t -= 1, s += i
                        }), 30)
                    },
                    getParticleHTML(e) {
                        if ("story" === e) {
                            let e = "";
                            for (let t = 0; t <= 20; t++) {
                                const s = o().random(0, 3),
                                    i = o().random(0, 750);
                                e += `\n                    <div class="particle-container" style="transform: rotate(${18*t}deg);">\n                        <div class="star particle particle-${s}" style="animation-duration: ${o().random(750,1e3)}ms; animation-delay: ${i}ms"></div>\n                    </div>\n                `
                            }
                            return e
                        }
                        return ""
                    }
                }),
                T = p().View.extend({
                    className: "waiting any mechanic",
                    template: o().template('<div class="clamp"> <p class="info">This task can’t start without helpers. Yell at your family to join you.<br>Or you can leave this task by tapping the X.</p> </div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p> '),
                    model: new g.S,
                    events: {
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ".leave": {
                            observe: "canLeave",
                            visible: !0
                        },
                        ".instructions": {
                            observe: "name",
                            updateMethod: "html"
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        }
                    },
                    onRender() {
                        this.stickit()
                    },
                    onLeaveClick() {
                        this.triggerMethod("client:message", {
                            action: "leaveTask"
                        })
                    }
                }),
                S = p().View.extend({
                    className: "mechanic waiting all",
                    template: o().template('<div class="scrollable"> <div class="clamp"> <div class="info">This task can\'t start until everyone is here.</div> <div class="waiting">Waiting for:</div> <div class="players"></div> <div class="info">Guilt these family members into joining!</div> </div> </div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p> '),
                    model: new g.S,
                    events: {
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ".leave": {
                            observe: "canLeave",
                            visible: !0
                        },
                        ".instructions": {
                            observe: "name",
                            updateMethod: "html"
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".players": {
                            observe: "waitingFor",
                            updateMethod: "html",
                            onGet(e) {
                                if (!e) return "";
                                let t = "";
                                return e.forEach((e => {
                                    t += `<div class="player text-color ${e.avatar}"><div class="avatar ${e.avatar}"></div>${e.name}</div>`
                                })), t
                            }
                        }
                    },
                    onRender() {
                        this.stickit()
                    },
                    onLeaveClick() {
                        this.triggerMethod("client:message", {
                            action: "leaveTask"
                        })
                    }
                }),
                M = p().View.extend({
                    className: "emergency",
                    template: o().template('<p>THE HOUSE IS ON FIRE!</p> <div class="starter"></div> <div class="fixer"></div>'),
                    model: new g.S,
                    bindings: {
                        ".starter": {
                            observe: "playerThatCausedEmergency",
                            onGet: e => e ? `${e.name} selfish action caused it` : "BUG: NO PLAYER CAUSED THIS WHY?"
                        },
                        ".fixer": {
                            observe: "captain",
                            onGet: e => `${e.name} has to fix it`
                        }
                    },
                    onRender() {
                        this.stickit()
                    }
                });
            var C = s(95716);
            const D = {
                    EAT_BUGS: {
                        state: "TapResultingMechanic",
                        tapsRequired: 25,
                        waitInMs: 450,
                        scene: "AudienceSpawnEatBugs",
                        successTitle: "So helpful!",
                        successText: "You deserve a delicious treat"
                    },
                    POSE_FOR_PIC: {
                        state: "HoldMechanic",
                        durationInMs: 1e4,
                        scene: "AudienceSpawnPoseForPic",
                        successTitle: "Too cute!",
                        successText: "Someone's gotta post these pics"
                    },
                    SHOW_BELLY: {
                        state: "RotateMechanic",
                        direction: "CLOCKWISE",
                        rotationsInDeg: 9e3,
                        scene: "AudienceSpawnShowBelly",
                        successTitle: "So fluffy!",
                        successText: "You earned a nice belly rub"
                    },
                    SHOW_CLAWS: {
                        state: "HoldMechanic",
                        durationInMs: 1e4,
                        scene: "AudienceSpawnShowClaws",
                        successTitle: "So patient!",
                        successText: "Now the family can clip your claws"
                    },
                    FIGHT_VACUUM: {
                        state: "TapResultingMechanic",
                        tapsRequired: 25,
                        waitInMs: 450,
                        scene: "AudienceSpawnFightVacuum",
                        successTitle: "You broke the vacuum!",
                        successText: "Now someone has to get it fixed"
                    },
                    DESTROY_LITTER: {
                        state: "TapResultingMechanic",
                        tapsRequired: 35,
                        waitInMs: 250,
                        scene: "AudienceSpawnDestroyLitter",
                        successTitle: "Big mess!",
                        successText: "Now someone has to sweep it up"
                    },
                    LAY_ON_LAPTOP: {
                        state: "HoldMechanic",
                        durationInMs: 1e4,
                        scene: "AudienceSpawnLayOnLaptop",
                        successTitle: "You claimed the laptop!",
                        successText: "It will take a mighty shove to move you"
                    },
                    VOMIT: {
                        state: "TapResultingMechanic",
                        tapsRequired: 35,
                        waitInMs: 250,
                        scene: "AudienceSpawnVomit",
                        successTitle: "You puked!",
                        successText: "Now someone has to clean it up"
                    },
                    DART_OUT: {
                        state: "TapResultingMechanic",
                        tapsRequired: 35,
                        waitInMs: 250,
                        scene: "AudienceSpawnDartOut",
                        successTitle: "You escaped!",
                        successText: "Now the family has to find you"
                    },
                    SCRATCH_CHAIR: {
                        state: "TapResultingMechanic",
                        tapsRequired: 35,
                        waitInMs: 250,
                        scene: "AudienceSpawnScratchChair",
                        successTitle: "Chair ruined!",
                        successText: "Someone's definitely going to scold you for this"
                    },
                    KNOCK_ITEMS: {
                        state: "TapResultingMechanic",
                        tapsRequired: 35,
                        waitInMs: 250,
                        scene: "AudienceSpawnKnockItems",
                        successTitle: "You showed that crap who's boss!",
                        successText: "Now someone has to pick up your mess"
                    },
                    PAW_WATER: {
                        state: "HoldMechanic",
                        durationInMs: 1e4,
                        scene: "AudienceSpawnPawWater",
                        successTitle: "Your water now!",
                        successText: "Someone has to fill a new glass if they want their own"
                    },
                    SHOW_BELLY_TRAP: {
                        state: "RotateMechanic",
                        direction: "CLOCKWISE",
                        rotationsInDeg: 9e3,
                        scene: "AudienceSpawnShowBelly",
                        successTitle: "Your trap is set!",
                        successText: "When the family tries to pet you, they'll get a surprise scratch"
                    }
                },
                F = {
                    ADULT: {
                        state: "ScrubMechanic",
                        instructions: "Fuss at <NAME> for being selfish",
                        distance: "LONG",
                        scene: "CancelerAdult"
                    },
                    TEEN: {
                        state: "RotateMechanic",
                        instructions: "Roll your eyes at <NAME> to make them feel bad",
                        direction: "CLOCKWISE",
                        rotationsInDeg: 6480,
                        scene: "CancelerTeen"
                    },
                    CHILD: {
                        state: "TapResultingMechanic",
                        instructions: "Throw a tantrum because <NAME> is being selfish",
                        tapsRequired: 20,
                        waitInMs: 250,
                        scene: "CancelerChild"
                    }
                },
                z = p().View.extend({
                    className: "audience-success",
                    template: o().template('<div class="scene-box"> <svg class="bg-cat" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 750" xml:space="preserve"> <path d="M974.27,473.61c13.47-0.79,22.38-3.37,26.73-7.72c-25.47-6.68-75.9-4.45-105.09-4.53c5.99-15.39,11.72-31.49,17.17-48.34\n            c-26.49,9.29-46.82,14.15-62.97,18.42c18.61-32.08,25.55-70.3,20.79-114.65c-23.37,3.56-50.5,7.72-81.39,12.48\n            C757.83,185.09,684.96,78.56,570.9,9.65c-3.57,38.42-8.71,93.07-15.45,163.96c-33.36-5.84-71.07-6.15-102.77,1.78\n            c-3.96-70.5-6.93-126.93-8.91-169.31C314.26,70.24,237.03,189.25,212.08,363.11c-20.59-5.54-57.62-13.66-111.09-24.36\n            c10.3,48.32,27.92,83.96,52.87,106.93c-8.71-0.79-23.37-1.58-43.96-2.38c0.11,0.57,0.23,1.13,0.35,1.7\n            C91.98,445.63,9.02,434.39,0,447.47c34.13,11.93,66.56,7.22,113.3,10.97c10.6,41.6,31.79,83.2,63.59,124.79\n            c-9.54,2.83-16.83,5.5-21.84,8c2.1,5.78,20.13,2.63,28.76,0.82C342.99,800.9,705.14,797,847.59,560.19\n            c19.07,0.62,35.43-0.46,5.13-8.5c7.73-13.09,15.14-27.03,22.24-41.82c2.12-1.57,80.15,6.46,76.15-0.62\n            c-23.93-3.81-47.88-6.66-71.84-8.55c3.97-8.62,7.83-17.5,11.6-26.66L974.27,473.61z"/> </svg> <div class="frame"> <svg class="frame-cat" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 750" xml:space="preserve"> <path d="M974.27,473.61c13.47-0.79,22.38-3.37,26.73-7.72c-25.47-6.68-75.9-4.45-105.09-4.53c5.99-15.39,11.72-31.49,17.17-48.34\n                c-26.49,9.29-46.82,14.15-62.97,18.42c18.61-32.08,25.55-70.3,20.79-114.65c-23.37,3.56-50.5,7.72-81.39,12.48\n                C757.83,185.09,684.96,78.56,570.9,9.65c-3.57,38.42-8.71,93.07-15.45,163.96c-33.36-5.84-71.07-6.15-102.77,1.78\n                c-3.96-70.5-6.93-126.93-8.91-169.31C314.26,70.24,237.03,189.25,212.08,363.11c-20.59-5.54-57.62-13.66-111.09-24.36\n                c10.3,48.32,27.92,83.96,52.87,106.93c-8.71-0.79-23.37-1.58-43.96-2.38c0.11,0.57,0.23,1.13,0.35,1.7\n                C91.98,445.63,9.02,434.39,0,447.47c34.13,11.93,66.56,7.22,113.3,10.97c10.6,41.6,31.79,83.2,63.59,124.79\n                c-9.54,2.83-16.83,5.5-21.84,8c2.1,5.78,20.13,2.63,28.76,0.82C342.99,800.9,705.14,797,847.59,560.19\n                c19.07,0.62,35.43-0.46,5.13-8.5c7.73-13.09,15.14-27.03,22.24-41.82c2.12-1.57,80.15,6.46,76.15-0.62\n                c-23.93-3.81-47.88-6.66-71.84-8.55c3.97-8.62,7.83-17.5,11.6-26.66L974.27,473.61z"/> </svg> <div class="box"></div> <p class="title"></p> <p class="message"></p> </div> <p class="waiting"></p> </div>'),
                    model: new(l().Model),
                    waitingText: ["Waiting for<br/>the next<br/>opurrrtunity", "Taking a little<br/>cat nap", "Nothing to do<br/>right meow", "Mischief<br/>is on a<br/>temporary paws", "Wait fur<br/>a moment", "More tasks<br/>just a<br/>whisker away"],
                    bindings: {
                        ".waiting": {
                            observe: "waitingText",
                            updateMethod: "html"
                        },
                        ".title": "title",
                        ".message": "text"
                    },
                    onRender() {
                        this.stickit(), this.triggerMethod("result")
                    },
                    onAttach() {
                        C.p8.timeline({
                            delay: .25
                        }).to(".frame", {
                            opacity: 1,
                            duration: .05
                        }).to(".frame", {
                            scale: 1,
                            rotate: -3,
                            duration: .3,
                            ease: "back.out(3)"
                        }, 0).to(".frame-cat", {
                            y: 0,
                            duration: .25,
                            ease: "back.out(3)"
                        }, .4).to(".frame", {
                            scale: .5,
                            duration: .3,
                            ease: "back.in(3)"
                        }, 3).to(".frame-cat", {
                            y: 200,
                            duration: .25,
                            ease: "back.in(3)"
                        }, 3).to(".frame", {
                            opacity: 0,
                            duration: .05
                        }, 3.25).to(".waiting", {
                            opacity: 1,
                            duration: .05
                        }, 5).to(".waiting", {
                            scale: 1,
                            duration: .25,
                            ease: "back.out(3)"
                        }, 5).to(".bg-cat", {
                            opacity: 1,
                            duration: .4
                        }, 5);
                        const e = this.model.get("taskResult"),
                            t = D[e.id] || {
                                successTitle: "You did it!",
                                successText: "Now the family has to deal with your shenanigans."
                            };
                        this.model.set({
                            waitingText: o().sample(this.waitingText),
                            title: t.successTitle,
                            text: t.successText
                        })
                    }
                });
            var L = s(52650);
            const R = l().Model.extend({
                    selectedEpisode() {
                        const e = this.get("episodes"),
                            t = this.get("selected");
                        if (e) return e[t]
                    },
                    selectPrevious() {
                        if ("Countdown" === this.get("lobbyState")) return;
                        const e = this.get("episodes"),
                            t = this.get("selected");
                        0 === t ? this.set({
                            selected: e.length - 1
                        }) : this.set({
                            selected: t - 1
                        })
                    },
                    selectNext() {
                        if ("Countdown" === this.get("lobbyState")) return;
                        const e = this.get("episodes"),
                            t = this.get("selected");
                        t === e.length - 1 ? this.set({
                            selected: 0
                        }) : this.set({
                            selected: t + 1
                        })
                    }
                }),
                I = p().View.extend({
                    className: "picker",
                    template: o().template('\n<p class="prompt">This Week\'s Challenge</p>\n<div class="stone-panel">\n    <div class="grade"></div>\n    <p class="title title-outline"></p>\n    <p class="title"></p>\n</div>\n<div class="stone-buttons">\n    <div class="button-wrapper">\n        <button class="stone-button prev"><span>previous<br/>episode</span></button>\n    </div>\n    <div class="button-wrapper">\n        <button class="stone-button next"><span>next<br/>episode</span></button>\n    </div>\n</div>\n'),
                    model: new R,
                    events: {
                        "click .prev": "onPreviousClick",
                        "click .next": "onNextClick"
                    },
                    bindings: {
                        ":el": {
                            classes: {
                                disabled: {
                                    observe: "lobbyState",
                                    onGet: e => "Countdown" === e
                                }
                            }
                        },
                        ".grade, .title": {
                            attributes: [{
                                name: "class",
                                observe: "selected",
                                onGet() {
                                    const e = this.model.selectedEpisode();
                                    return e && e.grade ? `grade-${e.grade.toLowerCase()}` : ""
                                }
                            }]
                        },
                        ".title": {
                            observe: "selected",
                            onGet() {
                                const e = this.model.selectedEpisode();
                                return e && e.name ? e.name : ""
                            }
                        }
                    },
                    initialize() {
                        this.model.set({
                            selected: 0
                        })
                    },
                    onRender() {
                        this.stickit()
                    },
                    onAttach() {
                        this.stickit()
                    },
                    onPreviousClick() {
                        this.model.selectPrevious(), this.send(this.model.selectedEpisode().index)
                    },
                    onNextClick() {
                        this.model.selectNext(), this.send(this.model.selectedEpisode().index)
                    },
                    send: o().debounce((function(e) {
                        this.triggerMethod("picker", e)
                    }), 300)
                });

            function O(e, t) {
                var s = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var i = Object.getOwnPropertySymbols(e);
                    t && (i = i.filter((function(t) {
                        return Object.getOwnPropertyDescriptor(e, t).enumerable
                    }))), s.push.apply(s, i)
                }
                return s
            }

            function B(e) {
                for (var t = 1; t < arguments.length; t++) {
                    var s = null != arguments[t] ? arguments[t] : {};
                    t % 2 ? O(Object(s), !0).forEach((function(t) {
                        Y(e, t, s[t])
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(s)) : O(Object(s)).forEach((function(t) {
                        Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(s, t))
                    }))
                }
                return e
            }

            function Y(e, t, s) {
                return t in e ? Object.defineProperty(e, t, {
                    value: s,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[t] = s, e
            }
            const A = L.W.extend({
                template: o().template('<div id="controller" class="state-controller controller-content"> <div id="title" class="lobbyTitle">title</div> <div id="vipMenu" class="vipMenu"> <div id="choices" class="choicesContainer">choices</div> </div> <div id="picker-region"></div> <div class="characterSelect"> <div id="charactersPrompt" class="charactersPrompt"> <span id="charactersPromptText" class="charactersPromptText"></span> </div> <div id="characters" class="charactersContainer"></div> </div> <div id="artifactId" class="artifactContainer text"> <a id="artifactLink" aria-label="Visit the Gallery" class="artifactLink" target="_blank"> <button id="artifactButton" class="artifactButton"></button> </a> </div> </div>'),
                pickerView: null,
                regions: B(B({}, L.W.prototype.regions), {}, {
                    picker: "#picker-region"
                }),
                onRender() {
                    this.model.get("episodes") && !this.pickerView && (this.pickerView = new I, this.showChildView("picker", this.pickerView)), L.W.prototype.onRender.apply(this)
                },
                update() {
                    const e = this.model.get("episodes");
                    e && this.pickerView && (void 0 === e[0].score && this.scoreEpisodes(e), e.sort(((e, t) => e.score - t.score)), this.pickerView.model.set({
                        episodes: e
                    })), L.W.prototype.update.apply(this)
                },
                scoreEpisodes(e) {
                    e.forEach(((e, t) => {
                        e.index = t, 0 !== t ? e.grade ? "F" !== e.grade ? "C" !== e.grade ? "B" !== e.grade ? e.score = 5 : e.score = 4 : e.score = 3 : e.score = 2 : e.score = 1 : e.score = 0
                    }))
                },
                onChildviewPicker(e) {
                    this.triggerMethod("client:message", {
                        action: "choose-episode",
                        index: e
                    })
                }
            });
            var H = s(19755),
                G = s.n(H);
            const V = {
                    2046660: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSB3YXRjaGluZyBvYnNjdXJlIGhvcnJvciBtb3ZpZXMu",
                    2107822: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBidXlpbmcgb3V0LW9mLXByaW50IEphcGFuZXNlIHZpZGVvIGdhbWVzLg==",
                    2323324: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBsb29raW5nIGZvciBhIHBpZWNlIG9mIG1lYXQsIGEgZmlzaCBib25lLCBhbmQgYSBwaWVjZSBvZiBjaGVlc2Uu",
                    2343333: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBtYWtpbmcgYXJ0Lg==",
                    2772227: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBtZW1vcml6aW5nICc5MHMgZ2FtZSBzaG93IHRyaXZpYS4=",
                    3218666: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBtYWtpbmcgYSBtZXNzLg==",
                    3230444: "V2UncmUgc29ycnkuIFRoaXMgcmVzaWRlbnQgZG9lc24ndCBnZXQgYSBzcGVjaWFsIHNob3V0LW91dCBqb2tlIGJlY2F1c2UgdGhleSB3b3JrIGhlcmUgbm93Lg==",
                    3330777: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBtb2RkaW5nLg==",
                    3764440: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBzdHJlYW1pbmcu",
                    3996444: "QXJlIHlvdSBsb29raW5nIGZvciB0aGUgI3JlYWx3cmVja2luZ2NyZXc/",
                    3999800: "SGV5IHBvcHMsIGxvb2sgYXQgdGhpcyBjb29sIGdhbWUgSSBtYWRlLiBIb3BlIHlvdSBsaWtlIGl0Lg==",
                    4440123: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgbmV2ZXIgd3JvdGUgYSBqb2tlIGFib3V0IGhpbXNlbGYu",
                    4566229: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBzdHJlYW1pbmcu",
                    5039666: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgbm90IGN1cnJlbnRseSBpbiB0aGlzIGRpbWVuc2lvbi4=",
                    6666666: "WW91J3ZlIHJlYWNoZWQgU3VwZXIgRGVjZW50IENyZWF0aXZlIElucHV0IENvbnN1bHRhbnQsIFN0ZXZlICJ3YXQiIFBha2FsIQ==",
                    6782512: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBwdXJzdWluZyBhIGhpZ2hlciBlZHVjYXRpb24u",
                    7379876: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBtYWtpbmcgYXJ0Lg==",
                    7770999: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBtYWtpbmcgY29taWNzLg==",
                    8762220: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBtYWtpbmcgYXJ0Lg==",
                    8857529: "V2UncmUgc29ycnkuIFRoZXJlIGlzIG5vIHRpcCBsaW5lIGZvciBmYW1pbHkgdG9nZXRoZXJuZXNzLg==",
                    8863331: "WW91IGhhdmUgcmVhY2hlZCBNdXJyeSBCcnVpbi4gSSBjYW4ndCBjb21lIHRvIHRoZSBwaG9uZSBiZWNhdXNlIEknbSBwbGF5aW5nIHBva2VyIHdpdGggSmFjayBLbHVnbWFuLg==",
                    9312929: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBMQVJQaW5nLg==",
                    9395552: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgc3RpbGwgYnVzeSBmaW5pc2hpbmcgdGhpcyB2aWRlbyBnYW1lLg==",
                    9491112: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBtb2RkaW5nLg==",
                    9812681: "V2UncmUgc29ycnkuIFRoZSByZXNpZGVudCB5b3UgaGF2ZSBkaWFsZWQgaXMgYnVzeSBwdXR0aW5nIGEgZ2lhbnQgc2hyaW1wIGluIHRoZSBtYWlsLg=="
                },
                E = g.S.extend({
                    defaults: {
                        dialed: ""
                    }
                }),
                q = p().View.extend({
                    className: "mechanic phone",
                    template: o().template('<div class="scrollable"> <div class="clamp"> <div class="dialed"></div> <button class="clear">CLEAR</button> <div class="handset"> <button class="key" data-dial="1"><div class="key-move">1</div></button> <button class="key" data-dial="2"><div class="key-move">2</div></button> <button class="key" data-dial="3"><div class="key-move">3</div></button> <button class="key" data-dial="4"><div class="key-move">4</div></button> <button class="key" data-dial="5"><div class="key-move">5</div></button> <button class="key" data-dial="6"><div class="key-move">6</div></button> <button class="key" data-dial="7"><div class="key-move">7</div></button> <button class="key" data-dial="8"><div class="key-move">8</div></button> <button class="key" data-dial="9"><div class="key-move">9</div></button> <button class="key key-star" data-dial="*"><div class="key-move">*</div></button> <button class="key" data-dial="0"><div class="key-move">0</div></button> <button class="key key-pound" data-dial="#"><div class="key-move">#</div></button> </div> <button class="button phonebook-button"><div class="icon"></div>OPEN PHONEBOOK</button> </div> </div> <div class="phonebook"> <div class="listings"> <h2>The Town Phonebook</h2> <h3>A</h3> <dl class="listing"><dt>Abram Vorman</dt><dd>791-9666</dd></dl> <dl class="listing"><dt>Act Like You\'ve Been There Drama School</dt><dd>979-5678</dd></dl> <dl class="listing"><dt>Adrian Goof</dt><dd>222-2288</dd></dl> <dl class="listing"><dt>Agatha Coffin</dt><dd>718-6543</dd></dl> <dl class="listing"><dt>Agnes Longbottom</dt><dd>666-9898</dd></dl> <dl class="listing"><dt>Aileen Twaddle</dt><dd>431-9426</dd></dl> <dl class="listing"><dt>Ajay Gilderoy, MD</dt><dd>537-6976</dd></dl> <dl class="listing"><dt>Alejandra Raisinette</dt><dd>929-1066</dd></dl> <dl class="listing"><dt>Alfred J. Charon Post Office</dt><dd>642-3217</dd></dl> <dl class="listing"><dt>All-Is-Frost Ice Cream</dt><dd>456-4567</dd></dl> <dl class="listing"><dt>Amelia Smelting-Foxery</dt><dd>606-5678</dd></dl> <dl class="listing"><dt>Angry Geese Park</dt><dd>373-7322</dd></dl> <dl class="listing"><dt>Animal Control</dt><dd>885-6663</dd></dl> <dl class="listing"><dt>Anne\'s House of Door Keys</dt><dd>981-2681</dd></dl> <dl class="listing"><dt>Antenna Rippers Car Wash</dt><dd>822-7788</dd></dl> <dl class="listing"><dt>Armando Quixote</dt><dd>543-3421</dd></dl> <dl class="listing"><dt>Artie Clickman</dt><dd>266-6789</dd></dl> <dl class="listing"><dt>Ashok Kumarvelous</dt><dd>310-1983</dd></dl> <dl class="listing"><dt>Aspen Fantismo</dt><dd>210-2223</dd></dl> <dl class="listing"><dt>Aster Roth Train Station</dt><dd>987-3000</dd></dl> <dl class="listing"><dt>Aunt Flemm</dt><dd>881-5432</dd></dl> <dl class="listing"><dt>Aunt Hecuba</dt><dd>210-5999</dd></dl> <h3>B</h3> <dl class="listing"><dt>Bacon Barn, The</dt><dd>567-6789</dd></dl> <dl class="listing"><dt>Baskets of Robins</dt><dd>969-3587</dd></dl> <dl class="listing"><dt>Bass Instincts Guitar Lessons</dt><dd>456-6229</dd></dl> <dl class="listing"><dt>Ben Jacobs</dt><dd>210-7822</dd></dl> <dl class="listing"><dt>Berdie Fabble</dt><dd>973-5040</dd></dl> <dl class="listing"><dt>Beshave Yourself</dt><dd>981-2681</dd></dl> <dl class="listing"><dt>BigBand Internet Service</dt><dd>849-8765</dd></dl> <dl class="listing"><dt>Big Rock Astronomical Observatory</dt><dd>222-5577</dd></dl> <dl class="listing"><dt>Big Snake Pond</dt><dd>252-2345</dd></dl> <dl class="listing"><dt>Bike Milder</dt><dd>464-8769</dd></dl> <dl class="listing"><dt>Bill\'s Bankrupt Independent Theater</dt><dd>955-6665</dd></dl> <dl class="listing"><dt>Bobo’s: Home of the Thrown Kebabs</dt><dd>987-8484</dd></dl> <dl class="listing"><dt>Bob Robson’s Single-Use Autos</dt><dd>789-5432</dd></dl> <dl class="listing"><dt>Boniface Cheebles</dt><dd>738-4666</dd></dl> <dl class="listing"><dt>Bonk Crockley</dt><dd>495-0123</dd></dl> <dl class="listing"><dt>Brassy Brenda\'s Trumpet Lessons</dt><dd>363-5678</dd></dl> <dl class="listing"><dt>Brenda Yanluo</dt><dd>571-5550</dd></dl> <dl class="listing"><dt>Broken Seat Cinemas</dt><dd>567-8888</dd></dl> <dl class="listing"><dt>Bud Needletoes</dt><dd>432-0666</dd></dl> <dl class="listing"><dt>Bug-B-Bye-Bye Exterminators</dt><dd>502-4242</dd></dl> <dl class="listing"><dt>Build-A-Bra-Workshop</dt><dd>858-0099</dd></dl> <dl class="listing"><dt>Burpie Hale</dt><dd>366-8934</dd></dl> <dl class="listing"><dt>Butter Trough, The</dt><dd>965-0000</dd></dl> <dl class="listing"><dt>Buy \'n Food</dt><dd>863-1010</dd></dl> <dl class="listing"><dt>By-The-Pound Buffet</dt><dd>678-4444</dd></dl> <h3>C</h3> <dl class="listing"><dt>Cabbage Thompson Jr.</dt><dd>414-6555</dd></dl> <dl class="listing"><dt>Caked n\' Loaded</dt><dd>666-2345</dd></dl> <dl class="listing"><dt>Calgary Chumprints</dt><dd>444-1234</dd></dl> <dl class="listing"><dt>Can-Do Kendo</dt><dd>876-2220</dd></dl> <dl class="listing"><dt>Carmella Whoopingcough</dt><dd>328-5184</dd></dl> <dl class="listing"><dt>Carnival Wilson</dt><dd>503-9666</dd></dl> <dl class="listing"><dt>Car Side, The</dt><dd>320-3339</dd></dl> <dl class="listing"><dt>Cash 4 Gold 4 Seeds 4 Less</dt><dd>444-3894</dd></dl> <dl class="listing"><dt>Cassiel Seraph</dt><dd>706-3456</dd></dl> <dl class="listing"><dt>Cave O’ Savings</dt><dd>432-1554</dd></dl> <dl class="listing"><dt>Cecelia Baggage</dt><dd>234-2130</dd></dl> <dl class="listing"><dt>Ceramic Panic</dt><dd>931-2929</dd></dl> <dl class="listing"><dt>Chap-Pier-One</dt><dd>543-2220</dd></dl> <dl class="listing"><dt>Chase McClure</dt><dd>939-5552</dd></dl> <dl class="listing"><dt>Chatty Carl</dt><dd>938-8765</dd></dl> <dl class="listing"><dt>Chib Spittleton</dt><dd>222-2226</dd></dl> <dl class="listing"><dt>Chikn 4 U</dt><dd>678-8881</dd></dl> <dl class="listing"><dt>Chili Fountain, The</dt><dd>789-0001</dd></dl> <dl class="listing"><dt>Choir Beware Singing Lessons</dt><dd>376-4440</dd></dl> <dl class="listing"><dt>Cirque du Squirrel</dt><dd>595-4554</dd></dl> <dl class="listing"><dt>City Hall</dt><dd>987-6543</dd></dl> <dl class="listing"><dt>C.J. O’Ballyhoo’s American Eatery</dt><dd>535-7777</dd></dl> <dl class="listing"><dt>Clearance-Meat Jerky Club</dt><dd>787-7740</dd></dl> <dl class="listing"><dt>Cliff Cholera</dt><dd>319-6057</dd></dl> <dl class="listing"><dt>Clora Head</dt><dd>982-0222</dd></dl> <dl class="listing"><dt>Cloverton\'s Rec Center</dt><dd>321-8666</dd></dl> <dl class="listing"><dt>Container Contentment</dt><dd>765-2222</dd></dl> <dl class="listing"><dt>Contemporary Art Museum For Dads</dt><dd>984-1234</dd></dl> <dl class="listing"><dt>Coral’s Jr. Seafood</dt><dd>712-1234</dd></dl> <dl class="listing"><dt>Corduroy P. Munke</dt><dd>321-8593</dd></dl> <dl class="listing"><dt>Corky Zigzag, MD</dt><dd>987-0123</dd></dl> <dl class="listing"><dt>Corncob McBilge</dt><dd>917-4751</dd></dl> <dl class="listing"><dt>Cornwallace Stickle</dt><dd>750-1234</dd></dl> <dl class="listing"><dt>Coward Appleton</dt><dd>446-4949</dd></dl> <dl class="listing"><dt>Coyo Kaleido</dt><dd>672-6868</dd></dl> <dl class="listing"><dt>Craig Jacobs</dt><dd>719-0044</dd></dl> <dl class="listing"><dt>Crimp Beardbody</dt><dd>406-8068</dd></dl> <dl class="listing"><dt>Cyrus McNabbers</dt><dd>780-8436</dd></dl> <h3>D</h3> <dl class="listing"><dt>Daphne Ornery</dt><dd>409-2876</dd></dl> <dl class="listing"><dt>Daredare Si</dt><dd>845-9876</dd></dl> <dl class="listing"><dt>Decent Kitty Care</dt><dd>937-4999</dd></dl> <dl class="listing"><dt>Delilah Hucksuckle</dt><dd>765-8451</dd></dl> <dl class="listing"><dt>Dellbert Mints</dt><dd>999-5552</dd></dl> <dl class="listing"><dt>Devils Family</dt><dd>552-9481</dd></dl> <dl class="listing"><dt>Dirt Pile Park</dt><dd>543-3939</dd></dl> <dl class="listing"><dt>DJ Mixmaster Max Mustermann</dt><dd>750-1116</dd></dl> <dl class="listing"><dt>Dog & Cat Repair</dt><dd>439-0000</dd></dl> <dl class="listing"><dt>Donna Chaffington\'s Dance Studio</dt><dd>737-9876</dd></dl> <dl class="listing"><dt>Doug’s Yoga and Bait</dt><dd>432-8222</dd></dl> <dl class="listing"><dt>Drawing-A-Blank Art Supplies</dt><dd>372-7799</dd></dl> <dl class="listing"><dt>Dr. Meowski DVM</dt><dd>432-7069</dd></dl> <dl class="listing"><dt>Dumpy’s Discount Cargo Pants</dt><dd>567-1356</dd></dl> <h3>E</h3> <dl class="listing"><dt>Edith Wickerbasket</dt><dd>898-2525</dd></dl> <dl class="listing"><dt>Eerie Acres Retirement Home</dt><dd>527-5550</dd></dl> <dl class="listing"><dt>Elfrieda Mulberry</dt><dd>679-6870</dd></dl> <dl class="listing"><dt>Emily\'s Slightly Corrupted Gems</dt><dd>777-0999</dd></dl> <dl class="listing"><dt>Emmaline Morris</dt><dd>876-2220</dd></dl> <dl class="listing"><dt>E.Roy Finley, DDS</dt><dd>965-8104</dd></dl> <dl class="listing"><dt>Ezekiel Horsefeather</dt><dd>543-4040</dd></dl> <h3>F</h3> <dl class="listing"><dt>Fanciful Aunt Home Decor</dt><dd>345-7018</dd></dl> <dl class="listing"><dt>Fancy Pants Cinemas</dt><dd>389-1450</dd></dl> <dl class="listing"><dt>Fedora Jenkins</dt><dd>317-9933</dd></dl> <dl class="listing"><dt>Ferd Parkington</dt><dd>424-3076</dd></dl> <dl class="listing"><dt>Ferguson\'s Discount Piano Lessons</dt><dd>444-0123</dd></dl> <dl class="listing"><dt>Fine Aid Pharmacy</dt><dd>795-5678</dd></dl> <dl class="listing"><dt>Fix-Is-In Construction, The</dt><dd>876-8765</dd></dl> <dl class="listing"><dt>Flint Pemples</dt><dd>545-6543</dd></dl> <dl class="listing"><dt>Florence Butt</dt><dd>321-3737</dd></dl> <dl class="listing"><dt>Foggy Lagoon Park</dt><dd>434-1234</dd></dl> <dl class="listing"><dt>Forrest Smallmouth</dt><dd>543-4321</dd></dl> <dl class="listing"><dt>Fragrant Phil\'s Taxi Service</dt><dd>987-2224</dd></dl> <dl class="listing"><dt>Frank Spongeman, MD</dt><dd>923-0001</dd></dl> <dl class="listing"><dt>Fulano de Tallgrass</dt><dd>678-6666</dd></dl> <h3>G</h3> <dl class="listing"><dt>Gaberdine Joey: Aussie Kids Clothing, The</dt><dd>789-6271</dd></dl> <dl class="listing"><dt>Gabriel Tootlebloom</dt><dd>375-4539</dd></dl> <dl class="listing"><dt>Gale Tiddlywinks</dt><dd>310-9876</dd></dl> <dl class="listing"><dt>Garland McRae</dt><dd>696-4449</dd></dl> <dl class="listing"><dt>Gary Tengu</dt><dd>456-4444</dd></dl> <dl class="listing"><dt>Gas N’ Sushi</dt><dd>565-4443</dd></dl> <dl class="listing"><dt>Gears N Beers Autoshop and Brewery</dt><dd>678-2512</dd></dl> <dl class="listing"><dt>Gently Used Produce</dt><dd>743-3535</dd></dl> <dl class="listing"><dt>Gertrude Dixie</dt><dd>765-7744</dd></dl> <dl class="listing"><dt>Gijs F Unas III</dt><dd>730-5749</dd></dl> <dl class="listing"><dt>Ginny St. Porridge</dt><dd>777-0999</dd></dl> <dl class="listing"><dt>Gnute Ipswitch</dt><dd>210-9292</dd></dl> <dl class="listing"><dt>Gortnoy Cornmedley</dt><dd>486-3788</dd></dl> <dl class="listing"><dt>Greasy Fork, The</dt><dd>262-5757</dd></dl> <dl class="listing"><dt>Gretta Grisspiddler</dt><dd>323-0444</dd></dl> <dl class="listing"><dt>Gristle Spot, The</dt><dd>939-1234</dd></dl> <h3>H</h3> <dl class="listing"><dt>Halley Jacobs</dt><dd>598-0404</dd></dl> <dl class="listing"><dt>Ham By The Foot</dt><dd>247-1082</dd></dl> <dl class="listing"><dt>Hand Turkey Art Museum</dt><dd>934-7654</dd></dl> <dl class="listing"><dt>Happy Bowel Vegan Buffet, The</dt><dd>765-5049</dd></dl> <dl class="listing"><dt>Happy Hamsmanning</dt><dd>504-1333</dd></dl> <dl class="listing"><dt>Happy Scales Lizard Salon</dt><dd>765-3210</dd></dl> <dl class="listing"><dt>Harvey Nutts</dt><dd>627-9238</dd></dl> <dl class="listing"><dt>Heapin’ Heaps o’ Heaps</dt><dd>418-5000</dd></dl> <dl class="listing"><dt>Heck Pancake</dt><dd>237-9000</dd></dl> <dl class="listing"><dt>Holly T. Small</dt><dd>931-2929</dd></dl> <dl class="listing"><dt>Horace Oaf</dt><dd>213-6363</dd></dl> <h3>I</h3> <dl class="listing"><dt>Ignacio Firestarter</dt><dd>525-6008</dd></dl> <dl class="listing"><dt>Imp Fancy</dt><dd>444-7722</dd></dl> <dl class="listing"><dt>Infernal Affairs</dt><dd>722-1333</dd></dl> <dl class="listing"><dt>Insect Relocation Services</dt><dd>567-6999</dd></dl> <dl class="listing"><dt>International Museum of Corn Dogs, The</dt><dd>423-7676</dd></dl> <dl class="listing"><dt>Investinal Fortitude Savings and Loan</dt><dd>333-9988</dd></dl> <dl class="listing"><dt>Isaac Jephcots</dt><dd>636-3333</dd></dl> <dl class="listing"><dt>Ivy Trickle</dt><dd>565-2226</dd></dl> <h3>J</h3> <dl class="listing"><dt>Janet Borgleman, DDS</dt><dd>321-8765</dd></dl> <dl class="listing"><dt>Jean Duponte Cristo</dt><dd>222-9876</dd></dl> <dl class="listing"><dt>Jeff “Geoff” Jefferstein</dt><dd>710-1111</dd></dl> <dl class="listing"><dt>Jeff Hansen</dt><dd>764-9999</dd></dl> <dl class="listing"><dt>Jen’s Vegan Bathmats</dt><dd>469-5599</dd></dl> <dl class="listing"><dt>Jim James Jonatheux, DDS</dt><dd>678-8281</dd></dl> <dl class="listing"><dt>Jimminy Myron Crankenfitz</dt><dd>948-7779</dd></dl> <dl class="listing"><dt>Jimmy Duranto</dt><dd>343-4567</dd></dl> <dl class="listing"><dt>Joanna Custardio</dt><dd>888-4321</dd></dl> <dl class="listing"><dt>John Boring</dt><dd>262-1010</dd></dl> <dl class="listing"><dt>John Kangaroo</dt><dd>234-8270</dd></dl> <dl class="listing"><dt>Johnny Gumlately</dt><dd>876-9999</dd></dl> <dl class="listing"><dt>John’s Irregular Casket Shop</dt><dd>555-1747</dd></dl> <dl class="listing"><dt>J. “Onion” Crotchswaddle</dt><dd>909-2214</dd></dl> <dl class="listing"><dt>Jos Joskens Yo-Yo\'s</dt><dd>987-1111</dd></dl> <dl class="listing"><dt>Just Old Calendars</dt><dd>242-3636</dd></dl> <h3>K</h3> <dl class="listing"><dt>Karen’s Non-Possessed Doll Shop</dt><dd>663-8880</dd></dl> <dl class="listing"><dt>Kate Stark</dt><dd>376-4440</dd></dl> <dl class="listing"><dt>Kayla Swift</dt><dd>210-2222</dd></dl> <dl class="listing"><dt>Kelly Paleczny</dt><dd>321-8666</dd></dl> <dl class="listing"><dt>Kevin Pullman, DDS</dt><dd>979-7575</dd></dl> <dl class="listing"><dt>Kip Ortiz</dt><dd>678-6789</dd></dl> <dl class="listing"><dt>Kiss Pista\'s Pistachio Kisses</dt><dd>959-3456</dd></dl> <dl class="listing"><dt>Kurt I. Mukha</dt><dd>771-4441</dd></dl> <h3>L</h3> <dl class="listing"><dt>Lacey’s Tablecloths & Gowns</dt><dd>765-7222</dd></dl> <dl class="listing"><dt>Lefty’s Unpaired Gloves</dt><dd>567-4445</dd></dl> <dl class="listing"><dt>Lem N. Forlolz</dt><dd>737-9876</dd></dl> <dl class="listing"><dt>Leon Fishbucket</dt><dd>444-3335</dd></dl> <dl class="listing"><dt>Leroy Bowditch</dt><dd>313-7333</dd></dl> <dl class="listing"><dt>Lightly Stolen Cars</dt><dd>992-0005</dd></dl> <dl class="listing"><dt>Li Kumari</dt><dd>454-4321</dd></dl> <dl class="listing"><dt>Lil “Li’l Goober” Goober</dt><dd>288-4444</dd></dl> <dl class="listing"><dt>Little Lord Little League Fields</dt><dd>234-3333</dd></dl> <dl class="listing"><dt>Logan Lee</dt><dd>204-6660</dd></dl> <dl class="listing"><dt>Luella Bedwetter</dt><dd>496-4567</dd></dl> <dl class="listing"><dt>Luke Poodtootle</dt><dd>660-8888</dd></dl> <dl class="listing"><dt>Lulabelle Gertz-Smalley</dt><dd>432-9819</dd></dl> <h3>M</h3> <dl class="listing"><dt>Mabel Rustbucket</dt><dd>919-8789</dd></dl> <dl class="listing"><dt>Madam Harriet\'s Psychic Hotline</dt><dd>948-6565</dd></dl> <dl class="listing"><dt>Manny Manananggal</dt><dd>484-3344</dd></dl> <dl class="listing"><dt>Man Vanderslice</dt><dd>965-8866</dd></dl> <dl class="listing"><dt>Marjorie Humid</dt><dd>734-7111</dd></dl> <dl class="listing"><dt>Marty and the Fuzz Drive-Time Radio</dt><dd>483-7654</dd></dl> <dl class="listing"><dt>Matilda Lampfoot</dt><dd>765-7779</dd></dl> <dl class="listing"><dt>Melon Ballerz</dt><dd>682-0000</dd></dl> <dl class="listing"><dt>Mengano Wu</dt><dd>765-8882</dd></dl> <dl class="listing"><dt>Mid-life Crisis Sports Cars</dt><dd>333-0777</dd></dl> <dl class="listing"><dt>Miles of Aisles Discount Market</dt><dd>754-1152</dd></dl> <dl class="listing"><dt>Mind Your Own Beeswax Candlemaking Studio</dt><dd>712-8889</dd></dl> <dl class="listing"><dt>Misc. Rib Shack</dt><dd>259-1112</dd></dl> <dl class="listing"><dt>Mom Fatherman</dt><dd>757-6867</dd></dl> <dl class="listing"><dt>Mordechai H. Sizzle</dt><dd>261-6543</dd></dl> <dl class="listing"><dt>Morten Menigmandible</dt><dd>631-5555</dd></dl> <dl class="listing"><dt>Mostly No-Kill Pest Removal</dt><dd>540-2288</dd></dl> <dl class="listing"><dt>Murry Bruin</dt><dd>886-3331</dd></dl> <dl class="listing"><dt>Museum of “Art”, The</dt><dd>910-5959</dd></dl> <dl class="listing"><dt>Museum of Benches, The</dt><dd>228-8909</dd></dl> <dl class="listing"><dt>Museum of Clever Bumper Stickers</dt><dd>345-9999</dd></dl> <dl class="listing"><dt>Museum of Potato Chips That Look Like Things</dt><dd>880-3300</dd></dl> <dl class="listing"><dt>Museum of Science and Hearsay</dt><dd>306-3333</dd></dl> <dl class="listing"><dt>Mysterious Crevice Park</dt><dd>272-4237</dd></dl> <dl class="listing"><dt>Mystic Philip\'s High Quality Medium Service</dt><dd>730-7774</dd></dl> <h3>N</h3> <dl class="listing"><dt>Nan D. Bear</dt><dd>966-2222</dd></dl> <dl class="listing"><dt>National Aeronautics and Space Administration</dt><dd>567-5642</dd></dl> <dl class="listing"><dt>Nine Circles Circular</dt><dd>636-6688</dd></dl> <dl class="listing"><dt>Nothing But Toilet Seats</dt><dd>619-7878</dd></dl> <h3>O</h3> <dl class="listing"><dt>Old Bones Creamery</dt><dd>987-7079</dd></dl> <dl class="listing"><dt>Old Raisin Winery</dt><dd>234-3444</dd></dl> <dl class="listing"><dt>Ol’ Hambone’s Pig Petting Zoo</dt><dd>539-3555</dd></dl> <dl class="listing"><dt>Omnipresent Studios</dt><dd>379-1444</dd></dl> <h3>P</h3> <dl class="listing"><dt>Party Township</dt><dd>208-9494</dd></dl> <dl class="listing"><dt>Pay-By-The-Minute Roller Coasters</dt><dd>345-7711</dd></dl> <dl class="listing"><dt>Penny Plinkstein</dt><dd>937-3331</dd></dl> <dl class="listing"><dt>PensCrafters 1-Hour Pens</dt><dd>949-5454</dd></dl> <dl class="listing"><dt>Pepa Z. Depa</dt><dd>579-1177</dd></dl> <dl class="listing"><dt>Pepper-Phonies Vegan Pizza</dt><dd>646-5555</dd></dl> <dl class="listing"><dt>Pet Vet, The</dt><dd>654-5555</dd></dl> <dl class="listing"><dt>Pho-getta Bout It!</dt><dd>943-5432</dd></dl> <dl class="listing"><dt>Pinco Pallino\'s Pastry Palace</dt><dd>656-4321</dd></dl> <dl class="listing"><dt>Pizza Fun Time</dt><dd>678-8883</dd></dl> <dl class="listing"><dt>Planetarium of the Apes</dt><dd>567-7000</dd></dl> <dl class="listing"><dt>Poopsie Gumball</dt><dd>345-9933</dd></dl> <dl class="listing"><dt>Poorly Labelled Salt and/or Sugar Supply</dt><dd>838-4422</dd></dl> <dl class="listing"><dt>Popsicle Stick Louvre</dt><dd>626-6818</dd></dl> <dl class="listing"><dt>Porch Debris Warehouse</dt><dd>444-5389</dd></dl> <dl class="listing"><dt>Pretentious Home & Yard</dt><dd>350-0123</dd></dl> <dl class="listing"><dt>Priya Gildong</dt><dd>778-4466</dd></dl> <dl class="listing"><dt>Psychic Enemies Network</dt><dd>678-3131</dd></dl> <h3>Q</h3> <dl class="listing"><dt>Quik Fix-A-Vac</dt><dd>471-3210</dd></dl> <dl class="listing"><dt>Quite-A-Repair</dt><dd>465-2222</dd></dl> <h3>R</h3> <dl class="listing"><dt>Rebecca Impundulu</dt><dd>252-6694</dd></dl> <dl class="listing"><dt>Ride or Don\'t Taxi Service</dt><dd>307-7555</dd></dl> <dl class="listing"><dt>Riley Phoenix</dt><dd>654-2555</dd></dl> <dl class="listing"><dt>Rivers Bank</dt><dd>274-7722</dd></dl> <dl class="listing"><dt>Rob Camitti’s Superfluous Cars</dt><dd>367-7154</dd></dl> <dl class="listing"><dt>Rodent Capture & Rapture</dt><dd>904-8444</dd></dl> <dl class="listing"><dt>Ronald Stoolback</dt><dd>456-1923</dd></dl> <dl class="listing"><dt>Ryan DiGiorgi</dt><dd>444-0123</dd></dl> <dl class="listing"><dt>Rye Dash: Fastest Bread in Town</dt><dd>323-0444</dd></dl> <h3>S</h3> <dl class="listing"><dt>Salon And Hair-Well</dt><dd>432-1554</dd></dl> <dl class="listing"><dt>Samuel Raintoot</dt><dd>222-3335</dd></dl> <dl class="listing"><dt>Santiago Lemontoe</dt><dd>210-8898</dd></dl> <dl class="listing"><dt>Scenic Underlook</dt><dd>634-3355</dd></dl> <dl class="listing"><dt>Shelby Hoddle</dt><dd>790-8811</dd></dl> <dl class="listing"><dt>Sherman Lyness</dt><dd>838-5559</dd></dl> <dl class="listing"><dt>Shirt-Outta-Luck Dry Cleaners</dt><dd>345-0006</dd></dl> <dl class="listing"><dt>Sidney Hammockman</dt><dd>345-5111</dd></dl> <dl class="listing"><dt>Slow and Steady Pigeon Messaging Service</dt><dd>976-0001</dd></dl> <dl class="listing"><dt>Smarm to Table Sarcastic Grocers</dt><dd>738-1234</dd></dl> <dl class="listing"><dt>Snarf & Hurl</dt><dd>577-5432</dd></dl> <dl class="listing"><dt>Special Agent Normal Neighborman</dt><dd>272-4422</dd></dl> <dl class="listing"><dt>Speedy Getaway Travel Agency</dt><dd>693-3399</dd></dl> <dl class="listing"><dt>Spoons ‘R We</dt><dd>345-3355</dd></dl> <dl class="listing"><dt>Srednestatisticheskiy Sedans</dt><dd>210-4444</dd></dl> <dl class="listing"><dt>Stad\'s Thawed Pre-Jawed Scrod</dt><dd>277-2227</dd></dl> <dl class="listing"><dt>Steve Phlansby</dt><dd>386-5013</dd></dl> <dl class="listing"><dt>Sylvester Brunch</dt><dd>282-5222</dd></dl> <h3>T</h3> <dl class="listing"><dt>Tad Thoodle</dt><dd>252-9974</dd></dl> <dl class="listing"><dt>Take Me for a Ride Cab Co.</dt><dd>565-1333</dd></dl> <dl class="listing"><dt>Teeds Wyvern</dt><dd>879-1234</dd></dl> <dl class="listing"><dt>Teenage Waistline</dt><dd>654-5063</dd></dl> <dl class="listing"><dt>TGIH Year-Round Halloween Depot</dt><dd>326-6190</dd></dl> <dl class="listing"><dt>Three Minute Escape Rooms</dt><dd>654-9876</dd></dl> <dl class="listing"><dt>Thurman Nogood</dt><dd>939-5656</dd></dl> <dl class="listing"><dt>Tim Simian Chimp Mechanic</dt><dd>603-4000</dd></dl> <dl class="listing"><dt>Tipsy Tune\'s Unsteady Autos</dt><dd>456-6229</dd></dl> <dl class="listing"><dt>Toadboy\'s Slightly Used Reptiles</dt><dd>678-2512</dd></dl> <dl class="listing"><dt>Tom Pudding</dt><dd>424-6737</dd></dl> <dl class="listing"><dt>Toot Pootladder</dt><dd>678-1717</dd></dl> <dl class="listing"><dt>Trent Jormbo</dt><dd>345-8886</dd></dl> <dl class="listing"><dt>TV Addict\'s Guide</dt><dd>338-5544</dd></dl> <h3>U</h3> <dl class="listing"><dt>Under the Counter Pharmacy</dt><dd>637-3210</dd></dl> <dl class="listing"><dt>U. Xie</dt><dd>234-3333</dd></dl> <h3>V</h3> <dl class="listing"><dt>Vance VanVan’s Van Lot</dt><dd>293-5971</dd></dl> <dl class="listing"><dt>Vardenis Pavardenis</dt><dd>345-8333</dd></dl> <dl class="listing"><dt>Vestworld</dt><dd>787-1111</dd></dl> <dl class="listing"><dt>Vincent Pricecheck</dt><dd>555-0003</dd></dl> <dl class="listing"><dt>Vivian Stickler, DDS</dt><dd>210-2555</dd></dl> <h3>W</h3> <dl class="listing"><dt>Walken Clinic, The</dt><dd>567-0007</dd></dl> <dl class="listing"><dt>Wang Zutano</dt><dd>242-4678</dd></dl> <dl class="listing"><dt>Waterdance</dt><dd>915-1508</dd></dl> <dl class="listing"><dt>Welcome to Yarnia</dt><dd>935-5511</dd></dl> <dl class="listing"><dt>We \'R Toys</dt><dd>502-5678</dd></dl> <dl class="listing"><dt>Wilford O’Hicks</dt><dd>885-3434</dd></dl> <dl class="listing"><dt>Wok This Way</dt><dd>696-0666</dd></dl> <dl class="listing"><dt>Wreckin\' Crew Theatre</dt><dd>399-6444</dd></dl> <dl class="listing"><dt>Wylie Skidd</dt><dd>526-1947</dd></dl> <h3>Y</h3> <dl class="listing"><dt>Yakkin\' Zack AM Radio Show</dt><dd>383-4222</dd></dl> <dl class="listing"><dt>Yakkity Kayak Whitewater Rafting</dt><dd>949-1112</dd></dl> <dl class="listing"><dt>Yamada Honeycomb</dt><dd>277-2227</dd></dl> <dl class="listing"><dt>Yosup\'s To-Go Cups</dt><dd>333-0777</dd></dl> <h3>Z</h3> <dl class="listing"><dt>Zak Zakaryas</dt><dd>949-1112</dd></dl> <dl class="listing"><dt>Zhang Pérez, MD</dt><dd>841-6804</dd></dl> <dl class="listing"><dt>Zippy Zip Memorial Post Office</dt><dd>987-6551</dd></dl> <dl class="listing"><dt>Zuzu’s Kettles</dt><dd>248-4949</dd></dl> </div> </div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p></div> '),
                    model: new E,
                    isTouch: !1,
                    events: {
                        "click .leave": "onLeaveClick",
                        "click .clear": "onClearClick",
                        "mousedown .key": "onKeyDown",
                        "touchstart .key": "onKeyStart",
                        "touchend .key": "onKeyEnd",
                        "click .key": "onKeyClick",
                        "click .phonebook-button": "onPhonebookClick"
                    },
                    bindings: {
                        ".instructions": {
                            observe: "listingName",
                            onGet: e => `Call "${e}"`
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".dialed": {
                            observe: "dialed",
                            onGet: e => `${(e=e.padEnd(7,"_")).slice(0,3)}-${e.slice(3)}`
                        },
                        ".phonebook": {
                            classes: {
                                visible: "showPhonebook"
                            }
                        },
                        ".leave": {
                            classes: {
                                back: {
                                    observe: "showPhonebook",
                                    onGet: e => e
                                }
                            }
                        },
                        ".clamp": {
                            classes: {
                                visible: {
                                    observe: "showPhonebook",
                                    onGet: e => !e
                                }
                            }
                        }
                    },
                    initialize() {
                        this.model.setUpdate({
                            isWaiting: !1,
                            dialed: "",
                            showPhonebook: !1
                        }), this.listenTo(this.model, "change:mistakeCheck", this.onMistakeCheck)
                    },
                    onRender() {
                        this.stickit()
                    },
                    onMistakeCheck(e) {
                        if (!e.get("isWaiting")) return;
                        if (Object.keys(e.changed).length > 2) return;
                        let t = V[this.model.previous("dialed")];
                        t && atob && (t = atob(t)), this.triggerMethod("result", {
                            type: "fail",
                            category: t ? "number" : "",
                            message: t || "WRONG<br/>NUMBER"
                        }), this.model.setUpdate({
                            dialed: "",
                            isWaiting: !1
                        })
                    },
                    onLeaveClick() {
                        this.model.get("showPhonebook") ? this.model.setUpdate({
                            showPhonebook: !1
                        }) : this.triggerMethod("client:message", {
                            action: "leaveTask"
                        })
                    },
                    onClearClick() {
                        this.model.setUpdate({
                            dialed: ""
                        })
                    },
                    onPhonebookClick() {
                        this.model.setUpdate({
                            showPhonebook: !0
                        })
                    },
                    onCloseClick() {
                        this.model.setUpdate({
                            showPhonebook: !1
                        })
                    },
                    onKeyStart(e) {
                        this.isTouch = !0, G()(e.currentTarget).addClass("down"), this.onKey(e)
                    },
                    onKeyEnd(e) {
                        G()(e.currentTarget).removeClass("down")
                    },
                    onKeyClick(e) {
                        this.isTouch || this.onKey(e)
                    },
                    onKey(e) {
                        if (this.model.get("isWaiting")) return;
                        const t = `${G()(e.currentTarget).data("dial")}`,
                            s = `${this.model.get("dialed")}${t}`;
                        this.model.setUpdate({
                            dialed: s
                        }), s.length < 7 || (this.model.setUpdate({
                            isWaiting: !0
                        }), this.triggerMethod("client:message", {
                            action: "dial",
                            num: s
                        }))
                    }
                }),
                N = p().View.extend({
                    className: "comment background-color",
                    template: o().template('<div class="avatar head"></div> <p class="speaker"></p> <p class="text"></p>'),
                    bindings: {
                        ":el": {
                            attributes: [{
                                name: "class",
                                observe: "playerInfo",
                                onGet(e) {
                                    let t = "comment";
                                    return t += e ? ` me ${e.avatar}` : " npc", t
                                }
                            }]
                        },
                        ".avatar": {
                            attributes: [{
                                name: "class",
                                observe: ["playerInfo", "partnerIcon"],
                                onGet(e) {
                                    let [t, s] = e;
                                    return t ? t.avatar : s || ""
                                }
                            }]
                        },
                        ".speaker": "speaker",
                        ".text": "text"
                    },
                    onRender() {
                        this.stickit()
                    }
                }),
                X = l().Collection.extend({
                    model: l().Model
                }),
                W = p().CollectionView.extend({
                    tagName: "div",
                    className: "conversation",
                    childView: N,
                    collection: new X
                }),
                U = p().View.extend({
                    tagName: "div",
                    template: o().template('<button class="choice button"></button>'),
                    events: {
                        click: "onClick"
                    },
                    bindings: {
                        button: "text"
                    },
                    onRender() {
                        this.stickit()
                    },
                    onClick() {
                        this.triggerMethod("button:select", this.model)
                    }
                }),
                $ = p().View.extend({
                    tagName: "div",
                    className: "wait",
                    template: o().template('\n    <div class="ball ball-1"></div>\n    <div class="ball ball-2"></div>\n    <div class="ball ball-3"></div>\n')
                }),
                j = l().Collection.extend({
                    model: l().Model
                }),
                K = p().CollectionView.extend({
                    tagName: "div",
                    className: "choices",
                    childView: U,
                    emptyView: $,
                    collection: new j
                }),
                Z = g.S.extend({
                    defaults: {
                        conversation: [],
                        choices: []
                    }
                }),
                J = p().View.extend({
                    className: "mechanic dialog",
                    template: o().template('<div class="dialog-container"> <div id="conversation-region"></div> <div id="choices-region"></div> </div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p>'),
                    model: new Z,
                    conversationView: null,
                    choicesView: null,
                    waitTimeout: null,
                    responseTimeout: null,
                    regions: {
                        conversation: "#conversation-region",
                        choices: "#choices-region"
                    },
                    events: {
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ".leave": {
                            observe: "canLeave",
                            visible: !0
                        },
                        ".instructions": {
                            observe: "instructions",
                            updateMethod: "html"
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".choices": {
                            attributes: [{
                                name: "class",
                                observe: "choices",
                                onGet: e => 4 === e.length ? "four" : ""
                            }]
                        }
                    },
                    initialize() {
                        this.conversationView = new W, this.choicesView = new K, this.listenTo(this.model, "change", this.update, this), this.listenTo(this.model, "change:stepIndex", this.resetData), this.resetData()
                    },
                    resetData() {
                        this.model.setUpdate({
                            conversation: [],
                            choices: [],
                            selected: null
                        }), this.conversationView.collection.reset(), this.choicesView.collection.reset()
                    },
                    update() {
                        const e = this.model.get("conversation");
                        e.forEach((e => {
                            e.speaker === this.model.get("playerInfo").name ? e.playerInfo = this.model.get("playerInfo") : e.partnerIcon = this.model.get("partnerIcon")
                        }));
                        const t = this.model.get("choices").map((e => ({
                            text: e
                        })));
                        this.choicesView.collection.set(t), this.conversationView.collection.length ? this.addResponses(e, t) : (this.conversationView.collection.set(e), this.choicesView.collection.set(t))
                    },
                    onRender() {
                        this.showChildView("conversation", this.conversationView), this.showChildView("choices", this.choicesView), this.stickit()
                    },
                    onBeforeDestroy() {
                        this.conversationView.destroy(), this.choicesView.destroy(), this.clearTimeouts()
                    },
                    onLeaveClick() {
                        this.triggerMethod("client:message", {
                            action: "leaveTask"
                        })
                    },
                    onChildviewChildviewButtonSelect(e) {
                        this.triggerMethod("client:message", {
                            action: "respond",
                            index: e.collection.indexOf(e)
                        })
                    },
                    addResponses(e, t) {
                        if (!e.length) return;
                        const s = e[e.length - 2],
                            i = e[e.length - 1],
                            o = this.getRegion("conversation").el;
                        this.choicesView.collection.reset(), this.conversationView.collection.add(s), o && (o.scrollTop = o.scrollHeight), this.clearTimeouts(), this.waitTimeout = setTimeout((() => {
                            this.conversationView.collection.add({
                                speaker: i.speaker,
                                partnerIcon: i.partnerIcon,
                                text: "..."
                            }), o && (o.scrollTop = o.scrollHeight)
                        }), 500), this.responseTimeout = setTimeout((() => {
                            this.conversationView.collection.last().set(i), this.choicesView.collection.set(t), o && (o.scrollTop = o.scrollHeight)
                        }), 2e3)
                    },
                    clearTimeouts() {
                        this.waitTimeout && (clearTimeout(this.waitTimeout), this.waitTimeout = null), this.responseTimeout && (clearTimeout(this.responseTimeout), this.responseTimeout = null)
                    }
                }),
                _ = p().View.extend({
                    className: "gizmo gizmo-button",
                    template: o().template('\n    <div class="press"></div>\n'),
                    model: new(l().Model),
                    events: {
                        click: "onClick"
                    },
                    bindings: {
                        ":el": {
                            classes: {
                                on: "value"
                            }
                        }
                    },
                    onRender() {
                        this.stickit(), this.options.isCaptain && this.intro()
                    },
                    intro() {
                        let e = 0;
                        const t = this.model.get("value"),
                            s = setInterval((() => {
                                if (e >= 10) return setTimeout((() => {
                                    this.model.set({
                                        value: t
                                    })
                                }), 200), void clearInterval(s);
                                this.model.set({
                                    value: e % 2 == 1 ? 0 : 1
                                }), e += 1
                            }), 50)
                    },
                    onClick() {
                        if (!this.options.isCaptain) return;
                        const e = this.model.get("value");
                        this.model.set({
                            value: !e
                        })
                    }
                }),
                Q = p().View.extend({
                    className: "gizmo gizmo-dips",
                    template: o().template('\n    <div class="dip dip-0"></div>\n    <div class="dip dip-1"></div>\n    <div class="dip dip-2"></div>\n'),
                    model: new(l().Model),
                    events: {
                        click: "onClick"
                    },
                    bindings: {
                        ".dip-0": {
                            classes: {
                                on: {
                                    observe: "value",
                                    onGet: e => "1" === e.toString(2).padStart(3, 0)[0]
                                }
                            }
                        },
                        ".dip-1": {
                            classes: {
                                on: {
                                    observe: "value",
                                    onGet: e => "1" === e.toString(2).padStart(3, 0)[1]
                                }
                            }
                        },
                        ".dip-2": {
                            classes: {
                                on: {
                                    observe: "value",
                                    onGet: e => "1" === e.toString(2).padStart(3, 0)[2]
                                }
                            }
                        }
                    },
                    onRender() {
                        this.stickit(), this.options.isCaptain && this.intro()
                    },
                    intro() {
                        const e = this.model.get("value");
                        setTimeout((() => {
                            this.model.set({
                                value: o().random(0, 8)
                            })
                        }), 200), setTimeout((() => {
                            this.model.set({
                                value: o().random(0, 8)
                            })
                        }), 400), setTimeout((() => {
                            this.model.set({
                                value: e
                            })
                        }), 600)
                    },
                    onClick() {
                        if (!this.options.isCaptain) return;
                        let e = this.model.get("value");
                        7 === e ? e = 0 : e += 1, this.model.set({
                            value: e
                        })
                    }
                }),
                ee = p().View.extend({
                    className: "gizmo gizmo-direction",
                    template: o().template('\n    <div class="base"></div>\n    <div class="indicator"></div>\n'),
                    model: new(l().Model),
                    events: {
                        click: "onClick"
                    },
                    bindings: {
                        ".indicator": {
                            attributes: [{
                                name: "style",
                                observe: "value",
                                onGet: e => 0 === e ? "transform: rotate(0deg) scaleY(1);" : 1 === e ? "transform: rotate(90deg) scaleY(1);" : 2 === e ? "transform: rotate(0deg) scaleY(-1);" : 3 === e ? "transform: rotate(90deg) scaleY(-1);" : ""
                            }]
                        }
                    },
                    onRender() {
                        this.stickit(), this.options.isCaptain && this.intro()
                    },
                    intro() {
                        const e = this.model.get("value");
                        setTimeout((() => {
                            this.model.set({
                                value: 0
                            })
                        }), 1), setTimeout((() => {
                            this.model.set({
                                value: 2
                            })
                        }), 300), setTimeout((() => {
                            this.model.set({
                                value: e
                            })
                        }), 600)
                    },
                    onClick() {
                        if (!this.options.isCaptain) return;
                        let e = this.model.get("value");
                        3 === e ? e = 0 : e += 1, this.model.set({
                            value: e
                        })
                    }
                }),
                te = p().View.extend({
                    className: "gizmo gizmo-empty",
                    template: o().template(""),
                    model: new(l().Model)({
                        value: null
                    })
                });
            var se = s(85608);
            C.p8.registerPlugin(se.W);
            const ie = p().View.extend({
                    className: "gizmo gizmo-eq",
                    template: o().template('\n    <div class="line-wrapper">\n        <div class="div-line ver0"></div>\n        <div class="div-line ver1"></div>\n        <div class="div-line ver2"></div>\n        <div class="div-line center"></div>\n        <div class="div-line hor0"></div>\n        <div class="div-line hor1"></div>\n        <svg version="1.1" viewBox="0 0 500 100" overflow="visible">\n            <path class="line" d="M500.82,61c0,0-204.58,0-238.04,0S0.82,61,0.82,61"/>\n        </svg>\n    </div>\n    <div class="name"></div>\n'),
                    model: new(l().Model),
                    paths: [{
                        name: "FLAT",
                        path: "M500.82,61c0,0-204.58,0-238.04,0S0.82,61,0.82,61"
                    }, {
                        name: "HI-BOOST",
                        path: "M0.32,137.5c13-11,43-40,88-40s59,36,95,36s110-126,317-126"
                    }, {
                        name: "LO-BOOST",
                        path: "M0.32,4.5c109,0,165,100,283,100s104-63,217-63"
                    }, {
                        name: "MID-BOOST",
                        path: "M0.32,75.5c131,0,153-68,279-68s116,68,221,68"
                    }, {
                        name: "SPOKEN",
                        path: "M0.32,54.5c64,0,65,29,136,29c42,0,121-69,209-69s78,35,155,35"
                    }, {
                        name: "HI-PASS",
                        path: "M0,0.5c0,0,252,0,274,0s226,9,226,96"
                    }],
                    bindings: {
                        ".name": {
                            observe: "value",
                            onGet(e) {
                                return this.paths[e].name
                            }
                        }
                    },
                    events: {
                        click: "onClick"
                    },
                    initialize() {
                        this.listenTo(this.model, "change:value", this.onValueChange)
                    },
                    onRender() {
                        this.stickit(), this.options.isCaptain && this.intro()
                    },
                    onAttach() {
                        this.updateLine(this.model.get("value"), 0)
                    },
                    intro() {
                        let e = 0;
                        const t = this.model.get("value"),
                            s = setInterval((() => {
                                if (e >= 3) return this.model.set({
                                    value: t
                                }), void clearInterval(s);
                                this.model.set({
                                    value: o().random(0, 5)
                                }), e += 1
                            }), 250)
                    },
                    updateLine(e, t) {
                        const s = this.$el.find(".line");
                        C.p8.to(s[0], {
                            duration: t,
                            morphSVG: this.paths[e].path
                        })
                    },
                    onValueChange(e, t) {
                        this.updateLine(t, .25)
                    },
                    onClick() {
                        if (!this.options.isCaptain) return;
                        let e = this.model.get("value");
                        5 === e ? e = 0 : e += 1, this.model.set({
                            value: e
                        })
                    }
                }),
                oe = p().View.extend({
                    className: "gizmo gizmo-light",
                    template: o().template('<div class="lights-wrapper"> <svg version="1.1" viewBox="0 0 230 200"> <g class="light light-0"> <path class="on-border" d="M108.4,59.54H0V0h108.4V59.54z M4.58,54.96h99.24V4.58H4.58V54.96z"/> <g class="off-border"> <polygon points="107.63,58.78 103.05,58.78 103.05,55.73 104.58,55.73 104.58,54.2 107.63,54.2 \t"/> <path d="M97.31,58.78h-5.75v-3.05h5.75V58.78z M85.81,58.78h-5.75v-3.05h5.75V58.78z M74.32,58.78h-5.75v-3.05h5.75V58.78z\n                    M62.82,58.78h-5.75v-3.05h5.75V58.78z M51.32,58.78h-5.75v-3.05h5.75V58.78z M39.83,58.78h-5.75v-3.05h5.75V58.78z M28.33,58.78\n                    h-5.75v-3.05h5.75V58.78z M16.84,58.78h-5.75v-3.05h5.75V58.78z"/> <polygon points="5.34,58.78 0.76,58.78 0.76,54.2 3.82,54.2 3.82,55.73 5.34,55.73 \t"/> <path d="M3.82,48.77H0.76v-5.43h3.05V48.77z M3.82,37.91H0.76v-5.43h3.05V37.91z M3.82,27.06H0.76v-5.43h3.05V27.06z M3.82,16.2\n                    H0.76v-5.43h3.05V16.2z"/> <polygon points="3.82,5.34 0.76,5.34 0.76,0.76 5.34,0.76 5.34,3.82 3.82,3.82 \t"/> <path d="M97.31,3.82h-5.75V0.76h5.75V3.82z M85.81,3.82h-5.75V0.76h5.75V3.82z M74.31,3.82h-5.75V0.76h5.75V3.82z M62.82,3.82\n                    h-5.75V0.76h5.75V3.82z M51.32,3.82h-5.75V0.76h5.75V3.82z M39.83,3.82h-5.75V0.76h5.75V3.82z M28.33,3.82h-5.75V0.76h5.75V3.82z\n                    M16.84,3.82h-5.75V0.76h5.75V3.82z"/> <polygon points="107.63,5.34 104.58,5.34 104.58,3.82 103.05,3.82 103.05,0.76 107.63,0.76 \t"/> <path d="M107.63,48.77h-3.05v-5.43h3.05V48.77z M107.63,37.91h-3.05v-5.43h3.05V37.91z M107.63,27.06h-3.05v-5.43h3.05V27.06z\n                    M107.63,16.2h-3.05v-5.43h3.05V16.2z"/> </g> <g class="text"> <path d="M11.99,45v-8.18c1.37,1.4,2.84,2.47,4.39,3.21c1.56,0.73,3.12,1.1,4.7,1.1c1.85,0,3.21-0.46,4.07-1.39\n\t\tc0.86-0.92,1.29-2.4,1.29-4.43V17.27H17.8v-6.22h15.7v24.26c0,4.35-0.91,7.47-2.74,9.34c-1.83,1.87-4.84,2.81-9.03,2.81\n\t\tc-1.52,0-3.1-0.21-4.75-0.62C15.33,46.42,13.66,45.81,11.99,45z"/> <path d="M42.12,11h11.51c3.97,0,6.96,0.75,8.96,2.26c2,1.51,3,3.76,3,6.76c0,2.3-0.59,4.09-1.77,5.38\n\t\tc-1.18,1.29-2.91,2.04-5.19,2.25c2.73,0.27,4.78,1.19,6.16,2.75c1.38,1.56,2.07,3.75,2.07,6.56c0,3.45-1.04,5.94-3.11,7.49\n\t\tc-2.07,1.55-5.45,2.32-10.12,2.32H42.12V11z M48.94,16.62v8.3h4.69c1.79,0,3.06-0.32,3.82-0.96c0.76-0.64,1.14-1.69,1.14-3.16\n\t\tc0-1.47-0.39-2.53-1.16-3.19c-0.77-0.66-2.04-0.99-3.79-0.99H48.94z M48.94,30.55v10.58h4.69c2.25,0,3.82-0.38,4.73-1.15\n\t\tc0.9-0.77,1.35-2.1,1.35-4c0-1.93-0.47-3.32-1.41-4.16c-0.94-0.85-2.5-1.27-4.67-1.27H48.94z"/> <path d="M89.74,40.31v-6.82h-4.83v-5.93h11.01v16.37c-1.36,1.16-2.85,2.05-4.49,2.64c-1.63,0.6-3.39,0.9-5.25,0.9\n\t\tc-4.63,0-8.2-1.61-10.72-4.82c-2.52-3.21-3.78-7.78-3.78-13.7c0-6.01,1.27-10.61,3.82-13.78c2.54-3.17,6.22-4.76,11.02-4.76\n\t\tc1.44,0,2.85,0.2,4.23,0.61c1.39,0.41,2.69,0.99,3.9,1.76v7.82c-0.99-1.28-2.13-2.24-3.41-2.88c-1.28-0.65-2.69-0.97-4.22-0.97\n\t\tc-2.68,0-4.68,1.01-6.01,3.03c-1.32,2.02-1.99,5.08-1.99,9.18c0,3.97,0.64,6.99,1.91,9.07c1.28,2.07,3.13,3.11,5.57,3.11\n\t\tc0.73,0,1.37-0.07,1.91-0.2C88.97,40.78,89.41,40.58,89.74,40.31z"/> </g> </g> <g class="light light-2"> <path class="on-border" d="M108.4,129.77H0V70.23h108.4V129.77z M4.58,125.19h99.24V74.81H4.58V125.19z"/> <g class="off-border"> <polygon points="107.63,129.01 103.05,129.01 103.05,125.95 104.58,125.95 104.58,124.43 107.63,124.43 \t"/> <path d="M97.31,129.01h-5.75v-3.05h5.75V129.01z M85.81,129.01h-5.75v-3.05h5.75V129.01z M74.32,129.01h-5.75v-3.05h5.75V129.01z\n                    M62.82,129.01h-5.75v-3.05h5.75V129.01z M51.32,129.01h-5.75v-3.05h5.75V129.01z M39.83,129.01h-5.75v-3.05h5.75V129.01z\n                    M28.33,129.01h-5.75v-3.05h5.75V129.01z M16.84,129.01h-5.75v-3.05h5.75V129.01z"/> <polygon points="5.34,129.01 0.76,129.01 0.76,124.43 3.82,124.43 3.82,125.95 5.34,125.95 \t"/> <path d="M3.82,119H0.76v-5.43h3.05V119z M3.82,108.14H0.76v-5.43h3.05V108.14z M3.82,97.29H0.76v-5.43h3.05V97.29z M3.82,86.43\n                    H0.76V81h3.05V86.43z"/> <polygon points="3.82,75.57 0.76,75.57 0.76,70.99 5.34,70.99 5.34,74.05 3.82,74.05 \t"/> <path d="M97.31,74.05h-5.75v-3.05h5.75V74.05z M85.81,74.05h-5.75v-3.05h5.75V74.05z M74.31,74.05h-5.75v-3.05h5.75V74.05z\n                    M62.82,74.05h-5.75v-3.05h5.75V74.05z M51.32,74.05h-5.75v-3.05h5.75V74.05z M39.83,74.05h-5.75v-3.05h5.75V74.05z M28.33,74.05\n                    h-5.75v-3.05h5.75V74.05z M16.84,74.05h-5.75v-3.05h5.75V74.05z"/> <polygon points="107.63,75.57 104.58,75.57 104.58,74.05 103.05,74.05 103.05,70.99 107.63,70.99 \t"/> <path d="M107.63,119h-3.05v-5.43h3.05V119z M107.63,108.14h-3.05v-5.43h3.05V108.14z M107.63,97.29h-3.05v-5.43h3.05V97.29z\n                    M107.63,86.43h-3.05V81h3.05V86.43z"/> </g> <g class="text"> <path d="M12.66,81.72h7.56c5.84,0,10.04,1.39,12.61,4.18c2.57,2.78,3.85,7.33,3.85,13.65c0,6.33-1.28,10.9-3.85,13.7\n\t\tc-2.57,2.8-6.77,4.2-12.61,4.2h-7.56V81.72z M19.72,88.09v22.99h1.91c2.78,0,4.75-0.87,5.93-2.62c1.18-1.75,1.77-4.72,1.77-8.91\n\t\tc0-4.16-0.59-7.11-1.77-8.85c-1.18-1.74-3.16-2.61-5.93-2.61H19.72z"/> <path d="M56.41,117.45h-7.06V87.9h-9.07v-6.17h25.19v6.17h-9.07V117.45z"/> <path d="M72.16,81.72h7.56c5.84,0,10.04,1.39,12.61,4.18c2.57,2.78,3.85,7.33,3.85,13.65c0,6.33-1.28,10.9-3.85,13.7\n\t\tc-2.57,2.8-6.77,4.2-12.61,4.2h-7.56V81.72z M79.21,88.09v22.99h1.91c2.78,0,4.75-0.87,5.93-2.62c1.18-1.75,1.77-4.72,1.77-8.91\n\t\tc0-4.16-0.59-7.11-1.77-8.85c-1.18-1.74-3.16-2.61-5.93-2.61H79.21z"/> </g> </g> <g class="light light-4"> <path class="on-border" d="M108.4,200H0v-59.54h108.4V200z M4.58,195.42h99.24v-50.38H4.58V195.42z"/> <g class="off-border"> <polygon points="107.63,199.24 103.05,199.24 103.05,196.18 104.58,196.18 104.58,194.66 107.63,194.66 \t"/> <path d="M97.31,199.24h-5.75v-3.05h5.75V199.24z M85.81,199.24h-5.75v-3.05h5.75V199.24z M74.32,199.24h-5.75v-3.05h5.75V199.24z\n                    M62.82,199.24h-5.75v-3.05h5.75V199.24z M51.32,199.24h-5.75v-3.05h5.75V199.24z M39.83,199.24h-5.75v-3.05h5.75V199.24z\n                    M28.33,199.24h-5.75v-3.05h5.75V199.24z M16.84,199.24h-5.75v-3.05h5.75V199.24z"/> <polygon points="5.34,199.24 0.76,199.24 0.76,194.66 3.82,194.66 3.82,196.18 5.34,196.18 \t"/> <path d="M3.82,189.23H0.76v-5.43h3.05V189.23z M3.82,178.37H0.76v-5.43h3.05V178.37z M3.82,167.51H0.76v-5.43h3.05V167.51z\n                    M3.82,156.66H0.76v-5.43h3.05V156.66z"/> <polygon points="3.82,145.8 0.76,145.8 0.76,141.22 5.34,141.22 5.34,144.27 3.82,144.27 \t"/> <path d="M97.31,144.27h-5.75v-3.05h5.75V144.27z M85.81,144.27h-5.75v-3.05h5.75V144.27z M74.31,144.27h-5.75v-3.05h5.75V144.27z\n                    M62.82,144.27h-5.75v-3.05h5.75V144.27z M51.32,144.27h-5.75v-3.05h5.75V144.27z M39.83,144.27h-5.75v-3.05h5.75V144.27z\n                    M28.33,144.27h-5.75v-3.05h5.75V144.27z M16.84,144.27h-5.75v-3.05h5.75V144.27z"/> <polygon points="107.63,145.8 104.58,145.8 104.58,144.27 103.05,144.27 103.05,141.22 107.63,141.22 \t"/> <path d="M107.63,189.23h-3.05v-5.43h3.05V189.23z M107.63,178.37h-3.05v-5.43h3.05V178.37z M107.63,167.52h-3.05v-5.43h3.05V167.52\n                    z M107.63,156.66h-3.05v-5.43h3.05V156.66z"/> </g> <g class="text"> <path d="M27.66,188.12H20.6v-29.55h-9.07v-6.17h25.19v6.17h-9.07V188.12z"/> <path d="M43.01,152.4h9.69c4.93,0,8.47,0.88,10.64,2.63c2.16,1.75,3.24,4.6,3.24,8.54s-1.08,6.79-3.24,8.54\n\t\tc-2.16,1.75-5.71,2.63-10.64,2.63h-2.63v13.38h-7.06V152.4z M50.06,158.33v10.48h2.9c2.31,0,3.94-0.39,4.87-1.17\n\t\tc0.93-0.78,1.4-2.14,1.4-4.07s-0.47-3.29-1.4-4.07c-0.93-0.78-2.56-1.17-4.87-1.17H50.06z"/> <path d="M86.46,156.6v10.29h10.29v5.69H86.46v10.34h-5.67v-10.34H70.46v-5.69h10.34V156.6H86.46z"/> </g> </g> <g class="light light-1"> <path class="on-border" d="M230,59.54H121.6V0H230V59.54z M126.18,54.96h99.24V4.58h-99.24V54.96z"/> <g class="off-border"> <polygon points="229.24,58.78 224.66,58.78 224.66,55.73 226.18,55.73 226.18,54.2 229.24,54.2 \t"/> <path d="M218.91,58.78h-5.75v-3.05h5.75V58.78z M207.41,58.78h-5.75v-3.05h5.75V58.78z M195.92,58.78h-5.75v-3.05h5.75V58.78z\n                M184.42,58.78h-5.75v-3.05h5.75V58.78z M172.93,58.78h-5.75v-3.05h5.75V58.78z M161.43,58.78h-5.75v-3.05h5.75V58.78z\n                M149.94,58.78h-5.75v-3.05h5.75V58.78z M138.44,58.78h-5.75v-3.05h5.75V58.78z"/> <polygon points="126.95,58.78 122.37,58.78 122.37,54.2 125.42,54.2 125.42,55.73 126.95,55.73 \t"/> <path d="M125.42,48.77h-3.05v-5.43h3.05V48.77z M125.42,37.91h-3.05v-5.43h3.05V37.91z M125.42,27.06h-3.05v-5.43h3.05V27.06z\n                M125.42,16.2h-3.05v-5.43h3.05V16.2z"/> <polygon points="125.42,5.34 122.37,5.34 122.37,0.76 126.95,0.76 126.95,3.82 125.42,3.82 \t"/> <path d="M218.91,3.82h-5.75V0.76h5.75V3.82z M207.41,3.82h-5.75V0.76h5.75V3.82z M195.92,3.82h-5.75V0.76h5.75V3.82z M184.42,3.82\n                h-5.75V0.76h5.75V3.82z M172.93,3.82h-5.75V0.76h5.75V3.82z M161.43,3.82h-5.75V0.76h5.75V3.82z M149.94,3.82h-5.75V0.76h5.75V3.82\n                z M138.44,3.82h-5.75V0.76h5.75V3.82z"/> <polygon points="229.24,5.34 226.18,5.34 226.18,3.82 224.66,3.82 224.66,0.76 229.24,0.76 \t"/> <path d="M229.24,48.77h-3.05v-5.43h3.05V48.77z M229.24,37.91h-3.05v-5.43h3.05V37.91z M229.24,27.06h-3.05v-5.43h3.05V27.06z\n                M229.24,16.2h-3.05v-5.43h3.05V16.2z"/> </g> <g class="text"> <path d="M147,47.32c-0.22,0.05-0.41,0.08-0.56,0.11c-0.15,0.02-0.3,0.04-0.44,0.04c-4.1,0-7.21-1.56-9.32-4.69\n\t\tc-2.11-3.13-3.17-7.74-3.17-13.83c0-6.11,1.06-10.73,3.17-13.85c2.11-3.13,5.24-4.69,9.37-4.69c4.15,0,7.28,1.56,9.39,4.69\n\t\tc2.11,3.13,3.17,7.74,3.17,13.85c0,4.2-0.5,7.71-1.51,10.54c-1,2.83-2.46,4.85-4.38,6.06l4.45,4.35l-4.83,3.59L147,47.32z\n\t\t M146.04,16.74c-1.8,0-3.12,0.96-3.95,2.88c-0.83,1.92-1.24,5.03-1.24,9.32c0,4.27,0.41,7.37,1.24,9.3\n\t\tc0.83,1.92,2.15,2.88,3.95,2.88c1.82,0,3.14-0.96,3.97-2.88c0.83-1.92,1.24-5.02,1.24-9.3c0-4.29-0.42-7.4-1.24-9.32\n\t\tC149.18,17.7,147.86,16.74,146.04,16.74z"/> <path d="M166.43,46.77V11.05h7.06v29.5h15.1v6.22H166.43z"/> <path d="M203.94,30.78h-3.78v-6.22h3.78c1.75,0,3.11-0.35,4.08-1.04c0.96-0.69,1.45-1.67,1.45-2.93c0-1.32-0.48-2.36-1.45-3.1\n\t\tc-0.97-0.74-2.33-1.11-4.08-1.11c-1.34,0-2.78,0.17-4.31,0.5s-3.12,0.82-4.76,1.46v-6.41c1.64-0.49,3.26-0.87,4.86-1.14\n\t\tc1.59-0.26,3.13-0.39,4.59-0.39c3.76,0,6.7,0.82,8.8,2.46c2.11,1.64,3.16,3.91,3.16,6.79c0,2.12-0.61,3.86-1.82,5.2\n\t\tc-1.21,1.35-2.94,2.23-5.19,2.64c2.55,0.45,4.5,1.46,5.84,3.05c1.34,1.59,2.01,3.67,2.01,6.26c0,3.46-1.11,6.1-3.33,7.92\n\t\tc-2.22,1.82-5.44,2.73-9.67,2.73c-1.8,0-3.58-0.15-5.32-0.45c-1.75-0.3-3.42-0.74-5.01-1.32v-6.56c1.5,0.75,3.12,1.32,4.86,1.71\n\t\tc1.74,0.39,3.56,0.59,5.48,0.59s3.43-0.44,4.55-1.33c1.12-0.89,1.67-2.08,1.67-3.58c0-1.83-0.56-3.25-1.67-4.25\n\t\tC207.56,31.28,205.98,30.78,203.94,30.78z"/> </g> </g> <g class="light light-3"> <path class="on-border" d="M230,129.77H121.6V70.23H230V129.77z M126.18,125.19h99.24V74.81h-99.24V125.19z"/> <g class="off-border"> <polygon points="229.24,129.01 224.66,129.01 224.66,125.95 226.18,125.95 226.18,124.43 229.24,124.43 \t"/> <path d="M218.91,129.01h-5.75v-3.05h5.75V129.01z M207.41,129.01h-5.75v-3.05h5.75V129.01z M195.92,129.01h-5.75v-3.05h5.75V129.01\n                z M184.42,129.01h-5.75v-3.05h5.75V129.01z M172.93,129.01h-5.75v-3.05h5.75V129.01z M161.43,129.01h-5.75v-3.05h5.75V129.01z\n                M149.94,129.01h-5.75v-3.05h5.75V129.01z M138.44,129.01h-5.75v-3.05h5.75V129.01z"/> <polygon points="126.95,129.01 122.37,129.01 122.37,124.43 125.42,124.43 125.42,125.95 126.95,125.95 \t"/> <path d="M125.42,119h-3.05v-5.43h3.05V119z M125.42,108.14h-3.05v-5.43h3.05V108.14z M125.42,97.29h-3.05v-5.43h3.05V97.29z\n                M125.42,86.43h-3.05V81h3.05V86.43z"/> <polygon points="125.42,75.57 122.37,75.57 122.37,70.99 126.95,70.99 126.95,74.05 125.42,74.05 \t"/> <path d="M218.91,74.05h-5.75v-3.05h5.75V74.05z M207.41,74.05h-5.75v-3.05h5.75V74.05z M195.92,74.05h-5.75v-3.05h5.75V74.05z\n                M184.42,74.05h-5.75v-3.05h5.75V74.05z M172.93,74.05h-5.75v-3.05h5.75V74.05z M161.43,74.05h-5.75v-3.05h5.75V74.05z\n                M149.94,74.05h-5.75v-3.05h5.75V74.05z M138.44,74.05h-5.75v-3.05h5.75V74.05z"/> <polygon points="229.24,75.57 226.18,75.57 226.18,74.05 224.66,74.05 224.66,70.99 229.24,70.99 \t"/> <path d="M229.24,119h-3.05v-5.43h3.05V119z M229.24,108.14h-3.05v-5.43h3.05V108.14z M229.24,97.29h-3.05v-5.43h3.05V97.29z\n                M229.24,86.43h-3.05V81h3.05V86.43z"/> </g> <g class="text"> <path d="M157.17,116.42c-1.12,0.57-2.29,1-3.52,1.29c-1.23,0.29-2.52,0.43-3.88,0.43c-4.82,0-8.49-1.59-11.03-4.76\n\t\ts-3.8-7.76-3.8-13.76c0-6.01,1.27-10.61,3.8-13.78c2.54-3.17,6.21-4.76,11.03-4.76c1.36,0,2.66,0.14,3.9,0.43s2.41,0.72,3.49,1.29\n\t\tv7.85c-1.21-1.12-2.39-1.93-3.53-2.45c-1.14-0.52-2.32-0.78-3.53-0.78c-2.58,0-4.53,1.02-5.85,3.07c-1.32,2.05-1.97,5.09-1.97,9.13\n\t\tc0,4.02,0.66,7.05,1.97,9.1c1.32,2.05,3.27,3.07,5.85,3.07c1.21,0,2.39-0.26,3.53-0.78c1.14-0.52,2.32-1.34,3.53-2.45V116.42z"/> <path d="M163.59,104.26V81.72h7.06v24.31c0,1.79,0.45,3.19,1.36,4.2s2.17,1.52,3.78,1.52c1.61,0,2.87-0.51,3.78-1.52\n\t\ts1.36-2.41,1.36-4.2V81.72h7.06v22.54c0,4.85-0.97,8.37-2.9,10.58c-1.93,2.2-5.03,3.3-9.31,3.3c-4.26,0-7.36-1.1-9.29-3.3\n\t\tC164.56,112.64,163.59,109.11,163.59,104.26z"/> <polygon points="218.2,117.45 192.91,117.45 205.69,97.72 \t"/> </g> </g> <g class="light light-5"> <path class="on-border" d="M230,200H121.6v-59.54H230V200z M126.18,195.42h99.24v-50.38h-99.24V195.42z"/> <g class="off-border"> <polygon points="229.24,199.24 224.66,199.24 224.66,196.18 226.18,196.18 226.18,194.66 229.24,194.66 \t"/> <path d="M218.91,199.24h-5.75v-3.05h5.75V199.24z M207.41,199.24h-5.75v-3.05h5.75V199.24z M195.92,199.24h-5.75v-3.05h5.75V199.24\n                z M184.42,199.24h-5.75v-3.05h5.75V199.24z M172.93,199.24h-5.75v-3.05h5.75V199.24z M161.43,199.24h-5.75v-3.05h5.75V199.24z\n                M149.94,199.24h-5.75v-3.05h5.75V199.24z M138.44,199.24h-5.75v-3.05h5.75V199.24z"/> <polygon points="126.95,199.24 122.37,199.24 122.37,194.66 125.42,194.66 125.42,196.18 126.95,196.18 \t"/> <path d="M125.42,189.23h-3.05v-5.43h3.05V189.23z M125.42,178.37h-3.05v-5.43h3.05V178.37z M125.42,167.51h-3.05v-5.43h3.05V167.51\n                z M125.42,156.66h-3.05v-5.43h3.05V156.66z"/> <polygon points="125.42,145.8 122.37,145.8 122.37,141.22 126.95,141.22 126.95,144.27 125.42,144.27 \t"/> <path d="M218.91,144.27h-5.75v-3.05h5.75V144.27z M207.41,144.27h-5.75v-3.05h5.75V144.27z M195.92,144.27h-5.75v-3.05h5.75V144.27\n                z M184.42,144.27h-5.75v-3.05h5.75V144.27z M172.93,144.27h-5.75v-3.05h5.75V144.27z M161.43,144.27h-5.75v-3.05h5.75V144.27z\n                M149.94,144.27h-5.75v-3.05h5.75V144.27z M138.44,144.27h-5.75v-3.05h5.75V144.27z"/> <polygon points="229.24,145.8 226.18,145.8 226.18,144.27 224.66,144.27 224.66,141.22 229.24,141.22 \t"/> <path d="M229.24,189.23h-3.05v-5.43h3.05V189.23z M229.24,178.37h-3.05v-5.43h3.05V178.37z M229.24,167.52h-3.05v-5.43h3.05V167.52\n                z M229.24,156.66h-3.05v-5.43h3.05V156.66z"/> </g> <g class="text"> <path d="M134.29,152.35h11.51c3.97,0,6.96,0.75,8.96,2.26c2,1.51,3,3.76,3,6.76c0,2.3-0.59,4.09-1.77,5.38\n\t\tc-1.18,1.29-2.91,2.04-5.19,2.25c2.73,0.27,4.78,1.19,6.16,2.75c1.38,1.56,2.07,3.75,2.07,6.56c0,3.45-1.04,5.94-3.11,7.49\n\t\tc-2.07,1.55-5.45,2.32-10.12,2.32h-11.51V152.35z M141.11,157.98v8.3h4.69c1.79,0,3.06-0.32,3.82-0.96\n\t\tc0.76-0.64,1.14-1.69,1.14-3.16c0-1.47-0.39-2.53-1.16-3.19c-0.77-0.66-2.04-0.99-3.79-0.99H141.11z M141.11,171.9v10.58h4.69\n\t\tc2.25,0,3.82-0.38,4.73-1.15c0.9-0.77,1.35-2.1,1.35-4c0-1.93-0.47-3.32-1.41-4.16c-0.94-0.84-2.5-1.27-4.67-1.27H141.11z"/> <path d="M210.11,171.25c0.7,0.14,1.31,0.47,1.83,0.99c0.52,0.52,1.15,1.53,1.9,3.03l6.46,12.85h-7.75l-4.31-9.02\n\t\tc-0.13-0.25-0.3-0.61-0.5-1.05c-1.26-2.7-2.74-4.04-4.45-4.04h-2.25v14.12h-7.06V152.4h10.19c4.59,0,7.89,0.81,9.89,2.44\n\t\tc2,1.63,3,4.28,3,7.94c0,2.46-0.6,4.41-1.79,5.86S212.36,170.97,210.11,171.25z M201.04,158.33v9.74h3.33\n\t\tc1.93,0,3.31-0.38,4.15-1.14c0.84-0.76,1.26-2.01,1.26-3.74s-0.42-2.98-1.24-3.73c-0.83-0.75-2.22-1.12-4.16-1.12H201.04z"/> <circle cx="175.79" cy="169.76" r="12.56"/> </g> </g> </svg> </div> <div class="lights-button"></div>'),
                    model: new(l().Model),
                    events: {
                        click: "onClick"
                    },
                    onRender() {
                        this.stickit(), this.addBindings(), this.options.isCaptain && this.intro()
                    },
                    addBindings() {
                        for (let e = 0; e <= 5; e++) this.addBinding(this.model, `.light-${e}`, {
                            classes: {
                                on: {
                                    observe: "value",
                                    onGet: t => t === e
                                }
                            }
                        })
                    },
                    intro() {
                        let e = 0;
                        const t = this.model.get("value"),
                            s = setInterval((() => {
                                if (e >= 5) return this.model.set({
                                    value: t
                                }), void clearInterval(s);
                                this.model.set({
                                    value: o().random(0, 5)
                                }), e += 1
                            }), 150)
                    },
                    onClick() {
                        if (!this.options.isCaptain) return;
                        let e = this.model.get("value");
                        5 === e ? e = 0 : e += 1, this.model.set({
                            value: e
                        })
                    }
                }),
                ne = p().View.extend({
                    className: "gizmo gizmo-number",
                    template: o().template('<div class="number-wrapper"> <svg version="1.1" viewBox="0 0 500 500"> <polygon class="number-0" points="170.32,51.84 144.4,25.92 170.32,0 329.68,0 355.6,25.92 329.68,51.84 "/> <polygon class="number-1" points="112.04,58.28 137.96,32.36 163.88,58.28 163.88,217.64 137.96,243.56 112.04,217.64 "/> <polygon class="number-2" points="336.12,58.28 362.04,32.36 387.96,58.28 387.96,217.64 362.04,243.56 336.12,217.64 "/> <polygon class="number-3" points="170.32,275.92 144.4,250 170.32,224.08 329.68,224.08 355.6,250 329.68,275.92 "/> <polygon class="number-4" points="112.04,282.36 137.96,256.44 163.88,282.36 163.88,441.72 137.96,467.64 112.04,441.72 "/> <polygon class="number-5" points="336.12,282.36 362.04,256.44 387.96,282.36 387.96,441.72 362.04,467.64 336.12,441.72 "/> <polygon class="number-6" points="170.32,500 144.4,474.08 170.32,448.16 329.68,448.16 355.6,474.08 329.68,500 "/> </svg> </div>'),
                    model: new(l().Model),
                    lcd: [
                        [1, 1, 1, 0, 1, 1, 1],
                        [0, 1, 0, 0, 1, 0, 0],
                        [1, 0, 1, 1, 1, 0, 1],
                        [1, 0, 1, 1, 0, 1, 1],
                        [0, 1, 1, 1, 0, 1, 0],
                        [1, 1, 0, 1, 0, 1, 1],
                        [1, 1, 0, 1, 1, 1, 1],
                        [1, 0, 1, 0, 0, 1, 0],
                        [1, 1, 1, 1, 1, 1, 1],
                        [1, 1, 1, 1, 0, 1, 0]
                    ],
                    events: {
                        click: "onClick"
                    },
                    onRender() {
                        this.stickit(), this.addBindings(), this.options.isCaptain && this.intro()
                    },
                    addBindings() {
                        for (let e = 0; e <= 9; e++) this.addBinding(this.model, `.number-${e}`, {
                            classes: {
                                on: {
                                    observe: "value",
                                    onGet(t) {
                                        return this.lcd[t][e]
                                    }
                                }
                            }
                        })
                    },
                    intro() {
                        let e = 0;
                        const t = this.model.get("value"),
                            s = setInterval((() => {
                                if (e >= 5) return this.model.set({
                                    value: t
                                }), void clearInterval(s);
                                this.model.set({
                                    value: o().random(0, 9)
                                }), e += 1
                            }), 150)
                    },
                    onClick() {
                        if (!this.options.isCaptain) return;
                        let e = this.model.get("value");
                        9 === e ? e = 0 : e += 1, this.model.set({
                            value: e
                        })
                    }
                }),
                ae = p().View.extend({
                    className: "gizmo gizmo-power",
                    template: o().template('\n    <div class="dial">\n        <div class="indicator"></div>\n    </div>\n    <div class="label lo">LO</div>\n    <div class="label mid">MID</div>\n    <div class="label hi">HI</div>\n'),
                    model: new(l().Model),
                    events: {
                        click: "onClick"
                    },
                    bindings: {
                        ".indicator": {
                            attributes: [{
                                name: "style",
                                observe: "value",
                                onGet: e => 0 === e ? "transform: rotate(-45deg);" : 1 === e ? "transform: rotate(0deg);" : 2 === e ? "transform: rotate(45deg);" : ""
                            }]
                        }
                    },
                    onRender() {
                        this.stickit(), this.options.isCaptain && this.intro()
                    },
                    intro() {
                        const e = this.model.get("value");
                        setTimeout((() => {
                            this.model.set({
                                value: 0
                            })
                        }), 1), setTimeout((() => {
                            this.model.set({
                                value: 2
                            })
                        }), 300), setTimeout((() => {
                            this.model.set({
                                value: e
                            })
                        }), 600)
                    },
                    onClick() {
                        if (!this.options.isCaptain) return;
                        let e = this.model.get("value");
                        2 === e ? e = 0 : e += 1, this.model.set({
                            value: e
                        })
                    }
                }),
                re = p().View.extend({
                    className: "gizmo gizmo-rocker",
                    template: o().template('\n    <div class="switch switch-0"></div>\n    <div class="switch switch-1"></div>\n    <div class="switch switch-2"></div>\n'),
                    model: new(l().Model),
                    events: {
                        click: "onClick"
                    },
                    bindings: {
                        ".switch-0": {
                            classes: {
                                on: {
                                    observe: "value",
                                    onGet: e => 0 === e
                                }
                            }
                        },
                        ".switch-1": {
                            classes: {
                                on: {
                                    observe: "value",
                                    onGet: e => 1 === e
                                }
                            }
                        },
                        ".switch-2": {
                            classes: {
                                on: {
                                    observe: "value",
                                    onGet: e => 2 === e
                                }
                            }
                        }
                    },
                    onRender() {
                        this.stickit(), this.options.isCaptain && this.intro()
                    },
                    intro() {
                        let e = 0;
                        const t = this.model.get("value"),
                            s = setInterval((() => {
                                if (e >= 7) return this.model.set({
                                    value: t
                                }), void clearInterval(s);
                                this.model.set({
                                    value: o().random(0, 2)
                                }), e += 1
                            }), 100)
                    },
                    onClick() {
                        if (!this.options.isCaptain) return;
                        let e = this.model.get("value");
                        2 === e ? e = 0 : e += 1, this.model.set({
                            value: e
                        })
                    }
                }),
                le = p().View.extend({
                    className: "gizmo gizmo-switch",
                    template: o().template('\n    <div class="base"></div>\n    <div class="switch"></div>\n'),
                    model: new(l().Model),
                    events: {
                        click: "onClick"
                    },
                    bindings: {
                        ":el": {
                            classes: {
                                on: "value"
                            }
                        }
                    },
                    onRender() {
                        this.stickit(), this.options.isCaptain && this.intro()
                    },
                    intro() {
                        const e = this.model.get("value");
                        setTimeout((() => {
                            this.model.set({
                                value: !e
                            })
                        }), 200), setTimeout((() => {
                            this.model.set({
                                value: e
                            })
                        }), 500)
                    },
                    onClick() {
                        if (!this.options.isCaptain) return;
                        const e = this.model.get("value");
                        this.model.set({
                            value: !e
                        })
                    }
                }),
                de = p().View.extend({
                    className: "gizmo gizmo-text",
                    template: o().template('\n    <input type="text" class="screen" placeholder="ENTER" maxlength="8"/>\n'),
                    model: new(l().Model),
                    events: {
                        click: "onClick"
                    },
                    bindings: {
                        ".screen": {
                            observe: "value",
                            attributes: [{
                                name: "disabled",
                                observe: "isDisabled",
                                onGet: e => e
                            }]
                        }
                    },
                    initialize() {
                        this.model.set({
                            isDisabled: !this.options.isCaptain
                        })
                    },
                    onRender() {
                        this.stickit()
                    }
                }),
                pe = p().View.extend({
                    className: "gizmo gizmo-tuner",
                    template: o().template('<div class="display"> <div class="markings"> <svg version="1.1" viewBox="0 0 500 200"> <line x1="252.5" y1="98.5" x2="252.5" y2="122.75"/> <line x1="351.91" y1="108.07" x2="347.38" y2="131.36"/> <line x1="447.67" y1="136.44" x2="439.43" y2="156.84"/> <line x1="153.09" y1="108.07" x2="157.57" y2="131.15"/> <line x1="57.33" y1="136.44" x2="65.41" y2="156.44"/> <path d="M26.72,172.7L26.72,172.7c141.81-66.37,306.91-66.6,448.87-0.67l0,0"/> <path class="solo" d="M0,199.94c155.04-85.87,344.85-86.01,500-0.41"/> </svg> </div> <div class="needle"></div> </div> <div class="dial"></div> '),
                    model: new(l().Model),
                    events: {
                        click: "onClick"
                    },
                    bindings: {
                        ".needle": {
                            attributes: [{
                                name: "style",
                                observe: "value",
                                onGet: e => 0 === e ? "transform: rotate(-27deg);" : 1 === e ? "transform: rotate(-14deg);" : 2 === e ? "transform: rotate(0);" : 3 === e ? "transform: rotate(14deg);" : 4 === e ? "transform: rotate(27deg);" : ""
                            }]
                        }
                    },
                    onRender() {
                        this.stickit(), this.options.isCaptain && this.intro()
                    },
                    intro() {
                        const e = this.model.get("value");
                        setTimeout((() => {
                            this.model.set({
                                value: 0
                            })
                        }), 1), setTimeout((() => {
                            this.model.set({
                                value: 4
                            })
                        }), 300), setTimeout((() => {
                            this.model.set({
                                value: e
                            })
                        }), 600)
                    },
                    onClick() {
                        if (!this.options.isCaptain) return;
                        let e = this.model.get("value");
                        4 === e ? e = 0 : e += 1, this.model.set({
                            value: e
                        })
                    }
                }),
                ce = l().Model.extend({}),
                me = l().Collection.extend({
                    model: ce
                }),
                he = p().CollectionView.extend({
                    tagName: "div",
                    className: "gizmos",
                    collection: new me,
                    childView(e) {
                        switch (e.get("type")) {
                            case "BUTTON":
                                return _;
                            case "DIPS":
                                return Q;
                            case "DIRECTION":
                                return ee;
                            case "EQ":
                                return ie;
                            case "LIGHT":
                                return oe;
                            case "NUMBER":
                                return ne;
                            case "POWER":
                                return ae;
                            case "ROCKER":
                                return re;
                            case "SWITCH":
                                return le;
                            case "TEXT":
                                return de;
                            case "TUNER":
                                return pe;
                            default:
                                return te
                        }
                    },
                    childViewOptions() {
                        return this.options
                    }
                }),
                ue = p().View.extend({
                    className: "mechanic gizmos",
                    template: o().template('<div class="scrollable"> <div class="clamp"> <div class="info">Test Test</div> <div class="gizmo-panel"> <div class="panel-name-wrapper"> <div class="panel-name"></div> </div> <div id="panel-region"></div> </div> <button class="button submit">SUBMIT</button> </div> </div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p></div> '),
                    model: new g.S,
                    regions: {
                        panel: "#panel-region"
                    },
                    events: {
                        "click .submit": "onSubmitClick",
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ".leave": {
                            observe: "canLeave",
                            visible: !0
                        },
                        ".instructions": {
                            observe: "instructions",
                            updateMethod: "html"
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".panel-name": "name",
                        ".info": {
                            observe: ["state", "participant", "captain"],
                            updateMethod: "html",
                            onGet(e) {
                                let [t, s, i] = e;
                                return "GizmosMechanicCaptain" === t ? `You are setting the gizmos. Ask <span class="player-name ${s.avatar}">${s.name}</span> for the correct settings.` : `These are the correct gizmo settings. Describe them to <span class="player-name ${i.avatar}">${i.name}</span>.`
                            }
                        },
                        ".gizmo-panel": {
                            classes: {
                                interactive: {
                                    observe: "state",
                                    onGet: e => "GizmosMechanicCaptain" === e
                                }
                            }
                        },
                        ".submit": {
                            observe: "state",
                            visible: e => "GizmosMechanicCaptain" === e
                        }
                    },
                    initialize() {
                        this.panelComponent = new he, this.listenTo(this.model, "change", this.update, this), this.listenTo(this.model, "change:mistakeCheck", this.onMistakeCheck), this.listenTo(this.model, "change:stepIndex", this.resetData), this.resetData()
                    },
                    resetData() {
                        this.model.setUpdate({
                            isWaiting: !1
                        }), this.panelComponent.collection.reset()
                    },
                    update() {
                        const e = this.model.get("gizmos");
                        this.panelComponent.options.isCaptain = "GizmosMechanicCaptain" === this.model.get("state"), 0 === this.panelComponent.collection.length && this.panelComponent.collection.set(e), this.stickit()
                    },
                    onRender() {
                        this.showChildView("panel", this.panelComponent), this.stickit()
                    },
                    onAttach() {
                        this.update()
                    },
                    onMistakeCheck(e) {
                        e.get("isWaiting") && (this.model.setUpdate({
                            isWaiting: !1
                        }), this.triggerMethod("result", {
                            type: "fail",
                            message: "TRY<br/>AGAIN"
                        }))
                    },
                    onSubmitClick() {
                        if ("GizmosMechanicParticipant" === this.model.get("state")) return;
                        if (this.model.get("isWaiting")) return;
                        this.model.setUpdate({
                            isWaiting: !0
                        });
                        const e = this.panelComponent.collection.map((e => e.get("value")));
                        this.triggerMethod("client:message", {
                            action: "submit",
                            values: e
                        })
                    },
                    onLeaveClick() {
                        this.triggerMethod("client:message", {
                            action: "leaveTask"
                        })
                    }
                });
            var ge = s(1596),
                ye = s.n(ge);
            const be = p().View.extend({
                    tagName: "div",
                    className: "item",
                    template: o().template(""),
                    triggers: {
                        "change:isSelected": "change:isSelected"
                    },
                    bindings: {
                        ":el": {
                            classes: {
                                selected: "isSelected",
                                dragging: "isDragging"
                            },
                            attributes: [{
                                name: "class",
                                observe: ["className", "id"],
                                onGet(e) {
                                    let [t, s] = e;
                                    return `${t} item-${s}`
                                }
                            }, {
                                name: "style",
                                observe: ["top", "left", "rotation"],
                                onGet: "getStyle"
                            }]
                        }
                    },
                    initialize() {
                        this.model.set({
                            isSelected: !1
                        })
                    },
                    onRender() {
                        this.stickit()
                    },
                    getStyle(e) {
                        const [t, s, i] = e;
                        return `transform: translate(${s}px, ${t}px) rotate(${i}deg);`
                    }
                }),
                xe = l().Model.extend({
                    defaults: {
                        isPanning: !1,
                        isSelected: !1,
                        rotation: 0,
                        top: 0,
                        left: 0,
                        originTop: null,
                        originLeft: null,
                        diffTop: null,
                        diffLeft: null
                    }
                }),
                fe = l().Collection.extend({
                    model: xe,
                    draggingItem: null,
                    topItemAtPoint(e, t, s) {
                        for (let i = this.models.length - 1; i >= 0; i--) {
                            const o = this.models[i].get("top"),
                                n = this.models[i].get("left");
                            if (!(e < n || e > n + s || t < o || t > o + s)) return this.models[i]
                        }
                        return !1
                    },
                    startDragging(e) {
                        this.draggingItem = e, e.set({
                            isDragging: !0
                        }), this.bringToFront(e)
                    },
                    stopDragging() {
                        this.draggingItem && this.draggingItem.set({
                            isDragging: !1,
                            velocity: 0
                        }), this.draggingItem = !1
                    },
                    bringToFront(e) {
                        const t = this.indexOf(e);
                        t !== this.length - 1 && this.models.splice(this.length - 1, 0, this.models.splice(t, 1)[0])
                    }
                }),
                ve = p().CollectionView.extend({
                    tagName: "div",
                    className: "items",
                    childView: be,
                    collection: new fe
                }),
                ke = g.S.extend({
                    defaults: {
                        selected: null
                    }
                }),
                Pe = p().View.extend({
                    className: "mechanic find captain",
                    template: o().template('<div class="clamp"> <div class="info"></div> <div id="items-region"></div> <div id="gesture-ui"></div> <button class="button found">I FOUND IT!<div class="selected-item item"></div></button> </div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p>'),
                    model: new ke,
                    itemCount: 15,
                    itemWidth: 120,
                    itemsComponent: null,
                    gestureRegion: null,
                    isPanning: !1,
                    ui: {
                        gesture: null
                    },
                    regions: {
                        items: "#items-region"
                    },
                    events: {
                        "click .found": "onFoundClick",
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ".leave": {
                            observe: "canLeave",
                            visible: !0
                        },
                        ".instructions": {
                            observe: "instructions",
                            updateMethod: "html"
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".info": {
                            observe: "participant",
                            updateMethod: "html",
                            onGet: e => e ? `Ask <span class="player-name ${e.avatar}">${e.name}</span> to describe the item you need to find.` : ""
                        },
                        ".found": {
                            classes: {
                                disabled: {
                                    observe: "selected",
                                    onGet: e => null == e
                                }
                            }
                        },
                        ".selected-item": {
                            attributes: [{
                                name: "class",
                                observe: ["category", "selected"],
                                onGet(e) {
                                    let [t, s] = e;
                                    return null == s ? "" : `${t.toLowerCase()} item-${s}`
                                }
                            }]
                        }
                    },
                    initialize() {
                        this.itemsComponent = new ve, this.listenTo(this.model, "change:mistakeCheck", this.onMistakeCheck), this.listenTo(this.model, "change:stepIndex", this.resetData), this.resetData()
                    },
                    resetData() {
                        this.model.setUpdate({
                            selected: null
                        })
                    },
                    onRender() {
                        this.showChildView("items", this.itemsComponent), this.stickit()
                    },
                    onAttach() {
                        const e = this.getItems();
                        this.itemsComponent.collection.set(e), this.stickit(), this.itemWidth = this.$el.find(".item")[0].clientWidth, this.ui.gesture = this.$el.find("#gesture-ui")[0], this.gestureRegion = new(ye().Region)(this.ui.gesture), this.scatterItems();
                        const t = new(ye().Pan);
                        t.end = this.onPanEnd.bind(this), this.gestureRegion.bind(this.ui.gesture, t, this.onPan.bind(this)), this.gestureRegion.bind(this.ui.gesture, "tap", this.onTap.bind(this)), this.scatterItems()
                    },
                    onBeforeDestroy() {
                        this.gestureRegion.unbind(this.ui.gesture)
                    },
                    onMistakeCheck(e) {
                        e.get("isWaiting") && (this.model.setUpdate({
                            isWaiting: !1
                        }), this.triggerMethod("result", {
                            type: "fail",
                            message: "TRY<br/>AGAIN"
                        }))
                    },
                    getItems() {
                        const e = this.model.get("itemIndices"),
                            t = this.model.get("category"),
                            s = e.map((e => ({
                                id: e,
                                className: t.toLowerCase()
                            })));
                        return o().shuffle(s)
                    },
                    onFoundClick() {
                        const e = this.model.get("selected");
                        void 0 !== e && (this.model.setUpdate({
                            isWaiting: !0
                        }), this.triggerMethod("client:message", {
                            action: "choose",
                            item: e
                        }))
                    },
                    onLeaveClick() {
                        this.triggerMethod("client:message", {
                            action: "leaveTask"
                        })
                    },
                    onPanStart(e) {
                        this.isPanning = !0;
                        const t = this.ui.gesture.getBoundingClientRect(),
                            s = e.detail.events[0].pageX - t.left,
                            i = e.detail.events[0].pageY - t.top,
                            o = this.itemsComponent.collection.topItemAtPoint(s, i, this.itemWidth);
                        if (!o) return;
                        const n = o.get("top"),
                            a = o.get("left");
                        o.set({
                            isPanning: !0,
                            originTop: i,
                            originLeft: s,
                            diffTop: n - i,
                            diffLeft: a - s
                        }), this.itemsComponent.collection.startDragging(o), this.itemsComponent.render()
                    },
                    onPan(e) {
                        this.isPanning || this.onPanStart(e);
                        const t = this.itemsComponent.collection.draggingItem;
                        if (!t) return;
                        const s = this.ui.gesture.getBoundingClientRect(),
                            i = t.get("originTop"),
                            o = t.get("originLeft"),
                            n = t.get("diffTop"),
                            a = t.get("diffLeft"),
                            r = t.previous("left"),
                            l = e.detail.data[0],
                            d = (l.directionFromOrigin + 90) * (Math.PI / 180);
                        let p = i + n + Math.cos(d) * l.distanceFromOrigin,
                            c = o + a + Math.sin(d) * l.distanceFromOrigin,
                            m = t.get("rotation");
                        p > s.bottom - this.itemWidth && (p = s.bottom - this.itemWidth), c > s.right - this.itemWidth && (c = s.right - this.itemWidth), p < 0 && (p = 0), c < 0 && (c = 0), (r > c && m > -30 || r < c && m < 30) && (m += (c - r) / 20), t.set({
                            top: p,
                            left: c,
                            rotation: m
                        })
                    },
                    onPanEnd() {
                        const e = this.itemsComponent.collection.draggingItem;
                        if (this.isPanning = !1, this.itemsComponent.collection.stopDragging(), !e) return;
                        let t = 0;
                        const s = setInterval((() => {
                            if (t > 20) return void window.clearInterval(s);
                            let i = e.get("rotation");
                            i > 0 && (i -= .5), i < 0 && (i += .5), e.set({
                                rotation: i
                            }), t += 1
                        }), 10)
                    },
                    onTap(e) {
                        const t = this.ui.gesture.getBoundingClientRect(),
                            s = e.detail.events[0].pageX - t.left,
                            i = e.detail.events[0].pageY - t.top,
                            o = this.itemsComponent.collection.findWhere({
                                isSelected: !0
                            }),
                            n = this.itemsComponent.collection.topItemAtPoint(s, i, this.itemWidth);
                        o && (o.set({
                            isSelected: !1
                        }), this.model.set({
                            selected: null
                        })), n && (n.set({
                            isSelected: !0
                        }), this.model.set({
                            selected: n.get("id")
                        }))
                    },
                    scatterItems() {
                        const e = this.ui.gesture.getBoundingClientRect();
                        this.itemsComponent.collection.each(((t, s) => {
                            t.set({
                                index: s,
                                top: this.getWeigthedRandom(e.height - this.itemWidth, 3),
                                left: this.getWeigthedRandom(e.width - this.itemWidth, 3),
                                rotation: o().random(0, 60) - 30
                            })
                        }))
                    },
                    getWeigthedRandom(e, t) {
                        let s = 0;
                        for (let i = 0; i < t; i++) s += Math.random() * (e / t);
                        return s
                    }
                }),
                we = p().View.extend({
                    className: "mechanic find participant",
                    template: o().template('<div class="clamp"> <div class="info"></div> <div class="item"></div> </div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p>'),
                    model: new g.S({
                        defaults: {
                            selected: null
                        }
                    }),
                    events: {
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ".leave": {
                            observe: "canLeave",
                            visible: !0
                        },
                        ".instructions": {
                            observe: "instructions",
                            updateMethod: "html"
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".info": {
                            observe: "captain",
                            updateMethod: "html",
                            onGet: e => e ? `Describe this item to <span class="player-name ${e.avatar}">${e.name}</span>.` : ""
                        },
                        ".item": {
                            attributes: [{
                                name: "class",
                                observe: ["category", "correctItemIndex"],
                                onGet(e) {
                                    let [t, s] = e;
                                    return null === s ? "" : `${t.toLowerCase()} item-${s}`
                                }
                            }]
                        }
                    },
                    onRender() {
                        this.stickit()
                    },
                    onLeaveClick() {
                        this.triggerMethod("client:message", {
                            action: "leaveTask"
                        })
                    }
                });
            var Te = s(10972);
            const Se = p().View.extend({
                    className: "mechanic gather captain",
                    template: o().template('<div class="scrollable"> <div class="clamp"> <div class="info">You have the instructions. Tell your gatherers what you need:</div> <div class="requirements"></div> </div> </div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p>'),
                    model: new g.S,
                    demoKey: "gather-captain",
                    events: {
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ".instructions": {
                            observe: "name",
                            onGet: e => `Gather items for ${e}`
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".requirements": {
                            observe: ["requiredItems", "gatheredItemIds"],
                            updateMethod: "html",
                            onGet(e) {
                                const [t, s] = e;
                                if (!t) return "";
                                let i = "";
                                const o = [],
                                    n = t.map((e => e.id));
                                return s.forEach((e => {
                                    n.includes(e.id) || o.push(e.name)
                                })), t.forEach((e => {
                                    let t = "item";
                                    s.find((t => t.id === e.id)) && (t += " selected"), i += `<div class="${t}">${e.name} <em>${e.location||""}</em></div>`
                                })), o.length && (i += `<div class="extra-title">${o.length} unneeded ${1===o.length?"item":"items"} must be put back!</div>`, i += `<div class="item extra">${o.join(", ")}</div>`), i
                            }
                        }
                    },
                    onRender() {
                        this.stickit()
                    },
                    onAttach() {
                        this.checkForDemo()
                    },
                    onLeaveClick() {
                        this.triggerMethod("client:message", {
                            action: "leaveTask"
                        })
                    },
                    checkForDemo() {
                        this.demoKey && Te.app.storage.isSupported && !Te.app.storage.get(`datd:demos:${this.demoKey}`) && (this.model.setUpdate({
                            showDemo: !0
                        }), Te.app.storage.set(`datd:demos:${this.demoKey}`, !0))
                    }
                }),
                Me = p().View.extend({
                    tagName: "button",
                    className: "button item",
                    template: o().template(""),
                    events: {
                        click: "onClick"
                    },
                    bindings: {
                        ":el": {
                            observe: "name",
                            classes: {
                                back: "isBack",
                                selected: "selected"
                            },
                            attributes: [{
                                name: "style",
                                observe: ["bgColor", "textColor"],
                                onGet(e) {
                                    let [t, s] = e, i = "";
                                    return t && (i += `background-color: #${t};`), s && (i += `color: #${s};`), i
                                }
                            }]
                        }
                    },
                    onRender() {
                        this.stickit()
                    },
                    onClick() {
                        this.triggerMethod("button:select", this.model)
                    }
                }),
                Ce = p().CollectionView.extend({
                    tagName: "div",
                    className: "items",
                    childView: Me
                }),
                De = g.S.extend({
                    selectedContainer() {
                        const e = this.get("selected");
                        return e ? this.get("containers").find((t => t.id === e)) : null
                    }
                }),
                Fe = p().View.extend({
                    className: "mechanic gather participant",
                    template: o().template('<div class="scrollable"> <div class="clamp"> <div class="room"></div> <div class="wrapper"> <div class="containers-region"></div> <div class="contents-region"></div> </div> </div> </div> <div class="location"></div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p> '),
                    model: new De,
                    demoKey: "gather-participant",
                    containersView: null,
                    contentsView: null,
                    regions: {
                        containers: ".containers-region",
                        contents: ".contents-region"
                    },
                    events: {
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ":el": {
                            classes: {
                                "at-root": "atRoot"
                            }
                        },
                        ".instructions": {
                            observe: "name",
                            onGet: e => `Gather items for ${e}`
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".room": {
                            observe: ["locationName", "captain"],
                            updateMethod: "html",
                            onGet(e) {
                                let [t, s] = e;
                                return s ? `Ask <span class="player-name ${s.avatar}">${s.name}</span> what you need to gather from ${t}` : ""
                            }
                        },
                        ".location": {
                            observe: "selected",
                            onGet() {
                                const e = this.model.selectedContainer();
                                return e ? e.name : ""
                            }
                        },
                        ".leave": {
                            classes: {
                                back: {
                                    observe: "atRoot",
                                    onGet: e => !e
                                }
                            }
                        }
                    },
                    initialize() {
                        this.model.set({
                            selected: null,
                            atRoot: !0
                        }), this.containersView = new Ce({
                            collection: new(l().Collection)
                        }), this.contentsView = new Ce({
                            collection: new(l().Collection)
                        }), this.listenTo(this.model, "change", this.update, this)
                    },
                    update() {
                        const e = this.model.get("containers"),
                            t = e.map((e => ({
                                id: e.id,
                                name: e.name,
                                bgColor: e.bgColor,
                                textColor: e.textColor
                            })));
                        this.containersView.collection.set(t);
                        const s = this.model.get("selected");
                        if (!s) return;
                        const i = e.find((e => e.id === s));
                        if (!i) return;
                        const o = this.model.get("gatheredItemIds").map((e => e.id)),
                            n = i.contents.map((e => ({
                                id: e.id,
                                name: e.name,
                                bgColor: e.bgColor,
                                textColor: e.textColor,
                                selected: o.includes(e.id)
                            })));
                        this.contentsView.collection.set(n)
                    },
                    onRender() {
                        this.showChildView("containers", this.containersView), this.showChildView("contents", this.contentsView), this.stickit()
                    },
                    onAttach() {
                        this.update(), this.checkForDemo()
                    },
                    onLeaveClick() {
                        this.model.get("atRoot") ? this.triggerMethod("client:message", {
                            action: "leaveTask"
                        }) : (this.$el.find(".scrollable").scrollTop(0), this.model.set({
                            selected: !1,
                            atRoot: !0
                        }), this.contentsView.collection.reset())
                    },
                    onChildviewChildviewButtonSelect(e) {
                        this.model.get("atRoot") ? this.model.set({
                            atRoot: !1,
                            selected: e.id
                        }) : (this.triggerMethod("client:message", {
                            action: "select",
                            itemId: e.id
                        }), e.set({
                            selected: !e.get("selected")
                        }))
                    },
                    checkForDemo() {
                        this.demoKey && Te.app.storage.isSupported && !Te.app.storage.get(`datd:demos:${this.demoKey}`) && (this.model.setUpdate({
                            showDemo: !0
                        }), Te.app.storage.set(`datd:demos:${this.demoKey}`, !0))
                    }
                });
            var ze, Le, Re, Ie = s(7310),
                Oe = s(11930),
                Be = s(76056);
            C.p8.registerPlugin(Be.u);
            class Ye {
                static getSelector(e) {
                    return "." === e[0] || "#" === e[0] ? e : `.e.${e}`
                }
                static elementsFromImages() {
                    for (var e = arguments.length, t = new Array(e), s = 0; s < e; s++) t[s] = arguments[s];
                    return t.map((e => "string" == typeof e ? {
                        class: e,
                        type: "img",
                        pos: [0, 0],
                        key: e
                    } : {
                        class: e[1] || e[0],
                        type: "img",
                        pos: e[2] || [0, 0],
                        key: e[0]
                    }))
                }
                static elementsFromSprite(e, t) {
                    return t.map((t => "string" == typeof t ? {
                        class: t,
                        type: "sprite",
                        pos: [0, 0, !0],
                        image: t,
                        sprite: e
                    } : {
                        class: t[1] || t[0],
                        type: "sprite",
                        pos: t[2] || [0, 0, !0],
                        image: t[0],
                        sprite: e
                    }))
                }
                static startHoldShake(e, t, s) {
                    e = Ye.getSelector(e), C.p8.to(e, {
                        scale: "-=0.05",
                        duration: .25
                    }), Ye.startShake(e, t, s)
                }
                static stopHoldShake(e) {
                    e = Ye.getSelector(e), C.p8.to(e, {
                        scale: "+=0.05",
                        duration: .25
                    }), Ye.stopShake(e)
                }
                static startShake(e, t, s, i) {
                    e = Ye.getSelector(e);
                    const o = t || 2,
                        n = s || 0,
                        a = i || 1;
                    C.p8.timeline({
                        ease: "linear",
                        repeat: -1,
                        yoyo: !0,
                        transformOrigin: "50% 50%"
                    }).timeScale(a).to(e, {
                        x: `+=${o}`,
                        y: `+=${o}`,
                        rotate: `+=${n}`,
                        duration: .1
                    }).to(e, {
                        x: `-=${o}`,
                        y: `+=${o}`,
                        rotate: `-=${n}`,
                        duration: .1
                    }).to(e, {
                        x: `+=${o}`,
                        y: `-=${o}`,
                        rotate: `-=${n}`,
                        duration: .1
                    }).to(e, {
                        x: `-=${o}`,
                        y: `-=${o}`,
                        rotate: `+=${n}`,
                        duration: .1
                    }).to(e, {
                        x: `-=${o}`,
                        y: `+=${o}`,
                        rotate: `+=${n}`,
                        duration: .1
                    }).to(e, {
                        x: `+=${o}`,
                        y: `-=${o}`,
                        rotate: `-=${n}`,
                        duration: .1
                    }).to(e, {
                        x: `-=${o}`,
                        y: `-=${o}`,
                        rotate: `-=${n}`,
                        duration: .1
                    }).to(e, {
                        x: `-=${o}`,
                        y: `+=${o}`,
                        rotate: `+=${n}`,
                        duration: .1
                    }).to(e, {
                        x: `+=${o}`,
                        y: `+=${o}`,
                        rotate: `+=${n}`,
                        duration: .1
                    })
                }
                static stopShake(e) {
                    e = Ye.getSelector(e), C.p8.killTweensOf(e, "x,y,rotation")
                }
                static addInfiniteWiggle(e) {
                    if ("string" == typeof e && (e = [e]), !e) return Be.u.create("xWiggle-s", {
                        wiggles: 40,
                        type: "random"
                    }), Be.u.create("yWiggle-s", {
                        wiggles: 40,
                        type: "random"
                    }), void C.p8.timeline({
                        repeat: -1
                    }).to(".scene-container", {
                        x: 10,
                        duration: 30,
                        ease: "xWiggle-s"
                    }).to(".scene-container", {
                        y: 10,
                        duration: 30,
                        ease: "yWiggle-s"
                    }, 0);
                    for (let t = 0; t < e.length; t++) {
                        Be.u.create(`xWiggle-${t}`, {
                            wiggles: 40,
                            type: "random"
                        }), Be.u.create(`yWiggle-${t}`, {
                            wiggles: 40,
                            type: "random"
                        });
                        const s = Ye.getSelector(e[t]);
                        C.p8.timeline({
                            repeat: -1
                        }).to(s, {
                            x: 10,
                            duration: 30,
                            ease: `xWiggle-${t}`
                        }).to(s, {
                            y: 10,
                            duration: 30,
                            ease: `yWiggle-${t}`
                        }, 0)
                    }
                }
                static scaleBounce(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .9,
                        s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : .25;
                    return e = Ye.getSelector(e), C.p8.timeline().to(e, {
                        scale: t,
                        duration: s
                    }).to(e, {
                        scale: 1,
                        duration: s
                    })
                }
                static squashTransition(e, t) {
                    let s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1,
                        i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;
                    const o = Ye.getSelector(e),
                        n = Ye.getSelector(t),
                        a = [o, n];
                    return C.p8.timeline().to(a, {
                        scaleY: 1.2,
                        duration: .5 * s
                    }).to(a, {
                        scaleX: 1.2,
                        scaleY: .8,
                        duration: .25 * s
                    }).set(o, {
                        hidden: !0
                    }).set(n, {
                        hidden: !1
                    }).to(n, {
                        scale: i,
                        duration: .25 * s
                    })
                }
                static squashOnce(e) {
                    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .15,
                        s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "x";
                    return e = Ye.getSelector(e), C.p8.timeline().to(e, {
                        scaleX: "x" === s ? 1 : 1.2,
                        scaleY: "x" === s ? 1.2 : 1,
                        duration: .33 * t
                    }).to(e, {
                        scaleX: "x" === s ? 1.2 : .8,
                        scaleY: "x" === s ? .8 : 1.2,
                        duration: .33 * t
                    }).to(e, {
                        scaleX: 1,
                        scaleY: 1,
                        duration: .33 * t
                    })
                }
                static fallOut(e, t) {
                    e = Ye.getSelector(e);
                    const s = C.p8.timeline().to(e, {
                            y: "-=300",
                            duration: .95 * t,
                            ease: "power2.out"
                        }).to(e, {
                            y: "+=1000",
                            duration: .05 * t,
                            ease: "power3.in"
                        }).set(e, {
                            visibility: "hidden"
                        }),
                        i = C.p8.timeline().to(e, {
                            scaleY: .8,
                            duration: .95 * t,
                            ease: "power2.out"
                        }).to(e, {
                            scaleY: 2,
                            duration: .05 * t,
                            ease: "power3.in"
                        }),
                        o = C.p8.timeline();
                    return o.add(s), o.add(i, 0), o
                }
                static fadeAway(e) {
                    let {
                        y: t = -500,
                        duration: s = .5,
                        ease: i = "power2.in"
                    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    return e = Ye.getSelector(e), C.p8.timeline().to(e, {
                        y: t,
                        duration: s,
                        ease: i,
                        opacity: 0
                    })
                }
                static addParticleEmitter(e, t) {
                    let {
                        container: s = "scene-box",
                        className: i = "particle",
                        image: n = !1,
                        autoplay: a = !0,
                        numberOfParticles: r = 50,
                        restartOnProgress: l = !1,
                        zIndex: d = 1,
                        settings: p = {}
                    } = e;
                    const c = {
                        boundaries: {
                            left: 500,
                            right: 500,
                            top: 500,
                            bottom: 500
                        },
                        from: {
                            opacity: 1,
                            backgroundColor: n ? "" : "white",
                            borderRadius: n ? "" : "50%"
                        },
                        to: {
                            opacity: 0
                        },
                        angle: 0,
                        randomAngle: !0,
                        randomAngleRange: 0,
                        frequency: .1,
                        force: 1,
                        gravity: 9.8,
                        particleLimit: -1,
                        minSize: 20,
                        maxSize: 100,
                        fullThrottle: !1
                    };
                    p = o().extend({}, c, p), p.boundaries = o().extend({}, c.boundaries, p.boundaries), p.from = o().extend({}, c.from, p.from), p.to = o().extend({}, c.to, p.to);
                    const {
                        frequency: m,
                        particleLimit: h,
                        fullThrottle: u
                    } = p;
                    let g = 1;
                    (() => {
                        const e = document.getElementsByClassName(s);
                        if (!s || void 0 === e || e.length <= 0) return !1;
                        const t = document.createElement("div");
                        t.setAttribute("class", "particle-emitter"), e[0].appendChild(t);
                        const o = document.getElementsByClassName("particle-emitter");
                        let a;
                        n && (a = document.getElementsByClassName(n), a.length > 0 && (a[0].style.display = "none"));
                        const l = document.getElementsByClassName(i);
                        for (; l[0];) l[0].parentNode.removeChild(l[0]);
                        for (let e = 1; e < r; e++) {
                            let e;
                            n && a.length > 0 ? (e = document.createElement("img"), e.setAttribute("src", a[0].src)) : e = document.createElement("div"), e.setAttribute("class", i), e.style.zIndex = d, e.style.position = "absolute", e.style.display = "none", o[0].appendChild(e)
                        }
                    })();
                    const y = document.getElementsByClassName(i),
                        b = C.p8.timeline({
                            repeat: h > 0 ? h - 1 : h,
                            duration: m,
                            paused: !a,
                            overwrite: !0
                        }).call((e => {
                            let {
                                angle: t,
                                from: s,
                                to: i
                            } = p;
                            const {
                                boundaries: n,
                                force: a,
                                gravity: l,
                                randomAngle: d,
                                randomAngleRange: c,
                                minSize: m,
                                maxSize: h
                            } = p, u = o().random(m, h), y = e[g];
                            !t && d && (t = c > 0 ? o().random(-c, c) : o().random(0, 360));
                            const b = (t + 90) * (Math.PI / 180),
                                x = {
                                    x: o().random(n.left, n.right),
                                    y: o().random(n.top, n.bottom),
                                    height: u,
                                    width: u,
                                    display: "block",
                                    rotate: `${t}deg`
                                },
                                f = {
                                    overwrite: !0,
                                    duration: (-1.5 * Math.random() + 2.5).toFixed(2),
                                    physics2D: {
                                        angle: 180 * b / Math.PI,
                                        velocity: (100 + 250 * Math.random()) * a,
                                        gravity: 1e3 * l
                                    }
                                };
                            return s = o().extend({}, x, s), i = o().extend({}, f, i), g += 1, g >= r && (g = 1), y && (C.p8.set(y, s), C.p8.to(y, i)), y
                        }), [y], null);
                    return Ye.emitters.push(b), l && !t && console.warn("restartOnProgress will not work without a reference to a scene"), l && t && t.listenTo(t.model, "change:progress", ((e, t) => {
                        u ? t >= 100 ? b.pause() : b.play() : o().contains([25, 33, 50, 67, 75, 100], Math.round(t)) && o().throttle(b.invalidate().restart(), 500)
                    })), b
                }
            }

            function Ae(e, t, s, i, o, n, a) {
                try {
                    var r = e[n](a),
                        l = r.value
                } catch (e) {
                    return void s(e)
                }
                r.done ? t(l) : Promise.resolve(l).then(i, o)
            }
            Re = [], (Le = "emitters") in (ze = Ye) ? Object.defineProperty(ze, Le, {
                value: Re,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : ze[Le] = Re, C.p8.registerPlugin(Ie.t, Oe.y);
            const He = p().View.extend({
                    className: "scene-container",
                    debug: !1,
                    template: o().template('<div class="loading"></div>'),
                    timeline: null,
                    imageManifest: {},
                    sprites: [],
                    elements: [],
                    isLoaded: !1,
                    isLoading: !1,
                    stepDuration: 0,
                    lastStepDuration: null,
                    usesTimeline: !0,
                    shouldWiggle: !0,
                    isFullScreen: !1,
                    initialize() {
                        this.initGSAPEffects(), null === this.lastStepDuration && (this.lastStepDuration = this.stepDuration), this.listenTo(this.model, "change:progress", this.onProgressChange), this.load()
                    },
                    onBeforeDestroy() {
                        this.timeline && this.timeline.kill(), C.p8.killTweensOf("*"), C.p8.globalTimeline.timeScale(1), Ye.emitters.forEach((e => e.kill())), Ye.emitters = []
                    },
                    load() {
                        var e, t = this;
                        return (e = function*() {
                            if (t.isLoaded || t.isLoading) return;
                            t.isLoading = !0, "function" == typeof t.elements && (t.elements = t.elements()), t.imageManifest || (console.warn("imageManifest is not defined"), t.imageManifest = {});
                            const e = t.getImageElements(),
                                s = yield Promise.all(e.map((e => {
                                    if (!e.key) throw new Error(`No item with key of ${e.key} exists in imageManifest`);
                                    return t.imageManifest[e.key]
                                }))), i = {};
                            for (let e = 0; e < t.elements.length; e++) {
                                const o = t.elements[e];
                                if ("sprite" !== o.type)
                                    if ("img" !== o.type) {
                                        if ("container" === o.type) {
                                            const e = o.children;
                                            for (let o = 0; o < e.length; o++) "sprite" !== e[o].type ? "img" === e[o].type && (e[o].path = t.getImagePath(s)) : (i[e[o].sprite] || (i[e[o].sprite] = t.getImagePath(s)), e[o].path = i[e[o].sprite])
                                        }
                                    } else o.path = t.getImagePath(s);
                                else i[o.sprite] || (i[o.sprite] = t.getImagePath(s)), o.path = i[o.sprite]
                            }
                            t.isLoading = !1, t.isLoaded = !0, t.onLoad()
                        }, function() {
                            var t = this,
                                s = arguments;
                            return new Promise((function(i, o) {
                                var n = e.apply(t, s);

                                function a(e) {
                                    Ae(n, i, o, a, r, "next", e)
                                }

                                function r(e) {
                                    Ae(n, i, o, a, r, "throw", e)
                                }
                                a(void 0)
                            }))
                        })()
                    },
                    getImagePath(e) {
                        const t = e.shift();
                        return t && t.default ? t.default : ""
                    },
                    getImageElements() {
                        const e = [],
                            t = [];
                        for (let s = 0; s < this.elements.length; s++) {
                            const i = this.elements[s];
                            if ("sprite" !== i.type || t.includes(i.sprite))
                                if ("img" !== i.type) {
                                    if ("container" === i.type) {
                                        const s = i.children;
                                        for (let i = 0; i < s.length; i++) "sprite" !== s[i].type || t.includes(s[i].sprite) ? "img" === s[i].type && e.push(s[i]) : (s[i].key = s[i].sprite, e.push(this.sprites[s[i].sprite]), t.push(s[i].sprite))
                                    }
                                } else e.push(i);
                            else {
                                if (!this.sprites) throw new Error("No sprites object defined");
                                if (!this.sprites[i.sprite]) throw new Error(`No sprite exists with key ${i.sprite}`);
                                i.key = i.sprite, e.push(this.sprites[i.sprite]), t.push(i.sprite)
                            }
                        }
                        return e
                    },
                    renderElements() {
                        if (!this.isLoaded) throw new Error("Scene not loaded");
                        let e = "";
                        for (let t = 0; t < this.elements.length; t++) {
                            const s = this.elements[t];
                            s.pos || (s.pos = [0, 0]), "img" !== s.type ? "sprite" !== s.type ? "div" !== s.type ? "container" !== s.type ? console.warn(`Unknown element type ${s.type}`) : e += this.getContainerHTML(s) : e += this.getDivHTML(s) : e += this.getSpriteHTML(s) : e += this.getImgHTML(s)
                        }
                        this.debug && (e += '<div class="debug"></div>'), this.$el.html(e), this.shouldWiggle && Ye.addInfiniteWiggle()
                    },
                    getImgHTML: e => `<img class="e ${e.class}" style="top: ${e.pos[0]}px; left: ${e.pos[1]}px;" src="${e.path}" alt="element" />\n`,
                    getSpriteHTML(e) {
                        const t = this.sprites[e.sprite];
                        if (!t) throw new Error(`Sprite with name ${e.sprite} does not exist`);
                        return t.grid ? this.getGridSpriteHTML(e, t) : this.getPackedSpriteHTML(e, t)
                    },
                    getGridSpriteHTML(e, t) {
                        const s = t.images[e.image],
                            i = `top: ${e.pos[0]}px`,
                            o = `left: ${e.pos[1]}px`,
                            n = `width: ${t.size[0]/t.grid[0]}px`,
                            a = `height: ${t.size[1]/t.grid[1]}px`,
                            r = `background-image: url(${e.path})`,
                            l = `background-position: ${1===t.grid[0]?0:s[0]/(t.grid[0]-1)*100}% ${1===t.grid[1]?0:s[1]/(t.grid[1]-1)*100}%`;
                        return `<div class="e e-sprite ${e.class}" style="${i}; ${o}; ${n}; ${a}; ${r}; ${l};"></div>`
                    },
                    getPackedSpriteHTML(e, t) {
                        const s = t.images[e.image];
                        if (!s) throw new Error(`Unknown Sprite Key: sprite ${t} has no image named ${e.image}`);
                        const i = e.pos[2] && void 0 !== s[4] ? `top: ${s[4]}px` : `top: ${e.pos[0]}px`,
                            o = e.pos[2] && void 0 !== s[5] ? `left: ${s[5]}px` : `left: ${e.pos[1]}px`,
                            n = `width: ${s[2]}px`,
                            a = `height: ${s[3]}px`,
                            r = `background-image: url(${e.path})`,
                            l = `background-position: -${s[0]}px -${s[1]}px`;
                        return `<div class="e e-sprite ${e.class}" style="${i}; ${o}; ${n}; ${a}; ${r}; ${l};"></div>`
                    },
                    getDivHTML: e => `<div class="e ${e.class}" style="top: ${e.pos[0]}px; left: ${e.pos[1]}px;">${e.html||""}</div>\n`,
                    getContainerHTML(e) {
                        const t = e.children;
                        let s = `<div class="e e-container ${e.class}" style="top: ${e.pos[0]}px; left: ${e.pos[1]}px; width: 1000px; height: 1000px;">\n`;
                        for (let e = 0; e < t.length; e++) {
                            const i = t[e];
                            i.pos || (i.pos = [0, 0]), "img" !== i.type ? "sprite" !== i.type ? "div" !== i.type ? "container" !== i.type ? console.warn(`Unknown element type ${i.type}`) : console.warn("Nested containers are not supported") : s += this.getDivHTML(i) : s += this.getSpriteHTML(i) : s += this.getImgHTML(i)
                        }
                        return s += "</div>\n", s
                    },
                    initGSAPEffects() {
                        C.p8.registerEffect({
                            name: "fillTime",
                            effect: e => C.p8.to(".scene-container", {
                                visibility: !0,
                                duration: e[0]
                            }),
                            extendTimeline: !0
                        }), C.p8.registerEffect({
                            name: "swapHidden",
                            effect: e => C.p8.timeline().set(e[1], {
                                visibility: "visible"
                            }).set(e[0], {
                                visibility: "hidden"
                            }),
                            extendTimeline: !0
                        })
                    },
                    onLoad() {
                        this.renderElements(), this.stickit(), this.usesTimeline && (this.initializeRootTimeline(), this.initializeTimeline(), this.debug && this.initializeDebug()), this.onLoadComplete()
                    },
                    onProgressChange(e, t) {
                        if (!this.timeline) return;
                        const s = t / 100;
                        this.stepDuration ? C.p8.to(this.timeline, {
                            progress: s,
                            duration: this.stepDuration
                        }) : this.timeline.progress(s)
                    },
                    onLoadComplete() {},
                    onStartProgress() {},
                    onProgress() {},
                    onStopProgress() {},
                    onDiscreteProgress() {},
                    onMistake() {},
                    initializeRootTimeline() {
                        this.timeline = C.p8.timeline({
                            paused: !0,
                            ease: "none"
                        }), this.timeline.name = "root"
                    },
                    initializeTimeline() {},
                    initializeDebug() {
                        this.logTimelineDetails(), this.timeline.eventCallback("onUpdate", this.onTimelineUpdate.bind(this)), this.onTimelineUpdate()
                    },
                    logTimelineDetails() {
                        const e = this.timeline.getChildren(!1, !1, !0);
                        console.group(this.timeline.name, this.timeline), console.log("startTime", this.timeline.startTime()), console.log("endTime", this.timeline.endTime()), console.log("totalDuration", this.timeline.totalDuration()), e.forEach((e => {
                            console.group(e.name, e), console.log("startTime", e.startTime()), console.log("endTime", e.endTime()), console.log("totalDuration", e.totalDuration()), console.groupEnd()
                        })), console.groupEnd()
                    },
                    onTimelineUpdate() {
                        const e = this.timeline.getChildren(!1, !1, !0);
                        let t = `\n            <table>\n                <thead>\n                    <tr>\n                        <th>name</th>\n                        <th>start</th>\n                        <th>end</th>\n                        <th>duration</th>\n                        <th>time</th>\n                        <th>progress</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>${this.timeline.name}</td>\n                        <td>${this.timeline.startTime().toFixed(2)}</td>\n                        <td>${this.timeline.endTime().toFixed(2)}</td>\n                        <td>${this.timeline.totalDuration()}</td>\n                        <td>${this.timeline.time().toFixed(2)}</td>\n                        <td>${this.timeline.progress().toFixed(2)}</td>\n                    </tr>\n        `;
                        e.forEach((e => {
                            t += `\n                <tr>\n                    <td>${e.name}</td>\n                    <td>${e.startTime().toFixed(2)}</td>\n                    <td>${e.endTime().toFixed(2)}</td>\n                    <td>${e.totalDuration()}</td>\n                    <td>${e.time().toFixed(2)}</td>\n                    <td>${e.progress().toFixed(2)}</td>\n                </tr>\n            `
                        })), t += "</tbody></table>", this.$el.find(".debug").html(t)
                    },
                    addParticleEmitter(e) {
                        Ye.addParticleEmitter(e, this)
                    }
                }),
                Ge = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 57844, 17)),
                        meal: Promise.resolve().then(s.t.bind(s, 80190, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                bowlFront: [10, 308, 396, 276, 486, 302],
                                spoon: [416, 10, 152, 482, 249, 424],
                                bowlBack: [10, 10, 396, 288, 474, 302]
                            }
                        }
                    }
                }),
                Ve = Ge.extend({
                    elements: Ye.elementsFromSprite("sprite", ["bowlBack", "spoon", "bowlFront"]),
                    onLoadComplete() {
                        C.p8.fromTo(".e.spoon", {
                            y: -300,
                            transformOrigin: "bottom center"
                        }, {
                            y: 0,
                            duration: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.spoon", {
                            x: 25,
                            rotate: 12,
                            ease: "power2.out"
                        }).to(".e.spoon", {
                            x: -25,
                            rotate: -12,
                            ease: "power2.inOut"
                        }).to(".e.spoon", {
                            x: 25,
                            rotate: 12,
                            ease: "power2.inOut"
                        }).to(".e.spoon", {
                            x: -25,
                            rotate: -12,
                            ease: "power2.inOut"
                        }).to(".e.spoon", {
                            x: 25,
                            rotate: 12,
                            ease: "power2.inOut"
                        }).to(".e.spoon", {
                            x: -25,
                            rotate: -12,
                            ease: "power2.in"
                        })
                    }
                }),
                Ee = Ge.extend({
                    elements: Ye.elementsFromImages("meal")
                }),
                qe = Ee,
                Ne = Ee,
                Xe = He.extend({
                    imageManifest: {
                        cake1: Promise.resolve().then(s.t.bind(s, 71039, 17)),
                        cake2: Promise.resolve().then(s.t.bind(s, 54908, 17)),
                        cake3: Promise.resolve().then(s.t.bind(s, 30002, 17))
                    }
                }),
                We = Xe.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("cake1", "cake2"),
                    onLoadComplete() {
                        C.p8.set(".e.cake2", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cake2", {
                            opacity: .5
                        }).to(".e.cake2", {
                            opacity: 1
                        })
                    }
                }),
                Ue = Xe.extend({
                    elements: Ye.elementsFromImages("cake2", "cake3"),
                    onLoadComplete() {
                        C.p8.set(".e.cake3", {
                            clipPath: "inset(100% 0 0 0)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cake3", {
                            clipPath: "inset(0% 0 0 0)"
                        })
                    }
                }),
                $e = Xe.extend({
                    elements: Ye.elementsFromImages("cake3")
                }),
                je = He.extend({
                    className: "channel-surf",
                    imageManifest: {
                        tv: Promise.resolve().then(s.t.bind(s, 77355, 17)),
                        tvRemote: Promise.resolve().then(s.t.bind(s, 73809, 17)),
                        tvStatic: Promise.resolve().then(s.t.bind(s, 11346, 17)),
                        tv0: Promise.resolve().then(s.t.bind(s, 8836, 17)),
                        tv1: Promise.resolve().then(s.t.bind(s, 31669, 17)),
                        tv2: Promise.resolve().then(s.t.bind(s, 17335, 17))
                    }
                }),
                Ke = je.extend({
                    usesTimeline: !1,
                    bindings: {
                        ":el": {
                            classes: {
                                waiting: "isWaiting"
                            }
                        }
                    },
                    elements: [{
                        class: "tv-container",
                        type: "container",
                        children: [{
                            class: "tv-static",
                            type: "img",
                            pos: [-70, 0],
                            key: "tvStatic"
                        }, {
                            class: "tv2",
                            type: "img",
                            pos: [-70, 0],
                            key: "tv2"
                        }, {
                            class: "tv1",
                            type: "img",
                            pos: [-70, 0],
                            key: "tv1"
                        }, {
                            class: "tv0",
                            type: "img",
                            pos: [-70, 0],
                            key: "tv0"
                        }, {
                            class: "tv",
                            type: "img",
                            pos: [-70, 0],
                            key: "tv"
                        }]
                    }, {
                        class: "tv-remote",
                        type: "img",
                        pos: [520, 380],
                        key: "tvRemote"
                    }],
                    onLoadComplete() {
                        this.hideChannels(), this.showChannel()
                    },
                    onDiscreteProgress() {
                        this.hideChannels(), this.showChannel(), C.p8.timeline().to(".e.tv-remote", {
                            scale: .9,
                            duration: .1
                        }).to(".e.tv-remote", {
                            scale: 1,
                            duration: .1
                        })
                    },
                    hideChannels() {
                        C.p8.set(".e.tv0", {
                            autoAlpha: 0
                        }), C.p8.set(".e.tv1", {
                            autoAlpha: 0
                        }), C.p8.set(".e.tv2", {
                            autoAlpha: 0
                        })
                    },
                    showChannel() {
                        const e = (0, i.random)(0, 2);
                        C.p8.set(`.e.tv${e}`, {
                            delay: .1,
                            autoAlpha: 1
                        })
                    }
                }),
                Ze = je.extend({
                    elements: [{
                        class: "tv-container",
                        type: "container",
                        children: [{
                            class: "tv0",
                            type: "img",
                            pos: [0, 0],
                            key: "tv0"
                        }, {
                            class: "tv",
                            type: "img",
                            pos: [0, 0],
                            key: "tv"
                        }]
                    }],
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.tv-container", {
                            scale: 1.3,
                            ease: "none"
                        });
                        e.name = "tv", this.timeline.add(e)
                    }
                }),
                Je = He.extend({
                    className: "change-batteries",
                    imageManifest: {
                        detector: Promise.resolve().then(s.t.bind(s, 35623, 17)),
                        battery: Promise.resolve().then(s.t.bind(s, 70378, 17)),
                        remote: Promise.resolve().then(s.t.bind(s, 73809, 17)),
                        tvBox: Promise.resolve().then(s.t.bind(s, 77355, 17)),
                        tvScreen: Promise.resolve().then(s.t.bind(s, 8836, 17))
                    }
                }),
                _e = Je.extend({
                    elements: [{
                        class: "detector",
                        type: "img",
                        pos: [0, 0],
                        key: "detector"
                    }],
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.detector", {
                            rotation: -180,
                            ease: "none"
                        });
                        e.name = "detector", this.timeline.add(e)
                    }
                }),
                Qe = Je.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "battery0",
                        type: "img",
                        pos: [-50, -60],
                        key: "battery"
                    }, {
                        class: "battery1",
                        type: "img",
                        pos: [50, 60],
                        key: "battery"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.battery0", {
                            scale: .95
                        });
                        const e = C.p8.timeline().to(".e.battery0", {
                            y: -200,
                            rotation: 50,
                            opacity: 0,
                            ease: "none"
                        }).to(".e.battery1", {
                            y: -200,
                            rotation: 50,
                            opacity: 0,
                            ease: "none"
                        });
                        e.name = "battery", this.timeline.add(e)
                    }
                }),
                et = Je.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "battery0",
                        type: "img",
                        pos: [-350, -180],
                        key: "battery"
                    }, {
                        class: "battery1",
                        type: "img",
                        pos: [-320, 160],
                        key: "battery"
                    }, {
                        class: "remote",
                        type: "img",
                        pos: [520, 380],
                        key: "remote"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.battery0", {
                            scale: .85,
                            rotation: 40
                        }), C.p8.set(".e.battery1", {
                            scale: .85,
                            rotation: -20
                        });
                        const e = C.p8.timeline().to(".e.battery0", {
                            y: 200,
                            scale: .6,
                            rotation: 90,
                            opacity: 0,
                            ease: "none"
                        }).to(".e.battery1", {
                            y: 200,
                            scale: .6,
                            rotation: -90,
                            opacity: 0,
                            ease: "none"
                        });
                        e.name = "battery", this.timeline.add(e)
                    }
                }),
                tt = Je.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "tv-blank",
                        type: "div",
                        pos: [330, 165],
                        html: ""
                    }, {
                        class: "tv-screen",
                        type: "img",
                        pos: [-100, 0],
                        key: "tvScreen"
                    }, {
                        class: "tv-box",
                        type: "img",
                        pos: [-100, 0],
                        key: "tvBox"
                    }, {
                        class: "remote",
                        type: "img",
                        pos: [520, 380],
                        key: "remote"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.tv-screen", {
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.tv-screen", {
                            opacity: 1,
                            ease: "none"
                        }, .25).to(".e.tv-screen", {
                            opacity: 1,
                            ease: "none"
                        }).to(".e.remote", {
                            scale: .9,
                            duration: .25,
                            ease: "none"
                        }, 0).to(".e.remote", {
                            scale: 1,
                            duration: .25,
                            ease: "none"
                        }, .25);
                        e.name = "tv-screen", this.timeline.add(e)
                    }
                }),
                st = He.extend({
                    imageManifest: {
                        fish: Promise.resolve().then(s.t.bind(s, 68561, 17)),
                        net: Promise.resolve().then(s.t.bind(s, 60486, 17)),
                        toiletBack: Promise.resolve().then(s.t.bind(s, 32880, 17)),
                        toiletFront: Promise.resolve().then(s.t.bind(s, 60567, 17))
                    }
                }),
                it = st.extend({
                    elements: [{
                        type: "img",
                        pos: [0, 50],
                        key: "net",
                        class: "net"
                    }, {
                        type: "img",
                        pos: [50, -150],
                        key: "fish",
                        class: "fish"
                    }],
                    stepDuration: .75,
                    initializeTimeline() {
                        C.p8.set(".e.fish", {
                            scale: .4,
                            rotate: -1
                        }), this.timeline.to(".e.net", {
                            rotate: 10,
                            x: 0,
                            y: -350,
                            yoyo: !0,
                            repeat: 1
                        }), this.timeline.to(".e.fish", {
                            rotate: -80,
                            yoyo: !0,
                            repeat: 1
                        }, "<"), this.timeline.to(".e.net", {
                            rotate: 10,
                            x: -100,
                            y: -300,
                            yoyo: !0,
                            repeat: 1
                        }), this.timeline.to(".e.fish", {
                            rotate: 80,
                            yoyo: !0,
                            repeat: 1
                        }, "<"), this.timeline.to(".e.net", {
                            rotate: 10,
                            x: 100,
                            y: -350,
                            yoyo: !0,
                            repeat: 1
                        }), this.timeline.to(".e.fish", {
                            rotate: -80,
                            yoyo: !0,
                            repeat: 1
                        }, "<"), this.timeline.to(".e.net", {
                            rotate: 10,
                            x: -50,
                            y: -400,
                            yoyo: !0,
                            repeat: 1
                        }), this.timeline.to(".e.fish", {
                            rotate: 80,
                            yoyo: !0,
                            repeat: 1
                        }, "<"), this.timeline.to(".e.net", {
                            rotate: 10,
                            x: 20,
                            y: -250,
                            yoyo: !0,
                            repeat: 1
                        }), this.timeline.to(".e.fish", {
                            scale: .2,
                            opacity: 0
                        }, "<")
                    }
                }),
                ot = st.extend({
                    elements: [{
                        type: "img",
                        pos: [0, 50],
                        key: "net",
                        class: "net"
                    }],
                    stepDuration: 5,
                    initializeTimeline() {
                        C.p8.set(".e.net", {
                            x: 0
                        }), this.timeline.to(".e.net", {
                            x: -1500,
                            duration: 5,
                            ease: "none"
                        }), this.timeline.to(".e.net", {
                            y: 40,
                            yoyo: !0,
                            repeat: 10
                        }, "<")
                    }
                }),
                nt = st.extend({
                    elements: [{
                        type: "img",
                        pos: [0, -150],
                        key: "toiletBack"
                    }, {
                        type: "img",
                        pos: [0, 0],
                        key: "fish",
                        class: "fish"
                    }, {
                        type: "img",
                        pos: [0, -150],
                        key: "toiletFront"
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        this.timeline.fromTo(".e.fish", {
                            x: 800,
                            scale: 1,
                            rotate: 0
                        }, {
                            x: -100,
                            scale: .2,
                            rotate: 820,
                            duration: 2
                        }), this.timeline.fromTo(".e.fish", {
                            y: -400
                        }, {
                            y: 100,
                            ease: "power1.in",
                            duration: 1.5
                        }, "<")
                    }
                }),
                at = st.extend({
                    elements: [{
                        type: "img",
                        pos: [0, -150],
                        key: "toiletBack"
                    }, {
                        type: "img",
                        pos: [0, -150],
                        key: "toiletFront"
                    }]
                }),
                rt = st.extend({
                    elements: [{
                        type: "img",
                        pos: [0, 0],
                        key: "fish",
                        class: "fish"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.fish", {
                            x: -150
                        }), this.timeline.to(".e.fish", {
                            motionPath: {
                                path: "M -150, 0\n                a 150,150 0 1,0 300,0\n                a 150,150 0 1,0 -300,0z"
                            },
                            repeat: 2,
                            ease: "none",
                            duration: 2.5
                        }), this.timeline.to(".e.fish", {
                            scale: .2,
                            rotate: 540,
                            duration: 5
                        }, 0), this.timeline.to(".e.fish", {
                            opacity: 0,
                            duration: 1
                        }, 4)
                    }
                }),
                lt = He.extend({
                    stepDuration: .5,
                    elements() {
                        return [{
                            class: "items-container",
                            type: "container",
                            children: Object.keys(this.imageManifest).map(((e, t) => ({
                                class: `item-${t}`,
                                type: "img",
                                pos: [500, 500],
                                key: e
                            })))
                        }]
                    },
                    onLoadComplete() {
                        Object.keys(this.imageManifest).forEach(((e, t) => {
                            C.p8.set(`.e.item-${t}`, {
                                x: `-${(0,i.random)(20,80)}%`,
                                y: `-${(0,i.random)(20,80)}%`,
                                rotate: (0, i.random)(-75, 75)
                            })
                        }))
                    },
                    onDiscreteProgress() {
                        const e = this.model.get("tapsRequired"),
                            t = this.model.get("tapsLeft"),
                            s = e / t * 360 * (Math.PI / 180);
                        C.p8.to(".e.item-" + (t - 1), {
                            opacity: 0,
                            top: `+=${500*Math.cos(s)}px`,
                            left: `+=${500*Math.sin(s)}px`,
                            rotate: (0, i.random)(-180, 180)
                        })
                    }
                }),
                dt = He.extend({
                    stepDuration: .5,
                    elements() {
                        return [{
                            class: "items-container",
                            type: "container",
                            children: Object.keys(this.imageManifest).map(((e, t) => ({
                                class: `item-${t}`,
                                type: "img",
                                pos: [0, 0],
                                key: e
                            })))
                        }]
                    },
                    onDiscreteProgress(e, t, s) {
                        const i = this.model.get("completedSwipes");
                        C.p8.to(".e.item-" + (i - 1), {
                            opacity: 0,
                            x: 500 * Math.cos(s.radians),
                            y: 500 * Math.sin(s.radians)
                        })
                    }
                });
            var pt = s(25317);
            const ct = He.extend({
                    elements() {
                        return [{
                            class: "image",
                            type: "img",
                            pos: [0, 0],
                            key: Object.keys(this.imageManifest)[0]
                        }]
                    },
                    initializeTimeline() {
                        const e = this.model.get("direction");
                        let t = this.model.get("rotationsInDeg");
                        "COUNTER" === e && (t = -t);
                        const s = C.p8.timeline().to(".e.image", {
                            rotation: t,
                            ease: pt.bJ.easeNone
                        });
                        s.name = "image", this.timeline.add(s)
                    }
                }),
                mt = lt.extend({
                    imageManifest: {
                        pants: Promise.resolve().then(s.t.bind(s, 57368, 17)),
                        hoodie: Promise.resolve().then(s.t.bind(s, 73325, 17)),
                        hat: Promise.resolve().then(s.t.bind(s, 9109, 17)),
                        socks: Promise.resolve().then(s.t.bind(s, 89796, 17)),
                        undies: Promise.resolve().then(s.t.bind(s, 24570, 17))
                    }
                }),
                ht = dt.extend({
                    imageManifest: {
                        apple: Promise.resolve().then(s.t.bind(s, 89745, 17)),
                        chips: Promise.resolve().then(s.t.bind(s, 86077, 17)),
                        cone: Promise.resolve().then(s.t.bind(s, 37404, 17)),
                        keys: Promise.resolve().then(s.t.bind(s, 73442, 17)),
                        paper: Promise.resolve().then(s.t.bind(s, 89806, 17)),
                        tape: Promise.resolve().then(s.t.bind(s, 57806, 17))
                    }
                }),
                ut = He.extend({
                    imageManifest: {
                        vacumm: Promise.resolve().then(s.t.bind(s, 73198, 17))
                    },
                    elements: [{
                        class: "vacumm",
                        type: "img",
                        pos: [0, 0],
                        key: "vacumm"
                    }],
                    initializeTimeline() {
                        const e = this.model.get("durationInMs"),
                            t = C.p8.timeline({
                                repeat: e / 1e3
                            }).to(".e.vacumm", {
                                x: -20
                            }).to(".e.vacumm", {
                                x: 20
                            });
                        t.name = "vacumm", this.timeline.add(t)
                    }
                }),
                gt = ct.extend({
                    imageManifest: {
                        cord: Promise.resolve().then(s.t.bind(s, 76269, 17))
                    }
                }),
                yt = He.extend({
                    imageManifest: {
                        ladder: Promise.resolve().then(s.t.bind(s, 29984, 17))
                    },
                    elements: [{
                        class: "ladder",
                        type: "img",
                        pos: [0, 0],
                        key: "ladder"
                    }]
                }),
                bt = yt.extend({
                    initializeTimeline() {
                        C.p8.set(".e.ladder", {
                            rotation: -80
                        });
                        const e = C.p8.timeline({
                            ease: pt.bJ.easeNone
                        }).to(".e.ladder", {
                            x: 1,
                            y: 1,
                            rotation: 0
                        });
                        e.name = "ladder", this.timeline.add(e)
                    }
                }),
                xt = yt.extend({
                    initializeTimeline() {
                        const e = this.model.get("durationInMs"),
                            t = C.p8.timeline({
                                ease: pt.bJ.easeNone,
                                repeat: e / 2e3
                            }).to(".e.ladder", {
                                x: 1,
                                y: 1,
                                rotation: 0
                            }).to(".e.ladder", {
                                x: -1,
                                y: -1,
                                rotation: -1
                            }).to(".e.ladder", {
                                x: -1,
                                y: 0,
                                rotation: 1
                            }).to(".e.ladder", {
                                x: 1,
                                y: 1,
                                rotation: 0
                            }).to(".e.ladder", {
                                x: 1,
                                y: -1,
                                rotation: -1
                            }).to(".e.ladder", {
                                x: -1,
                                y: 1,
                                rotation: 1
                            }).to(".e.ladder", {
                                x: -1,
                                y: 1,
                                rotation: 0
                            }).to(".e.ladder", {
                                x: 1,
                                y: 1,
                                rotation: -1
                            }).to(".e.ladder", {
                                x: 1,
                                y: -1,
                                rotation: 1
                            }).to(".e.ladder", {
                                x: 1,
                                y: 1,
                                rotation: 0
                            }).to(".e.ladder", {
                                x: 1,
                                y: 1,
                                rotation: -1
                            });
                        t.name = "ladder", this.timeline.add(t)
                    }
                }),
                ft = He.extend({
                    leafCount: 30,
                    leafBatchSize: 10,
                    leafClearedCount: 0,
                    imageManifest: {
                        ladder: Promise.resolve().then(s.t.bind(s, 29984, 17)),
                        leaf0: Promise.resolve().then(s.t.bind(s, 7226, 17)),
                        leaf1: Promise.resolve().then(s.t.bind(s, 45086, 17)),
                        leaf2: Promise.resolve().then(s.t.bind(s, 65799, 17)),
                        leaf3: Promise.resolve().then(s.t.bind(s, 54838, 17))
                    },
                    elements() {
                        const e = [{
                            class: "ladder",
                            type: "img",
                            pos: [0, 0],
                            key: "ladder"
                        }];
                        for (let t = 0; t < this.leafCount; t++) e.push({
                            class: `leaf-${t}`,
                            type: "img",
                            pos: [0, 1100],
                            key: `leaf${(0,i.random)(0,3)}`
                        });
                        return e
                    },
                    onLoadComplete() {
                        for (let e = 0; e < this.leafCount; e++) C.p8.set(`.e.leaf-${e}`, {
                            scale: (0, i.random)(70, 130) / 100,
                            rotation: (0, i.random)(-180, 180)
                        })
                    },
                    onDiscreteProgress() {
                        for (let e = 0; e < this.leafBatchSize; e++) C.p8.to(`.e.leaf-${this.leafClearedCount+e}`, {
                            x: (0, i.random)(-1100, -300),
                            ease: pt.Yp.easeOut,
                            duration: 1.5
                        }), C.p8.to(`.e.leaf-${this.leafClearedCount+e}`, {
                            top: 1e3,
                            rotation: (0, i.random)(-180, 180),
                            ease: pt.Lp.easeOut,
                            duration: (0, i.random)(3, 4)
                        });
                        this.leafClearedCount += this.leafBatchSize
                    }
                });
            var vt = s(76791);
            C.p8.registerPlugin(Ie.t, Be.u, vt.X);
            const kt = He.extend({
                    imageManifest: {
                        handRag: Promise.resolve().then(s.t.bind(s, 49195, 17)),
                        dish: Promise.resolve().then(s.t.bind(s, 81592, 17))
                    },
                    elements: [{
                        class: "dish",
                        type: "img",
                        pos: [-75, -75],
                        key: "dish"
                    }, {
                        class: "hand-rag",
                        type: "img",
                        pos: [150, 150],
                        key: "handRag"
                    }],
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.hand-rag", {
                            motionPath: {
                                path: "M-150,-50a150,150 0 1,0 300,0a150,150 0 1,0 -300,0"
                            },
                            ease: pt.bJ.easeNone
                        });
                        e.name = "hand", this.timeline.add(e)
                    }
                }),
                Pt = He.extend({
                    stepDuration: .5,
                    imageManifest: {
                        dish: Promise.resolve().then(s.t.bind(s, 81592, 17))
                    },
                    elements: [{
                        class: "dish0",
                        type: "img",
                        pos: [125, 0],
                        key: "dish"
                    }, {
                        class: "dish1",
                        type: "img",
                        pos: [125, 0],
                        key: "dish"
                    }, {
                        class: "dish2",
                        type: "img",
                        pos: [125, 0],
                        key: "dish"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.dish1", {
                            opacity: 0
                        }), C.p8.set(".e.dish2", {
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.dish0", {
                            x: -100,
                            y: -325,
                            scale: .65,
                            duration: 1
                        }).to(".e.dish1", {
                            opacity: 1,
                            delay: .75,
                            duration: .25
                        }, 0).to(".e.dish1", {
                            y: -325,
                            scale: .65,
                            duration: 1
                        }).to(".e.dish2", {
                            opacity: 1,
                            delay: .75,
                            duration: .25
                        }, 1).to(".e.dish2", {
                            x: 100,
                            y: -325,
                            scale: .65,
                            duration: 1
                        });
                        e.name = "dishes", this.timeline.add(e)
                    }
                }),
                wt = He.extend({
                    imageManifest: {
                        handSponge: Promise.resolve().then(s.t.bind(s, 54386, 17)),
                        dish: Promise.resolve().then(s.t.bind(s, 81592, 17)),
                        dirt0: Promise.resolve().then(s.t.bind(s, 63271, 17)),
                        dirt1: Promise.resolve().then(s.t.bind(s, 84010, 17))
                    },
                    elements: [{
                        class: "dish-container",
                        type: "container",
                        children: [{
                            class: "dish",
                            type: "img",
                            pos: [-75, -75],
                            key: "dish"
                        }, {
                            class: "dirt-0",
                            type: "img",
                            pos: [-75, -75],
                            key: "dirt0"
                        }, {
                            class: "dirt-1",
                            type: "img",
                            pos: [-75, -75],
                            key: "dirt1"
                        }]
                    }, {
                        class: "hand-sponge",
                        type: "img",
                        pos: [150, 150],
                        key: "handSponge"
                    }],
                    initializeTimeline() {
                        Be.u.create("handWiggleX", {
                            wiggles: 20,
                            type: "random"
                        }), Be.u.create("handWiggleY", {
                            wiggles: 20,
                            type: "random"
                        });
                        const e = C.p8.timeline().to(".e.hand-sponge", {
                            x: 40,
                            duration: 1,
                            ease: "handWiggleX"
                        }).to(".e.hand-sponge", {
                            y: 40,
                            duration: 1,
                            ease: "handWiggleY"
                        }, 0);
                        e.name = "hand", this.timeline.add(e), this.initializeDishes()
                    },
                    initializeDishes() {}
                }),
                Tt = wt.extend({
                    initializeDishes() {
                        const e = C.p8.timeline().to([".e.dirt-0", ".e.dirt-1"], {
                            opacity: 0,
                            duration: 1
                        });
                        e.name = "dirt0", this.timeline.add(e, 0)
                    }
                }),
                St = wt.extend({
                    initializeDishes() {
                        const e = C.p8.timeline().to(".e.dirt-0", {
                            opacity: 0,
                            duration: 1
                        });
                        e.name = "dirt0", this.timeline.add(e, 0);
                        const t = C.p8.timeline().to(".e.dirt-1", {
                            opacity: .8,
                            duration: 1
                        });
                        t.name = "dirt1", this.timeline.add(t, 0)
                    }
                }),
                Mt = wt.extend({
                    initializeDishes() {
                        C.p8.set(".e.dirt-0", {
                            opacity: 0
                        }), C.p8.set(".e.dirt-1", {
                            opacity: .8
                        });
                        const e = C.p8.timeline().to(".e.dirt-1", {
                            opacity: 0,
                            duration: 1
                        });
                        e.name = "dirt1", this.timeline.add(e, 0)
                    }
                }),
                Ct = wt.extend({
                    initializeDishes() {
                        const e = C.p8.timeline().to(".e.dirt-0", {
                            opacity: 0,
                            duration: 1
                        });
                        e.name = "dirt0", this.timeline.add(e, 0);
                        const t = C.p8.timeline().to(".e.dirt-1", {
                            opacity: .9,
                            duration: 1
                        });
                        t.name = "dirt1", this.timeline.add(t, 0)
                    }
                }),
                Dt = wt.extend({
                    initializeDishes() {
                        C.p8.set(".e.dirt-0", {
                            opacity: 0
                        }), C.p8.set(".e.dirt-1", {
                            opacity: .9
                        });
                        const e = C.p8.timeline().to(".e.dirt-1", {
                            opacity: .7,
                            duration: 1
                        });
                        e.name = "dirt1", this.timeline.add(e, 0)
                    }
                }),
                Ft = wt.extend({
                    initializeDishes() {
                        C.p8.set(".e.dirt-0", {
                            opacity: 0
                        }), C.p8.set(".e.dirt-1", {
                            opacity: .7
                        });
                        const e = C.p8.timeline().to(".e.dirt-1", {
                            opacity: 0,
                            duration: 1
                        });
                        e.name = "dirt1", this.timeline.add(e, 0)
                    }
                }),
                zt = He.extend({
                    imageManifest: {
                        thermo0: Promise.resolve().then(s.t.bind(s, 91, 17)),
                        thermo1: Promise.resolve().then(s.t.bind(s, 97201, 17))
                    },
                    elements: [{
                        class: "thermo-container",
                        type: "container",
                        children: [{
                            class: "thermo-1",
                            type: "img",
                            pos: [152, 200],
                            key: "thermo1"
                        }, {
                            class: "thermo-0",
                            type: "img",
                            pos: [-60, 0],
                            key: "thermo0"
                        }]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.thermo-container", {
                            scale: .9
                        })
                    }
                }),
                Lt = zt.extend({
                    initializeTimeline() {
                        C.p8.set(".e.thermo-1", {
                            rotation: -100
                        });
                        const e = C.p8.timeline().to(".e.thermo-1", {
                            rotation: -70,
                            ease: pt.bJ.easeNone
                        });
                        e.name = "thermo", this.timeline.add(e)
                    }
                }),
                Rt = zt.extend({
                    initializeTimeline() {
                        C.p8.set(".e.thermo-1", {
                            rotation: -70
                        });
                        const e = C.p8.timeline().to(".e.thermo-1", {
                            rotation: 15,
                            ease: pt.bJ.easeNone
                        });
                        e.name = "thermo", this.timeline.add(e)
                    }
                }),
                It = zt.extend({
                    initializeTimeline() {
                        C.p8.set(".e.thermo-1", {
                            rotation: 15
                        });
                        const e = C.p8.timeline().to(".e.thermo-1", {
                            rotation: -115,
                            ease: pt.bJ.easeNone
                        });
                        e.name = "thermo", this.timeline.add(e)
                    }
                }),
                Ot = zt.extend({
                    initializeTimeline() {
                        C.p8.set(".e.thermo-1", {
                            rotation: -115
                        });
                        const e = C.p8.timeline().to(".e.thermo-1", {
                            rotation: 75,
                            ease: pt.bJ.easeNone
                        });
                        e.name = "thermo", this.timeline.add(e)
                    }
                }),
                Bt = He.extend({
                    stepDuration: .5,
                    imageManifest: {
                        toiletBack: Promise.resolve().then(s.t.bind(s, 32880, 17)),
                        plunger: Promise.resolve().then(s.t.bind(s, 58310, 17)),
                        toiletFront: Promise.resolve().then(s.t.bind(s, 60567, 17))
                    },
                    elements: [{
                        class: "toilet-container",
                        type: "container",
                        children: [{
                            class: "toilet-back",
                            type: "img",
                            pos: [30, -100],
                            key: "toiletBack"
                        }, {
                            class: "plunger",
                            type: "img",
                            pos: [0, 0],
                            key: "plunger"
                        }, {
                            class: "toilet-front",
                            type: "img",
                            pos: [30, -100],
                            key: "toiletFront"
                        }]
                    }]
                }),
                Yt = Bt.extend({
                    initializeTimeline() {
                        C.p8.set(".e.plunger", {
                            x: 555,
                            y: -100,
                            rotation: 0
                        });
                        const e = C.p8.timeline().to(".e.plunger", {
                            x: 312,
                            y: 172,
                            rotation: -20
                        }).to(".e.plunger", {
                            x: 325,
                            y: 80,
                            rotation: -20
                        });
                        e.name = "plunger", this.timeline.add(e)
                    }
                }),
                At = Bt.extend({
                    initializeTimeline() {
                        C.p8.set(".e.plunger", {
                            x: 325,
                            y: 80,
                            rotation: -20
                        });
                        const e = C.p8.timeline().to(".e.plunger", {
                            x: 312,
                            y: 172,
                            rotation: -20
                        }).to(".e.plunger", {
                            x: 335,
                            y: 40,
                            rotation: -20
                        }).to(".e.plunger", {
                            x: 312,
                            y: 172,
                            rotation: -20
                        }).to(".e.plunger", {
                            x: 335,
                            y: 40,
                            rotation: -20
                        });
                        e.name = "plunger", this.timeline.add(e)
                    }
                }),
                Ht = Bt.extend({
                    initializeTimeline() {
                        C.p8.set(".e.plunger", {
                            x: 335,
                            y: 40,
                            rotation: -20
                        });
                        const e = C.p8.timeline().to(".e.plunger", {
                            x: 312,
                            y: 172,
                            rotation: -20
                        }).to(".e.plunger", {
                            x: 345,
                            y: 0,
                            rotation: -20
                        }).to(".e.plunger", {
                            x: 312,
                            y: 172,
                            rotation: -20
                        }).to(".e.plunger", {
                            x: 345,
                            y: 0,
                            rotation: -20
                        }).to(".e.plunger", {
                            x: 312,
                            y: 172,
                            rotation: -20
                        }).to(".e.plunger", {
                            x: 555,
                            y: -100,
                            rotation: 0
                        });
                        e.name = "plunger", this.timeline.add(e)
                    }
                }),
                Gt = He.extend({
                    imageManifest: {
                        toy: Promise.resolve().then(s.t.bind(s, 601, 17)),
                        tie: Promise.resolve().then(s.t.bind(s, 45559, 17)),
                        hat: Promise.resolve().then(s.t.bind(s, 12849, 17)),
                        cord: Promise.resolve().then(s.t.bind(s, 62389, 17)),
                        board: Promise.resolve().then(s.t.bind(s, 42640, 17))
                    },
                    elements: [{
                        class: "find-container",
                        type: "container",
                        children: [{
                            class: "toy",
                            type: "img",
                            pos: [0, 0],
                            key: "toy"
                        }, {
                            class: "tie",
                            type: "img",
                            pos: [0, 0],
                            key: "tie"
                        }, {
                            class: "hat",
                            type: "img",
                            pos: [0, 0],
                            key: "hat"
                        }, {
                            class: "cord",
                            type: "img",
                            pos: [0, 0],
                            key: "cord"
                        }, {
                            class: "board",
                            type: "img",
                            pos: [0, 0],
                            key: "board"
                        }]
                    }]
                }),
                Vt = Gt.extend({
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.tie", {
                            opacity: 0,
                            x: 30
                        }), C.p8.set(".e.hat", {
                            opacity: 0,
                            x: -30
                        }), C.p8.set(".e.cord", {
                            opacity: 0,
                            y: 30
                        }), C.p8.set(".e.board", {
                            opacity: 0,
                            x: -30
                        });
                        const e = C.p8.timeline().to(".e.toy", {
                            opacity: 0,
                            x: -30,
                            duration: .5
                        });
                        e.name = "toy", this.timeline.add(e);
                        const t = C.p8.timeline().to(".e.tie", {
                            opacity: 1,
                            x: 0,
                            duration: .5
                        }).to(".e.tie", {
                            opacity: 0,
                            x: 30,
                            duration: .5
                        });
                        t.name = "tie", this.timeline.add(t, .5);
                        const s = C.p8.timeline().to(".e.hat", {
                            opacity: 1,
                            x: 0,
                            duration: .5
                        }).to(".e.hat", {
                            opacity: 0,
                            y: -30,
                            duration: .5
                        });
                        s.name = "hat", this.timeline.add(s, 1.5);
                        const i = C.p8.timeline().to(".e.cord", {
                            opacity: 1,
                            y: 0,
                            duration: .5
                        }).to(".e.cord", {
                            opacity: 0,
                            x: 30,
                            duration: .5
                        });
                        i.name = "cord", this.timeline.add(i, 2.5);
                        const o = C.p8.timeline().to(".e.board", {
                            opacity: 1,
                            x: 0,
                            duration: .5
                        });
                        o.name = "board", this.timeline.add(o, 3.5)
                    }
                }),
                Et = Gt.extend({
                    onLoadComplete() {
                        C.p8.set(".e.toy", {
                            visibility: "hidden"
                        }), C.p8.set(".e.tie", {
                            visibility: "hidden"
                        }), C.p8.set(".e.hat", {
                            visibility: "hidden"
                        }), C.p8.set(".e.cord", {
                            visibility: "hidden"
                        })
                    }
                }),
                qt = He.extend({
                    imageManifest: {
                        black: Promise.resolve().then(s.t.bind(s, 14019, 17)),
                        red: Promise.resolve().then(s.t.bind(s, 66159, 17))
                    },
                    elements: [{
                        class: "red-0",
                        type: "img",
                        pos: [500, 80],
                        key: "red"
                    }, {
                        class: "red-1",
                        type: "img",
                        pos: [500, 80],
                        key: "red"
                    }, {
                        class: "black-0",
                        type: "img",
                        pos: [500, 570],
                        key: "black"
                    }, {
                        class: "black-1",
                        type: "img",
                        pos: [500, 570],
                        key: "black"
                    }]
                }),
                Nt = qt.extend({
                    stepDuration: 2,
                    initializeTimeline() {
                        C.p8.set(".e.red-1", {
                            opacity: 0
                        }), C.p8.set(".e.black-0", {
                            opacity: 0
                        }), C.p8.set(".e.black-1", {
                            opacity: 0
                        });
                        const e = C.p8.timeline({
                            ease: pt.Lp.easeInOut
                        }).to(".e.red-0", {
                            x: 500,
                            scale: .8,
                            duration: 1
                        }).to(".e.red-0", {
                            y: -200,
                            rotation: -10,
                            duration: .5
                        }, 0).to(".e.red-0", {
                            y: 0,
                            rotation: 0,
                            duration: .5
                        }, .5).to(".e.red-0", {
                            opacity: 0,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 2).to(".e.black-0", {
                            opacity: 1,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 2).to(".e.black-0", {
                            x: -475,
                            scale: 1.1,
                            duration: 1
                        }, 3).to(".e.black-0", {
                            y: -200,
                            rotation: 10,
                            duration: .5
                        }, 3).to(".e.black-0", {
                            y: 50,
                            rotation: 0,
                            duration: .5
                        }, 3.5).set(".e.red-0", {
                            x: 0,
                            y: 0,
                            scale: 1
                        }, 5).to(".e.red-0", {
                            opacity: 1,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 5).to(".e.black-0", {
                            opacity: 0,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 5);
                        e.name = "jump1", this.timeline.add(e);
                        const t = C.p8.timeline({
                            ease: pt.Lp.easeInOut
                        }).to(".e.red-0", {
                            x: 475,
                            scale: 1.1,
                            duration: 1
                        }).to(".e.red-0", {
                            y: -200,
                            rotation: -10,
                            duration: .5
                        }, 0).to(".e.red-0", {
                            y: 0,
                            rotation: 0,
                            duration: .5
                        }, .5).set(".e.black-0", {
                            x: 0,
                            y: 0,
                            scale: 1
                        }, 2).to(".e.red-0", {
                            opacity: 0,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 2).to(".e.black-0", {
                            opacity: 1,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 2).to(".e.black-0", {
                            x: -500,
                            scale: .8,
                            duration: 1
                        }, 3).to(".e.black-0", {
                            y: -200,
                            rotation: 10,
                            duration: .5
                        }, 3).to(".e.black-0", {
                            y: 50,
                            rotation: 0,
                            duration: .5
                        }, 3.5).set(".e.red-0", {
                            x: 0,
                            y: 0,
                            scale: 1
                        }, 5).to(".e.red-0", {
                            opacity: 1,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 5).to(".e.black-0", {
                            opacity: 0,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 5);
                        t.name = "jump2", this.timeline.add(t);
                        const s = C.p8.timeline({
                            ease: pt.Lp.easeInOut
                        }).to(".e.red-0", {
                            x: 300,
                            scale: 1,
                            duration: 1
                        }).to(".e.red-0", {
                            y: -175,
                            rotation: -10,
                            duration: .5
                        }, 0).to(".e.red-0", {
                            y: 0,
                            rotation: 0,
                            duration: .5
                        }, .5).set(".e.black-0", {
                            x: 60,
                            y: -120
                        }, 2).to(".e.black-0", {
                            opacity: 1,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 2).to(".e.black-0", {
                            x: -450,
                            scale: 1.1,
                            duration: 1
                        }, 3).to(".e.black-0", {
                            y: -200,
                            rotation: 10,
                            duration: .5
                        }, 3).to(".e.black-0", {
                            y: 120,
                            rotation: 0,
                            duration: .5
                        }, 3.5).set(".e.red-1", {
                            x: 0,
                            y: 0
                        }, 5).to(".e.red-1", {
                            opacity: 1,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 5).to(".e.red-0", {
                            opacity: 0,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 5).to(".e.black-0", {
                            opacity: 0,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 5);
                        s.name = "jump3", this.timeline.add(s);
                        const i = C.p8.timeline({
                            ease: pt.Lp.easeInOut
                        }).to(".e.red-1", {
                            x: 500,
                            scale: .8,
                            duration: 1
                        }).to(".e.red-1", {
                            y: -200,
                            rotation: -10,
                            duration: .5
                        }, 0).to(".e.red-1", {
                            y: 0,
                            rotation: 0,
                            duration: .5
                        }, .5).set(".e.black-0", {
                            x: 0,
                            y: 0,
                            scale: 1
                        }, 2).to(".e.red-1", {
                            opacity: 0,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 2).to(".e.black-0", {
                            opacity: 1,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 2).to(".e.black-0", {
                            x: -520,
                            duration: 1
                        }, 3).to(".e.black-0", {
                            y: -200,
                            rotation: 10,
                            duration: .5
                        }, 3).to(".e.black-0", {
                            y: 0,
                            rotation: 0,
                            duration: .5
                        }, 3.5).set(".e.black-1", {
                            x: -510,
                            y: -150
                        }, 3).to(".e.black-1", {
                            y: -75,
                            opacity: 1,
                            duration: 1
                        }, 4).set(".e.red-1", {
                            x: 30,
                            y: -250,
                            scale: .7
                        }, 5).to(".e.red-1", {
                            opacity: 1,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 5);
                        i.name = "jump4", this.timeline.add(i);
                        const o = C.p8.timeline({
                            ease: pt.Lp.easeInOut
                        }).to(".e.red-1", {
                            x: 246,
                            scale: .9,
                            duration: 1
                        }).to(".e.red-1", {
                            y: -250,
                            rotation: -10,
                            duration: .5
                        }, 0).to(".e.red-1", {
                            y: -118,
                            rotation: 0,
                            duration: .5
                        }, .5).set(".e.red-0", {
                            x: 410,
                            y: 40,
                            scale: 1,
                            opacity: 0
                        }, 2).to(".e.red-0", {
                            opacity: 1,
                            duration: .25,
                            ease: pt.bJ.easeNone
                        }, 2).to(".e.black-0", {
                            x: 30,
                            scale: .8,
                            duration: 1
                        }, 3).to(".e.black-0", {
                            y: -220,
                            rotation: 10,
                            duration: .5
                        }, 3).to(".e.black-0", {
                            y: -170,
                            rotation: 0,
                            duration: .5
                        }, 3.5).to(".e.black-1", {
                            x: 28,
                            scale: .8,
                            duration: 1
                        }, 3).to(".e.black-1", {
                            y: -295,
                            rotation: 10,
                            duration: .5
                        }, 3).to(".e.black-1", {
                            y: -235,
                            rotation: 0,
                            duration: .5
                        }, 3.5).to(".e.black-0", {
                            x: -330,
                            scale: 1.1,
                            duration: 1
                        }, 4.25).to(".e.black-0", {
                            y: -250,
                            rotation: -10,
                            duration: .5
                        }, 4.25).to(".e.black-0", {
                            y: 110,
                            rotation: 0,
                            duration: .5
                        }, 4.75).to(".e.black-1", {
                            x: -326,
                            scale: 1.1,
                            duration: 1
                        }, 4.25).to(".e.black-1", {
                            y: -325,
                            rotation: -10,
                            duration: .5
                        }, 4.25).to(".e.black-1", {
                            y: 35,
                            rotation: 0,
                            duration: .5
                        }, 4.75);
                        o.name = "jump5", this.timeline.add(o)
                    }
                }),
                Xt = qt.extend({
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.red-0", {
                            x: 410,
                            y: 40
                        }), C.p8.set(".e.red-1", {
                            x: 246,
                            y: -118,
                            scale: .9
                        }), C.p8.set(".e.black-0", {
                            x: -330,
                            y: 110,
                            scale: 1.1
                        }), C.p8.set(".e.black-1", {
                            x: -326,
                            y: 35,
                            scale: 1.1
                        });
                        const e = C.p8.timeline({
                            ease: pt.Lp.easeOut
                        }).to(".e.red-0", {
                            x: 570,
                            y: -250,
                            rotation: -20,
                            opacity: 0
                        }, 0).to(".e.red-1", {
                            x: 146,
                            y: -480,
                            rotation: 60,
                            opacity: 0
                        }, 0).to(".e.black-0", {
                            x: -420,
                            y: -150,
                            rotation: 30,
                            opacity: 0
                        }, 0).to(".e.black-1", {
                            x: -95,
                            y: -400,
                            rotation: -50,
                            opacity: 0
                        }, 0);
                        e.name = "flip", this.timeline.add(e)
                    }
                }),
                Wt = He.extend({
                    imageManifest: {
                        bedMade: Promise.resolve().then(s.t.bind(s, 37850, 17)),
                        bedUmade: Promise.resolve().then(s.t.bind(s, 64190, 17)),
                        bedUmadeRight: Promise.resolve().then(s.t.bind(s, 26477, 17)),
                        bedUmadeLeft: Promise.resolve().then(s.t.bind(s, 42769, 17))
                    }
                }),
                Ut = Wt.extend({
                    elements: [{
                        class: "bed-container",
                        type: "container",
                        children: [{
                            class: "bedUmade",
                            type: "img",
                            pos: [0, -50],
                            key: "bedUmade"
                        }, {
                            class: "bedUmadeRight",
                            type: "img",
                            pos: [0, -50],
                            key: "bedUmadeRight"
                        }]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        C.p8.set(".e.bedUmadeRight", {
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.bedUmadeRight", {
                            opacity: 1,
                            ease: "power1.out"
                        }, 0).to(".bed-container", {
                            repeat: 1,
                            yoyo: !0,
                            rotate: -5,
                            ease: "linear",
                            duration: .1
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                $t = Wt.extend({
                    elements: [{
                        class: "bed-container",
                        type: "container",
                        children: [{
                            class: "bedUmadeRight",
                            type: "img",
                            pos: [0, -50],
                            key: "bedUmadeRight"
                        }, {
                            class: "bedUmadeLeft",
                            type: "img",
                            pos: [0, -50],
                            key: "bedUmadeLeft"
                        }]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        C.p8.set(".e.bedUmadeLeft", {
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.bedUmadeLeft", {
                            opacity: 1,
                            ease: "power1.out"
                        }, 0).to(".bed-container", {
                            repeat: 1,
                            yoyo: !0,
                            rotate: 5,
                            ease: "linear",
                            duration: .1
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                jt = Wt.extend({
                    elements: [{
                        class: "bed-container",
                        type: "container",
                        children: [{
                            class: "bedUmadeLeft",
                            type: "img",
                            pos: [0, -50],
                            key: "bedUmadeLeft"
                        }, {
                            class: "bedUmade",
                            type: "img",
                            pos: [0, -50],
                            key: "bedUmade"
                        }]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        C.p8.set(".e.bedUmade", {
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.bedUmade", {
                            opacity: 1,
                            ease: "power1.out"
                        }, 0).to(".bed-container", {
                            repeat: 1,
                            yoyo: !0,
                            rotate: -5,
                            ease: "linear",
                            duration: .1
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                Kt = Wt.extend({
                    elements: [{
                        class: "bed-container",
                        type: "container",
                        children: [{
                            class: "bedUmade",
                            type: "img",
                            pos: [0, -50],
                            key: "bedUmade"
                        }, {
                            class: "bedMade",
                            type: "img",
                            pos: [0, -50],
                            key: "bedMade"
                        }]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        C.p8.set(".e.bedMade", {
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.bedMade", {
                            opacity: 1,
                            ease: "power1.out"
                        }, 0).to(".e.bedUmade", {
                            opacity: 0,
                            ease: "power1.out"
                        }, 0).to(".bed-container", {
                            repeat: 1,
                            yoyo: !0,
                            y: -100,
                            ease: "power1.out",
                            duration: .1
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                Zt = He.extend({
                    imageManifest: {
                        junkDrawer: Promise.resolve().then(s.t.bind(s, 6612, 17)),
                        junkDrawerFull: Promise.resolve().then(s.t.bind(s, 31199, 17)),
                        clip: Promise.resolve().then(s.t.bind(s, 8397, 17)),
                        cord: Promise.resolve().then(s.t.bind(s, 81652, 17)),
                        cordTangled: Promise.resolve().then(s.t.bind(s, 55973, 17)),
                        dice: Promise.resolve().then(s.t.bind(s, 62815, 17)),
                        firework: Promise.resolve().then(s.t.bind(s, 56323, 17)),
                        lighter: Promise.resolve().then(s.t.bind(s, 73846, 17)),
                        measuringTape: Promise.resolve().then(s.t.bind(s, 96801, 17)),
                        outlet: Promise.resolve().then(s.t.bind(s, 321, 17)),
                        pencil: Promise.resolve().then(s.t.bind(s, 25451, 17)),
                        playingCard: Promise.resolve().then(s.t.bind(s, 51906, 17)),
                        scissors: Promise.resolve().then(s.t.bind(s, 36864, 17)),
                        bolt: Promise.resolve().then(s.t.bind(s, 86885, 17))
                    }
                }),
                Jt = Zt.extend({
                    elements: [{
                        class: "electronics-container",
                        type: "container",
                        children: [{
                            class: "junkDrawer",
                            type: "img",
                            pos: [-300, 0],
                            key: "junkDrawer"
                        }, {
                            class: "junkDrawerThing cordTangled",
                            type: "img",
                            pos: [-350, 0],
                            key: "cordTangled"
                        }, {
                            class: "junkDrawerThing",
                            type: "img",
                            pos: [-190, 104],
                            key: "clip"
                        }, {
                            class: "junkDrawerThing",
                            type: "img",
                            pos: [-184, 309],
                            key: "dice"
                        }, {
                            class: "junkDrawerThing",
                            type: "img",
                            pos: [-450, 330],
                            key: "firework"
                        }, {
                            class: "junkDrawerThing",
                            type: "img",
                            pos: [-400, 180],
                            key: "lighter"
                        }, {
                            class: "junkDrawerThing",
                            type: "img",
                            pos: [-227, -192],
                            key: "measuringTape"
                        }, {
                            class: "junkDrawerThing",
                            type: "img",
                            pos: [-600, 70],
                            key: "pencil"
                        }, {
                            class: "junkDrawerThing",
                            type: "img",
                            pos: [-510, -270],
                            key: "playingCard"
                        }, {
                            class: "junkDrawerThing",
                            type: "img",
                            pos: [-372, -30],
                            key: "scissors"
                        }]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        const e = C.p8.timeline();
                        C.p8.set(".e.junkDrawer", {
                            opacity: 0
                        }), C.p8.set(".e.junkDrawerThing", {
                            opacity: 0
                        }), C.p8.set(".e.cordTangled", {
                            scale: .7
                        }), e.to(".e.junkDrawer", {
                            y: "+=325",
                            ease: "elastic.inOut",
                            opacity: 1,
                            duration: 1
                        });
                        for (let t = 0; t < 10; t++) e.to(`.e.junkDrawerThing:nth-child(${t+1})`, {
                            y: "+=300",
                            opacity: 1,
                            ease: "back.out",
                            delay: .2
                        }, .2 + t / 50);
                        const t = C.p8.timeline();
                        for (let e = 2; e < 5; e++) t.to(`.e.junkDrawerThing:nth-child(${e+1})`, {
                            x: `-=${(0,i.random)(600,800)}`,
                            y: `+=${(0,i.random)(-400,400)}`,
                            opacity: 0,
                            ease: "power2.out"
                        }, .1 + e / 50);
                        this.timeline.add(t)
                    }
                }),
                _t = Zt.extend({
                    elements: [{
                        class: "electronics-container",
                        type: "container",
                        children: [{
                            class: "junkDrawer",
                            type: "img",
                            pos: [25, 0],
                            key: "junkDrawer"
                        }, {
                            class: "junkDrawerThing cordTangled",
                            type: "img",
                            pos: [-50, 0],
                            key: "cordTangled"
                        }, {
                            class: "junkDrawerThing",
                            type: "img",
                            pos: [-100, 180],
                            key: "lighter"
                        }, {
                            class: "junkDrawerThing",
                            type: "img",
                            pos: [73, -192],
                            key: "measuringTape"
                        }, {
                            class: "junkDrawerThing",
                            type: "img",
                            pos: [-300, 70],
                            key: "pencil"
                        }, {
                            class: "junkDrawerThing",
                            type: "img",
                            pos: [-210, -270],
                            key: "playingCard"
                        }, {
                            class: "junkDrawerThing",
                            type: "img",
                            pos: [-72, -30],
                            key: "scissors"
                        }]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        C.p8.set(".e.cordTangled", {
                            scale: .7
                        });
                        const e = C.p8.timeline();
                        for (let t = 2; t < 7; t++) e.to(`.e.junkDrawerThing:nth-child(${t+1})`, {
                            x: `+=${(0,i.random)(600,800)}`,
                            y: `+=${(0,i.random)(-500,500)}`,
                            opacity: 0,
                            ease: "power2.out"
                        }, .1 + t / 50);
                        this.timeline.add(e)
                    }
                }),
                Qt = Zt.extend({
                    elements: [{
                        class: "electronics-container",
                        type: "container",
                        children: [{
                            class: "cordTangled",
                            type: "img",
                            pos: [-7, 7],
                            key: "cordTangled"
                        }, {
                            class: "cord",
                            type: "img",
                            pos: [0, 0],
                            key: "cord"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.cord", {
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.cordTangled", {
                            rotate: 720,
                            ease: "linear"
                        }, 0).to(".e.cordTangled", {
                            opacity: 0
                        }, .8).to(".e.cord", {
                            opacity: 1
                        }, .6);
                        this.timeline.add(e);
                        const t = C.p8.timeline().to(".e.cord", {
                            opacity: 1,
                            scale: 1.5,
                            x: -700
                        }, .4);
                        this.timeline.add(t)
                    }
                }),
                es = Zt.extend({
                    elements: [{
                        class: "electronics-container",
                        type: "container",
                        children: [{
                            class: "outlet",
                            type: "img",
                            pos: [0, 0],
                            key: "outlet"
                        }, {
                            class: "cord",
                            type: "img",
                            pos: [0, 0],
                            key: "cord"
                        }, {
                            class: "bolt",
                            type: "img",
                            pos: [0, 0],
                            key: "bolt"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.cord", {
                            scale: 1.5,
                            x: -700
                        }), C.p8.set(".e.outlet", {
                            x: 400
                        }), C.p8.set(".e.bolt", {
                            display: "none"
                        });
                        const e = C.p8.timeline().to(".electronics-container", {
                            scale: 1.1,
                            onComplete: () => {
                                Ye.addParticleEmitter({
                                    container: "electronics-container",
                                    numberOfParticles: 60,
                                    image: "bolt",
                                    settings: {
                                        randomAngleRange: 360,
                                        minSize: 20,
                                        maxSize: 500,
                                        force: -6,
                                        gravity: 1,
                                        boundaries: {
                                            top: 250,
                                            bottom: 500,
                                            left: 250,
                                            right: 500
                                        }
                                    }
                                }, this), C.p8.timeline().to(".e.cord", {
                                    opacity: 0,
                                    scale: 2,
                                    ease: "elastic.inOut"
                                }, 0).to(".e.outlet", {
                                    opacity: 0,
                                    scale: 2,
                                    ease: "elastic.inOut"
                                }, 0)
                            },
                            duration: .5
                        }, 0).to(".e.cord", {
                            x: -324,
                            y: -119,
                            scale: 1
                        }, .1).to(".e.outlet", {
                            x: 100
                        }, .1);
                        this.timeline.add(e)
                    }
                }),
                ts = He.extend({
                    elements() {
                        return [{
                            class: "image",
                            type: "img",
                            pos: [0, 0],
                            key: Object.keys(this.imageManifest)[0]
                        }]
                    }
                }),
                ss = He.extend({
                    imageManifest: {
                        weed: Promise.resolve().then(s.t.bind(s, 35821, 17))
                    },
                    elements: [{
                        type: "img",
                        key: "weed",
                        class: "weed1",
                        pos: [0, -200]
                    }, {
                        type: "img",
                        key: "weed",
                        class: "weed2",
                        pos: [0, 200]
                    }],
                    stepDuration: .25,
                    initializeTimeline() {
                        C.p8.set(".weed1,.weed2", {
                            scale: .75
                        }), this.timeline.to(".weed1", {
                            y: -200,
                            opacity: 0
                        }), this.timeline.to(".weed2", {
                            y: -200,
                            opacity: 0
                        })
                    }
                }),
                is = ts.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 67591, 17))
                    }
                }),
                os = ss.extend({}),
                ns = ts.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 67591, 17))
                    }
                }),
                as = He.extend({
                    imageManifest: {
                        weed: Promise.resolve().then(s.t.bind(s, 91281, 17))
                    },
                    elements: [{
                        type: "img",
                        key: "weed",
                        class: "weed1",
                        pos: [0, -200]
                    }, {
                        type: "img",
                        key: "weed",
                        class: "weed3",
                        pos: [0, 200]
                    }, {
                        type: "img",
                        key: "weed",
                        class: "weed2",
                        pos: [0, 0]
                    }],
                    stepDuration: .25,
                    initializeTimeline() {
                        C.p8.set(".weed1,.weed2,.weed3", {
                            scale: .75
                        }), C.p8.set(".weed2", {
                            scale: .9,
                            scaleX: -1
                        }), this.timeline.to(".weed2", {
                            y: -200,
                            opacity: 0
                        }), this.timeline.to(".weed1", {
                            y: -200,
                            opacity: 0
                        }), this.timeline.to(".weed3", {
                            y: -200,
                            opacity: 0
                        })
                    }
                }),
                rs = He.extend({
                    imageManifest: {
                        plant: Promise.resolve().then(s.t.bind(s, 37567, 17)),
                        fly: Promise.resolve().then(s.t.bind(s, 46407, 17))
                    },
                    elements: [{
                        type: "div",
                        class: "water",
                        pos: [-500, -600],
                        html: ""
                    }, {
                        type: "img",
                        class: "plant",
                        pos: [300, 0],
                        key: "plant"
                    }],
                    particles: null,
                    onLoadComplete() {
                        this.particles = Ye.addParticleEmitter({
                            container: "water",
                            numberOfParticles: 30,
                            autoplay: !1,
                            restartOnProgress: !1,
                            zIndex: -1,
                            settings: {
                                frequency: .05,
                                from: {
                                    backgroundColor: "#0085FF",
                                    border: "3px solid black",
                                    opacity: 1,
                                    duration: .001
                                },
                                to: {
                                    duration: .36,
                                    opacity: 0,
                                    ease: "power2.in"
                                },
                                minSize: 30,
                                maxSize: 45,
                                angle: -90,
                                force: 6,
                                randomAngle: !1
                            }
                        }, this)
                    },
                    onStartProgress() {
                        this.particles && this.particles.restart()
                    },
                    onMistake() {
                        this.particles && this.particles.pause()
                    },
                    onProgress(e) {
                        this.particles && 100 === e && this.particles.kill()
                    }
                }),
                ls = He.extend({
                    imageManifest: {
                        plant: Promise.resolve().then(s.t.bind(s, 32758, 17)),
                        fly: Promise.resolve().then(s.t.bind(s, 46407, 17))
                    },
                    elements: [{
                        type: "img",
                        class: "plant",
                        pos: [100, 0],
                        key: "plant"
                    }, {
                        type: "img",
                        class: "fly",
                        pos: [0, 0],
                        key: "fly"
                    }, {
                        type: "img",
                        class: "fly2",
                        pos: [0, 0],
                        key: "fly"
                    }, {
                        type: "img",
                        class: "fly3",
                        pos: [0, 0],
                        key: "fly"
                    }],
                    initializeTimeline() {
                        C.p8.fromTo(".e.fly", {
                            x: -250
                        }, {
                            x: 250,
                            yoyo: !0,
                            repeat: -1,
                            ease: "sine.inOut",
                            duration: 1
                        }), C.p8.fromTo(".e.fly", {
                            y: -50
                        }, {
                            y: 50,
                            yoyo: !0,
                            repeat: -1,
                            ease: "sine.inOut",
                            duration: .75
                        }), C.p8.fromTo(".e.fly2", {
                            x: -250
                        }, {
                            x: 250,
                            yoyo: !0,
                            repeat: -1,
                            ease: "sine.inOut",
                            duration: 1
                        }).seek(.66), C.p8.fromTo(".e.fly2", {
                            y: -100
                        }, {
                            y: 100,
                            yoyo: !0,
                            repeat: -1,
                            ease: "sine.inOut",
                            duration: .55
                        }), C.p8.fromTo(".e.fly3", {
                            x: -350
                        }, {
                            x: 250,
                            yoyo: !0,
                            repeat: -1,
                            ease: "sine.inOut",
                            duration: 1
                        }).seek(.33), C.p8.fromTo(".e.fly3", {
                            y: 70
                        }, {
                            y: 170,
                            yoyo: !0,
                            repeat: -1,
                            ease: "sine.inOut",
                            duration: .6
                        })
                    }
                }),
                ds = ls.extend({
                    imageManifest: {
                        plant: Promise.resolve().then(s.t.bind(s, 32758, 17)),
                        fly: Promise.resolve().then(s.t.bind(s, 46407, 17)),
                        tear: Promise.resolve().then(s.t.bind(s, 2516, 17))
                    },
                    elements: [{
                        type: "img",
                        class: "plant",
                        pos: [100, 0],
                        key: "plant"
                    }, {
                        type: "img",
                        class: "fly",
                        pos: [0, 0],
                        key: "fly"
                    }, {
                        type: "img",
                        class: "fly2",
                        pos: [0, 0],
                        key: "fly"
                    }, {
                        type: "img",
                        class: "fly3",
                        pos: [0, 0],
                        key: "fly"
                    }, {
                        type: "img",
                        key: "tear",
                        class: "tear1",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "tear",
                        class: "tear2",
                        pos: [-50, -30]
                    }, {
                        type: "img",
                        key: "tear",
                        class: "tear3",
                        pos: [20, 40]
                    }],
                    stepDuration: 1,
                    onLoadComplete() {
                        this.timeline.fromTo(".e.tear1, .e.tear2, .e.tear3", {
                            y: -1200,
                            opacity: 1
                        }, {
                            y: 400,
                            opacity: 0,
                            ease: "power2.in",
                            stagger: .4,
                            duration: 2
                        })
                    }
                }),
                ps = He.extend({
                    imageManifest: {
                        herb1: Promise.resolve().then(s.t.bind(s, 18638, 17)),
                        herb2: Promise.resolve().then(s.t.bind(s, 90714, 17)),
                        herb3: Promise.resolve().then(s.t.bind(s, 15831, 17)),
                        herb4: Promise.resolve().then(s.t.bind(s, 30657, 17))
                    },
                    elements: [{
                        type: "container",
                        class: "herb",
                        children: [{
                            class: "herb1",
                            type: "img",
                            pos: [0, 0],
                            key: "herb1"
                        }, {
                            class: "herb2",
                            type: "img",
                            pos: [0, 0],
                            key: "herb2"
                        }, {
                            class: "herb3",
                            type: "img",
                            pos: [0, 0],
                            key: "herb3"
                        }, {
                            class: "herb4",
                            type: "img",
                            pos: [0, 0],
                            key: "herb4"
                        }]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        this.timeline.to(".e.herb1", {
                            rotate: 70,
                            x: -200,
                            y: -300
                        }), this.timeline.to(".e.herb2", {
                            rotate: -60,
                            x: -220,
                            y: -200
                        }, "<"), this.timeline.to(".e.herb3", {
                            rotate: 90,
                            x: -240,
                            y: 10
                        }, "<"), this.timeline.to(".e.herb4", {
                            rotate: -40,
                            x: -100,
                            y: 200
                        }, "<")
                    }
                }),
                cs = ps.extend({
                    initializeTimeline() {
                        this.timeline.to(".e.herb1", {
                            rotate: 70,
                            x: 300,
                            y: 300
                        }), this.timeline.to(".e.herb2", {
                            rotate: -60,
                            x: 320,
                            y: 200
                        }, "<"), this.timeline.to(".e.herb3", {
                            rotate: 90,
                            x: 340,
                            y: -10
                        }, "<"), this.timeline.to(".e.herb4", {
                            rotate: -40,
                            x: 200,
                            y: -200
                        }, "<")
                    }
                }),
                ms = He.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 6580, 17))
                    },
                    elements: [{
                        type: "img",
                        key: "image",
                        class: "image",
                        pos: [0, 0]
                    }],
                    initializeTimeline() {
                        C.p8.fromTo(".e.image", {
                            scale: 1.5,
                            x: -350
                        }, {
                            scale: 1.5,
                            x: 350,
                            yoyo: !0,
                            repeat: -1,
                            ease: "power2.inOut",
                            duration: 1.5
                        })
                    }
                }),
                hs = He.extend({
                    stepDuration: .5,
                    imageManifest: {
                        bagel: Promise.resolve().then(s.t.bind(s, 3425, 17)),
                        bagelSliced: Promise.resolve().then(s.t.bind(s, 87526, 17))
                    },
                    elements: Ye.elementsFromImages("bagel", "bagelSliced"),
                    onLoadComplete() {
                        C.p8.set(".e.bagelSliced", {
                            opacity: 0,
                            scale: .95
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.bagelSliced", {
                            opacity: 1,
                            scale: 1
                        }).to(".e.bagel", {
                            opacity: 0,
                            x: 50
                        }, 0);
                        e.name = "tl", this.timeline.add(e)
                    }
                }),
                us = He.extend({
                    imageManifest: {
                        toasterBack: Promise.resolve().then(s.t.bind(s, 33503, 17)),
                        toasterMid: Promise.resolve().then(s.t.bind(s, 34642, 17)),
                        toasterFront: Promise.resolve().then(s.t.bind(s, 92642, 17)),
                        bagel: Promise.resolve().then(s.t.bind(s, 2057, 17)),
                        buttons: Promise.resolve().then(s.t.bind(s, 81240, 17))
                    },
                    elements: Ye.elementsFromImages(["toasterBack", "toaster-back"], ["bagel", "bagel-back", [130, 445]], ["toasterMid", "toaster-mid"], ["bagel", "bagel-front", [190, 300]], ["toasterFront", "toaster-front"], ["buttons", "buttons", [385, 595]])
                }),
                gs = us.extend({
                    stepDuration: .35,
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.bagel-back", {
                            y: 110
                        }).to(".e.bagel-front", {
                            y: 110
                        }, 0).to(".e.buttons", {
                            x: 10,
                            y: 140
                        }, 0);
                        e.name = "tl", this.timeline.add(e)
                    }
                }),
                ys = us.extend({
                    hasPopped: !1,
                    initializeTimeline() {
                        C.p8.set(".e.bagel-back", {
                            y: 110
                        }), C.p8.set(".e.bagel-front", {
                            y: 110
                        }), C.p8.set(".e.buttons", {
                            x: 10,
                            y: 140
                        })
                    },
                    onProgress(e) {
                        if (e < 92 || this.hasPopped) return;
                        this.hasPopped = !0;
                        const t = Ie.t.create("custom", "M0,0,C0.418,1.562,0.674,2.22,1,1");
                        C.p8.to(".e.bagel-back", {
                            y: 0,
                            duration: .4,
                            ease: t
                        }), C.p8.to(".e.bagel-front", {
                            y: 0,
                            duration: .4,
                            ease: t
                        }), C.p8.to(".e.buttons", {
                            x: 0,
                            y: 0,
                            duration: .25
                        })
                    }
                }),
                bs = He.extend({
                    imageManifest: {
                        bagelSliced: Promise.resolve().then(s.t.bind(s, 87526, 17)),
                        bagelCheesed0: Promise.resolve().then(s.t.bind(s, 13675, 17)),
                        bagelCheesed1: Promise.resolve().then(s.t.bind(s, 72585, 17))
                    },
                    elements: Ye.elementsFromImages(["bagelSliced", "bagel-sliced"], ["bagelCheesed0", "bagel-cheesed-1"], ["bagelCheesed1", "bagel-cheesed-2"]),
                    onLoadComplete() {
                        C.p8.set(".e.bagel-cheesed-1", {
                            opacity: 0
                        }), C.p8.set(".e.bagel-cheesed-2", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.bagel-cheesed-1", {
                            opacity: 1
                        }).to(".e.bagel-cheesed-2", {
                            opacity: 1
                        });
                        e.name = "tl", this.timeline.add(e)
                    }
                }),
                xs = He.extend({
                    imageManifest: {
                        trash: Promise.resolve().then(s.t.bind(s, 36589, 17)),
                        bag: Promise.resolve().then(s.t.bind(s, 16802, 17)),
                        can1: Promise.resolve().then(s.t.bind(s, 88784, 17)),
                        can2: Promise.resolve().then(s.t.bind(s, 73424, 17)),
                        can3: Promise.resolve().then(s.t.bind(s, 88784, 17)),
                        bottle1: Promise.resolve().then(s.t.bind(s, 13971, 17)),
                        bottle2: Promise.resolve().then(s.t.bind(s, 10595, 17)),
                        bottle3: Promise.resolve().then(s.t.bind(s, 10595, 17)),
                        coin: Promise.resolve().then(s.t.bind(s, 43935, 17))
                    }
                }),
                fs = xs.extend({
                    elements: Ye.elementsFromImages("can3", "trash", "can1", "can2", "bottle1", "bottle2", "bottle3"),
                    initializeTimeline() {
                        C.p8.set(".e.can3", {
                            scaleX: 1,
                            y: -100,
                            x: -90
                        }), C.p8.set(".e.bottle3", {
                            x: -40,
                            y: -170,
                            scaleX: -1
                        }), this.timeline.to(".e.bottle1", {
                            y: -20,
                            opacity: 0
                        }), this.timeline.to(".e.bottle2", {
                            y: -20,
                            opacity: 0
                        }), this.timeline.to(".e.bottle3", {
                            y: -190,
                            opacity: 0
                        })
                    }
                }),
                vs = xs.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("can3", "trash", "can1", "can2"),
                    initializeTimeline() {
                        C.p8.set(".e.can3", {
                            scaleX: 1,
                            y: -100,
                            x: -90
                        }), this.timeline.to(".e.can1", {
                            y: -20,
                            opacity: 0
                        }), this.timeline.to(".e.can2", {
                            y: -20,
                            opacity: 0
                        }), this.timeline.to(".e.can3", {
                            y: -120,
                            opacity: 0
                        })
                    }
                }),
                ks = xs.extend({
                    elements: Ye.elementsFromImages("bag"),
                    initializeTimeline() {
                        this.timeline.to(".e.bag", {
                            scaleX: .8,
                            scaleY: 1.2
                        }), this.timeline.to(".e.bag", {
                            scaleX: 1.2,
                            scaleY: .8
                        }), this.timeline.to(".e.bag", {
                            scaleX: .8,
                            scaleY: 1.2
                        }), this.timeline.to(".e.bag", {
                            scaleX: 1.2,
                            scaleY: .9
                        }), this.timeline.to(".e.bag", {
                            rotate: -20,
                            x: 100
                        }), this.timeline.to(".e.bag", {
                            rotate: 30,
                            x: -850,
                            y: -300
                        })
                    }
                }),
                Ps = xs.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("coin", "coin"),
                    initializeTimeline() {
                        C.p8.set(".coin:first-child", {
                            x: -250
                        }), C.p8.set(".coin:last-child", {
                            x: 250,
                            y: 50
                        }), this.timeline.to(".e.coin", {
                            y: -20,
                            scale: 1.5,
                            rotateY: 90,
                            opacity: 0,
                            stagger: .5
                        })
                    }
                }),
                ws = He.extend({
                    imageManifest: {
                        cup: Promise.resolve().then(s.t.bind(s, 76626, 17)),
                        spider: Promise.resolve().then(s.t.bind(s, 83084, 17)),
                        floor: Promise.resolve().then(s.t.bind(s, 28423, 17))
                    }
                }),
                Ts = ws.extend({
                    elements: [{
                        class: "floor",
                        type: "img",
                        pos: [50, 0],
                        key: "floor"
                    }, {
                        class: "spider",
                        type: "img",
                        key: "spider"
                    }],
                    initializeTimeline() {
                        C.p8.set(".floor", {
                            scale: 1.8
                        }), C.p8.set(".spider", {
                            scale: 1.8
                        }), C.p8.to(".e.floor", {
                            x: 125,
                            y: 25,
                            scale: 2.5,
                            rotate: -2,
                            ease: "power2.in",
                            duration: 5
                        }), C.p8.to(".e.spider", {
                            x: 125,
                            y: 25,
                            scale: 2.5,
                            rotate: -2,
                            ease: "power2.in",
                            duration: 5
                        })
                    }
                }),
                Ss = ws.extend({
                    stepDuration: .1,
                    elements: [{
                        class: "floor",
                        type: "img",
                        key: "floor"
                    }, {
                        class: "spider",
                        type: "img",
                        key: "spider"
                    }, {
                        class: "cup",
                        type: "img",
                        key: "cup"
                    }],
                    onLoadComplete() {
                        C.p8.set(".cup", {
                            y: -250,
                            x: 100,
                            rotate: 25
                        }), C.p8.set(".floor", {
                            y: 200
                        }), C.p8.set(".spider", {
                            y: 150
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.to(".e.cup", {
                                repeat: -1,
                                yoyo: !0,
                                x: 50,
                                y: -150,
                                rotate: 0,
                                ease: "linear",
                                duration: 3
                            }),
                            t = C.p8.timeline().to(".e.cup", {
                                x: 0,
                                y: 100,
                                rotate: 0,
                                ease: "linear",
                                duration: .1,
                                onStart: () => {
                                    e.pause()
                                }
                            }, 0);
                        this.timeline.add(t)
                    }
                }),
                Ms = ws.extend({
                    elements: [{
                        class: "spider-container",
                        type: "container",
                        children: [{
                            class: "floor",
                            type: "img",
                            key: "floor"
                        }, {
                            class: "spider",
                            type: "img",
                            key: "spider"
                        }, {
                            class: "cup",
                            type: "img",
                            key: "cup"
                        }]
                    }],
                    addInfiniteWiggle: !1,
                    initializeTimeline() {
                        this.addInfiniteWiggle = !1, C.p8.set(".cup", {
                            y: 100,
                            x: 0,
                            rotate: 0
                        }), C.p8.set(".floor", {
                            y: 200
                        }), C.p8.set(".spider", {
                            y: 150
                        }), C.p8.timeline().to(".spider", {
                            y: 145,
                            x: -5,
                            rotate: 15,
                            yoyo: !0,
                            repeat: -1,
                            duration: .1
                        }).to(".cup", {
                            rotate: -3,
                            yoyo: !0,
                            repeat: -1,
                            duration: .15
                        });
                        const e = C.p8.timeline().to(".spider-container", {
                            scale: 1,
                            y: -200,
                            duration: 3
                        }, 0).to(".spider-container", {
                            x: -800,
                            duration: 2,
                            ease: "power2.out"
                        }, 3).to(".spider-container", {
                            opacity: 0,
                            duration: 1
                        }, 4);
                        this.timeline.add(e)
                    }
                }),
                Cs = ws.extend({
                    stepDuration: 1.5,
                    elements: [{
                        class: "spider-container",
                        type: "container",
                        children: [{
                            class: "floor",
                            type: "img",
                            pos: [100, 0],
                            key: "floor"
                        }, {
                            class: "spider",
                            type: "img",
                            pos: [50, 0],
                            key: "spider"
                        }, {
                            class: "cup",
                            type: "img",
                            key: "cup"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".spider-container", {
                            opacity: 0,
                            y: 300,
                            scale: 5
                        }), C.p8.timeline().to(".spider-container", {
                            scale: 1.5,
                            opacity: 1,
                            x: 0,
                            y: 0,
                            ease: "power2.out"
                        }), C.p8.timeline().to(".spider", {
                            yoyo: !0,
                            repeat: -1,
                            rotate: 8,
                            duration: .25
                        });
                        const e = C.p8.timeline().to(".cup", {
                            rotate: 25,
                            y: -400,
                            x: 200,
                            duration: .3
                        }).to(".spider", {
                            x: -1e3,
                            ease: "back: in",
                            duration: .8
                        }, .4);
                        this.timeline.add(e)
                    }
                });
            C.p8.registerPlugin(Be.u);
            const Ds = He.extend({
                    imageManifest: {
                        butterfly: Promise.resolve().then(s.t.bind(s, 31535, 17)),
                        hose: Promise.resolve().then(s.t.bind(s, 58217, 17)),
                        water: Promise.resolve().then(s.t.bind(s, 21548, 17)),
                        kiddiePool: Promise.resolve().then(s.t.bind(s, 53622, 17))
                    }
                }),
                Fs = Ds.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages(["kiddiePool", null, [0, 750]]),
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.kiddiePool", {
                            x: -250,
                            ease: "power4.in"
                        }).to(".e.kiddiePool", {
                            x: -500,
                            ease: "power4.in"
                        }).to(".e.kiddiePool", {
                            x: -750,
                            ease: "power4.in"
                        });
                        e.name = "image", this.timeline.add(e)
                    }
                }),
                zs = Ds.extend({
                    elements: Ye.elementsFromImages(["kiddiePool", null, [0, -100]], "water", "hose"),
                    onLoadComplete() {
                        C.p8.set(".e.water", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.water", {
                            opacity: 1
                        })
                    }
                }),
                Ls = Ds.extend({
                    elements: Ye.elementsFromImages(["butterfly", null, [0, 700]]),
                    onLoadComplete() {
                        C.p8.to(".e.butterfly", {
                            x: -1400,
                            duration: 3.5,
                            yoyo: !0,
                            repeat: -1
                        }), Be.u.create("yWiggle", {
                            wiggles: 100,
                            type: "random"
                        }), C.p8.to(".e.butterfly", {
                            y: 100,
                            duration: 30,
                            ease: "yWiggle",
                            repeat: -1
                        }, 0)
                    }
                }),
                Rs = Ds.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages(["kiddiePool", null, [0, -100]], "water", "hose"),
                    initializeTimeline() {
                        this.timeline.to(".scene-container", {
                            scale: .5,
                            opacity: 0
                        })
                    }
                }),
                Is = He.extend({
                    imageManifest: {
                        house: Promise.resolve().then(s.t.bind(s, 15209, 17)),
                        look: Promise.resolve().then(s.t.bind(s, 78107, 17)),
                        nail: Promise.resolve().then(s.t.bind(s, 9515, 17)),
                        roof: Promise.resolve().then(s.t.bind(s, 52931, 17))
                    }
                }),
                Os = Is.extend({
                    elements: Ye.elementsFromImages(["roof", "roof1"], ["roof", "roof2"]),
                    onLoadComplete() {
                        C.p8.set(".e.roof1", {
                            y: -200,
                            rotate: -100
                        }), C.p8.set(".e.roof2", {
                            y: 400,
                            rotateY: 180
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.roof1", {
                            y: -230,
                            rotate: -105
                        }).to(".e.roof1", {
                            y: -100,
                            rotate: 0
                        }).to(".e.roof2", {
                            y: 430,
                            rotate: -5,
                            rotateY: 180
                        }).to(".e.roof2", {
                            y: 160,
                            rotate: 180,
                            rotateY: 180
                        })
                    }
                }),
                Bs = Is.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("nail"),
                    onDiscreteProgress() {
                        Ye.scaleBounce("nail")
                    }
                }),
                Ys = Is.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("house"),
                    onDiscreteProgress(e) {
                        C.p8.set(".e.house", {
                            scale: 1 - .005 * e,
                            x: -2.6 * e,
                            y: -.6 * e
                        })
                    }
                }),
                As = Is.extend({
                    elements: Ye.elementsFromImages(["look", "birdhouse"], ["look", "family"]),
                    onLoadComplete() {
                        C.p8.set(".e.birdhouse", {
                            clip: "rect(0px 400px 1000px 0px)"
                        }), C.p8.set(".e.family", {
                            clip: "rect(0px 1000px 1000px 405px)"
                        })
                    },
                    initializeTimeline() {
                        Ye.startShake("family", 1, 1, .7)
                    }
                }),
                Hs = He.extend({
                    imageManifest: {
                        tupp1: Promise.resolve().then(s.t.bind(s, 51468, 17)),
                        tupp2: Promise.resolve().then(s.t.bind(s, 1802, 17)),
                        tupp3: Promise.resolve().then(s.t.bind(s, 16144, 17))
                    },
                    elements: [{
                        type: "img",
                        key: "tupp1",
                        class: "tupp1Start",
                        pos: [360, -250]
                    }, {
                        type: "img",
                        key: "tupp1",
                        class: "tupp1",
                        pos: [250, -250]
                    }, {
                        type: "img",
                        key: "tupp1",
                        class: "tupp1",
                        pos: [140, -250]
                    }, {
                        type: "img",
                        key: "tupp1",
                        class: "tupp1",
                        pos: [30, -250]
                    }, {
                        type: "img",
                        key: "tupp2",
                        class: "tupp2Start",
                        pos: [310, 0]
                    }, {
                        type: "img",
                        key: "tupp2",
                        class: "tupp2",
                        pos: [250, 0]
                    }, {
                        type: "img",
                        key: "tupp2",
                        class: "tupp2",
                        pos: [190, 0]
                    }, {
                        type: "img",
                        key: "tupp2",
                        class: "tupp2",
                        pos: [130, 0]
                    }, {
                        type: "img",
                        key: "tupp3",
                        class: "tupp3",
                        pos: [210, 250]
                    }, {
                        type: "img",
                        key: "tupp3",
                        class: "tupp3",
                        pos: [230, 250]
                    }, {
                        type: "img",
                        key: "tupp3",
                        class: "tupp3",
                        pos: [250, 250]
                    }, {
                        type: "img",
                        key: "tupp3",
                        class: "tupp3Start",
                        pos: [270, 250]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        this.timeline.fromTo(".e.tupp1", {
                            opacity: 0,
                            y: "+=0"
                        }, {
                            opacity: 1,
                            stagger: .1,
                            y: "+=0"
                        }), this.timeline.fromTo(".e.tupp2", {
                            opacity: 0,
                            y: "+=0"
                        }, {
                            opacity: 1,
                            stagger: .1,
                            y: "+=0"
                        }), this.timeline.fromTo(".e.tupp3", {
                            opacity: 0,
                            y: "+=0"
                        }, {
                            reversed: !0,
                            opacity: 1,
                            stagger: .1,
                            y: "+=0"
                        })
                    }
                }),
                Gs = He.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 95321, 17))
                    },
                    elements: [{
                        type: "img",
                        key: "image",
                        pos: [0, 0],
                        class: "image"
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        this.timeline.fromTo(".e.image", {
                            x: 0
                        }, {
                            x: 650,
                            rotate: -5
                        })
                    }
                }),
                Vs = He.extend({
                    imageManifest: {
                        cabinet: Promise.resolve().then(s.t.bind(s, 96605, 17)),
                        doorLeft: Promise.resolve().then(s.t.bind(s, 65609, 17)),
                        doorRight: Promise.resolve().then(s.t.bind(s, 43406, 17)),
                        tupp1: Promise.resolve().then(s.t.bind(s, 51468, 17)),
                        tupp2: Promise.resolve().then(s.t.bind(s, 1802, 17)),
                        tupp3: Promise.resolve().then(s.t.bind(s, 54967, 17)),
                        tupp4: Promise.resolve().then(s.t.bind(s, 16425, 17)),
                        tupp5: Promise.resolve().then(s.t.bind(s, 70670, 17)),
                        tupp6: Promise.resolve().then(s.t.bind(s, 16144, 17)),
                        tupp7: Promise.resolve().then(s.t.bind(s, 30129, 17))
                    },
                    elements: [{
                        type: "img",
                        key: "cabinet",
                        pos: [0, 0],
                        class: "cabinet"
                    }, {
                        type: "img",
                        key: "doorLeft",
                        pos: [0, -160],
                        class: "doorLeft"
                    }, {
                        type: "img",
                        key: "doorRight",
                        pos: [0, 160],
                        class: "doorRight"
                    }, {
                        type: "img",
                        key: "tupp1",
                        pos: [0, 0],
                        class: "tupp1"
                    }, {
                        type: "img",
                        key: "tupp2",
                        pos: [0, 0],
                        class: "tupp2"
                    }, {
                        type: "img",
                        key: "tupp3",
                        pos: [0, 0],
                        class: "tupp3"
                    }, {
                        type: "div",
                        class: "particles",
                        html: "",
                        pos: [0, 0]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        const e = this;
                        let t = !0;
                        this.timeline.fromTo(".e.doorRight", {
                            rotateY: -30
                        }, {
                            rotateY: 0,
                            yoyo: !0,
                            repeat: 4,
                            ease: "Power2.inOut"
                        }), this.timeline.fromTo(".e.doorLeft", {
                            rotateY: -30
                        }, {
                            rotateY: 0,
                            yoyo: !0,
                            repeat: 4,
                            ease: "Power2.inOut",
                            onComplete() {
                                t && (e.particles.restart(), e.particles2.restart(), e.particles3.restart(), t = !1)
                            }
                        }, "<"), this.timeline.fromTo(".e.doorRight", {
                            rotateY: 0
                        }, {
                            rotateY: 180,
                            ease: "Power2.inOut"
                        }), this.timeline.fromTo(".e.doorLeft", {
                            rotateY: 0
                        }, {
                            rotateY: 180,
                            ease: "Power2.inOut",
                            onComplete() {
                                e.particles.kill(), e.particles2.kill(), e.particles3.kill()
                            }
                        }, "<"), C.p8.set(".e.particles", {
                            top: "50%",
                            left: "50%"
                        }), this.particles = Ye.addParticleEmitter({
                            container: "particles",
                            numberOfParticles: 10,
                            autoplay: !1,
                            restartOnProgress: !1,
                            zIndex: 1,
                            image: "tupp1",
                            settings: {
                                frequency: .15,
                                from: {
                                    opacity: 1,
                                    x: "-55%",
                                    y: "-55%"
                                },
                                to: {
                                    duration: 1,
                                    opacity: 0,
                                    ease: "power2.in"
                                },
                                minSize: 1e3,
                                maxSize: 1e3,
                                angle: 180,
                                force: .2,
                                gravity: .15,
                                randomAngle: !0,
                                boundaries: {
                                    left: 0,
                                    top: 0,
                                    right: 1,
                                    bottom: 1
                                }
                            }
                        }, this), this.particles2 = Ye.addParticleEmitter({
                            container: "particles",
                            numberOfParticles: 10,
                            className: "fx2",
                            autoplay: !1,
                            restartOnProgress: !1,
                            zIndex: 1,
                            image: "tupp2",
                            settings: {
                                frequency: .15,
                                from: {
                                    opacity: 1,
                                    x: "-45%",
                                    y: "-55%"
                                },
                                to: {
                                    duration: 1,
                                    opacity: 0,
                                    ease: "power2.in"
                                },
                                minSize: 1e3,
                                maxSize: 1e3,
                                angle: 180,
                                force: -.2,
                                gravity: .25,
                                randomAngle: !0,
                                boundaries: {
                                    left: 0,
                                    top: 0,
                                    right: 1,
                                    bottom: 1
                                }
                            }
                        }, this), this.particles3 = Ye.addParticleEmitter({
                            container: "particles",
                            numberOfParticles: 10,
                            className: "fx3",
                            autoplay: !1,
                            restartOnProgress: !1,
                            zIndex: 1,
                            image: "tupp3",
                            settings: {
                                frequency: .15,
                                from: {
                                    opacity: 1,
                                    x: "-50%",
                                    y: "-60%"
                                },
                                to: {
                                    duration: 1,
                                    opacity: 0,
                                    ease: "power2.in"
                                },
                                minSize: 1e3,
                                maxSize: 1e3,
                                angle: 180,
                                force: -.2,
                                gravity: .25,
                                randomAngle: !0,
                                boundaries: {
                                    left: 0,
                                    top: 0,
                                    right: 1,
                                    bottom: 1
                                }
                            }
                        }, this)
                    }
                }),
                Es = He.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 95321, 17))
                    },
                    elements: [{
                        type: "img",
                        key: "image",
                        pos: [0, 0],
                        class: "image"
                    }],
                    stepDuration: 2,
                    initializeTimeline() {
                        this.timeline.fromTo(".e.image", {
                            rotate: -20,
                            x: -100
                        }, {
                            x: 150,
                            rotate: 15,
                            ease: "power1.inOut"
                        }), this.timeline.to(".e.image", {
                            x: -50,
                            rotate: -10,
                            ease: "power1.inOut"
                        }), this.timeline.to(".e.image", {
                            x: 30,
                            rotate: 5,
                            ease: "power1.inOut"
                        }), this.timeline.to(".e.image", {
                            x: 0,
                            rotate: 0,
                            ease: "power1.inOut"
                        })
                    }
                }),
                qs = He.extend({
                    imageManifest: {
                        tupp1: Promise.resolve().then(s.t.bind(s, 51468, 17)),
                        tupp2: Promise.resolve().then(s.t.bind(s, 1802, 17)),
                        tupp3: Promise.resolve().then(s.t.bind(s, 54967, 17)),
                        tupp4: Promise.resolve().then(s.t.bind(s, 16425, 17)),
                        tupp5: Promise.resolve().then(s.t.bind(s, 70670, 17)),
                        tupp6: Promise.resolve().then(s.t.bind(s, 16144, 17)),
                        tupp7: Promise.resolve().then(s.t.bind(s, 30129, 17))
                    },
                    elements: [{
                        type: "img",
                        key: "tupp7",
                        pos: [-200, 0],
                        class: "tupp7"
                    }, {
                        type: "img",
                        key: "tupp1",
                        pos: [-100, -150],
                        class: "tupp1"
                    }, {
                        type: "img",
                        key: "tupp2",
                        pos: [-70, 0],
                        class: "tupp2"
                    }, {
                        type: "img",
                        key: "tupp3",
                        pos: [-80, 130],
                        class: "tupp3"
                    }, {
                        type: "img",
                        key: "tupp4",
                        pos: [0, -120],
                        class: "tupp4"
                    }, {
                        type: "img",
                        key: "tupp5",
                        pos: [20, 20],
                        class: "tupp5"
                    }, {
                        type: "img",
                        key: "tupp6",
                        pos: [50, 150],
                        class: "tupp6"
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        this.timeline.to(".e.tupp3", {
                            x: 650,
                            y: -400,
                            rotate: 360
                        }), this.timeline.to(".e.tupp1", {
                            x: -650,
                            y: -400,
                            rotate: 360
                        }), this.timeline.to(".e.tupp5", {
                            x: 650,
                            y: -400,
                            rotate: 360
                        }), this.timeline.to(".e.tupp7", {
                            x: -650,
                            y: -400,
                            rotate: 360
                        })
                    }
                }),
                Ns = Vs.extend({}),
                Xs = He.extend({
                    imageManifest: {
                        ant: Promise.resolve().then(s.t.bind(s, 93238, 17)),
                        deadAnt: Promise.resolve().then(s.t.bind(s, 48959, 17)),
                        paperTowel: Promise.resolve().then(s.t.bind(s, 68557, 17)),
                        trash: Promise.resolve().then(s.t.bind(s, 21156, 17))
                    }
                }),
                Ws = Xs.extend({
                    elements: Ye.elementsFromImages(["ant", "ant1"], ["ant", "ant2"], ["ant", "ant3"]),
                    onLoadComplete() {
                        C.p8.set(".e.ant1", {
                            x: -300
                        }), C.p8.set(".e.ant3", {
                            x: 300
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.ant1", {
                            scaleY: .75,
                            y: 50
                        }).to(".e.ant1", {
                            y: -1500,
                            scaleY: 3,
                            scaleX: .5,
                            duration: .25
                        }).to(".e.ant2", {
                            scaleY: .75,
                            y: 50
                        }).to(".e.ant2", {
                            y: -1500,
                            scaleY: 3,
                            scaleX: .5,
                            duration: .25
                        }).to(".e.ant3", {
                            scaleY: .75,
                            y: 50
                        }).to(".e.ant3", {
                            y: -1500,
                            scaleY: 3,
                            scaleX: .5,
                            duration: .25
                        })
                    }
                }),
                Us = Xs.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages(["ant", "ant1"], ["ant", "ant2"], ["ant", "ant3"], ["ant", "ant4"], ["ant", "ant5"], ["deadAnt", "deadAnt1"], ["deadAnt", "deadAnt2"], ["deadAnt", "deadAnt3"], ["deadAnt", "deadAnt4"], ["deadAnt", "deadAnt5"]),
                    onLoadComplete() {
                        C.p8.set(".e.ant1", {
                            x: -200,
                            y: -50
                        }), C.p8.set(".e.deadAnt1", {
                            x: -200,
                            y: -50,
                            visibility: "hidden"
                        }), C.p8.set(".e.ant2", {
                            x: 100,
                            y: -300
                        }), C.p8.set(".e.deadAnt2", {
                            x: 100,
                            y: -300,
                            visibility: "hidden"
                        }), C.p8.set(".e.ant3", {
                            x: 150,
                            rotateY: 180
                        }), C.p8.set(".e.deadAnt3", {
                            x: 150,
                            rotateY: 180,
                            visibility: "hidden"
                        }), C.p8.set(".e.ant4", {
                            x: -150,
                            y: 300,
                            rotateY: 180
                        }), C.p8.set(".e.deadAnt4", {
                            x: -150,
                            y: 300,
                            rotateY: 180,
                            visibility: "hidden"
                        }), C.p8.set(".e.ant5", {
                            x: 200,
                            y: 450
                        }), C.p8.set(".e.deadAnt5", {
                            x: 200,
                            y: 450,
                            visibility: "hidden"
                        }), Ye.startShake("ant1", 6, 0, 2), Ye.startShake("ant2", 6, 0, 2), Ye.startShake("ant3", 6, 0, 2), Ye.startShake("ant4", 6, 0, 2), Ye.startShake("ant5", 6, 0, 2)
                    },
                    onDiscreteProgress(e) {
                        const t = Math.round(e / 100 * 5),
                            s = `.e.ant${t}`,
                            i = `.e.deadAnt${t}`;
                        C.p8.to(s, {
                            scaleY: .25
                        }), C.p8.set(i, {
                            visibility: "visible"
                        }), C.p8.set(s, {
                            visibility: "hidden"
                        })
                    }
                }),
                $s = Xs.extend({
                    elements: Ye.elementsFromImages(["deadAnt", "deadAnt1"], ["deadAnt", "deadAnt2"], ["deadAnt", "deadAnt3"], ["deadAnt", "deadAnt4"], ["deadAnt", "deadAnt5"], "paperTowel"),
                    onLoadComplete() {
                        C.p8.set(".e.deadAnt1", {
                            x: -200,
                            y: -50
                        }), C.p8.set(".e.deadAnt2", {
                            x: 100,
                            y: -300
                        }), C.p8.set(".e.deadAnt3", {
                            x: 150,
                            rotateY: 180
                        }), C.p8.set(".e.deadAnt4", {
                            x: -150,
                            y: 300,
                            rotateY: 180
                        }), C.p8.set(".e.deadAnt5", {
                            x: 200,
                            y: 450
                        }), C.p8.set(".e.paperTowel", {
                            scale: 2,
                            x: 450,
                            y: 1500,
                            rotate: -30
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.paperTowel", {
                            y: 300,
                            x: 0
                        }).to(".e.deadAnt5", {
                            y: 0,
                            x: -250
                        }, "<.25").to(".e.deadAnt4", {
                            y: 0,
                            x: -250,
                            rotate: 45
                        }, "<").to(".e.paperTowel", {
                            y: 50,
                            x: -300,
                            rotate: 40
                        }, "<").to(".e.paperTowel", {
                            y: -200,
                            x: 350,
                            rotate: 245
                        }).to(".e.paperTowel", {
                            y: -130,
                            x: -30
                        }).to(".e.deadAnt3", {
                            y: 0,
                            x: -255,
                            rotate: -4
                        }, "<.25").to(".e.deadAnt2", {
                            y: 0,
                            x: -250
                        }, "<").to(".e.deadAnt1", {
                            y: 0,
                            x: -243,
                            rotate: 10
                        }, "<").to(".e.paperTowel", {
                            y: -200,
                            x: -250
                        })
                    }
                }),
                js = Xs.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("trash", "paperTowel"),
                    onLoadComplete() {
                        C.p8.set(".e.paperTowel", {
                            scale: .8,
                            y: -400
                        }), C.p8.set(".e.trash", {
                            y: 350
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.paperTowel", {
                            y: -460
                        }).to(".e.paperTowel", {
                            y: 70
                        }).to(".e.paperTowel", {
                            visibility: "hidden"
                        }).to(".e.trash", {
                            y: 420
                        }).to(".e.trash", {
                            y: 350
                        })
                    }
                }),
                Ks = He.extend({
                    imageManifest: {
                        ant: Promise.resolve().then(s.t.bind(s, 12874, 17)),
                        tv: Promise.resolve().then(s.t.bind(s, 77355, 17)),
                        show1: Promise.resolve().then(s.t.bind(s, 8836, 17)),
                        show2: Promise.resolve().then(s.t.bind(s, 31669, 17)),
                        show3: Promise.resolve().then(s.t.bind(s, 17335, 17)),
                        static: Promise.resolve().then(s.t.bind(s, 11346, 17))
                    },
                    elements: [{
                        type: "container",
                        class: "tv-container",
                        children: [{
                            type: "img",
                            pos: [71, 0],
                            key: "ant",
                            class: "ant"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "show1",
                            class: "show1"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "show2",
                            class: "show2"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "show3",
                            class: "show3"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "static",
                            class: "static"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "tv",
                            class: "tv"
                        }]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.tv", {
                            clipPath: "inset(34% 0% 0%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.ant", {
                            rotateY: -360
                        }), this.timeline.fromTo(".e.static", {
                            opacity: .5
                        }, {
                            opacity: 1,
                            ease: "bounce.out"
                        }, "<"), C.p8.set(".e.static", {
                            opacity: .5
                        })
                    }
                }),
                Zs = Ks.extend({
                    initializeTimeline() {
                        this.timeline.to(".e.ant", {
                            rotateY: -180
                        }), this.timeline.fromTo(".e.static", {
                            opacity: 1
                        }, {
                            opacity: .6,
                            ease: "bounce.out"
                        }, "<")
                    }
                }),
                Js = Ks.extend({
                    initializeTimeline() {
                        this.timeline.to(".e.ant", {
                            rotateY: 360
                        }), this.timeline.fromTo(".e.static", {
                            opacity: .6
                        }, {
                            opacity: 1,
                            ease: "bounce.out"
                        }, "<")
                    }
                }),
                _s = Ks.extend({
                    stepDuration: .5,
                    initializeTimeline() {
                        this.timeline.fromTo(".e.static", {
                            opacity: .9
                        }, {
                            opacity: .8,
                            duration: .1
                        }, "+=0.01", 0), this.timeline.to(".e.ant", {
                            rotateY: "+=180"
                        }, "<"), this.timeline.to(".e.tv-container", {
                            scale: .9,
                            yoyo: !0,
                            repeat: 1,
                            ease: "power2.out"
                        }, "<"), this.timeline.set(".e.show3", {
                            display: "none"
                        }, .01), this.timeline.to(".e.static", {
                            opacity: .6,
                            duration: .1
                        }, "+=0.01"), this.timeline.to(".e.ant", {
                            rotateY: "+=180"
                        }, "<"), this.timeline.to(".e.tv-container", {
                            scale: .9,
                            yoyo: !0,
                            repeat: 1,
                            ease: "power2.out"
                        }, "<"), this.timeline.set(".e.show2", {
                            display: "none"
                        }, "+=0.01"), this.timeline.to(".e.static", {
                            opacity: 0,
                            duration: .1
                        }), this.timeline.to(".e.ant", {
                            rotateY: "+=180"
                        }, "<"), this.timeline.to(".e.tv-container", {
                            scale: .9,
                            yoyo: !0,
                            repeat: 1,
                            ease: "power2.out"
                        }, "<")
                    }
                }),
                Qs = He.extend({
                    className: "microwave-soup",
                    bindings: {
                        ".timer": "microwaveTimer"
                    },
                    imageManifest: {
                        door: Promise.resolve().then(s.t.bind(s, 88788, 17)),
                        microwave: Promise.resolve().then(s.t.bind(s, 3307, 17)),
                        soup: Promise.resolve().then(s.t.bind(s, 29550, 17))
                    },
                    elements() {
                        const e = Ye.elementsFromImages("microwave", ["soup", null, [490, 200]], "door");
                        return e.push({
                            class: "timer",
                            type: "div",
                            pos: [302, 639]
                        }), [{
                            class: "microwave-container",
                            type: "container",
                            children: e
                        }]
                    }
                }),
                ei = Qs.extend({
                    stepDuration: .4,
                    onDiscreteProgress() {
                        Ye.squashOnce("microwave-container", .4, "yqw")
                    },
                    onLoadComplete() {
                        this.model.set({
                            microwaveTimer: "00:00"
                        })
                    }
                }),
                ti = Qs.extend({
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            repeat: 1
                        }).to(".e.soup", {
                            x: -15,
                            y: 5,
                            ease: "circ.inOut"
                        }).to(".e.soup", {
                            x: -30,
                            y: 0,
                            ease: "circ.inOut"
                        }).to(".e.soup", {
                            x: -15,
                            y: -5,
                            ease: "circ.inOut"
                        }).to(".e.soup", {
                            x: 0,
                            y: 0,
                            ease: "circ.inOut"
                        });
                        this.timeline.add(e)
                    },
                    onProgress(e) {
                        this.model.set({
                            microwaveTimer: "00:0" + (5 - Math.floor(e / 20))
                        })
                    }
                }),
                si = Ve,
                ii = ei,
                oi = ti,
                ni = Ve,
                ai = He.extend({
                    imageManifest: {
                        candelabra: Promise.resolve().then(s.t.bind(s, 44639, 17)),
                        table: Promise.resolve().then(s.t.bind(s, 87864, 17)),
                        tablecloth: Promise.resolve().then(s.t.bind(s, 16130, 17)),
                        tablewrinkle: Promise.resolve().then(s.t.bind(s, 47, 17))
                    }
                }),
                ri = ai.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("table", "tablewrinkle"),
                    onLoadComplete() {
                        C.p8.set(".e.tablewrinkle", {
                            y: 2e3,
                            scale: 5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.tablewrinkle", {
                            y: -1e3
                        }).to(".e.tablewrinkle", {
                            scale: 1,
                            y: 0
                        })
                    }
                }),
                li = ai.extend({
                    elements: Ye.elementsFromImages("tablewrinkle"),
                    initializeTimeline() {
                        this.timeline.to(".e.tablewrinkle", {
                            scale: 5,
                            y: 800
                        }).to(".e.tablewrinkle", {
                            scale: 1,
                            x: 0,
                            y: 0
                        }).to(".e.tablewrinkle", {
                            scale: 5,
                            x: -1200,
                            y: 1e3
                        }).to(".e.tablewrinkle", {
                            scale: 1,
                            x: 0,
                            y: 0
                        })
                    }
                }),
                di = ai.extend({
                    elements: Ye.elementsFromImages("tablewrinkle", "tablecloth"),
                    onLoadComplete() {
                        C.p8.set(".e.tablecloth", {
                            opacity: 0,
                            scale: 10
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.tablewrinkle", {
                            scale: 10
                        }).to(".e.tablewrinkle", {
                            opacity: 0
                        }).to(".e.tablecloth", {
                            opacity: 1
                        }, "<-.25").to(".e.tablecloth", {
                            scale: 1
                        })
                    }
                }),
                pi = ai.extend({
                    stepDuration: .7,
                    elements: Ye.elementsFromImages("tablecloth", "candelabra"),
                    onLoadComplete() {
                        C.p8.set(".e.candelabra", {
                            x: 800,
                            y: 1500,
                            rotate: 50
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.candelabra", {
                            x: 50,
                            y: -280,
                            rotate: 0,
                            scaleX: .8,
                            scaleY: .7
                        }).to(".e.tablecloth", {
                            y: 50
                        }, "<").to(".e.tablecloth", {
                            y: 0
                        }).to(".e.candelabra", {
                            y: -300,
                            scaleY: .8
                        }, "<")
                    }
                }),
                ci = He.extend({
                    imageManifest: {
                        Broom: Promise.resolve().then(s.t.bind(s, 84030, 17)),
                        Chimney: Promise.resolve().then(s.t.bind(s, 73895, 17)),
                        ChimneyTop: Promise.resolve().then(s.t.bind(s, 47571, 17)),
                        Dust: Promise.resolve().then(s.t.bind(s, 42394, 17)),
                        Present1: Promise.resolve().then(s.t.bind(s, 79508, 17)),
                        Present2: Promise.resolve().then(s.t.bind(s, 30191, 17)),
                        Present3: Promise.resolve().then(s.t.bind(s, 57074, 17)),
                        Santa: Promise.resolve().then(s.t.bind(s, 8195, 17))
                    }
                }),
                mi = ci.extend({
                    elements: [{
                        class: "chimney-container",
                        type: "container",
                        children: [{
                            class: "Chimney",
                            type: "img",
                            pos: [-100, 0],
                            key: "Chimney"
                        }, {
                            class: "Broom",
                            type: "img",
                            pos: [320, 0],
                            key: "Broom"
                        }, {
                            class: "ChimneyTop",
                            type: "img",
                            pos: [-100, 0],
                            key: "ChimneyTop"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.Broom", {
                            scaleY: -.8,
                            scaleX: .8,
                            rotate: -3
                        });
                        const e = C.p8.timeline().to(".e.Broom", {
                            repeat: 2,
                            yoyo: !0,
                            y: -200,
                            scaleY: -1,
                            scaleX: 1,
                            rotate: 10,
                            x: 10,
                            ease: "back.out"
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                hi = ci.extend({
                    elements: [{
                        class: "chimney-container",
                        type: "container",
                        children: [{
                            class: "Chimney",
                            type: "img",
                            pos: [-100, 0],
                            key: "Chimney"
                        }, {
                            class: "Broom",
                            type: "img",
                            pos: [190, 0],
                            key: "Broom"
                        }, {
                            class: "ChimneyTop",
                            type: "img",
                            pos: [-100, 0],
                            key: "ChimneyTop"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.Broom", {
                            scaleY: -.8,
                            scaleX: .8,
                            rotate: 20
                        });
                        const e = C.p8.timeline().to(".e.Broom", {
                            repeat: 3,
                            yoyo: !0,
                            duration: .5,
                            ease: "linear",
                            y: -80,
                            x: -30,
                            rotate: -20
                        }, 0).to(".chimney-container", {
                            duration: 2,
                            ease: "linear",
                            scale: 5,
                            opacity: 0,
                            y: -1e3
                        }, 1);
                        this.timeline.add(e)
                    }
                }),
                ui = ci.extend({
                    elements: [{
                        class: "chimney-container",
                        type: "container",
                        children: [{
                            class: "Dust",
                            type: "img",
                            pos: [0, 0],
                            key: "Dust"
                        }]
                    }],
                    stepDuration: 3,
                    initializeTimeline() {
                        Ye.addParticleEmitter({
                            container: "chimney-container",
                            numberOfParticles: 60,
                            autoplay: !1,
                            restartOnProgress: !0,
                            image: "Dust",
                            settings: {
                                fullThrottle: !0,
                                randomAngleRange: 35,
                                minSize: 200,
                                maxSize: 1500,
                                force: 0,
                                gravity: -1,
                                boundaries: {
                                    top: 250,
                                    bottom: 500,
                                    left: -100,
                                    right: 300
                                }
                            }
                        }, this)
                    }
                }),
                gi = ci.extend({
                    elements: [{
                        class: "chimney-container",
                        type: "container",
                        children: [{
                            class: "Present1",
                            type: "img",
                            pos: [0, 0],
                            key: "Present1"
                        }, {
                            class: "Present2",
                            type: "img",
                            pos: [0, 0],
                            key: "Present2"
                        }, {
                            class: "Present3",
                            type: "img",
                            pos: [0, 0],
                            key: "Present3"
                        }, {
                            class: "Present4",
                            type: "img",
                            pos: [0, 0],
                            key: "Present1"
                        }]
                    }],
                    stepDuration: 2,
                    initializeTimeline() {
                        C.p8.set(".e.Present4", {
                            scale: 2,
                            rotate: -10
                        });
                        const e = C.p8.timeline().to(".e.Present4", {
                            duration: 1,
                            ease: "linear",
                            scale: 0,
                            opacity: 0
                        }, 0);
                        this.timeline.add(e), Ye.addParticleEmitter({
                            container: "chimney-container",
                            numberOfParticles: 8,
                            autoplay: !1,
                            restartOnProgress: !0,
                            image: "Present1",
                            className: "Particle1",
                            settings: {
                                particleLimit: 5,
                                randomAngleRange: 35,
                                minSize: 500,
                                maxSize: 1500,
                                to: {
                                    duration: 2,
                                    opacity: 1
                                },
                                force: -3,
                                gravity: 3,
                                boundaries: {
                                    top: -500,
                                    bottom: -200,
                                    left: -300,
                                    right: 300
                                }
                            }
                        }, this), Ye.addParticleEmitter({
                            container: "chimney-container",
                            numberOfParticles: 10,
                            autoplay: !1,
                            restartOnProgress: !0,
                            image: "Present2",
                            className: "Particle2",
                            settings: {
                                particleLimit: 6,
                                randomAngleRange: 35,
                                minSize: 500,
                                maxSize: 1500,
                                to: {
                                    duration: 2,
                                    opacity: 1
                                },
                                force: -3,
                                gravity: 3,
                                boundaries: {
                                    top: -500,
                                    bottom: -200,
                                    left: -300,
                                    right: 300
                                }
                            }
                        }, this), Ye.addParticleEmitter({
                            container: "chimney-container",
                            numberOfParticles: 3,
                            autoplay: !1,
                            restartOnProgress: !0,
                            image: "Present3",
                            className: "Particle3",
                            settings: {
                                particleLimit: 2,
                                randomAngleRange: 35,
                                minSize: 500,
                                maxSize: 1500,
                                to: {
                                    duration: 2,
                                    opacity: 1
                                },
                                force: -3,
                                gravity: 3,
                                boundaries: {
                                    top: -500,
                                    bottom: -200,
                                    left: -300,
                                    right: 300
                                }
                            }
                        }, this)
                    }
                }),
                yi = ci.extend({
                    elements: [{
                        class: "chimney-container",
                        type: "container",
                        children: [{
                            class: "Santa",
                            type: "img",
                            pos: [0, 0],
                            key: "Santa"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.Santa", {
                            scale: 1.6,
                            rotate: -10,
                            opacity: 0,
                            y: -2e3
                        }), C.p8.timeline().to(".e.Santa", {
                            duration: .7,
                            scale: 2.2,
                            ease: "bounce.out",
                            y: 0,
                            opacity: 1,
                            rotate: 10
                        });
                        const e = C.p8.timeline().to(".chimney-container", {
                            duration: .5,
                            ease: "back.inOut",
                            scale: 0,
                            opacity: 0
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                bi = He.extend({
                    imageManifest: {
                        Broom: Promise.resolve().then(s.t.bind(s, 84030, 17)),
                        BroomRight: Promise.resolve().then(s.t.bind(s, 41794, 17)),
                        Chimney: Promise.resolve().then(s.t.bind(s, 73895, 17)),
                        ChimneyTop: Promise.resolve().then(s.t.bind(s, 47571, 17)),
                        Dust: Promise.resolve().then(s.t.bind(s, 42394, 17)),
                        Arrow: Promise.resolve().then(s.t.bind(s, 69301, 17)),
                        Baseball: Promise.resolve().then(s.t.bind(s, 23545, 17)),
                        Ball: Promise.resolve().then(s.t.bind(s, 90722, 17)),
                        Birdie: Promise.resolve().then(s.t.bind(s, 38708, 17)),
                        Frisbee: Promise.resolve().then(s.t.bind(s, 41411, 17))
                    }
                }),
                xi = bi.extend({
                    elements: [{
                        class: "chimney-container",
                        type: "container",
                        children: [{
                            class: "Chimney",
                            type: "img",
                            pos: [-100, 0],
                            key: "Chimney"
                        }, {
                            class: "Broom",
                            type: "img",
                            pos: [320, 0],
                            key: "Broom"
                        }, {
                            class: "ChimneyTop",
                            type: "img",
                            pos: [-100, 0],
                            key: "ChimneyTop"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.Chimney", {
                            scale: 1
                        }), C.p8.set(".e.ChimneyTop", {
                            scale: 1
                        }), C.p8.set(".e.Broom", {
                            scaleY: -.8,
                            scaleX: .8,
                            rotate: -10
                        });
                        const e = C.p8.timeline().to(".e.Broom", {
                            repeat: 2,
                            yoyo: !0,
                            y: -200,
                            scaleY: -1,
                            scaleX: 1,
                            rotate: 10,
                            x: 10,
                            ease: "back.out"
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                fi = bi.extend({
                    elements: [{
                        class: "chimney-container",
                        type: "container",
                        children: [{
                            class: "Chimney",
                            type: "img",
                            pos: [-100, 0],
                            key: "Chimney"
                        }, {
                            class: "Broom",
                            type: "img",
                            pos: [190, 0],
                            key: "Broom"
                        }, {
                            class: "ChimneyTop",
                            type: "img",
                            pos: [-100, 0],
                            key: "ChimneyTop"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.Broom", {
                            scaleY: -.8,
                            scaleX: .8,
                            rotate: 20
                        });
                        const e = C.p8.timeline().to(".e.Broom", {
                            repeat: 2,
                            yoyo: !0,
                            duration: .5,
                            ease: "linear",
                            y: -80,
                            x: -30,
                            rotate: -20
                        }, 0).to(".chimney-container", {
                            duration: 2,
                            ease: "linear",
                            scale: 5,
                            opacity: 0,
                            y: -1e3
                        }, 1);
                        this.timeline.add(e)
                    }
                }),
                vi = bi.extend({
                    elements: [{
                        class: "chimney-container",
                        type: "container",
                        children: [{
                            class: "Dust",
                            type: "img",
                            pos: [0, 0],
                            key: "Dust"
                        }]
                    }],
                    stepDuration: 3,
                    initializeTimeline() {
                        Ye.addParticleEmitter({
                            container: "chimney-container",
                            numberOfParticles: 60,
                            autoplay: !1,
                            restartOnProgress: !0,
                            image: "Dust",
                            settings: {
                                fullThrottle: !0,
                                randomAngleRange: 35,
                                minSize: 200,
                                maxSize: 1500,
                                force: 0,
                                gravity: -1,
                                boundaries: {
                                    top: 250,
                                    bottom: 500,
                                    left: -100,
                                    right: 300
                                }
                            }
                        }, this)
                    }
                }),
                ki = bi.extend({
                    elements: [{
                        class: "chimney-container",
                        type: "container",
                        children: [{
                            class: "BroomRight",
                            type: "img",
                            pos: [0, 0],
                            key: "BroomRight"
                        }, {
                            class: "Arrow",
                            type: "img",
                            pos: [0, 0],
                            key: "Arrow"
                        }, {
                            class: "Ball",
                            type: "img",
                            pos: [0, 0],
                            key: "Ball"
                        }, {
                            class: "Baseball",
                            type: "img",
                            pos: [0, 0],
                            key: "Baseball"
                        }, {
                            class: "Birdie",
                            type: "img",
                            pos: [0, 0],
                            key: "Birdie"
                        }, {
                            class: "Frisbee",
                            type: "img",
                            pos: [0, 0],
                            key: "Frisbee"
                        }]
                    }],
                    stepDuration: 2,
                    initializeTimeline() {
                        C.p8.set(".e.BroomRight", {
                            scale: 1.4
                        });
                        const e = C.p8.timeline().to(".e.BroomRight", {
                            duration: 1,
                            ease: "linear",
                            scale: 0,
                            opacity: 0
                        }, 0);
                        this.timeline.add(e), Ye.addParticleEmitter({
                            container: "chimney-container",
                            numberOfParticles: 8,
                            autoplay: !1,
                            restartOnProgress: !0,
                            image: "Ball",
                            className: "Particle1",
                            settings: {
                                particleLimit: 5,
                                randomAngleRange: 35,
                                minSize: 500,
                                maxSize: 1500,
                                to: {
                                    duration: 2,
                                    opacity: 1
                                },
                                force: -3,
                                gravity: 3,
                                boundaries: {
                                    top: -500,
                                    bottom: -200,
                                    left: -300,
                                    right: 300
                                }
                            }
                        }, this), Ye.addParticleEmitter({
                            container: "chimney-container",
                            numberOfParticles: 10,
                            autoplay: !1,
                            restartOnProgress: !0,
                            image: "Arrow",
                            className: "Particle2",
                            settings: {
                                particleLimit: 6,
                                randomAngleRange: 35,
                                minSize: 500,
                                maxSize: 1500,
                                to: {
                                    duration: 2,
                                    opacity: 1
                                },
                                force: -3,
                                gravity: 3,
                                boundaries: {
                                    top: -500,
                                    bottom: -200,
                                    left: -300,
                                    right: 300
                                }
                            }
                        }, this), Ye.addParticleEmitter({
                            container: "chimney-container",
                            numberOfParticles: 3,
                            autoplay: !1,
                            restartOnProgress: !0,
                            image: "Birdie",
                            className: "Particle3",
                            settings: {
                                particleLimit: 2,
                                randomAngleRange: 35,
                                minSize: 500,
                                maxSize: 1500,
                                to: {
                                    duration: 2,
                                    opacity: 1
                                },
                                force: -3,
                                gravity: 3,
                                boundaries: {
                                    top: -500,
                                    bottom: -200,
                                    left: -300,
                                    right: 300
                                }
                            }
                        }, this), Ye.addParticleEmitter({
                            container: "chimney-container",
                            numberOfParticles: 6,
                            autoplay: !1,
                            restartOnProgress: !0,
                            image: "Frisbee",
                            className: "Particle4",
                            settings: {
                                particleLimit: 5,
                                randomAngleRange: 35,
                                minSize: 500,
                                maxSize: 1500,
                                to: {
                                    duration: 2,
                                    opacity: 1
                                },
                                force: -3,
                                gravity: 3,
                                boundaries: {
                                    top: -500,
                                    bottom: -200,
                                    left: -300,
                                    right: 300
                                }
                            }
                        }, this), Ye.addParticleEmitter({
                            container: "chimney-container",
                            numberOfParticles: 10,
                            autoplay: !1,
                            restartOnProgress: !0,
                            image: "Baseball",
                            className: "Particle5",
                            settings: {
                                particleLimit: 6,
                                randomAngleRange: 35,
                                minSize: 500,
                                maxSize: 1500,
                                to: {
                                    duration: 2,
                                    opacity: 1
                                },
                                force: -3,
                                gravity: 3,
                                boundaries: {
                                    top: -500,
                                    bottom: -200,
                                    left: -300,
                                    right: 300
                                }
                            }
                        }, this)
                    }
                }),
                Pi = bi.extend({
                    elements: [{
                        class: "chimney-container",
                        type: "container",
                        children: [{
                            class: "Arrow",
                            type: "img",
                            pos: [-60, -40],
                            key: "Arrow"
                        }, {
                            class: "Ball",
                            type: "img",
                            pos: [0, 40],
                            key: "Ball"
                        }, {
                            class: "Baseball",
                            type: "img",
                            pos: [40, -150],
                            key: "Baseball"
                        }, {
                            class: "Birdie",
                            type: "img",
                            pos: [0, 170],
                            key: "Birdie"
                        }, {
                            class: "Frisbee",
                            type: "img",
                            pos: [80, 75],
                            key: "Frisbee"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".chimney-container", {
                            scale: 1.8,
                            opacity: 1
                        });
                        const e = C.p8.timeline().to(".chimney-container", {
                            duration: .5,
                            ease: "back.inOut",
                            scale: 0,
                            opacity: 0
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                wi = He.extend({
                    imageManifest: {
                        playerFace: Promise.resolve().then(s.t.bind(s, 12738, 17)),
                        shrug: Promise.resolve().then(s.t.bind(s, 26201, 17)),
                        unsure: Promise.resolve().then(s.t.bind(s, 94924, 17)),
                        wave: Promise.resolve().then(s.t.bind(s, 82812, 17)),
                        backAway: Promise.resolve().then(s.t.bind(s, 66124, 17)),
                        window: Promise.resolve().then(s.t.bind(s, 3883, 17))
                    }
                }),
                Ti = wi.extend({
                    elements: [{
                        class: "neighbor-container",
                        type: "container",
                        children: [{
                            class: "playerFace",
                            type: "img",
                            pos: [-50, -50],
                            key: "playerFace"
                        }, {
                            class: "unsure",
                            type: "img",
                            pos: [350, 200],
                            key: "unsure"
                        }, {
                            class: "weirdedOut",
                            type: "img",
                            pos: [350, 200],
                            key: "unsure"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.playerFace", {
                            scale: 1.3,
                            rotate: -10
                        }), C.p8.set(".e.unsure", {
                            scale: .75,
                            rotate: 10
                        }), C.p8.set(".e.weirdedOut", {
                            scale: .75,
                            opacity: 0,
                            rotate: 10
                        });
                        const e = C.p8.timeline().to(".e.playerFace", {
                            scale: 2.2,
                            duration: 5,
                            onStart: () => {
                                C.p8.timeline().to(".e.playerFace", {
                                    repeat: -1,
                                    yoyo: !0,
                                    duration: .1,
                                    ease: "linear",
                                    x: `+=${(0,i.random)(-30,30)}`,
                                    y: `+=${(0,i.random)(-30,30)}`
                                }, 1)
                            }
                        }, 0).to(".e.unsure", {
                            opacity: 0
                        }, 2.5).to(".e.weirdedOut", {
                            opacity: 1
                        }, 2.5);
                        this.timeline.add(e)
                    }
                }),
                Si = wi.extend({
                    elements: [{
                        class: "neighbor-container",
                        type: "container",
                        children: [{
                            class: "wave",
                            type: "img",
                            pos: [-180, -120],
                            key: "wave"
                        }, {
                            class: "weirdedOut",
                            type: "img",
                            pos: [350, 200],
                            key: "unsure"
                        }, {
                            class: "shrug",
                            type: "img",
                            pos: [436, 160],
                            key: "shrug"
                        }]
                    }],
                    wave: null,
                    initializeTimeline() {
                        C.p8.set(".e.weirdedOut", {
                            scale: .75,
                            opacity: 1,
                            rotate: 10
                        }), C.p8.set(".e.shrug", {
                            opacity: 0,
                            rotate: 10
                        }), C.p8.set(".e.wave", {
                            rotate: -25,
                            scale: .8
                        }), this.wave = C.p8.timeline().to(".e.wave", {
                            repeat: -1,
                            yoyo: !0,
                            ease: "linear",
                            rotate: 25
                        }, 0), this.timeline.add(this.wave)
                    },
                    onProgressChange(e, t) {
                        const s = t / 40;
                        this.wave.timeScale(s), this.timeline.play(), t >= 50 ? C.p8.timeline().to(".e.weirdedOut", {
                            opacity: 0
                        }, 2.5).to(".e.shrug", {
                            opacity: 1
                        }, 2.5) : C.p8.timeline().to(".e.weirdedOut", {
                            opacity: 1
                        }, 2.5).to(".e.shrug", {
                            opacity: 0
                        }, 2.5), t >= 100 && C.p8.to(".e.wave", {
                            opacity: 0,
                            scale: .4,
                            ease: "back.in",
                            duration: 1
                        })
                    }
                }),
                Mi = wi.extend({
                    elements: [{
                        class: "neighbor-container",
                        type: "container",
                        children: [{
                            class: "window",
                            type: "img",
                            pos: [-200, 100],
                            key: "window"
                        }, {
                            class: "backAway",
                            type: "img",
                            pos: [-50, 0],
                            key: "backAway"
                        }, {
                            class: "shrug",
                            type: "img",
                            pos: [436, 160],
                            key: "shrug"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.shrug", {
                            rotate: 10
                        });
                        const e = C.p8.timeline().to(".e.backAway", {
                            x: -800,
                            ease: "power2.in"
                        }, 0).to(".e.window", {
                            x: 800,
                            ease: "power2.in"
                        }, 0).to(".e.shrug", {
                            x: -200,
                            y: 0,
                            scale: 5,
                            rotate: -10,
                            ease: "power4.in"
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                Ci = He.extend({
                    imageManifest: {
                        cup: Promise.resolve().then(s.t.bind(s, 59043, 17)),
                        dish: Promise.resolve().then(s.t.bind(s, 74007, 17)),
                        fork: Promise.resolve().then(s.t.bind(s, 14671, 17)),
                        glass: Promise.resolve().then(s.t.bind(s, 88866, 17)),
                        gunk: Promise.resolve().then(s.t.bind(s, 36763, 17)),
                        knife: Promise.resolve().then(s.t.bind(s, 7971, 17)),
                        spoon: Promise.resolve().then(s.t.bind(s, 28386, 17))
                    }
                }),
                Di = Ci.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages(["glass", "glass5"], ["glass", "glass1"], ["glass", "glass2"], ["glass", "glass3"], ["glass", "glass4"]),
                    onLoadComplete() {
                        C.p8.set([".e.glass2", ".e.glass3", ".e.glass4", ".e.glass5"], {
                            y: 1500
                        })
                    },
                    onDiscreteProgress(e) {
                        let t = Math.round(e / 100 * 5);
                        t < 1 && (t = 1), t > 5 && (t = 5);
                        const s = [{
                            x: 200,
                            y: 400,
                            scale: 1.2,
                            duration: .5
                        }, {
                            x: -200,
                            y: 400,
                            scale: 1.2,
                            duration: .5
                        }, {
                            x: 150,
                            y: -50,
                            scale: 1,
                            duration: .5
                        }, {
                            x: -150,
                            y: -50,
                            scale: 1,
                            duration: .5
                        }, {
                            x: 0,
                            y: -300,
                            scale: .8,
                            duration: .4
                        }][t - 1];
                        C.p8.to(`.e.glass${t}`, s)
                    }
                }),
                Fi = Ci.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("fork", "knife", "spoon"),
                    onLoadComplete() {
                        C.p8.set([".e.fork", ".e.knife", ".e.spoon"], {
                            y: 1500
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.fork", {
                            x: -300,
                            y: 0
                        }).to(".e.spoon", {
                            x: 375,
                            y: 0
                        }).to(".e.knife", {
                            x: 300,
                            y: 0
                        })
                    }
                }),
                zi = Ci.extend({
                    elements: Ye.elementsFromImages("fork", "knife", "spoon", "gunk"),
                    onLoadComplete() {
                        C.p8.set(".e.fork", {
                            x: -300
                        }), C.p8.set(".e.spoon", {
                            x: 375
                        }), C.p8.set(".e.knife", {
                            x: 300
                        }), C.p8.set(".e.gunk", {
                            y: 1500,
                            rotate: 60,
                            scaleY: 1.1
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.gunk", {
                            scaleY: .9,
                            y: -50
                        }), this.timeline.to(".e.gunk", {
                            scaleY: 1,
                            y: 0
                        }), this.timeline.to(".e.gunk", {
                            rotate: 0
                        })
                    }
                }),
                Li = Ci.extend({
                    elements: Ye.elementsFromImages("fork", "knife", "spoon", "gunk", "dish"),
                    onLoadComplete() {
                        C.p8.set(".e.fork", {
                            x: -300
                        }), C.p8.set(".e.spoon", {
                            x: 375
                        }), C.p8.set(".e.knife", {
                            x: 300
                        }), C.p8.set(".e.dish", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.dish", {
                            opacity: 1
                        }).to(".e.gunk", {
                            opacity: 0
                        }, "<")
                    },
                    onStartProgress() {
                        Ye.startShake("gunk", 4, 4), Ye.startShake("dish", 4, 4)
                    },
                    onStopProgress() {
                        Ye.stopShake("gunk"), Ye.stopShake("dish")
                    }
                }),
                Ri = He.extend({
                    imageManifest: {
                        fridgeClosed: Promise.resolve().then(s.t.bind(s, 94325, 17)),
                        trash: Promise.resolve().then(s.t.bind(s, 86602, 17)),
                        yogurt: Promise.resolve().then(s.t.bind(s, 44190, 17))
                    }
                }),
                Ii = Ri.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("fridgeClosed"),
                    onDiscreteProgress() {
                        Ye.squashOnce("fridgeClosed")
                    }
                }),
                Oi = Ri.extend({
                    elements: Ye.elementsFromImages("yogurt"),
                    onStartProgress() {
                        Ye.startShake("yogurt", 5, 3, 8)
                    },
                    onStopProgress() {
                        Ye.stopShake("yogurt")
                    }
                }),
                Bi = Ri.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("yogurt"),
                    onDiscreteProgress() {
                        Ye.scaleBounce("yogurt", 1.5)
                    }
                }),
                Yi = Ri.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("trash", "yogurt"),
                    onLoadComplete() {
                        C.p8.set(".e.yogurt", {
                            scale: .3,
                            y: -400
                        }), C.p8.set(".e.trash", {
                            scale: .8,
                            y: 350
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.yogurt", {
                            y: -460
                        }).to(".e.yogurt", {
                            y: 70
                        }).to(".e.yogurt", {
                            visibility: "hidden"
                        }).to(".e.trash", {
                            y: 420
                        }).to(".e.trash", {
                            y: 350
                        })
                    }
                });
            C.p8.registerPlugin(vt.X);
            const Ai = He.extend({
                    imageManifest: {
                        mop: Promise.resolve().then(s.t.bind(s, 67684, 17))
                    }
                }),
                Hi = Ai.extend({
                    elements: Ye.elementsFromImages("mop"),
                    initializeTimeline() {
                        this.timeline.to(".e.mop", {
                            rotate: -60
                        })
                    }
                }),
                Gi = Ai.extend({
                    elements: Ye.elementsFromImages("mop"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.mop", {
                            rotate: -60
                        }, {
                            rotate: 60
                        })
                    }
                }),
                Vi = Ai.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("mop"),
                    onLoadComplete() {
                        C.p8.set(".e.mop", {
                            rotate: 60
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            repeat: 1,
                            yoyo: !0
                        }).to(".e.mop", {
                            motionPath: {
                                path: "M253.56,123.56c0-30.93-29.67-122-96-122c-30.93,0-86,19.87-86,74c0,30.93,25.07,48,56,48s56-17.07,56-48 c0-55.82-55.07-74-86-74c-62.31,0-96,91.07-96,122",
                                offsetX: -245,
                                offsetY: -100,
                                runBackwards: !0
                            },
                            ease: "none"
                        });
                        this.timeline.add(e)
                    }
                }),
                Ei = Ai.extend({
                    elements: Ye.elementsFromImages("mop"),
                    onStartProgress() {
                        Ye.startHoldShake("mop")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("mop")
                    }
                }),
                qi = He.extend({
                    imageManifest: {
                        boxclosed: Promise.resolve().then(s.t.bind(s, 1667, 17)),
                        boxopen: Promise.resolve().then(s.t.bind(s, 14795, 17)),
                        drink1: Promise.resolve().then(s.t.bind(s, 32574, 17)),
                        drink2: Promise.resolve().then(s.t.bind(s, 66201, 17)),
                        drink3: Promise.resolve().then(s.t.bind(s, 20981, 17)),
                        ham: Promise.resolve().then(s.t.bind(s, 75203, 17)),
                        pizza: Promise.resolve().then(s.t.bind(s, 65688, 17))
                    }
                }),
                Ni = qi.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("boxclosed"),
                    onLoadComplete() {
                        C.p8.set(".e.boxclosed", {
                            x: -100,
                            y: 750,
                            scale: 2
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.boxclosed", {
                            y: 0,
                            scale: 1,
                            ease: "back.inOut"
                        })
                    }
                }),
                Xi = qi.extend({
                    elements: Ye.elementsFromImages("boxclosed", "drink3", "drink2", "drink1"),
                    onLoadComplete() {
                        C.p8.set(".e.boxclosed", {
                            x: -100
                        }), C.p8.set(".e.drink1", {
                            x: 200,
                            y: 750,
                            scale: 2
                        }), C.p8.set(".e.drink2", {
                            y: 700,
                            scale: 2
                        }), C.p8.set(".e.drink3", {
                            x: 400,
                            y: 700,
                            scale: 2
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.drink1", {
                            y: -500,
                            scale: 1
                        }).to(".e.drink1", {
                            x: 250,
                            y: -200
                        }).to(".e.drink2", {
                            y: -500,
                            scale: 1
                        }, "<").to(".e.drink2", {
                            x: 150,
                            y: -250
                        }).to(".e.drink3", {
                            x: 500,
                            y: -500,
                            scale: 1
                        }, "<").to(".e.drink3", {
                            x: 350,
                            y: -250
                        })
                    }
                }),
                Wi = qi.extend({
                    elements: Ye.elementsFromImages("drink3", "drink2", "drink1", "boxclosed", "ham"),
                    onLoadComplete() {
                        C.p8.set(".e.boxclosed", {
                            x: -100
                        }), C.p8.set(".e.drink1", {
                            x: 250,
                            y: -200
                        }), C.p8.set(".e.drink2", {
                            x: 150,
                            y: -250
                        }), C.p8.set(".e.drink3", {
                            x: 350,
                            y: -250
                        }), C.p8.set(".e.ham", {
                            y: 750,
                            scale: 2
                        })
                    }
                }),
                Ui = qi.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("drink3", "drink2", "drink1", "boxclosed"),
                    onLoadComplete() {
                        C.p8.set(".e.boxclosed", {
                            x: -100
                        }), C.p8.set(".e.drink1", {
                            x: 250,
                            y: -200
                        }), C.p8.set(".e.drink2", {
                            x: 150,
                            y: -250
                        }), C.p8.set(".e.drink3", {
                            x: 350,
                            y: -250
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.boxclosed", {
                            x: -100,
                            y: 750,
                            scale: 2,
                            ease: "back.inOut"
                        })
                    }
                }),
                $i = qi.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("drink3", "drink2", "drink1", "ham"),
                    onLoadComplete() {
                        C.p8.set(".e.drink1", {
                            x: 250,
                            y: -200
                        }), C.p8.set(".e.drink2", {
                            x: 150,
                            y: -250
                        }), C.p8.set(".e.drink3", {
                            x: 350,
                            y: -250
                        }), C.p8.set(".e.ham", {
                            y: 750,
                            scale: 2
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.ham", {
                            x: -150,
                            y: -100,
                            scale: 1,
                            ease: "back.inOut"
                        })
                    }
                }),
                ji = qi.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("boxclosed", "boxopen"),
                    onLoadComplete() {
                        C.p8.set(".e.boxclosed", {
                            y: 100
                        }), C.p8.set(".e.boxopen", {
                            x: -35,
                            y: -75,
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("boxclosed", "boxopen", .5)
                    }
                }),
                Ki = qi.extend({
                    elements: Ye.elementsFromImages("pizza"),
                    initializeTimeline() {
                        this.timeline.to(".e.pizza", {
                            y: 750,
                            scale: 2
                        }).set(".e.pizza", {
                            clipPath: "inset(0 0 30% 0)"
                        }).to(".e.pizza", {
                            y: 0,
                            scale: 1
                        }, "<").to(".e.pizza", {
                            y: 850,
                            scale: 2
                        }).set(".e.pizza", {
                            clipPath: "inset(0 0 50% 0)"
                        }).to(".e.pizza", {
                            y: 0,
                            scale: 1
                        }, "<").to(".e.pizza", {
                            y: 900,
                            scale: 2
                        }).set(".e.pizza", {
                            clipPath: "inset(0 0 60% 0)"
                        }).to(".e.pizza", {
                            y: 0,
                            scale: 1
                        }, "<").to(".e.pizza", {
                            y: 1100,
                            scale: 2
                        }).set(".e.pizza", {
                            clipPath: "inset(0 0 70% 0)"
                        }).to(".e.pizza", {
                            y: 0,
                            scale: 1
                        }, "<").to(".e.pizza", {
                            y: 1250,
                            scale: 2
                        }).set(".e.pizza", {
                            clipPath: "inset(0 0 100% 0)"
                        })
                    }
                }),
                Zi = He.extend({
                    imageManifest: {
                        cup1: Promise.resolve().then(s.t.bind(s, 50823, 17)),
                        cup2: Promise.resolve().then(s.t.bind(s, 67803, 17)),
                        cup3: Promise.resolve().then(s.t.bind(s, 65485, 17)),
                        cup4: Promise.resolve().then(s.t.bind(s, 99361, 17))
                    },
                    stepDuration: .5
                }),
                Ji = Zi.extend({
                    elements: Ye.elementsFromImages("cup4", "cup2", "cup1", "cup3"),
                    initializeTimeline() {
                        C.p8.set(".e.cup1", {
                            scale: .5,
                            x: -270,
                            y: -50
                        }), C.p8.set(".e.cup2", {
                            scale: .5,
                            x: 220,
                            y: 170
                        }), C.p8.set(".e.cup3", {
                            scale: .5,
                            x: -170,
                            y: 150
                        }), C.p8.set(".e.cup4", {
                            scale: .5,
                            x: 150,
                            y: -20
                        })
                    },
                    onLoadComplete() {
                        this.timeline.to(".e.cup1", {
                            rotate: 180,
                            x: 800,
                            y: -200
                        })
                    }
                }),
                _i = Zi.extend({
                    elements: Ye.elementsFromImages("cup4", "cup2", "cup3"),
                    initializeTimeline() {
                        C.p8.set(".e.cup2", {
                            scale: .5,
                            x: 220,
                            y: 170
                        }), C.p8.set(".e.cup3", {
                            scale: .5,
                            x: -170,
                            y: 150
                        }), C.p8.set(".e.cup4", {
                            scale: .5,
                            x: 150,
                            y: -20
                        })
                    },
                    onLoadComplete() {
                        this.timeline.to(".e.cup2", {
                            rotate: -180,
                            x: -800,
                            y: -200
                        })
                    }
                }),
                Qi = Zi.extend({
                    elements: Ye.elementsFromImages("cup4", "cup3"),
                    initializeTimeline() {
                        C.p8.set(".e.cup3", {
                            scale: .5,
                            x: -170,
                            y: 150
                        }), C.p8.set(".e.cup4", {
                            scale: .5,
                            x: 150,
                            y: -20
                        })
                    },
                    onLoadComplete() {
                        this.timeline.to(".e.cup3", {
                            rotate: 180,
                            x: 800,
                            y: -200
                        })
                    }
                }),
                eo = Zi.extend({
                    elements: Ye.elementsFromImages("cup4"),
                    initializeTimeline() {
                        C.p8.set(".e.cup4", {
                            scale: .5,
                            x: 150,
                            y: -20
                        })
                    },
                    onLoadComplete() {
                        this.timeline.to(".e.cup4", {
                            scale: .85,
                            x: 0,
                            y: 0
                        }), this.timeline.to(".e.cup4", {
                            rotate: 13
                        }), this.timeline.to(".e.cup4", {
                            rotate: -12
                        }), this.timeline.to(".e.cup4", {
                            rotate: 15
                        })
                    }
                }),
                to = Zi.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("cup4"),
                    onLoadComplete() {
                        C.p8.set(".e.cup4", {
                            scale: .85,
                            rotate: 15
                        }), C.p8.to(".e.cup4", {
                            rotate: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.cup4", {
                            x: 600,
                            y: -1500,
                            rotate: 250
                        })
                    }
                }),
                so = He.extend({
                    imageManifest: {
                        bookbeginning: Promise.resolve().then(s.t.bind(s, 91660, 17)),
                        birdbook: Promise.resolve().then(s.t.bind(s, 46347, 17)),
                        redwing: Promise.resolve().then(s.t.bind(s, 76190, 17)),
                        shrewp: Promise.resolve().then(s.t.bind(s, 67920, 17)),
                        shrewpbranch: Promise.resolve().then(s.t.bind(s, 77522, 17)),
                        shrewpscribble: Promise.resolve().then(s.t.bind(s, 8668, 17)),
                        warbler: Promise.resolve().then(s.t.bind(s, 99650, 17))
                    }
                }),
                io = so.extend({
                    elements: Ye.elementsFromImages("shrewpbranch")
                }),
                oo = so.extend({
                    stepDuration: 1.25,
                    elements: Ye.elementsFromImages("birdbook", "bookbeginning"),
                    onLoadComplete() {
                        C.p8.set(".e.bookbeginning", {
                            x: -275,
                            y: -25,
                            scale: 1.5,
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("birdbook", "bookbeginning", .5, 1.5)).to(".e.bookbeginning", {
                            x: -500,
                            scale: 3,
                            opacity: 0,
                            delay: .25
                        })
                    }
                }),
                no = so.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("warbler"),
                    onLoadComplete() {
                        C.p8.fromTo(".e.warbler", {
                            x: 1e3
                        }, {
                            x: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.warbler", {
                            x: -1e3
                        })
                    }
                }),
                ao = so.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("redwing"),
                    onLoadComplete() {
                        C.p8.fromTo(".e.redwing", {
                            x: 1e3
                        }, {
                            x: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.redwing", {
                            x: -1e3
                        })
                    }
                }),
                ro = so.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("shrewp", "birdbook"),
                    onLoadComplete() {
                        C.p8.set(".e.birdbook", {
                            scale: 3,
                            opacity: 0
                        }), C.p8.fromTo(".e.shrewp", {
                            x: 1e3
                        }, {
                            x: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.shrewp", {
                            opacity: 0
                        }).to(".e.birdbook", {
                            scale: 1,
                            opacity: 1
                        }, "<0.25")
                    }
                }),
                lo = so.extend({
                    elements: Ye.elementsFromImages("shrewpscribble"),
                    onLoadComplete() {
                        C.p8.set(".e.shrewpscribble", {
                            clipPath: "inset(100% 0 0 0)",
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.shrewpscribble", {
                            clipPath: "inset(0% 0 0 0)",
                            opacity: 1
                        })
                    }
                }),
                po = He.extend({
                    stepDuration: .35,
                    elements() {
                        return [{
                            class: "image-container",
                            type: "container",
                            children: [{
                                class: "move",
                                type: "img",
                                pos: [0, 0],
                                key: Object.keys(this.imageManifest)[0]
                            }, {
                                class: "image",
                                type: "img",
                                pos: [0, 0],
                                key: Object.keys(this.imageManifest)[0]
                            }]
                        }]
                    },
                    onLoadComplete() {
                        C.p8.set(".e.move", {
                            opacity: 0
                        })
                    },
                    onDiscreteProgress(e, t, s) {
                        const i = s.radians;
                        C.p8.set(".e.move", {
                            opacity: 1
                        }), C.p8.to(".e.move", {
                            opacity: 0,
                            x: 150 * Math.cos(i),
                            y: 150 * Math.sin(i),
                            duration: this.stepDuration,
                            onComplete() {
                                C.p8.set(this.targets()[0], {
                                    x: 0,
                                    y: 0
                                })
                            }
                        })
                    }
                }),
                co = He.extend({
                    imageManifest: {
                        sink: Promise.resolve().then(s.t.bind(s, 54113, 17)),
                        tray: Promise.resolve().then(s.t.bind(s, 26518, 17)),
                        handle: Promise.resolve().then(s.t.bind(s, 40555, 17))
                    }
                }),
                mo = co.extend({
                    hasParticles: !1,
                    elements: [{
                        class: "water",
                        type: "div",
                        html: ""
                    }, {
                        class: "handle",
                        type: "img",
                        pos: [135, 315],
                        key: "handle"
                    }, {
                        class: "sink",
                        type: "img",
                        key: "sink"
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.handle", {
                            transformOrigin: "center bottom"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.handle", {
                            rotate: -30
                        })
                    },
                    onProgress(e) {
                        this.hasParticles || e < 90 || (this.hasParticles = !0, Ye.addParticleEmitter({
                            container: "water",
                            numberOfParticles: 100,
                            settings: {
                                frequency: .05,
                                from: {
                                    backgroundColor: "#165C7A",
                                    borderRadius: "5",
                                    borderRight: "4px solid black",
                                    borderTop: "4px solid black",
                                    width: 10,
                                    height: 30
                                },
                                boundaries: {
                                    left: 425,
                                    right: 450,
                                    top: 345,
                                    bottom: 346
                                },
                                minSize: 10,
                                maxSize: 15,
                                randomAngleRange: 3,
                                force: 3,
                                gravity: 1
                            }
                        }))
                    }
                }),
                ho = co.extend({
                    className: "make-ice",
                    stepDuration: .35,
                    elements() {
                        const e = Ye.elementsFromImages("tray");
                        for (let t = 0; t < 8; t++) e.push({
                            class: "cube cube-" + 2 * t,
                            type: "div",
                            pos: [353, 113 + 100 * t],
                            html: ""
                        }), e.push({
                            class: "cube cube-" + (2 * t + 1),
                            type: "div",
                            pos: [518, 113 + 100 * t],
                            html: ""
                        });
                        return e
                    },
                    onDiscreteProgress() {
                        const e = 2 * (8 - this.model.get("tapsLeft"));
                        C.p8.to(`.e.cube-${e}`, {
                            opacity: .8,
                            scale: 1,
                            duration: .5
                        }), C.p8.to(`.e.cube-${e+1}`, {
                            opacity: .8,
                            scale: 1,
                            duration: .5,
                            delay: .2
                        })
                    }
                }),
                uo = po.extend({
                    imageManifest: {
                        fridge: Promise.resolve().then(s.t.bind(s, 30775, 17))
                    }
                }),
                go = He.extend({
                    imageManifest: {
                        chair: Promise.resolve().then(s.t.bind(s, 44712, 17)),
                        chaircushions: Promise.resolve().then(s.t.bind(s, 6518, 17)),
                        pipe: Promise.resolve().then(s.t.bind(s, 92445, 17)),
                        pipespigot: Promise.resolve().then(s.t.bind(s, 64006, 17)),
                        spigot: Promise.resolve().then(s.t.bind(s, 93109, 17))
                    }
                }),
                yo = go.extend({
                    elements: Ye.elementsFromImages("pipe", "spigot"),
                    initializeTimeline() {
                        this.timeline.to(".e.spigot", {
                            rotate: -720
                        })
                    }
                }),
                bo = go.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("chair", "chaircushions"),
                    onDiscreteProgress() {
                        C.p8.to(".e.chaircushions", {
                            y: 500,
                            x: 1500,
                            rotate: 360
                        })
                    }
                }),
                xo = go.extend({
                    elements: Ye.elementsFromImages("chair"),
                    onStartProgress() {
                        Ye.startShake("chair", 6, 4, 2)
                    },
                    onStopProgress() {
                        Ye.stopShake("chair")
                    }
                }),
                fo = go.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("chair", "chaircushions"),
                    onLoadComplete() {
                        C.p8.set(".e.chaircushions", {
                            x: 1500,
                            y: 500,
                            rotate: 360
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.chaircushions", {
                            x: 0,
                            y: -10,
                            rotate: 0
                        }).to(".e.chaircushions", {
                            filter: "brightness(50%)",
                            duration: 1
                        })
                    }
                }),
                vo = go.extend({
                    elements: Ye.elementsFromImages("pipe", "spigot"),
                    initializeTimeline() {
                        this.timeline.to(".e.spigot", {
                            rotate: 720
                        })
                    }
                }),
                ko = He.extend({
                    imageManifest: {
                        curtainclean: Promise.resolve().then(s.t.bind(s, 58527, 17)),
                        curtainmold: Promise.resolve().then(s.t.bind(s, 24736, 17)),
                        spatula: Promise.resolve().then(s.t.bind(s, 93166, 17))
                    }
                }),
                Po = ko.extend({
                    elements: Ye.elementsFromImages("curtainclean"),
                    initializeTimeline() {
                        this.timeline.to(".e.curtainclean", {
                            rotate: 20
                        }).to(".e.curtainclean", {
                            rotate: -20,
                            scale: .9
                        }).to(".e.curtainclean", {
                            rotate: 20,
                            scale: 1.1
                        }).to(".e.curtainclean", {
                            rotate: 0,
                            scale: 1
                        })
                    }
                }),
                wo = ko.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("curtainclean", "curtainmold"),
                    onLoadComplete() {
                        C.p8.set(".e.curtainmold", {
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.curtainclean", {
                            rotateY: 180,
                            opacity: 0
                        }).to(".e.curtainmold", {
                            rotateY: 180,
                            opacity: 1
                        }, "<")
                    }
                }),
                To = ko.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("curtainmold", "spatula"),
                    onLoadComplete() {
                        C.p8.set(".e.curtainmold", {
                            rotateY: 180
                        }), C.p8.set(".e.spatula", {
                            y: 500,
                            rotate: 40
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.spatula", {
                            scale: .5,
                            y: 200,
                            x: -150
                        }).to(".e.curtainmold", {
                            y: -50,
                            scaleY: .9
                        }, "<").to(".e.curtainmold", {
                            y: 0,
                            scaleY: 1
                        }).to(".e.spatula", {
                            scale: 1,
                            rotate: 210,
                            x: -300,
                            y: -300
                        })
                    }
                }),
                So = ko.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("curtainmold", "spatula"),
                    onLoadComplete() {
                        C.p8.set(".e.curtainmold", {
                            rotateY: 180
                        }), C.p8.set(".e.spatula", {
                            x: -300,
                            y: -300,
                            rotate: 210
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.spatula", {
                            scale: .5,
                            y: 130,
                            x: -150
                        }).to(".e.curtainmold", {
                            x: 30,
                            y: 50,
                            scaleY: .9
                        }, "<").to(".e.curtainmold", {
                            x: 0,
                            y: 0,
                            scaleY: 1
                        }).to(".e.spatula", {
                            scale: 1,
                            rotate: 40,
                            x: 0,
                            y: 500
                        })
                    }
                }),
                Mo = ko.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("curtainmold", "spatula"),
                    onLoadComplete() {
                        C.p8.set(".e.curtainmold", {
                            rotateY: 180
                        }), C.p8.set(".e.spatula", {
                            y: 500,
                            rotate: 40
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.spatula", {
                            scale: .5,
                            y: 200,
                            x: -150
                        }).to(".e.curtainmold", {
                            y: -50,
                            scaleY: .9
                        }, "<").to(".e.curtainmold", {
                            y: 0,
                            scaleY: 1
                        }).to(".e.spatula", {
                            scale: 1,
                            rotate: 210,
                            x: -300,
                            y: -300
                        })
                    }
                }),
                Co = ko.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("curtainmold", "spatula"),
                    onLoadComplete() {
                        C.p8.set(".e.curtainmold", {
                            rotateY: 180
                        }), C.p8.set(".e.spatula", {
                            x: -300,
                            y: -300,
                            rotate: 210
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.spatula", {
                            scale: .5,
                            y: 130,
                            x: -150
                        }).to(".e.curtainmold", {
                            x: 30,
                            y: 50,
                            scaleY: .9
                        }, "<").to(".e.curtainmold", {
                            x: 0,
                            y: 0,
                            scaleY: 1
                        }).to(".e.spatula", {
                            scale: 1,
                            rotate: 40,
                            x: 0,
                            y: 500
                        })
                    }
                }),
                Do = ko.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("spatula"),
                    onLoadComplete() {
                        C.p8.set(".e.spatula", {
                            y: 1500,
                            scaleY: 1.1,
                            rotate: 40
                        }), C.p8.to(".e.spatula", {
                            y: 0,
                            scaleY: 1
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.spatula", {
                            y: -500,
                            x: 1500,
                            rotate: 200
                        })
                    }
                }),
                Fo = He.extend({
                    imageManifest: {
                        fold0: Promise.resolve().then(s.t.bind(s, 3182, 17)),
                        fold1: Promise.resolve().then(s.t.bind(s, 54666, 17)),
                        fold2: Promise.resolve().then(s.t.bind(s, 97015, 17)),
                        fold3: Promise.resolve().then(s.t.bind(s, 90438, 17)),
                        fold4: Promise.resolve().then(s.t.bind(s, 19284, 17)),
                        nap: Promise.resolve().then(s.t.bind(s, 98624, 17)),
                        zzz: Promise.resolve().then(s.t.bind(s, 61563, 17)),
                        pile: Promise.resolve().then(s.t.bind(s, 65820, 17)),
                        socks0: Promise.resolve().then(s.t.bind(s, 92769, 17)),
                        socks1: Promise.resolve().then(s.t.bind(s, 12564, 17)),
                        socks2: Promise.resolve().then(s.t.bind(s, 2637, 17)),
                        socks3: Promise.resolve().then(s.t.bind(s, 57225, 17))
                    }
                }),
                zo = Fo.extend({
                    elements: Ye.elementsFromImages("socks0", "socks1", "socks2", "socks3"),
                    onLoadComplete() {
                        C.p8.set(".e.socks0", {
                            x: 50,
                            y: 50,
                            transformOrigin: "450px 450px"
                        }), C.p8.set(".e.socks1", {
                            x: 550,
                            y: 550,
                            transformOrigin: "-50px -50px"
                        }), C.p8.set(".e.socks2", {
                            x: 100,
                            y: 450,
                            transformOrigin: "400px 50px"
                        }), C.p8.set(".e.socks3", {
                            x: 550,
                            y: 150,
                            transformOrigin: "-50px 350px"
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.socks0", {
                                rotate: 43,
                                duration: .12,
                                ease: "none"
                            }).to(".e.socks0", {
                                y: 700,
                                duration: .02,
                                ease: "none"
                            }),
                            t = C.p8.timeline().to(".e.socks2", {
                                rotate: 115,
                                duration: .32,
                                ease: "none"
                            }).to(".e.socks2", {
                                y: 980,
                                duration: .02,
                                ease: "none"
                            }),
                            s = C.p8.timeline().to(".e.socks1", {
                                rotate: 219,
                                duration: .61,
                                ease: "none"
                            }).to(".e.socks1", {
                                y: 1180,
                                duration: .02,
                                ease: "none"
                            }),
                            i = C.p8.timeline().to(".e.socks3", {
                                rotate: 291,
                                duration: .81,
                                ease: "none"
                            }).to(".e.socks3", {
                                y: 715,
                                duration: .02,
                                ease: "none"
                            }).to(".e.socks3", {
                                opacity: 1,
                                duration: 1
                            }, 0);
                        this.timeline.add(e), this.timeline.add(t, 0), this.timeline.add(s, 0), this.timeline.add(i, 0)
                    }
                }),
                Lo = Fo.extend({
                    hasStarted: !1,
                    elements() {
                        const e = Ye.elementsFromImages("socks0", "socks1", "socks2", "socks3");
                        return e.push({
                            class: "pile-container",
                            type: "container",
                            children: Ye.elementsFromImages("pile")
                        }), e
                    },
                    onLoadComplete() {
                        C.p8.set(".e.pile-container", {
                            width: 1e3,
                            height: 1e3,
                            opacity: 0,
                            y: -400,
                            transformOrigin: "center bottom"
                        }), C.p8.set(".e.socks0", {
                            x: 50,
                            y: 700,
                            rotate: 43,
                            transformOrigin: "450px 450px"
                        }), C.p8.set(".e.socks1", {
                            x: 550,
                            y: 1180,
                            rotate: 219,
                            transformOrigin: "-50px -50px"
                        }), C.p8.set(".e.socks2", {
                            x: 100,
                            y: 980,
                            rotate: 115,
                            transformOrigin: "400px 50px"
                        }), C.p8.set(".e.socks3", {
                            x: 550,
                            y: 715,
                            rotate: 291,
                            transformOrigin: "-50px 350px"
                        })
                    },
                    onStartProgress() {
                        this.hasStarted ? Ye.startHoldShake("pile") : (C.p8.timeline().to(".e.pile-container", {
                            opacity: 1,
                            duration: .05
                        }).to(".e.pile-container", {
                            y: 220,
                            duration: .15
                        }, "<").to(".e.pile-container", {
                            scaleY: .5,
                            duration: .05
                        }).to(".e.pile-container", {
                            scaleY: 1,
                            duration: .08
                        }).call(Ye.startHoldShake, ["pile"]), this.hasStarted = !0)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("pile")
                    }
                }),
                Ro = Fo.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("fold4", "fold3", "fold2", "fold1", "fold0"),
                    onLoadComplete() {
                        C.p8.set(".e.fold4", {
                            y: -100,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.fold0", {
                            opacity: 0
                        }).to(".e.fold1", {
                            opacity: 0
                        }).to(".e.fold2", {
                            opacity: 0
                        }).to(".e.fold4", {
                            y: 0,
                            opacity: 1
                        }).to(".e.fold3", {
                            opacity: 0
                        }, "<")
                    }
                }),
                Io = Fo.extend({
                    elements: Ye.elementsFromImages("nap", ["zzz", null, [175, 350]]),
                    onLoadComplete() {
                        C.p8.timeline({
                            repeat: -1,
                            yoyo: !0,
                            ease: "none"
                        }).to(".e.zzz", {
                            opacity: .25,
                            duration: .4
                        }).to(".e.zzz", {
                            opacity: 1,
                            duration: .4
                        })
                    }
                }),
                Oo = He.extend({
                    imageManifest: {
                        box: Promise.resolve().then(s.t.bind(s, 19680, 17)),
                        dish: Promise.resolve().then(s.t.bind(s, 5026, 17)),
                        tub: Promise.resolve().then(s.t.bind(s, 74752, 17))
                    }
                }),
                Bo = Oo.extend({
                    stepDuration: .65,
                    elements: Ye.elementsFromImages("box"),
                    onLoadComplete() {
                        C.p8.set(".e.box", {
                            y: -400,
                            scale: .4
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.box", {
                            y: -340,
                            scale: .9
                        }).fillTime(.5).to(".e.box", {
                            y: -0,
                            scale: 1,
                            ease: "back.out(2)"
                        })
                    }
                }),
                Yo = Oo.extend({
                    elements: Ye.elementsFromImages("tub", "box"),
                    onLoadComplete() {
                        C.p8.set(".e.box", {
                            x: 0,
                            y: 0
                        }), C.p8.set(".e.tub", {
                            scaleX: 1.1,
                            x: -1500
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.box", {
                            x: 1500,
                            y: -500,
                            rotate: 360,
                            scaleX: 1.2
                        }).to(".e.tub", {
                            x: 20,
                            scaleX: .9
                        }).to(".e.tub", {
                            x: 0,
                            scaleX: 1
                        }).to(".e.tub", {
                            scale: 1.1
                        }).to(".e.tub", {
                            scale: 1
                        })
                    }
                }),
                Ao = Oo.extend({
                    elements: Ye.elementsFromImages(["tub", "back"], ["dish", "dish1"], ["dish", "dish2"], ["dish", "dish3"], ["tub", "front"]),
                    onLoadComplete() {
                        C.p8.set([".e.dish1", ".e.dish2", ".e.dish3"], {
                            y: -1500,
                            scale: .5,
                            filter: "brightness(60%)"
                        }), C.p8.set(".e.front", {
                            clip: "rect(430px 1000px 1000px 0px)"
                        }), C.p8.to([".e.front", ".e.back"], {
                            y: 300
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.dish1", {
                            y: 350,
                            scale: .3
                        }).to(".e.dish1", {
                            filter: "brightness(100%)",
                            scale: .5,
                            y: -100,
                            x: 100
                        }).to(".e.dish2", {
                            y: 350,
                            scale: .3
                        }).to(".e.dish2", {
                            filter: "brightness(100%)",
                            scale: .5,
                            y: -150,
                            x: 140
                        }).to(".e.dish3", {
                            y: 350,
                            scale: .3
                        }).to(".e.dish3", {
                            filter: "brightness(100%)",
                            scale: .5,
                            y: -200,
                            x: 180
                        })
                    }
                }),
                Ho = Oo.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages(["dish", "dish1"], ["dish", "dish2"], ["dish", "dish3"]),
                    onLoadComplete() {
                        C.p8.set(".e.dish1", {
                            x: 100,
                            y: -100,
                            scale: .5
                        }), C.p8.set(".e.dish2", {
                            x: 140,
                            y: -150,
                            scale: .5
                        }), C.p8.set(".e.dish3", {
                            x: 180,
                            y: -200,
                            scale: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.dish3", {
                            x: -300,
                            y: 300,
                            scale: .6
                        }).to(".e.dish2", {
                            x: 0,
                            y: 0,
                            scale: .6
                        }).to(".e.dish1", {
                            x: 300,
                            y: -300,
                            scale: .6
                        })
                    }
                }),
                Go = He.extend({
                    imageManifest: {
                        nail: Promise.resolve().then(s.t.bind(s, 9963, 17)),
                        picture: Promise.resolve().then(s.t.bind(s, 8031, 17))
                    }
                }),
                Vo = Go.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages(["nail", null, [-200, 0]], "picture"),
                    onLoadComplete() {
                        C.p8.set(".e.picture", {
                            y: 200,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        const e = Ie.t.create("custom", "M0,0 C0.126,0.382 0.282,0.852 0.44,1 0.632,1.18 0.818,1.001 1,1 ");
                        this.timeline.to(".e.picture", {
                            opacity: 1,
                            duration: .25
                        }).to(".e.picture", {
                            y: 0,
                            ease: e
                        }, "<").to(".e.picture", {
                            rotate: -5,
                            ease: e
                        }, "<")
                    }
                }),
                Eo = Go.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("picture"),
                    onLoadComplete() {
                        C.p8.set(".e.picture", {
                            rotate: -5
                        })
                    },
                    initializeTimeline() {
                        const e = Ie.t.create("custom", "M0,0 C0.126,0.382 0.282,0.852 0.44,1 0.632,1.18 0.818,1.001 1,1 ");
                        this.timeline.to(".e.picture", {
                            rotate: 5,
                            ease: e
                        })
                    }
                }),
                qo = Go.extend({
                    stepDuration: .6,
                    elements: Ye.elementsFromImages(["nail", null, [-200, 0]], "picture"),
                    onLoadComplete() {
                        C.p8.set(".e.picture", {
                            rotate: 5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.picture", {
                            rotate: 0,
                            duration: .35
                        }).to(".e.picture", {
                            y: 300,
                            duration: .15,
                            delay: .2
                        }).to(".e.picture", {
                            opacity: 0,
                            duration: .15
                        }, "-=0.15")
                    }
                }),
                No = Go.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages(["nail", null, [-200, 0]], "picture"),
                    onLoadComplete() {
                        C.p8.set(".e.picture", {
                            y: 200,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        const e = Ie.t.create("custom", "M0,0 C0.126,0.382 0.282,0.852 0.44,1 0.632,1.18 0.818,1.001 1,1 ");
                        this.timeline.to(".e.picture", {
                            opacity: 1,
                            duration: .25
                        }).to(".e.picture", {
                            y: 0,
                            ease: e
                        }, "<").to(".e.picture", {
                            ease: e
                        }, "<")
                    }
                }),
                Xo = He.extend({
                    imageManifest: {
                        book: Promise.resolve().then(s.t.bind(s, 58240, 17)),
                        bookbeginning: Promise.resolve().then(s.t.bind(s, 96689, 17)),
                        bookend: Promise.resolve().then(s.t.bind(s, 2372, 17)),
                        bookshelf: Promise.resolve().then(s.t.bind(s, 97616, 17)),
                        pile: Promise.resolve().then(s.t.bind(s, 18688, 17))
                    }
                }),
                Wo = Xo.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("book", "bookend"),
                    onLoadComplete() {
                        C.p8.set(".e.book", {
                            x: -180,
                            y: 20,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.book", {
                            opacity: 1
                        }).to(".e.bookend", {
                            opacity: 0,
                            duration: .5
                        }, "<").to(".e.book", {
                            scale: 1.5,
                            x: 15,
                            y: 15
                        }).to(".e.book", {
                            scale: 1.4,
                            x: 0,
                            y: 0
                        })
                    }
                }),
                Uo = Xo.extend({
                    elements: Ye.elementsFromImages("bookshelf", "pile"),
                    onLoadComplete() {
                        C.p8.set(".e.pile", {
                            scaleY: 1.2,
                            y: 1500
                        }), C.p8.set(".e.bookshelf", {
                            scale: .3
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.pile", {
                            y: 230,
                            scaleY: .8
                        }).to(".e.pile", {
                            y: 200,
                            scaleY: 1
                        }).to(".e.pile", {
                            x: 30,
                            rotate: -5,
                            duration: .5
                        }).to(".e.pile", {
                            x: 30,
                            rotate: 5,
                            duration: .5
                        }).to(".e.pile", {
                            x: 30,
                            rotate: -5,
                            duration: .5
                        }).to(".e.pile", {
                            x: 30,
                            rotate: 5,
                            duration: .5
                        }).to(".e.pile", {
                            x: 30,
                            rotate: -5,
                            duration: .5
                        }).to(".e.pile", {
                            x: 30,
                            rotate: 5,
                            duration: .5
                        }).to(".e.pile", {
                            x: 30,
                            rotate: -5,
                            duration: .5
                        }).to(".e.bookshelf", {
                            scale: 1.2,
                            duration: 5
                        }, "1")
                    }
                }),
                $o = Xo.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("bookshelf", "pile"),
                    onLoadComplete() {
                        C.p8.set(".e.bookshelf", {
                            scale: 1.2
                        }), C.p8.set(".e.pile", {
                            x: 30,
                            y: 200,
                            rotate: -5
                        })
                    },
                    onDiscreteProgress(e) {
                        const t = C.p8.timeline();
                        t.to(".e.pile", {
                            scale: .6,
                            x: "random(-200, 200)",
                            y: "random(-300, 300)"
                        }).to(".e.bookshelf", {
                            scale: 1.1,
                            y: 30
                        }, "<").to(".e.bookshelf", {
                            scale: 1.2,
                            y: 0
                        }), 100 === e ? t.to(".e.pile", {
                            scale: .1,
                            opacity: 0
                        }) : t.to(".e.pile", {
                            scale: 1
                        })
                    }
                }),
                jo = Xo.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("book", "bookbeginning"),
                    onLoadComplete() {
                        C.p8.set(".e.book", {
                            x: -180,
                            y: 20
                        }), C.p8.set(".e.bookbeginning", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bookbeginning", {
                            opacity: 1
                        }).to(".e.book", {
                            opacity: 0,
                            duration: .5
                        }, "<").to(".e.bookbeginning", {
                            scale: 1.1,
                            x: 15,
                            y: 15
                        }).to(".e.bookbeginning", {
                            scale: 1,
                            x: 0,
                            y: 0
                        })
                    }
                }),
                Ko = Xo.extend({
                    elements: Ye.elementsFromImages("bookbeginning"),
                    onLoadComplete() {
                        Ye.startShake("bookbeginning", 5, 2, .25)
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bookbeginning", {
                            scale: 2
                        }, "2").to(".e.bookbeginning", {
                            rotate: 360,
                            scale: 4,
                            opacity: 0
                        }, "4")
                    }
                }),
                Zo = He.extend({
                    elements() {
                        return [{
                            class: "image-container",
                            type: "container",
                            children: [{
                                class: "image",
                                type: "img",
                                pos: [0, 0],
                                key: Object.keys(this.imageManifest)[0]
                            }]
                        }]
                    },
                    initializeTimeline() {
                        const e = this.model.get("durationInMs"),
                            t = C.p8.timeline({
                                ease: pt.bJ.easeNone,
                                repeat: e / 2e3
                            }).to(".e.image", {
                                x: 3,
                                y: 3
                            }).to(".e.image", {
                                x: -3,
                                y: -3
                            }).to(".e.image", {
                                x: -3,
                                y: 3
                            }).to(".e.image", {
                                x: 3,
                                y: 3
                            }).to(".e.image", {
                                x: 3,
                                y: -3
                            }).to(".e.image", {
                                x: -3,
                                y: 3
                            }).to(".e.image", {
                                x: -3,
                                y: 3
                            }).to(".e.image", {
                                x: 3,
                                y: 3
                            }).to(".e.image", {
                                x: 3,
                                y: -3
                            }).to(".e.image", {
                                x: 3,
                                y: 3
                            }).to(".e.image", {
                                x: 3,
                                y: 3
                            });
                        t.name = "image", this.timeline.add(t)
                    },
                    onStartProgress() {
                        C.p8.to(".e.image", {
                            scale: .95,
                            duration: .25
                        })
                    },
                    onStopProgress() {
                        C.p8.to(".e.image", {
                            scale: 1,
                            duration: .25
                        })
                    }
                }),
                Jo = He.extend({
                    current: 0,
                    elements() {
                        return [{
                            class: "image0",
                            type: "img",
                            pos: [0, 0],
                            key: Object.keys(this.imageManifest)[0]
                        }, {
                            class: "image1",
                            type: "img",
                            pos: [0, 0],
                            key: Object.keys(this.imageManifest)[1]
                        }]
                    },
                    onLoadComplete() {
                        C.p8.set(".e.image1", {
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        const e = `.e.image${this.current}`;
                        this.current = 0 === this.current ? 1 : 0;
                        const t = `.e.image${this.current}`;
                        C.p8.to(e, {
                            opacity: 0,
                            duration: this.stepDuration
                        }), C.p8.to(t, {
                            opacity: 1,
                            duration: this.stepDuration
                        })
                    }
                }),
                _o = He.extend({
                    imageManifest: {
                        dustpan: Promise.resolve().then(s.t.bind(s, 56561, 17)),
                        paintCan: Promise.resolve().then(s.t.bind(s, 36895, 17)),
                        paintFull: Promise.resolve().then(s.t.bind(s, 88752, 17)),
                        paintSpill: Promise.resolve().then(s.t.bind(s, 38362, 17)),
                        sawdust: Promise.resolve().then(s.t.bind(s, 70797, 17)),
                        trash: Promise.resolve().then(s.t.bind(s, 19765, 17))
                    }
                }),
                Qo = _o.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "can-container",
                        type: "container",
                        children: Ye.elementsFromImages("paintCan", "paintFull")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.paintCan", {
                            opacity: 0
                        }), C.p8.set(".e.can-container", {
                            rotate: 90
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            ease: "linear"
                        }).to(".e.paintCan", {
                            opacity: 1
                        }, 0).to(".e.paintFull", {
                            opacity: 0
                        }, 0).to(".e.can-container", {
                            rotate: 0
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                en = Zo.extend({
                    imageManifest: {
                        fist: Promise.resolve().then(s.t.bind(s, 61567, 17))
                    }
                }),
                tn = Jo.extend({
                    stepDuration: .75,
                    imageManifest: {
                        paintSpill: Promise.resolve().then(s.t.bind(s, 38362, 17)),
                        sawdust: Promise.resolve().then(s.t.bind(s, 70797, 17))
                    }
                }),
                sn = _o.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("dustpan", "sawdust"),
                    onLoadComplete() {
                        C.p8.set(".e.dustpan", {
                            x: -300,
                            y: -250,
                            scale: .7
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.dustpan", {
                            x: 0,
                            y: 0,
                            scale: 1
                        }).to(".e.sawdust", {
                            scale: .8,
                            rotate: -25
                        }, "<")
                    }
                }),
                on = _o.extend({
                    elements: Ye.elementsFromImages("trash", "dustpan", "sawdust"),
                    onLoadComplete() {
                        C.p8.set(".e.sawdust", {
                            scale: .8,
                            rotate: -25
                        }), C.p8.set(".e.trash", {
                            y: 220,
                            scaleX: -.9,
                            scaleY: .9,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.trash", {
                            scaleX: -1,
                            scaleY: 1,
                            opacity: 1
                        }).to(".e.dustpan", {
                            y: -230,
                            scale: .6
                        }, 0).to(".e.sawdust", {
                            x: -10,
                            y: -225,
                            scale: .4
                        }, 0).to(".e.dustpan", {
                            rotate: 25
                        }, 1).to(".e.sawdust", {
                            rotate: -5
                        }, 1).to(".e.sawdust", {
                            y: 100,
                            opacity: 0,
                            duration: .5
                        }, 1.5);
                        this.timeline.add(e)
                    }
                }),
                nn = _o.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "can-container",
                        type: "container",
                        children: Ye.elementsFromImages("paintCan", "paintFull")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.paintCan", {
                            opacity: 0
                        }), C.p8.set(".e.can-container", {
                            scaleY: -1,
                            rotate: 90
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            ease: "linear"
                        }).to(".e.paintCan", {
                            opacity: 1
                        }, 0).to(".e.paintFull", {
                            opacity: 0
                        }, 0).to(".e.can-container", {
                            rotate: 180
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                an = He.extend({
                    imageManifest: {
                        drawer: Promise.resolve().then(s.t.bind(s, 11657, 17)),
                        fold1: Promise.resolve().then(s.t.bind(s, 31499, 17)),
                        fold2: Promise.resolve().then(s.t.bind(s, 12181, 17)),
                        fold3: Promise.resolve().then(s.t.bind(s, 36158, 17)),
                        fold4: Promise.resolve().then(s.t.bind(s, 27607, 17)),
                        shirt: Promise.resolve().then(s.t.bind(s, 43933, 17))
                    }
                }),
                rn = an.extend({
                    elements: [{
                        class: "laundry-container",
                        type: "container",
                        children: [{
                            class: "shirt",
                            type: "img",
                            pos: [0, 0],
                            key: "shirt"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.shirt", {
                            rotate: -180
                        });
                        const e = C.p8.timeline().to(".e.shirt", {
                            rotate: 0
                        });
                        this.timeline.add(e)
                    }
                }),
                ln = an.extend({
                    stepDuration: .25,
                    elements: [{
                        class: "laundry-container",
                        type: "container",
                        children: [{
                            class: "shirt",
                            type: "img",
                            pos: [0, 0],
                            key: "shirt"
                        }, {
                            class: "fold1",
                            type: "img",
                            pos: [0, -105],
                            key: "fold1"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.fold1", {
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.shirt", {
                            opacity: 0
                        }, 0).to(".e.fold1", {
                            opacity: 1
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                dn = an.extend({
                    stepDuration: .25,
                    elements: [{
                        class: "laundry-container",
                        type: "container",
                        children: [{
                            class: "fold1",
                            type: "img",
                            pos: [0, -105],
                            key: "fold1"
                        }, {
                            class: "fold3",
                            type: "img",
                            pos: [0, 0],
                            key: "fold3"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.fold3", {
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.fold1", {
                            opacity: 0
                        }, 0).to(".e.fold3", {
                            opacity: 1
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                pn = an.extend({
                    stepDuration: .25,
                    elements: [{
                        class: "laundry-container",
                        type: "container",
                        children: [{
                            class: "fold3",
                            type: "img",
                            pos: [0, 0],
                            key: "fold3"
                        }, {
                            class: "fold4",
                            type: "img",
                            pos: [0, 0],
                            key: "fold4"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.fold4", {
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.fold3", {
                            opacity: 0
                        }, 0).to(".e.fold4", {
                            opacity: 1
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                cn = an.extend({
                    stepDuration: 2,
                    elements: [{
                        class: "laundry-container",
                        type: "container",
                        children: [{
                            class: "drawer",
                            type: "img",
                            pos: [0, 0],
                            key: "drawer"
                        }, {
                            class: "fold4",
                            type: "img",
                            pos: [0, 0],
                            key: "fold4"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.drawer", {
                            opacity: .5,
                            scale: .8,
                            y: 50
                        });
                        const e = C.p8.timeline().to(".e.drawer", {
                            opacity: 1,
                            scale: 1,
                            y: 0,
                            ease: "power2.inOut",
                            duration: 1.2
                        }, 0).to(".e.fold4", {
                            x: -2,
                            y: -147,
                            scale: .6,
                            ease: "power2.inOut",
                            duration: 1.2
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                mn = He.extend({
                    stepDuration: .15,
                    elements() {
                        return [{
                            class: "image",
                            type: "img",
                            pos: [0, 0],
                            key: Object.keys(this.imageManifest)[0]
                        }]
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.image", {
                            scale: .9,
                            duration: .15
                        }).to(".e.image", {
                            scale: 1,
                            duration: .15
                        })
                    }
                }),
                hn = mn.extend({
                    imageManifest: {
                        basket: Promise.resolve().then(s.t.bind(s, 28592, 17))
                    }
                }),
                un = po.extend({
                    imageManifest: {
                        blanket: Promise.resolve().then(s.t.bind(s, 31012, 17))
                    }
                }),
                gn = He.extend({
                    stepDuration: .25,
                    imageManifest: {
                        army: Promise.resolve().then(s.t.bind(s, 66642, 17)),
                        foot: Promise.resolve().then(s.t.bind(s, 22704, 17))
                    },
                    elements: Ye.elementsFromImages("foot", "army"),
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.foot", {
                            y: 100,
                            duration: .25
                        }).to(".e.foot", {
                            y: 0,
                            duration: .25
                        })
                    }
                }),
                yn = ts.extend({
                    imageManifest: {
                        picnic: Promise.resolve().then(s.t.bind(s, 93341, 17))
                    }
                }),
                bn = He.extend({
                    imageManifest: {
                        mah: Promise.resolve().then(s.t.bind(s, 73793, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "mah",
                            images: {
                                crawl: [10, 10, 784, 326, 337, 108],
                                add6: [1588, 10, 367, 199, 385, 319],
                                add5: [1588, 426, 291, 202, 392, 355],
                                add4: [794, 596, 242, 209, 392, 381],
                                add3: [1588, 219, 318, 197, 387, 343],
                                add2: [1294, 596, 206, 202, 392, 398],
                                add1: [1889, 426, 144, 230, 376, 428],
                                add0: [1046, 596, 238, 203, 398, 381],
                                west: [804, 10, 382, 576, 212, 309],
                                south: [10, 346, 382, 576, 212, 309],
                                north: [402, 346, 382, 576, 212, 309],
                                east: [1196, 10, 382, 576, 212, 309]
                            }
                        }
                    }
                }),
                xn = bn.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["east", "north", "west", "south"]),
                    onLoadComplete() {
                        C.p8.set(".e.east, .e.north, .e.south, .e.west", {
                            scale: .3,
                            opacity: 0
                        }), C.p8.to(".e.west", {
                            scale: .8,
                            opacity: 1,
                            duration: .35,
                            ease: "back.out(2)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.west", {
                            x: -200,
                            y: -250
                        }, 0).to(".e.north", {
                            scale: .8,
                            opacity: 1,
                            ease: "back.out(2)"
                        }, 0).to(".e.north", {
                            x: 200,
                            y: -250
                        }, 1).to(".e.south", {
                            scale: .8,
                            opacity: 1,
                            ease: "back.out(2)"
                        }, 1).to(".e.south", {
                            x: -200,
                            y: 250
                        }, 2).to(".e.east", {
                            scale: .8,
                            opacity: 1,
                            ease: "back.out(2)"
                        }, 2).to(".e.east", {
                            x: 200,
                            y: 250
                        }, 3)
                    }
                }),
                fn = bn.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["east", "east2"],
                        ["north", "north2"],
                        ["west", "west2"],
                        ["south", "south2"], "east", "north", "west", "south"
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.east", {
                            x: 200,
                            y: 250,
                            scale: .8
                        }), C.p8.set(".e.north", {
                            x: 200,
                            y: -250,
                            scale: .8
                        }), C.p8.set(".e.south", {
                            x: -200,
                            y: 250,
                            scale: .8
                        }), C.p8.set(".e.west", {
                            x: -200,
                            y: -250,
                            scale: .8
                        }), C.p8.set(".e.north2", {
                            x: 700,
                            y: 250,
                            scale: .8,
                            opacity: 0
                        }), C.p8.set(".e.south2", {
                            x: 700,
                            y: -250,
                            scale: .8,
                            opacity: 0
                        }), C.p8.set(".e.west2", {
                            x: -700,
                            y: 250,
                            scale: .8,
                            opacity: 0
                        }), C.p8.set(".e.east2", {
                            x: -700,
                            y: -250,
                            scale: .8,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.north2", {
                            x: 400,
                            opacity: 1
                        }, 0).to(".e.south2", {
                            x: 400,
                            opacity: 1
                        }, 0).to(".e.west2", {
                            x: -400,
                            opacity: 1
                        }, 0).to(".e.east2", {
                            x: -400,
                            opacity: 1
                        }, 0)
                    }
                }),
                vn = bn.extend({
                    elements: Ye.elementsFromSprite("sprite", ["add0", "add1", "add2", "add3", "add4", "add5", "add6"]),
                    onLoadComplete() {
                        C.p8.set(".e.add0, .e.add1, .e.add2, .e.add3, .e.add4, .e.add5, .e.add6", {
                            visibility: "hidden"
                        }), C.p8.timeline({
                            repeat: -1
                        }).set(".e.add0", {
                            visibility: "visible"
                        }, 0).set(".e.add0", {
                            visibility: "hidden"
                        }, .2).set(".e.add1", {
                            visibility: "visible"
                        }, .2).set(".e.add1", {
                            visibility: "hidden"
                        }, .4).set(".e.add2", {
                            visibility: "visible"
                        }, .4).set(".e.add2", {
                            visibility: "hidden"
                        }, .6).set(".e.add3", {
                            visibility: "visible"
                        }, .6).set(".e.add3", {
                            visibility: "hidden"
                        }, .8).set(".e.add4", {
                            visibility: "visible"
                        }, .8).set(".e.add4", {
                            visibility: "hidden"
                        }, 1).set(".e.add5", {
                            visibility: "visible"
                        }, 1).set(".e.add5", {
                            visibility: "hidden"
                        }, 1.2).set(".e.add6", {
                            visibility: "visible"
                        }, 1.2).set(".e.add6", {
                            visibility: "hidden"
                        }, 1.4)
                    }
                }),
                kn = xn,
                Pn = fn,
                wn = bn.extend({
                    elements: Ye.elementsFromSprite("sprite", ["east", "north", "west", "south", ["east", "east2"],
                        ["north", "north2"],
                        ["west", "west2"],
                        ["south", "south2"]
                    ]),
                    initializeTimeline() {
                        this.timeline.to(".e.south2", {
                            x: -300,
                            y: -300,
                            rotate: 250,
                            opacity: 0,
                            duration: 1
                        }, .5).to(".e.west2", {
                            x: -300,
                            y: 300,
                            rotate: -320,
                            opacity: 0,
                            duration: 1
                        }, 1).to(".e.north2", {
                            x: 300,
                            y: 300,
                            rotate: 275,
                            opacity: 0,
                            duration: 1
                        }, 1.5).to(".e.east2", {
                            x: 300,
                            y: -300,
                            rotate: -300,
                            opacity: 0,
                            duration: 1
                        }, 2).to(".e.south", {
                            x: 300,
                            y: 300,
                            rotate: 290,
                            opacity: 0,
                            duration: 1
                        }, 2.5).to(".e.west", {
                            x: -300,
                            y: -300,
                            rotate: -340,
                            opacity: 0,
                            duration: 1
                        }, 3).to(".e.north", {
                            x: -300,
                            y: 300,
                            rotate: 310,
                            opacity: 0,
                            duration: 1
                        }, 3.5).to(".e.east", {
                            x: 300,
                            y: -300,
                            rotate: -350,
                            opacity: 0,
                            duration: 1
                        }, 4)
                    }
                }),
                Tn = bn.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromSprite("sprite", ["east", "north", "west", "south", ["east", "east2"],
                        ["north", "north2"],
                        ["west", "west2"],
                        ["south", "south2"]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.east", {
                            x: 200,
                            y: 250,
                            scale: .8
                        }), C.p8.set(".e.north", {
                            x: 200,
                            y: -250,
                            scale: .8
                        }), C.p8.set(".e.south", {
                            x: -200,
                            y: 250,
                            scale: .8
                        }), C.p8.set(".e.west", {
                            x: -200,
                            y: -250,
                            scale: .8
                        }), C.p8.set(".e.north2", {
                            x: 600,
                            y: 250,
                            scale: .8
                        }), C.p8.set(".e.south2", {
                            x: 600,
                            y: -250,
                            scale: .8
                        }), C.p8.set(".e.west2", {
                            x: -600,
                            y: 250,
                            scale: .8
                        }), C.p8.set(".e.east2", {
                            x: -600,
                            y: -250,
                            scale: .8
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.east", {
                            y: 1e3,
                            duration: 1,
                            ease: "power1.out"
                        }, 0).to(".e.north2", {
                            y: 1e3,
                            duration: 1,
                            ease: "power1.out"
                        }, .1).to(".e.south2", {
                            y: 1e3,
                            duration: 1,
                            ease: "power1.out"
                        }, .2).to(".e.west2", {
                            y: 1e3,
                            duration: 1,
                            ease: "power1.out"
                        }, .3).to(".e.north", {
                            y: 1e3,
                            duration: 1,
                            ease: "power1.out"
                        }, .4).to(".e.south", {
                            y: 1e3,
                            duration: 1,
                            ease: "power1.out"
                        }, .5).to(".e.west", {
                            y: 1e3,
                            duration: 1,
                            ease: "power1.out"
                        }, .6).to(".e.east2", {
                            y: 1e3,
                            duration: 1,
                            ease: "power1.out"
                        }, .7)
                    }
                }),
                Sn = bn.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["crawl"]),
                    onLoadComplete() {
                        C.p8.set(".e.crawl", {
                            x: -300
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.crawl", {
                            x: 300,
                            ease: "none"
                        })
                    }
                }),
                Mn = He.extend({
                    imageManifest: {
                        shogi1: Promise.resolve().then(s.t.bind(s, 79390, 17)),
                        shogi2: Promise.resolve().then(s.t.bind(s, 63016, 17)),
                        shogi3: Promise.resolve().then(s.t.bind(s, 27864, 17)),
                        shogi4: Promise.resolve().then(s.t.bind(s, 82099, 17))
                    }
                }),
                Cn = Mn.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("shogi1"),
                    onDiscreteProgress() {
                        Ye.squashOnce("shogi1", .25)
                    }
                }),
                Dn = Mn.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("shogi2"),
                    onDiscreteProgress() {
                        Ye.squashOnce("shogi2", .25)
                    }
                }),
                Fn = Mn.extend({
                    elements: Ye.elementsFromImages("shogi4")
                }),
                zn = Mn.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("shogi3"),
                    onDiscreteProgress() {
                        Ye.squashOnce("shogi3", .25)
                    }
                }),
                Ln = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 22903, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                frost: [10, 536, 285, 311, 401, 121],
                                open: [362, 10, 233, 283, 464, 204],
                                closed: [305, 536, 246, 299, 457, 425],
                                fridgeOpen: [10, 10, 342, 516, 241, 425]
                            }
                        }
                    },
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["fridgeOpen", "closed", "open", "frost"])
                    }]
                }),
                Rn = Ln.extend({
                    stepDuration: .4,
                    onLoadComplete() {
                        C.p8.set(".e.frost", {
                            hidden: !0
                        }), C.p8.set(".e.closed", {
                            transformOrigin: "left center"
                        }), C.p8.set(".e.open", {
                            scaleX: 0,
                            transformOrigin: "right center"
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.closed", {
                            scaleX: 0,
                            duration: .2,
                            ease: "power2.in"
                        }).to(".e.open", {
                            scaleX: 1,
                            duration: .2,
                            ease: "power2.out"
                        })
                    }
                }),
                In = Ln.extend({
                    onLoadComplete() {
                        C.p8.set(".e.frost", {
                            opacity: 0
                        }), C.p8.set(".e.closed", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.frost", {
                            opacity: 1
                        }).to(".e.frost", {
                            opacity: .5
                        }).to(".e.frost", {
                            opacity: 1
                        }).to(".e.frost", {
                            opacity: .5
                        }).to(".e.frost", {
                            opacity: 1
                        }).to(".e.frost", {
                            opacity: .5
                        }).to(".e.frost", {
                            opacity: 1
                        }).to(".e.frost", {
                            opacity: .5
                        }).to(".e.frost", {
                            opacity: 1
                        }).to(".e.frost", {
                            opacity: .5
                        }).to(".e.frost", {
                            opacity: 1
                        }).to(".e.frost", {
                            opacity: .5
                        }).to(".e.frost", {
                            opacity: 1
                        })
                    }
                }),
                On = In.extend({
                    onLoadComplete() {
                        C.p8.set(".e.closed", {
                            hidden: !0
                        }), Ye.startShake("c", 4, 0, 2)
                    }
                }),
                Bn = He.extend({
                    imageManifest: {
                        milk: Promise.resolve().then(s.t.bind(s, 86766, 17))
                    }
                }),
                Yn = Rn,
                An = Bn.extend({
                    stepDuration: .45,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("milk")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.milk", {
                            y: 100,
                            scale: .7
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.milk", {
                            y: 0,
                            scale: 1,
                            ease: "back.out(2)"
                        })
                    }
                }),
                Hn = Bn.extend({
                    elements: Ye.elementsFromImages("milk"),
                    initializeTimeline() {
                        this.timeline.to(".e.milk", {
                            scaleY: 1.2,
                            ease: "power3.inOut"
                        }).to(".e.milk", {
                            scaleY: 1,
                            duration: .05,
                            ease: "power2.out"
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("milk")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("milk")
                    }
                }),
                Gn = Bn.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("milk"),
                    initializeTimeline() {
                        this.timeline.to(".e.milk", {
                            y: 100,
                            scale: .7,
                            ease: "back.out(2)"
                        })
                    }
                }),
                Vn = Rn,
                En = An.extend({
                    imageManifest: {
                        milk: Promise.resolve().then(s.t.bind(s, 6436, 17))
                    }
                }),
                qn = Hn.extend({
                    imageManifest: {
                        milk: Promise.resolve().then(s.t.bind(s, 6436, 17))
                    }
                }),
                Nn = He.extend({
                    imageManifest: {
                        milk: Promise.resolve().then(s.t.bind(s, 6436, 17))
                    },
                    stepDuration: .45,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("milk")
                    }],
                    onLoadComplete() {
                        Ye.startShake("milk", 5, 5, 1)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("milk")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("milk")
                    }
                }),
                Xn = He.extend({
                    imageManifest: {
                        jar: Promise.resolve().then(s.t.bind(s, 51051, 17)),
                        lid: Promise.resolve().then(s.t.bind(s, 28177, 17)),
                        ant: Promise.resolve().then(s.t.bind(s, 44955, 17)),
                        ladybug: Promise.resolve().then(s.t.bind(s, 86354, 17)),
                        raisin: Promise.resolve().then(s.t.bind(s, 7269, 17))
                    }
                }),
                Wn = Xn.extend({
                    stepDuration: .75,
                    elements: [{
                        class: "jar-container",
                        type: "container",
                        children: [{
                            class: "jar",
                            type: "img",
                            pos: [0, 0],
                            key: "jar"
                        }, {
                            class: "lid",
                            type: "img",
                            pos: [100, 0],
                            key: "lid"
                        }]
                    }],
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.lid", {
                            x: 30,
                            y: -80,
                            rotation: 7
                        });
                        e.name = "lid", this.timeline.add(e)
                    }
                }),
                Un = Xn.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "ant",
                        type: "img",
                        pos: [0, 0],
                        key: "ant"
                    }, {
                        class: "jar",
                        type: "img",
                        pos: [100, 760],
                        key: "jar"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.jar", {
                            rotation: 280
                        });
                        const e = C.p8.timeline().to(".e.jar", {
                            x: -810,
                            y: -100,
                            rotation: 260
                        });
                        e.name = "jar", this.timeline.add(e)
                    }
                }),
                $n = Xn.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "ladybug",
                        type: "img",
                        pos: [0, 0],
                        key: "ladybug"
                    }, {
                        class: "jar",
                        type: "img",
                        pos: [100, -760],
                        key: "jar"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.jar", {
                            rotation: -280
                        });
                        const e = C.p8.timeline().to(".e.jar", {
                            x: 850,
                            y: -70,
                            rotation: -260
                        });
                        e.name = "jar", this.timeline.add(e)
                    }
                }),
                jn = Xn.extend({
                    elements: [{
                        class: "raisin",
                        type: "img",
                        pos: [0, 0],
                        key: "raisin"
                    }]
                }),
                Kn = Xn.extend({
                    stepDuration: .75,
                    elements: [{
                        class: "jar-container",
                        type: "container",
                        children: [{
                            class: "ladybug",
                            type: "img",
                            pos: [180, 50],
                            key: "ladybug"
                        }, {
                            class: "ant",
                            type: "img",
                            pos: [20, -60],
                            key: "ant"
                        }, {
                            class: "jar",
                            type: "img",
                            pos: [0, 0],
                            key: "jar"
                        }, {
                            class: "lid",
                            type: "img",
                            pos: [-100, 50],
                            key: "lid"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.lid", {
                            rotation: 30
                        }), C.p8.set(".e.ladybug", {
                            rotation: (0, i.random)(-90, 90)
                        }), C.p8.set(".e.ant", {
                            rotation: (0, i.random)(-90, 90)
                        });
                        const e = C.p8.timeline().to(".e.lid", {
                            x: -50,
                            y: 200,
                            rotation: 0
                        });
                        e.name = "lid", this.timeline.add(e)
                    }
                }),
                Zn = He.extend({
                    imageManifest: {
                        toy: Promise.resolve().then(s.t.bind(s, 88990, 17))
                    },
                    elements: [{
                        type: "img",
                        class: "toy",
                        key: "toy",
                        pos: [0, 0]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        this.timeline.to(".e.toy", {
                            y: -1500,
                            rotate: 180
                        })
                    }
                }),
                Jn = He.extend({
                    imageManifest: {
                        toy: Promise.resolve().then(s.t.bind(s, 54010, 17))
                    },
                    elements: [{
                        type: "img",
                        class: "toy",
                        key: "toy",
                        pos: [0, 0]
                    }],
                    stepDuration: .75,
                    initializeTimeline() {
                        this.timeline.to(".e.toy", {
                            x: 1500,
                            rotate: 180
                        })
                    }
                }),
                _n = He.extend({
                    imageManifest: {
                        m1: Promise.resolve().then(s.t.bind(s, 98629, 17)),
                        m2: Promise.resolve().then(s.t.bind(s, 81730, 17)),
                        m3: Promise.resolve().then(s.t.bind(s, 24351, 17))
                    },
                    elements: [{
                        type: "container",
                        class: "marbles",
                        children: [{
                            type: "img",
                            class: "m1",
                            key: "m3",
                            pos: [-300, -400]
                        }, {
                            type: "img",
                            class: "m2",
                            key: "m1",
                            pos: [100, 0]
                        }, {
                            type: "img",
                            class: "m3",
                            key: "m3",
                            pos: [60, 400]
                        }, {
                            type: "img",
                            class: "m4",
                            key: "m1",
                            pos: [80, -590]
                        }, {
                            type: "img",
                            class: "m5",
                            key: "m2",
                            pos: [-380, 0]
                        }, {
                            type: "img",
                            class: "m6",
                            key: "m2",
                            pos: [420, 100]
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.marbles", {
                            scale: .5
                        }), this.timeline.to(".e.m1", {
                            x: -600,
                            y: -800,
                            rotate: 180
                        }), this.timeline.to(".e.m2", {
                            x: -500,
                            y: 200,
                            rotate: 180
                        }, "<"), this.timeline.to(".e.m3", {
                            x: 200,
                            y: -600,
                            rotate: 180
                        }, "<"), this.timeline.to(".e.m4", {
                            x: 200,
                            y: -600,
                            rotate: 180
                        }, "<"), this.timeline.to(".e.m5", {
                            x: -550,
                            y: -500,
                            rotate: 180
                        }, "<"), this.timeline.to(".e.m6", {
                            x: 700,
                            y: 300,
                            rotate: 180
                        }, "<")
                    }
                }),
                Qn = He.extend({
                    imageManifest: {
                        m1: Promise.resolve().then(s.t.bind(s, 98629, 17)),
                        m2: Promise.resolve().then(s.t.bind(s, 81730, 17)),
                        m3: Promise.resolve().then(s.t.bind(s, 24351, 17))
                    },
                    elements: [{
                        type: "container",
                        class: "marbles",
                        children: [{
                            type: "img",
                            class: "m1",
                            key: "m3",
                            pos: [-300, -400]
                        }, {
                            type: "img",
                            class: "m2",
                            key: "m1",
                            pos: [100, 0]
                        }, {
                            type: "img",
                            class: "m3",
                            key: "m3",
                            pos: [60, 400]
                        }, {
                            type: "img",
                            class: "m4",
                            key: "m1",
                            pos: [80, -590]
                        }, {
                            type: "img",
                            class: "m5",
                            key: "m2",
                            pos: [-380, 0]
                        }, {
                            type: "img",
                            class: "m6",
                            key: "m2",
                            pos: [420, 100]
                        }, {
                            type: "img",
                            class: "m7",
                            key: "m3",
                            pos: [-1300, -1400]
                        }, {
                            type: "img",
                            class: "m8",
                            key: "m1",
                            pos: [1300, 100]
                        }, {
                            type: "img",
                            class: "m9",
                            key: "m1",
                            pos: [180, -1390]
                        }, {
                            type: "img",
                            class: "m10",
                            key: "m2",
                            pos: [-1380, 10]
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.marbles", {
                            scale: .5
                        }), C.p8.set(".e.m1", {
                            x: -600,
                            y: -800,
                            rotate: 180
                        }), C.p8.set(".e.m2", {
                            x: -500,
                            y: 200,
                            rotate: 180
                        }), C.p8.set(".e.m3", {
                            x: 200,
                            y: -600,
                            rotate: 180
                        }), C.p8.set(".e.m4", {
                            x: 200,
                            y: -600,
                            rotate: 180
                        }), C.p8.set(".e.m5", {
                            x: -550,
                            y: -500,
                            rotate: 180
                        }), C.p8.set(".e.m6", {
                            x: 700,
                            y: 300,
                            rotate: 180
                        }), C.p8.to(".e.marbles", {
                            scale: .25
                        }), this.timeline.to(".e.m1", {
                            scale: 2,
                            opacity: 0
                        }), this.timeline.to(".e.m2", {
                            scale: 2,
                            opacity: 0
                        }), this.timeline.to(".e.m3", {
                            scale: 2,
                            opacity: 0
                        }), this.timeline.to(".e.m4", {
                            scale: 2,
                            opacity: 0
                        }), this.timeline.to(".e.m5", {
                            scale: 2,
                            opacity: 0
                        }), this.timeline.to(".e.m6", {
                            scale: 2,
                            opacity: 0
                        }), this.timeline.to(".e.m7", {
                            scale: 2,
                            opacity: 0
                        }), this.timeline.to(".e.m8", {
                            scale: 2,
                            opacity: 0
                        }), this.timeline.to(".e.m9", {
                            scale: 2,
                            opacity: 0
                        }), this.timeline.to(".e.m10", {
                            scale: 2,
                            opacity: 0
                        })
                    }
                }),
                ea = He.extend({
                    imageManifest: {
                        merits: Promise.resolve().then(s.t.bind(s, 29856, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "merits",
                            images: {
                                person: [692, 1125, 770, 824, 88, 115],
                                litter0: [428, 10, 416, 378, 311, 292],
                                litter1: [10, 10, 408, 314, 343, 296],
                                litter2: [854, 10, 280, 410, 295, 360],
                                rope: [1178, 521, 722, 594, 203, 139],
                                knot: [10, 1104, 672, 670, 165, 164],
                                badge0: [10, 398, 574, 573, 214, 213],
                                badge1: [594, 521, 574, 573, 214, 213],
                                badge2: [1144, 10, 564, 501, 250, 218]
                            }
                        }
                    }
                }),
                ta = ea.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["person"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.c", {
                            x: -200
                        }), Ye.startShake("person", 0, 1, 2)
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            x: 200,
                            ease: "none"
                        })
                    }
                }),
                sa = ea.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["litter0", "litter1"]),
                    onLoadComplete() {
                        C.p8.set(".e.litter1", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("litter0", "litter1", 1)).add(Ye.squashOnce("litter1", 1))
                    }
                }),
                ia = ea.extend({
                    stepDuration: .35,
                    lastStepDuration: .6,
                    elements: Ye.elementsFromSprite("sprite", ["rope", "knot"]),
                    onLoadComplete() {
                        C.p8.set(".e.knot", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("rope", 1)).add(Ye.squashOnce("rope", 1)).add(Ye.squashTransition("rope", "knot", 1))
                    }
                }),
                oa = ea.extend({
                    elements: Ye.elementsFromSprite("sprite", ["badge0", "badge2", "badge1"]),
                    initializeTimeline() {
                        this.timeline.to(".e.badge0", {
                            x: -300,
                            y: -200,
                            rotate: -5
                        }, 0).to(".e.badge1", {
                            x: 300,
                            y: -200,
                            rotate: 5
                        }, 0).to(".e.badge2", {
                            y: 200,
                            rotate: -5
                        }, 0).fillTime(3)
                    }
                }),
                na = He.extend({
                    imageManifest: {
                        ant: Promise.resolve().then(s.t.bind(s, 21689, 17))
                    },
                    elements: [{
                        type: "img",
                        key: "ant",
                        class: "ant1",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "ant",
                        class: "ant2",
                        pos: [-250, 0]
                    }, {
                        type: "img",
                        key: "ant",
                        class: "ant3",
                        pos: [250, 0]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.ant2", {
                            scale: .5
                        }), C.p8.set(".e.ant1", {
                            scale: .75
                        }), C.p8.to(".e.ant1,.e.ant2,.e.ant3", {
                            rotate: 2,
                            ease: "none",
                            duration: .2,
                            yoyo: !0,
                            repeat: -1
                        }), C.p8.fromTo(".e.ant1", {
                            x: 650
                        }, {
                            x: -650,
                            y: 100,
                            duration: 5,
                            ease: "none",
                            repeat: -1
                        }).seek(1.5), C.p8.fromTo(".e.ant2", {
                            x: 650
                        }, {
                            x: -650,
                            y: "+=100",
                            duration: 7,
                            ease: "none",
                            repeat: -1
                        }).seek(.66), C.p8.fromTo(".e.ant3", {
                            x: 650
                        }, {
                            x: -650,
                            y: "+=100",
                            duration: 4,
                            ease: "none",
                            repeat: -1
                        }).seek(0), this.timeline.to(".e.ant1", {
                            scaleY: .25,
                            onComplete() {
                                C.p8.killTweensOf(".e.ant1"), C.p8.to(".e.ant1", {
                                    opacity: 0
                                })
                            }
                        }), this.timeline.to(".e.ant2", {
                            scaleY: .25,
                            onComplete() {
                                C.p8.killTweensOf(".e.ant2"), C.p8.to(".e.ant2", {
                                    opacity: 0
                                })
                            }
                        }), this.timeline.to(".e.ant3", {
                            scaleY: .25,
                            onComplete() {
                                C.p8.killTweensOf(".e.ant3"), C.p8.to(".e.ant3", {
                                    opacity: 0
                                })
                            }
                        })
                    }
                }),
                aa = He.extend({
                    imageManifest: {
                        pie: Promise.resolve().then(s.t.bind(s, 51955, 17)),
                        ant: Promise.resolve().then(s.t.bind(s, 21689, 17))
                    },
                    elements: [{
                        type: "img",
                        key: "ant",
                        class: "ant ant1",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "ant",
                        class: "ant ant2",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "ant",
                        class: "ant ant3",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "ant",
                        class: "ant ant4",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "ant",
                        class: "ant ant5",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "ant",
                        class: "ant ant6",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "ant",
                        class: "ant ant7",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "ant",
                        class: "ant ant8",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "ant",
                        class: "ant ant9",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "ant",
                        class: "ant ant10",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "pie",
                        class: "pie1",
                        pos: [250, 0]
                    }],
                    stepDuration: .1,
                    initializeTimeline() {
                        C.p8.set(".e.pie1", {
                            scale: .8
                        }), C.p8.to(".e.ant", {
                            rotate: 2,
                            ease: "none",
                            duration: .1,
                            stagger: .05,
                            yoyo: !0,
                            repeat: -1
                        });
                        for (let e = 1; e <= 10; e++) {
                            const t = `.e.ant${e}`;
                            this.timeline.to(t, {
                                scaleY: .25,
                                onComplete() {
                                    C.p8.killTweensOf(t), C.p8.to(t, {
                                        opacity: 0
                                    })
                                }
                            });
                            let s = 600,
                                i = 1;
                            e % 2 == 0 && (s = -600, i = -1), C.p8.fromTo(t, {
                                scaleX: i,
                                x: s,
                                y: -window.innerHeight
                            }, {
                                x: 0,
                                y: 200,
                                delay: .3 * e,
                                duration: 1,
                                ease: "none",
                                repeat: -1
                            })
                        }
                    }
                }),
                ra = He.extend({
                    imageManifest: {
                        bakingSoda: Promise.resolve().then(s.t.bind(s, 87347, 17)),
                        bowlGoo: Promise.resolve().then(s.t.bind(s, 13977, 17)),
                        bowl: Promise.resolve().then(s.t.bind(s, 42358, 17)),
                        glue: Promise.resolve().then(s.t.bind(s, 51312, 17)),
                        handGoo: Promise.resolve().then(s.t.bind(s, 38746, 17)),
                        saline: Promise.resolve().then(s.t.bind(s, 52063, 17))
                    }
                }),
                la = ra.extend({
                    elements: [{
                        class: "slime-container",
                        type: "container",
                        children: [{
                            class: "bakingSoda",
                            type: "img",
                            pos: [0, 0],
                            key: "bakingSoda"
                        }, {
                            class: "glue",
                            type: "img",
                            pos: [0, 0],
                            key: "glue"
                        }, {
                            class: "saline",
                            type: "img",
                            pos: [0, 0],
                            key: "saline"
                        }]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        C.p8.set(".e.glue", {
                            x: 0,
                            y: 0,
                            rotate: 10
                        }), C.p8.set(".e.bakingSoda", {
                            rotate: -14,
                            opacity: 0
                        }), C.p8.set(".e.saline", {
                            x: 0,
                            y: 0,
                            rotate: 0,
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.glue", {
                            scale: 1.5,
                            opacity: 1,
                            ease: "elastic.out",
                            duration: 1,
                            x: 120,
                            y: 40
                        }, 0).to(".e.bakingSoda", {
                            scale: 1.5,
                            opacity: 1,
                            ease: "elastic.out",
                            duration: 1,
                            x: -100,
                            y: 40
                        }, 1).to(".e.saline", {
                            scale: 1.5,
                            opacity: 1,
                            ease: "elastic.out",
                            duration: 1,
                            x: 15,
                            y: -50
                        }, 2);
                        this.timeline.add(e)
                    }
                }),
                da = ra.extend({
                    elements: [{
                        class: "slime-container",
                        type: "container",
                        children: [{
                            class: "bowlGoo",
                            type: "img",
                            pos: [0, 0],
                            key: "bowlGoo"
                        }, {
                            class: "bowl",
                            type: "img",
                            pos: [0, 0],
                            key: "bowl"
                        }]
                    }],
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.bowl", {
                            opacity: 0,
                            rotateY: 1440,
                            ease: "linear"
                        }, 0).to(".e.bowlGoo", {
                            rotateY: 1440,
                            ease: "linear"
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                pa = ra.extend({
                    elements: [{
                        class: "slime-container",
                        type: "container",
                        children: [{
                            class: "handGoo",
                            type: "img",
                            pos: [0, 0],
                            key: "handGoo"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.handGoo", {
                            scaleY: 1,
                            rotate: -10
                        });
                        const e = C.p8.timeline().to(".e.handGoo", {
                            scaleY: .6,
                            ease: "back.inOut",
                            rotate: 20,
                            duration: 1
                        }, 0).to(".e.handGoo", {
                            scaleY: 1.2,
                            ease: "back.inOut",
                            rotate: -10,
                            duration: .5
                        }, .5).to(".e.handGoo", {
                            scaleY: .3,
                            ease: "back.inOut",
                            rotate: 20,
                            duration: .5
                        }, 1).to(".e.handGoo", {
                            scaleY: 1,
                            ease: "back.inOut",
                            rotate: -10,
                            duration: .5
                        }, 1.5).to(".e.handGoo", {
                            scaleY: 1.6,
                            ease: "back.inOut",
                            rotate: 40,
                            duration: 1
                        }, 2.5).to(".e.handGoo", {
                            scaleY: .3,
                            ease: "back.inOut",
                            rotate: -20,
                            duration: .5
                        }, 3.5).to(".e.handGoo", {
                            scaleY: 1,
                            ease: "back.inOut",
                            rotate: -10,
                            duration: .5
                        }, 4).to(".e.handGoo", {
                            scaleY: .6,
                            ease: "back.inOut",
                            rotate: 20,
                            duration: .5
                        }, 4.5).to(".e.handGoo", {
                            scaleY: 1.4,
                            ease: "back.inOut",
                            rotate: -20,
                            duration: .5
                        }, 4.8).to(".e.handGoo", {
                            scaleY: 1,
                            ease: "back.inOut",
                            rotate: -10,
                            duration: .5
                        }, 5).to(".e.handGoo", {
                            scaleY: .4,
                            ease: "back.inOut",
                            rotate: 30,
                            duration: .5
                        }, 5.5).to(".e.handGoo", {
                            scaleY: 1.6,
                            ease: "back.inOut",
                            rotate: 35,
                            duration: .5
                        }, 6).to(".e.handGoo", {
                            scaleY: .7,
                            ease: "back.inOut",
                            rotate: 15,
                            duration: .5
                        }, 6.5).to(".e.handGoo", {
                            scaleY: 1,
                            ease: "back.inOut",
                            rotate: -10,
                            duration: .5
                        }, 7);
                        this.timeline.add(e)
                    }
                }),
                ca = He.extend({
                    imageManifest: {
                        bakingSoda: Promise.resolve().then(s.t.bind(s, 87347, 17)),
                        bowlGoo: Promise.resolve().then(s.t.bind(s, 13977, 17)),
                        bowl: Promise.resolve().then(s.t.bind(s, 42358, 17)),
                        glue: Promise.resolve().then(s.t.bind(s, 51312, 17)),
                        handGoo: Promise.resolve().then(s.t.bind(s, 38746, 17)),
                        saline: Promise.resolve().then(s.t.bind(s, 52063, 17)),
                        rug: Promise.resolve().then(s.t.bind(s, 38035, 17)),
                        rugGoo: Promise.resolve().then(s.t.bind(s, 49066, 17)),
                        ottoman: Promise.resolve().then(s.t.bind(s, 93035, 17))
                    }
                }),
                ma = ca.extend({
                    elements: [{
                        class: "slime-container",
                        type: "container",
                        children: [{
                            class: "bakingSoda",
                            type: "img",
                            pos: [0, 0],
                            key: "bakingSoda"
                        }, {
                            class: "glue",
                            type: "img",
                            pos: [0, 0],
                            key: "glue"
                        }, {
                            class: "saline",
                            type: "img",
                            pos: [0, 0],
                            key: "saline"
                        }]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        C.p8.set(".e.glue", {
                            x: 0,
                            y: 0,
                            rotate: 10
                        }), C.p8.set(".e.bakingSoda", {
                            rotate: -14,
                            opacity: 0
                        }), C.p8.set(".e.saline", {
                            x: 0,
                            y: 0,
                            rotate: 0,
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.glue", {
                            scale: 1.5,
                            opacity: 1,
                            ease: "elastic.out",
                            duration: 1,
                            x: 120,
                            y: 40
                        }, 0).to(".e.bakingSoda", {
                            scale: 1.5,
                            opacity: 1,
                            ease: "elastic.out",
                            duration: 1,
                            x: -100,
                            y: 40
                        }, 1).to(".e.saline", {
                            scale: 1.5,
                            opacity: 1,
                            ease: "elastic.out",
                            duration: 1,
                            x: 15,
                            y: -50
                        }, 2);
                        this.timeline.add(e)
                    }
                }),
                ha = ca.extend({
                    elements: [{
                        class: "slime-container",
                        type: "container",
                        children: [{
                            class: "bowlGoo",
                            type: "img",
                            pos: [0, 0],
                            key: "bowlGoo"
                        }, {
                            class: "bowl",
                            type: "img",
                            pos: [0, 0],
                            key: "bowl"
                        }]
                    }],
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.bowl", {
                            opacity: 0,
                            rotateY: 1440,
                            ease: "linear"
                        }, 0).to(".e.bowlGoo", {
                            rotateY: 1440,
                            ease: "linear"
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                ua = ca.extend({
                    elements: [{
                        class: "slime-container",
                        type: "container",
                        children: [{
                            class: "rug",
                            type: "img",
                            pos: [0, 0],
                            key: "rug"
                        }, {
                            class: "rugGoo",
                            type: "img",
                            pos: [0, 0],
                            key: "rugGoo"
                        }]
                    }],
                    stepDuration: .4,
                    initializeTimeline() {
                        C.p8.set(".e.rugGoo", {
                            x: 0,
                            y: -400,
                            rotate: 0,
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.rugGoo", {
                            x: 0,
                            y: 0,
                            rotate: 360,
                            duration: .1,
                            opacity: 1,
                            ease: "power3.in"
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                ga = ca.extend({
                    elements: [{
                        class: "slime-container",
                        type: "container",
                        children: [{
                            class: "rug",
                            type: "img",
                            pos: [0, 0],
                            key: "rug"
                        }, {
                            class: "rugGoo",
                            type: "img",
                            pos: [0, 0],
                            key: "rugGoo"
                        }, {
                            class: "ottoman",
                            type: "img",
                            pos: [0, 0],
                            key: "ottoman"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.ottoman", {
                            scale: 1.5,
                            x: -500,
                            y: -100
                        });
                        const e = C.p8.timeline().to(".e.ottoman", {
                            x: -250,
                            duration: 1,
                            ease: "back.inOut"
                        }, 0).to(".e.ottoman", {
                            x: 0,
                            duration: .5,
                            ease: "back.in"
                        }, 1.2);
                        this.timeline.add(e)
                    }
                }),
                ya = He.extend({
                    imageManifest: {
                        valve: Promise.resolve().then(s.t.bind(s, 41812, 17)),
                        knob: Promise.resolve().then(s.t.bind(s, 4720, 17)),
                        knob2: Promise.resolve().then(s.t.bind(s, 20990, 17)),
                        sprinkler: Promise.resolve().then(s.t.bind(s, 50062, 17))
                    }
                }),
                ba = ya.extend({
                    elements: [{
                        class: "valve-container",
                        type: "container",
                        children: [{
                            class: "valve",
                            type: "img",
                            pos: [0, 0],
                            key: "valve"
                        }, {
                            class: "knob",
                            type: "img",
                            pos: [10, 10],
                            key: "knob"
                        }, {
                            class: "knob2",
                            type: "img",
                            pos: [10, 10],
                            key: "knob2"
                        }]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.knob2", {
                            opacity: 0,
                            duration: 1,
                            y: 0,
                            ease: "power2.inOut"
                        }, 1).to(".e.knob2", {
                            opacity: 1,
                            duration: 1,
                            y: 0,
                            ease: "power2.inOut"
                        }, 2).to(".e.knob2", {
                            opacity: 0,
                            duration: 1,
                            y: 0,
                            ease: "power2.inOut"
                        }, 3).to(".e.knob2", {
                            opacity: 1,
                            duration: 1,
                            y: 0,
                            ease: "power2.inOut"
                        }, 4).to(".e.knob2", {
                            opacity: 0,
                            duration: 1,
                            y: 0,
                            ease: "power2.inOut"
                        }, 5).to(".e.knob2", {
                            opacity: 1,
                            duration: 1,
                            y: 0,
                            ease: "power2.inOut"
                        }, 6);
                        this.timeline.add(e), Ye.addParticleEmitter({
                            className: "drip",
                            numberOfParticles: 10,
                            container: "valve-container",
                            zIndex: -1,
                            settings: {
                                frequency: 1.5,
                                from: {
                                    backgroundColor: "#0099FF",
                                    borderRadius: "50%",
                                    border: "8px solid black"
                                },
                                to: {
                                    backgroundColor: "#FFFFFF",
                                    borderColor: "#0099FF",
                                    height: 100,
                                    opacity: 1
                                },
                                boundaries: {
                                    left: 430,
                                    right: 460,
                                    top: 550,
                                    bottom: 440
                                },
                                randomAngle: !1,
                                minSize: 25,
                                maxSize: 35,
                                gravity: 6
                            }
                        }, this)
                    }
                }),
                xa = ya.extend({
                    elements: [{
                        class: "sprinkler-container",
                        type: "container",
                        children: [{
                            class: "sprinkler",
                            type: "img",
                            pos: [0, 0],
                            key: "sprinkler"
                        }]
                    }],
                    stepDuration: .6,
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".sprinkler", {
                            repeat: 1,
                            yoyo: !0,
                            scale: 1.2,
                            rotate: 5,
                            ease: "power3.Out",
                            duration: .2
                        }, 0);
                        this.timeline.add(e), Ye.addParticleEmitter({
                            container: "sprinkler-container",
                            settings: {
                                from: {
                                    backgroundColor: "#0099FF",
                                    borderRadius: "45px",
                                    borderRight: "8px solid black",
                                    borderTop: "8px solid black"
                                },
                                to: {
                                    backgroundColor: "#FFFFFF",
                                    borderColor: "#0099FF",
                                    height: 300
                                },
                                boundaries: {
                                    left: 425,
                                    right: 575
                                },
                                randomAngleRange: 20,
                                minSize: 20,
                                maxSize: 30,
                                force: -4,
                                gravity: 1
                            }
                        }, this)
                    }
                }),
                fa = ya.extend({
                    elements: [{
                        class: "sprinkler-container",
                        type: "container",
                        children: [{
                            class: "sprinkler",
                            type: "img",
                            pos: [0, 0],
                            key: "sprinkler"
                        }]
                    }],
                    stepDuration: .6,
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".sprinkler", {
                            repeat: 1,
                            yoyo: !0,
                            scale: 1.2,
                            rotate: -5,
                            ease: "power3.Out",
                            duration: .2
                        }, 0).to(".sprinkler", {
                            repeat: 1,
                            yoyo: !0,
                            scale: 1.2,
                            rotate: 5,
                            ease: "power3.Out",
                            duration: .2
                        }, 1).to(".sprinkler", {
                            repeat: 1,
                            yoyo: !0,
                            scale: 1.2,
                            rotate: -5,
                            ease: "power3.Out",
                            duration: .2
                        }, 2).to(".sprinkler", {
                            repeat: 1,
                            yoyo: !0,
                            scale: 1.2,
                            rotate: 5,
                            ease: "power3.Out",
                            duration: .2
                        }, 3);
                        this.timeline.add(e), Ye.addParticleEmitter({
                            container: "sprinkler-container",
                            settings: {
                                from: {
                                    backgroundColor: "#0099FF",
                                    borderRadius: "45px",
                                    borderRight: "8px solid black",
                                    borderTop: "8px solid black"
                                },
                                to: {
                                    backgroundColor: "#FFFFFF",
                                    borderColor: "#0099FF",
                                    height: 300
                                },
                                boundaries: {
                                    left: 425,
                                    right: 575
                                },
                                randomAngleRange: 35,
                                minSize: 30,
                                maxSize: 70,
                                force: -10,
                                gravity: 1
                            }
                        }, this)
                    }
                }),
                va = He.extend({
                    imageManifest: {
                        ball: Promise.resolve().then(s.t.bind(s, 82833, 17)),
                        bear: Promise.resolve().then(s.t.bind(s, 59429, 17)),
                        blocks: Promise.resolve().then(s.t.bind(s, 82104, 17)),
                        car: Promise.resolve().then(s.t.bind(s, 70834, 17)),
                        robot: Promise.resolve().then(s.t.bind(s, 34826, 17)),
                        toyBox: Promise.resolve().then(s.t.bind(s, 68541, 17)),
                        yoYo: Promise.resolve().then(s.t.bind(s, 95365, 17))
                    }
                }),
                ka = va.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("bear", "car", "robot"),
                    onLoadComplete() {
                        C.p8.set(".e.car", {
                            x: -250,
                            y: 100,
                            scale: .5,
                            rotation: 205
                        }), C.p8.set(".e.bear", {
                            scale: .5
                        }), C.p8.set(".e.robot", {
                            x: 250,
                            y: 100,
                            scale: .5,
                            rotation: 255
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.fadeAway("car")).add(Ye.fadeAway("robot")).add(Ye.fadeAway("bear"))
                    }
                }),
                Pa = va.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("ball", "blocks", "yoYo"),
                    onLoadComplete() {
                        C.p8.set(".e.blocks", {
                            x: -250,
                            y: 100,
                            scale: .5,
                            rotation: 15
                        }), C.p8.set(".e.ball", {
                            scale: .5
                        }), C.p8.set(".e.yoYo", {
                            x: 250,
                            y: 100,
                            scale: .5,
                            rotation: 255
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.fadeAway("blocks")).add(Ye.fadeAway("yoYo")).add(Ye.fadeAway("ball"))
                    }
                }),
                wa = va.extend({
                    elements: Ye.elementsFromImages("toyBox"),
                    onStartProgress() {
                        Ye.startHoldShake("toyBox", 1, 5)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("toyBox")
                    }
                }),
                Ta = He.extend({
                    imageManifest: {
                        bigbubbles: Promise.resolve().then(s.t.bind(s, 97087, 17)),
                        emptytub: Promise.resolve().then(s.t.bind(s, 24366, 17)),
                        smallbubbles: Promise.resolve().then(s.t.bind(s, 50058, 17))
                    },
                    particleEmitter: null
                }),
                Sa = Ta.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "emptytub",
                        type: "img",
                        pos: [0, 0],
                        key: "emptytub"
                    }, {
                        class: "smallbubbles",
                        type: "img",
                        pos: [0, 0],
                        key: "smallbubbles"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.smallbubbles", {
                            opacity: 0,
                            zIndex: 1
                        });
                        const e = C.p8.timeline().to(".e.emptytub", {
                            scale: 1.5,
                            ease: "back.out"
                        }, 0).to(".e.smallbubbles", {
                            opacity: 1,
                            yoyo: !0,
                            repeat: 1,
                            duration: .3
                        }, 0).to(".e.smallbubbles", {
                            scale: 1.5,
                            ease: "back.out"
                        }, 0);
                        this.timeline.add(e), Ye.addParticleEmitter({
                            container: "scene-container",
                            autoplay: !0,
                            zIndex: -1,
                            settings: {
                                frequency: .3,
                                from: {
                                    backgroundColor: "#FFFFFF",
                                    border: "4px solid #66ccff",
                                    opacity: 1
                                },
                                to: {
                                    duration: 1,
                                    delay: .1,
                                    opacity: 0
                                },
                                minSize: 20,
                                maxSize: 60,
                                boundaries: {
                                    top: 520,
                                    bottom: 520,
                                    left: 300,
                                    right: 500
                                },
                                force: 0,
                                gravity: -1,
                                randomAngleRange: 45
                            }
                        }, this)
                    }
                }),
                Ma = Ta.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "smallbubbles",
                        type: "img",
                        pos: [0, 0],
                        key: "smallbubbles"
                    }, {
                        class: "bigbubbles",
                        type: "img",
                        pos: [-63, -6],
                        key: "bigbubbles"
                    }, {
                        class: "emptytub",
                        type: "img",
                        pos: [0, 0],
                        key: "emptytub"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.emptytub", {
                            scale: 1.5
                        }), C.p8.set(".e.smallbubbles", {
                            scale: 1.5,
                            opacity: 0
                        }), C.p8.set(".e.bigbubbles", {
                            scale: 1.5,
                            opacity: 0
                        }), Ye.addParticleEmitter({
                            container: "scene-container",
                            autoplay: !0,
                            zIndex: -1,
                            settings: {
                                frequency: .3,
                                from: {
                                    backgroundColor: "#FFFFFF",
                                    border: "4px solid #66ccff",
                                    opacity: 1
                                },
                                to: {
                                    duration: 1,
                                    delay: .1,
                                    opacity: 0
                                },
                                minSize: 40,
                                maxSize: 120,
                                boundaries: {
                                    top: 520,
                                    bottom: 520,
                                    left: 300,
                                    right: 500
                                },
                                force: 0,
                                gravity: -1,
                                randomAngleRange: 45
                            }
                        }, this), this.particleEmitter = Ye.addParticleEmitter({
                            container: "scene-container",
                            className: "water-particles",
                            autoplay: !1,
                            restartOnProgress: !0,
                            settings: {
                                particleLimit: 10,
                                frequency: .01,
                                from: {
                                    backgroundColor: "#66ccff",
                                    borderRadius: "45px",
                                    borderRight: "8px solid black",
                                    borderTop: "8px solid black"
                                },
                                to: {
                                    backgroundColor: "#66ccff",
                                    borderColor: "#0099FF",
                                    height: 200,
                                    opacity: 0
                                },
                                boundaries: {
                                    left: 425,
                                    right: 575
                                },
                                randomAngleRange: 40,
                                minSize: 20,
                                maxSize: 30,
                                force: -6,
                                gravity: 1
                            }
                        }, this)
                    },
                    onDiscreteProgress(e) {
                        e > 50 && e < 100 ? C.p8.timeline().to(".e.bigbubbles", {
                            opacity: 1,
                            yoyo: !0,
                            repeat: 1,
                            duration: .25
                        }) : C.p8.timeline().to(".e.smallbubbles", {
                            opacity: 1,
                            yoyo: !0,
                            repeat: 1,
                            duration: .25
                        })
                    }
                }),
                Ca = po.extend({
                    imageManifest: {
                        towel: Promise.resolve().then(s.t.bind(s, 1644, 17))
                    },
                    stepDuration: .5,
                    onDiscreteProgress(e) {
                        25 === e || 75 === e ? C.p8.timeline().to(".e.image-container", {
                            rotate: -15
                        }) : C.p8.timeline().to(".e.image-container", {
                            rotate: 15
                        })
                    }
                }),
                Da = He.extend({
                    imageManifest: {
                        aim: Promise.resolve().then(s.t.bind(s, 22632, 17)),
                        fire: Promise.resolve().then(s.t.bind(s, 85063, 17)),
                        marble: Promise.resolve().then(s.t.bind(s, 38910, 17)),
                        vase1: Promise.resolve().then(s.t.bind(s, 35010, 17)),
                        vase2: Promise.resolve().then(s.t.bind(s, 79872, 17)),
                        vase3: Promise.resolve().then(s.t.bind(s, 96723, 17)),
                        vase4: Promise.resolve().then(s.t.bind(s, 29687, 17)),
                        vase5: Promise.resolve().then(s.t.bind(s, 25099, 17)),
                        vase6: Promise.resolve().then(s.t.bind(s, 84391, 17)),
                        vase7: Promise.resolve().then(s.t.bind(s, 27697, 17))
                    }
                }),
                Fa = Da.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("marble"),
                    initializeTimeline() {
                        this.timeline.to(".e.marble", {
                            y: -200,
                            opacity: 0
                        })
                    }
                }),
                za = Da.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("aim"),
                    onLoadComplete() {
                        this.timeline.to(".e.aim", {
                            rotate: 27,
                            scaleX: 1.35,
                            x: -50
                        })
                    }
                }),
                La = Da.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("aim", "fire"),
                    onLoadComplete() {
                        this.timeline.fromTo(".e.aim", {
                            rotate: 27,
                            scaleX: 1.35,
                            x: -50
                        }, {
                            opacity: 0
                        }), this.timeline.fromTo(".e.fire", {
                            opacity: 0,
                            x: 100
                        }, {
                            opacity: 1,
                            rotate: 27
                        }, "<")
                    }
                }),
                Ra = Da.extend({
                    stepDuration: .25,
                    elements: [{
                        class: "move-container",
                        type: "container",
                        children: Ye.elementsFromImages("marble", "vase1", "vase2", "vase3", "vase4", "vase5", "vase6", "vase7", "fire")
                    }],
                    initializeTimeline() {
                        C.p8.fromTo(".e.marble", {
                            x: -500,
                            scale: .5
                        }, {
                            x: 600,
                            scale: .5,
                            ease: "none"
                        }), C.p8.to(".vase1,.vase2,.vase3,.vase4,.vase5,.vase6,.vase7", {
                            x: "random(-500, 500, 5)",
                            ease: "none",
                            delay: .2,
                            stagger: .05
                        }), C.p8.to(".vase1,.vase2,.vase3,.vase4,.vase5,.vase6,.vase7", {
                            y: 600,
                            rotate: 90,
                            ease: "back.in(2.7)",
                            delay: .2,
                            stagger: .05
                        }), this.timeline.fromTo(".e.fire", {
                            x: -600
                        }, {
                            x: 0,
                            rotate: 90
                        }), this.timeline.fromTo(".e.fire", {
                            y: 0
                        }, {
                            y: 600,
                            ease: "back.in(1.2)",
                            duration: .25
                        }, "<"), this.timeline.to(".move-container", {
                            x: "+=100",
                            y: "+=50",
                            scale: "-=0.2"
                        }), this.timeline.to(".move-container", {
                            x: "+=100",
                            y: "+=50",
                            scale: "-=0.2",
                            opacity: .5
                        }), this.timeline.to(".move-container", {
                            x: "+=100",
                            y: "+=50",
                            scale: "-=0.3",
                            opacity: 0
                        })
                    }
                }),
                Ia = He.extend({
                    imageManifest: {
                        aim: Promise.resolve().then(s.t.bind(s, 22632, 17)),
                        fire: Promise.resolve().then(s.t.bind(s, 85063, 17)),
                        glue: Promise.resolve().then(s.t.bind(s, 50622, 17)),
                        vase1: Promise.resolve().then(s.t.bind(s, 35010, 17)),
                        vase2: Promise.resolve().then(s.t.bind(s, 79872, 17)),
                        vase3: Promise.resolve().then(s.t.bind(s, 96723, 17)),
                        vase4: Promise.resolve().then(s.t.bind(s, 29687, 17)),
                        vase5: Promise.resolve().then(s.t.bind(s, 25099, 17)),
                        vase6: Promise.resolve().then(s.t.bind(s, 84391, 17)),
                        vase7: Promise.resolve().then(s.t.bind(s, 27697, 17))
                    }
                }),
                Oa = Ia.extend({
                    elements: Ye.elementsFromImages("vase1", "vase2", "vase3", "vase4", "vase5", "vase6", "vase7"),
                    initializeTimeline() {
                        C.ZP.set(".vase1,.vase2,.vase3,.vase4,.vase5,.vase6,.vase7", {
                            x: "random(-300, 300, 5)",
                            y: "random(-300, 300, 5)"
                        }), this.timeline.to(".vase1,.vase2,.vase3,.vase4,.vase5,.vase6,.vase7", {
                            y: "-=100",
                            rotateY: 90,
                            opacity: 0,
                            stagger: .2,
                            scale: 2
                        })
                    }
                }),
                Ba = Ia.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("glue"),
                    initializeTimeline() {
                        const e = Ye.addParticleEmitter({
                            numberOfParticles: 5,
                            autoplay: !1,
                            zIndex: 1,
                            settings: {
                                particleLimit: 2,
                                frequency: .15,
                                from: {
                                    backgroundColor: "#ffffff",
                                    border: "2px solid black",
                                    opacity: 1,
                                    y: 625,
                                    x: 490
                                },
                                to: {
                                    duration: .4,
                                    opacity: 0,
                                    ease: "power2.in"
                                },
                                minSize: 15,
                                maxSize: 35,
                                angle: 0,
                                force: 1,
                                gravity: 1,
                                randomAngle: !1
                            }
                        }, this);
                        this.timeline.fromTo(".e.glue", {
                            rotate: 180
                        }, {
                            scaleX: .8,
                            scaleY: 1.2,
                            onComplete() {
                                e.restart()
                            }
                        })
                    }
                }),
                Ya = Ia.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "move-container",
                        type: "container",
                        children: Ye.elementsFromImages("vase1", "vase2", "vase3", "vase4", "vase5", "vase6", "vase7")
                    }],
                    onProgress(e) {
                        e > 98 && (Ye.stopHoldShake("move-container", 2, 1), C.ZP.to(".vase1,.vase2,.vase3,.vase4,.vase5,.vase6,.vase7", {
                            x: "random(-500, 500, 5)",
                            ease: "none",
                            delay: .2,
                            stagger: .05
                        }), C.ZP.to(".vase1,.vase2,.vase3,.vase4,.vase5,.vase6,.vase7", {
                            y: 600,
                            rotate: 90,
                            ease: "back.in(2.7)",
                            delay: .2,
                            stagger: .05
                        }))
                    },
                    onStartProgress() {
                        Ye.startHoldShake("move-container", 2, 1)
                    }
                }),
                Aa = He.extend({
                    imageManifest: {
                        devil: Promise.resolve().then(s.t.bind(s, 67307, 17)),
                        nervous: Promise.resolve().then(s.t.bind(s, 71765, 17)),
                        noJumper: Promise.resolve().then(s.t.bind(s, 10550, 17)),
                        tangled: Promise.resolve().then(s.t.bind(s, 51409, 17)),
                        theyDidIt: Promise.resolve().then(s.t.bind(s, 54978, 17)),
                        rope0: Promise.resolve().then(s.t.bind(s, 45724, 17)),
                        rope1: Promise.resolve().then(s.t.bind(s, 73263, 17)),
                        rope2: Promise.resolve().then(s.t.bind(s, 5539, 17)),
                        rope3: Promise.resolve().then(s.t.bind(s, 90753, 17))
                    }
                }),
                Ha = Aa.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "noJumper",
                        type: "img",
                        pos: [65, 0],
                        key: "noJumper"
                    }, {
                        class: "devil",
                        type: "img",
                        pos: [0, 0],
                        key: "devil"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.devil", {
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.devil", {
                            opacity: 1,
                            ease: "power2.out",
                            duration: .5
                        }, 0).to(".e.devil", {
                            repeat: 1,
                            yoyo: !0,
                            y: -200,
                            ease: "power2.out",
                            duration: .5
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                Ga = Aa.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "devil",
                        type: "img",
                        pos: [0, 0],
                        key: "devil"
                    }, {
                        class: "rope0",
                        type: "img",
                        pos: [0, 0],
                        key: "rope0"
                    }, {
                        class: "rope1",
                        type: "img",
                        pos: [0, 0],
                        key: "rope1"
                    }, {
                        class: "rope2",
                        type: "img",
                        pos: [0, 0],
                        key: "rope2"
                    }, {
                        class: "rope3",
                        type: "img",
                        pos: [0, 0],
                        key: "rope3"
                    }],
                    initializeTimeline() {
                        C.p8.timeline().to(".e.rope2", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .5,
                            ease: "power2.out"
                        }).to(".e.rope3", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .2
                        }).to(".e.rope1", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .5
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.devil", {
                            repeat: 1,
                            yoyo: !0,
                            y: -200,
                            ease: "power2.out",
                            duration: .3
                        })
                    }
                }),
                Va = Aa.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "nervous",
                        type: "img",
                        pos: [0, 0],
                        key: "nervous"
                    }, {
                        class: "rope0",
                        type: "img",
                        pos: [0, 0],
                        key: "rope0"
                    }, {
                        class: "rope1",
                        type: "img",
                        pos: [0, 0],
                        key: "rope1"
                    }, {
                        class: "rope2",
                        type: "img",
                        pos: [0, 0],
                        key: "rope2"
                    }, {
                        class: "rope3",
                        type: "img",
                        pos: [0, 0],
                        key: "rope3"
                    }],
                    initializeTimeline() {
                        C.p8.timeline().to(".e.rope2", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .25,
                            ease: "power2.out"
                        }).to(".e.rope3", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .1
                        }).to(".e.rope1", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .25
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.nervous", {
                            repeat: 1,
                            yoyo: !0,
                            y: -200,
                            ease: "power2.out",
                            duration: .15
                        })
                    }
                }),
                Ea = Aa.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "theyDidIt",
                        type: "img",
                        pos: [65, 0],
                        key: "theyDidIt"
                    }, {
                        class: "nervous",
                        type: "img",
                        pos: [0, 0],
                        key: "nervous"
                    }, {
                        class: "rope0",
                        type: "img",
                        pos: [0, 0],
                        key: "rope0"
                    }, {
                        class: "rope1",
                        type: "img",
                        pos: [0, 0],
                        key: "rope1"
                    }, {
                        class: "rope2",
                        type: "img",
                        pos: [0, 0],
                        key: "rope2"
                    }, {
                        class: "rope3",
                        type: "img",
                        pos: [0, 0],
                        key: "rope3"
                    }],
                    jumping1: null,
                    jumping2: null,
                    onLoadComplete() {
                        C.p8.set(".e.theyDidIt", {
                            opacity: 0
                        }), this.jumping1 = C.p8.timeline().to(".e.rope2", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .25,
                            ease: "power2.out"
                        }).to(".e.rope3", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .1
                        }).to(".e.rope1", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .25
                        }), this.jumping2 = C.p8.timeline().to(".e.nervous", {
                            repeat: -1,
                            yoyo: !0,
                            y: -200,
                            ease: "power2.out",
                            duration: .15
                        })
                    },
                    onDiscreteProgress() {
                        this.jumping1.kill(), this.jumping2.kill(), C.p8.to(".e.nervous", {
                            opacity: 0,
                            duration: .3
                        }), C.p8.to(".e.rope1", {
                            opacity: 0,
                            duration: .3
                        }), C.p8.to(".e.rope2", {
                            opacity: 0,
                            duration: .3
                        }), C.p8.to(".e.rope3", {
                            opacity: 0,
                            duration: .3
                        }), C.p8.to(".e.theyDidIt", {
                            opacity: 1,
                            duration: .3
                        })
                    }
                }),
                qa = He.extend({
                    imageManifest: {
                        cereal: Promise.resolve().then(s.t.bind(s, 93290, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "cereal",
                            images: {
                                prizeWhistle: [10, 1473, 430, 358, 321, 285],
                                prizeSpoon: [1772, 994, 122, 442, 279, 439],
                                prizeScissors: [1772, 1446, 266, 430, 285, 367],
                                prizeLilGuy: [10, 1020, 358, 443, 279, 321],
                                prizeFinger: [1868, 10, 121, 396, 302, 439],
                                prizeEyeball: [378, 1020, 212, 427, 287, 394],
                                pieces: [10, 10, 1e3, 1e3, 0, 0],
                                piece14: [1868, 593, 164, 164, 418, 418],
                                piece13: [1868, 767, 164, 164, 418, 418],
                                piece12: [600, 1194, 154, 154, 423, 423],
                                piece11: [753, 1358, 119, 145, 428, 441],
                                piece10: [1904, 941, 124, 146, 427, 438],
                                piece09: [450, 1457, 164, 164, 418, 418],
                                piece08: [624, 1358, 119, 146, 427, 441],
                                piece07: [1904, 1097, 124, 146, 427, 438],
                                piece06: [450, 1631, 154, 154, 423, 423],
                                piece05: [614, 1631, 138, 138, 431, 431],
                                piece04: [764, 1194, 118, 145, 428, 441],
                                piece03: [1904, 1253, 124, 146, 427, 438],
                                piece02: [1868, 416, 166, 167, 417, 417],
                                piece01: [600, 1020, 164, 164, 418, 418],
                                hand: [1020, 994, 742, 786, 102, 124],
                                cerealBox: [1020, 10, 838, 974, 13, 81]
                            }
                        }
                    }
                }),
                Na = ["prizeEyeball", "prizeFinger", "prizeLilGuy", "prizeScissors", "prizeSpoon", "prizeWhistle"],
                Xa = Na[Math.floor(Math.random() * Na.length)],
                Wa = qa.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromSprite("sprite", ["hand", "cerealBox"]),
                    onLoadComplete() {
                        C.p8.set(".e.hand", {
                            scale: .6,
                            y: -1500
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.hand", {
                            y: -400,
                            duration: .3
                        }).to(".e.cerealBox", {
                            y: 50,
                            duration: .15
                        }, .2).to(".e.cerealBox", {
                            y: 0,
                            duration: .15
                        })
                    }
                }),
                Ua = qa.extend({
                    elements: Ye.elementsFromSprite("sprite", ["hand", "cerealBox"]),
                    onLoadComplete() {
                        C.p8.set(".e.hand", {
                            scale: .6,
                            y: -400
                        })
                    },
                    onStartProgress() {
                        Ye.startShake("cerealBox", 10, 3), Ye.startShake("hand", 15, 3)
                    },
                    onStopProgress() {
                        Ye.stopShake("cerealBox"), Ye.stopShake("hand")
                    }
                }),
                $a = qa.extend({
                    elements: Ye.elementsFromSprite("sprite", ["piece01", "piece02", "piece03", "piece04", "piece05", "piece06", "piece07", "piece08", "piece09", "piece10", "piece11", "piece12", "piece13", "piece14", "cerealBox"]),
                    onLoadComplete() {
                        C.p8.set(".e.cerealBox", {
                            rotate: 180,
                            y: -750
                        }), C.p8.set([".e.piece01", ".e.piece02", ".e.piece03", ".e.piece04", ".e.piece05", ".e.piece06", ".e.piece07", ".e.piece08", ".e.piece09", ".e.piece10", ".e.piece11", ".e.piece12", ".e.piece13", ".e.piece14"], {
                            y: -800
                        })
                    },
                    onStartProgress() {
                        Ye.startShake("cerealBox", 0, 5, 1)
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.piece01", {
                            x: "random(-300, 300)",
                            y: "random(-150, 450)"
                        }).to(".e.piece02", {
                            x: "random(-300, 300)",
                            y: "random(-150, 450)"
                        }).to(".e.piece03", {
                            x: "random(-300, 300)",
                            y: "random(-150, 450)"
                        }).to(".e.piece04", {
                            x: "random(-300, 300)",
                            y: "random(-150, 450)"
                        }).to(".e.piece05", {
                            x: "random(-300, 300)",
                            y: "random(-150, 450)"
                        }).to(".e.piece06", {
                            x: "random(-300, 300)",
                            y: "random(-150, 450)"
                        }).to(".e.piece07", {
                            x: "random(-300, 300)",
                            y: "random(-150, 450)"
                        }).to(".e.piece08", {
                            x: "random(-300, 300)",
                            y: "random(-150, 450)"
                        }).to(".e.piece09", {
                            x: "random(-300, 300)",
                            y: "random(-150, 450)"
                        }).to(".e.piece10", {
                            x: "random(-300, 300)",
                            y: "random(-150, 450)"
                        }).to(".e.piece11", {
                            x: "random(-300, 300)",
                            y: "random(-150, 450)"
                        }).to(".e.piece12", {
                            x: "random(-300, 300)",
                            y: "random(-150, 450)"
                        }).to(".e.piece13", {
                            x: "random(-300, 300)",
                            y: "random(-150, 450)"
                        }).to(".e.piece14", {
                            x: "random(-300, 300)",
                            y: "random(-150, 450)"
                        })
                    },
                    onStopProgress() {
                        Ye.stopShake("cerealBox")
                    }
                }),
                ja = qa.extend({
                    stepDuration: 1.1,
                    elements: Ye.elementsFromSprite("sprite", [
                        [Xa, "prize"], "cerealBox"
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.cerealBox", {
                            rotate: 180,
                            y: -750
                        }), C.p8.set(".e.prize", {
                            y: 300,
                            opacity: 0
                        }), C.p8.to(".e.cerealBox", {
                            rotate: 0,
                            scale: .7,
                            y: 250,
                            duration: .3
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.cerealBox", {
                            y: 300,
                            scaleY: .75,
                            duration: .5
                        }).to(".e.cerealBox", {
                            y: 250,
                            scaleY: .7,
                            duration: .5
                        }).to(".e.prize", {
                            opacity: 1,
                            scaleY: 1.2,
                            y: -365,
                            duration: .5
                        }, "<").to(".e.prize", {
                            scaleY: 1,
                            y: -350,
                            duration: .5
                        })
                    }
                }),
                Ka = Wa,
                Za = Ua,
                Ja = $a,
                _a = qa.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        [Xa, "prize"], "cerealBox"
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.cerealBox", {
                            rotate: 180,
                            y: -750
                        }), C.p8.set(".e.prize", {
                            y: 300,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cerealBox", {
                            rotate: 0,
                            scale: .7,
                            y: 250
                        }).to(".e.cerealBox", {
                            y: 300,
                            scaleY: .75
                        }).to(".e.cerealBox", {
                            y: 250,
                            scaleY: .7
                        }).to(".e.prize", {
                            opacity: 1,
                            scaleY: 1.2,
                            y: -365
                        }, "<").to(".e.prize", {
                            scaleY: 1,
                            y: -350
                        }).to(".e.prize", {
                            rotate: -45
                        }, "+=.5").to(".e.prize", {
                            y: -1500,
                            x: 1500,
                            rotate: 720
                        })
                    }
                }),
                Qa = He.extend({
                    imageManifest: {
                        bite: Promise.resolve().then(s.t.bind(s, 73508, 17)),
                        jelly: Promise.resolve().then(s.t.bind(s, 89530, 17)),
                        pbj: Promise.resolve().then(s.t.bind(s, 92496, 17)),
                        peanutbutter: Promise.resolve().then(s.t.bind(s, 73840, 17)),
                        bread: Promise.resolve().then(s.t.bind(s, 18821, 17))
                    }
                }),
                er = Qa.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("peanutbutter", "bread"),
                    initializeTimeline() {},
                    onDiscreteProgress() {
                        Ye.squashTransition("bread", "peanutbutter", .25)
                    }
                }),
                tr = Qa.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("jelly", "bread"),
                    onDiscreteProgress() {
                        Ye.squashTransition("bread", "jelly", .25)
                    }
                }),
                sr = Qa.extend({
                    elements: Ye.elementsFromImages("pbj"),
                    onStartProgress() {
                        Ye.startShake("pbj", 1, 2, 1)
                    },
                    onStopProgress() {
                        Ye.stopShake("pbj")
                    }
                }),
                ir = Qa.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("bite", "pbj"),
                    onDiscreteProgress() {
                        Ye.squashTransition("pbj", "bite", .25)
                    }
                }),
                or = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 30834, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                page: [0, 0, 772, 976],
                                outline: [772, 688, 500, 694],
                                scribble: [772, 0, 500, 688],
                                crayons: [1, 976, 687, 622]
                            }
                        }
                    }
                }),
                nr = or.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["page", null, [12, 114]],
                        ["outline", null, [103, 190]]
                    ]),
                    onDiscreteProgress() {
                        Ye.squashOnce("page", .35, "y"), Ye.squashOnce("outline", .35, "y")
                    }
                }),
                ar = or.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["crayons", null, [189, 156]]
                    ]),
                    onDiscreteProgress() {
                        Ye.squashOnce("crayons", .35)
                    }
                }),
                rr = or.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["page", null, [12, 114]],
                        ["scribble", null, [106, 193]],
                        ["outline", null, [103, 190]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.scribble", {
                            clipPath: "inset(0 0 100% 0)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.scribble", {
                            clipPath: "inset(0 0 0% 0)"
                        })
                    }
                }),
                lr = He.extend({
                    imageManifest: {
                        books: Promise.resolve().then(s.t.bind(s, 39097, 17)),
                        fireworks: Promise.resolve().then(s.t.bind(s, 67011, 17)),
                        packempty: Promise.resolve().then(s.t.bind(s, 51035, 17)),
                        packfull: Promise.resolve().then(s.t.bind(s, 77519, 17)),
                        snack1: Promise.resolve().then(s.t.bind(s, 79740, 17)),
                        snack2: Promise.resolve().then(s.t.bind(s, 96461, 17))
                    }
                }),
                dr = lr.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("packempty", "packfull"),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("packfull", "packempty", .25)), this.timeline.to(".e.packempty", {
                            x: -250,
                            scale: .5,
                            duration: .25
                        })
                    }
                }),
                pr = lr.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("packempty", "books"),
                    initializeTimeline() {
                        C.p8.set(".e.packempty", {
                            x: -250,
                            scale: .5
                        }), C.p8.fromTo(".e.books", {
                            x: 600,
                            opacity: 0
                        }, {
                            opacity: 1,
                            x: 250,
                            duration: .25
                        }), this.timeline.to(".e.books", {
                            scale: .1,
                            x: -250,
                            opacity: 0,
                            ease: "back.in(3)"
                        })
                    }
                }),
                cr = lr.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("packempty", "snack1", "snack2"),
                    initializeTimeline() {
                        C.p8.set(".e.packempty", {
                            x: -250,
                            duration: .25,
                            scale: .5
                        }), C.p8.fromTo(".e.snack1", {
                            x: 1200,
                            opacity: 0
                        }, {
                            opacity: 1,
                            x: 450,
                            y: 150,
                            duration: .25
                        }), this.timeline.to(".e.snack1", {
                            scale: .1,
                            x: 50,
                            y: 150,
                            opacity: 0,
                            ease: "back.in(3)"
                        }), this.timeline.fromTo(".e.snack2", {
                            opacity: 0,
                            x: 1200,
                            y: 150
                        }, {
                            opacity: 1,
                            x: 450,
                            duration: .25,
                            delay: .25
                        }, "<"), this.timeline.to(".e.snack2", {
                            scale: .1,
                            x: 50,
                            y: 150,
                            opacity: 0,
                            ease: "back.in(3)"
                        })
                    }
                }),
                mr = lr.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("packempty", "fireworks"),
                    initializeTimeline() {
                        C.p8.set(".e.packempty", {
                            x: -250,
                            duration: .25,
                            scale: .5
                        }), C.p8.fromTo(".e.fireworks", {
                            x: 500,
                            opacity: 0
                        }, {
                            opacity: 1,
                            x: 150,
                            duration: .25
                        }), this.timeline.to(".e.fireworks", {
                            scale: .1,
                            x: -250,
                            opacity: 0,
                            ease: "back.in(3)"
                        })
                    }
                }),
                hr = lr.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("packfull", "packempty"),
                    initializeTimeline() {
                        C.p8.set(".e.packfull", {
                            hidden: !0
                        }), this.timeline.add(Ye.squashTransition("packempty", "packfull", .25))
                    }
                }),
                ur = He.extend({
                    imageManifest: {
                        knot: Promise.resolve().then(s.t.bind(s, 63342, 17)),
                        cape: Promise.resolve().then(s.t.bind(s, 94368, 17)),
                        juice: Promise.resolve().then(s.t.bind(s, 36372, 17)),
                        run: Promise.resolve().then(s.t.bind(s, 50183, 17)),
                        runLeft: Promise.resolve().then(s.t.bind(s, 73202, 17)),
                        runRight: Promise.resolve().then(s.t.bind(s, 40254, 17))
                    }
                }),
                gr = ur.extend({
                    elements: Ye.elementsFromImages("cape", ["knot", null, [200, 250]]),
                    onLoadComplete() {
                        C.p8.set(".e.knot", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.knot", {
                            opacity: 1,
                            rotate: 360
                        })
                    }
                }),
                yr = ur.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("runRight"),
                    onLoadComplete() {
                        C.p8.set(".e.runRight", {
                            x: -200
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.runRight", {
                            x: 1e3
                        })
                    }
                }),
                br = ur.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("runLeft"),
                    onLoadComplete() {
                        C.p8.set(".e.runLeft", {
                            x: 200
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.runLeft", {
                            x: -1e3
                        })
                    }
                }),
                xr = ur.extend({
                    elements: Ye.elementsFromImages("juice")
                }),
                fr = ur.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("run"),
                    onLoadComplete() {
                        C.p8.set(".e.run", {
                            x: -200
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.run", {
                            x: 1e3
                        })
                    }
                }),
                vr = He.extend({
                    imageManifest: {
                        cat: Promise.resolve().then(s.t.bind(s, 79613, 17)),
                        glue: Promise.resolve().then(s.t.bind(s, 49234, 17)),
                        broken: Promise.resolve().then(s.t.bind(s, 34161, 17)),
                        macaroni: Promise.resolve().then(s.t.bind(s, 20849, 17))
                    }
                }),
                kr = vr.extend({
                    elements: Ye.elementsFromImages("macaroni", "broken"),
                    onLoadComplete() {
                        C.p8.set(".e.broken", {
                            opacity: 1
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.broken", {
                            opacity: 0
                        })
                    }
                }),
                Pr = vr.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("glue"),
                    initializeTimeline() {
                        this.timeline.to(".e.glue", {
                            rotate: 180,
                            duration: 1
                        }).to(".e.glue", {
                            scaleX: .6,
                            scaleY: 1.2,
                            duration: .5,
                            ease: "back.in(2)"
                        }).to(".e.glue", {
                            scale: 1,
                            duration: .5
                        }).to(".e.glue", {
                            scaleX: .6,
                            scaleY: 1.2,
                            duration: .5,
                            ease: "back.in(2)"
                        }).to(".e.glue", {
                            scale: 1,
                            duration: .5
                        }).to(".e.glue", {
                            scaleX: .6,
                            scaleY: 1.2,
                            duration: .5,
                            ease: "back.in(2)"
                        }).to(".e.glue", {
                            scale: 1,
                            duration: .5
                        })
                    }
                }),
                wr = vr.extend({
                    elements: Ye.elementsFromImages(["cat", "cat0"], ["cat", "cat1"]),
                    onLoadComplete() {
                        C.p8.set(".e.cat0", {
                            x: -25,
                            filter: "blur(4px)",
                            autoRound: !1
                        }), C.p8.set(".e.cat1", {
                            x: 25,
                            filter: "blur(4px)",
                            autoRound: !1
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cat0", {
                            x: 0,
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.cat1", {
                            x: 0,
                            filter: "blur(0px)",
                            autoRound: !1
                        }, "<").to(".e.cat0", {
                            x: -25,
                            filter: "blur(4px)",
                            autoRound: !1
                        }).to(".e.cat1", {
                            x: 25,
                            filter: "blur(4px)",
                            autoRound: !1
                        }, "<").to(".e.cat0", {
                            x: 0,
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.cat1", {
                            x: 0,
                            filter: "blur(0px)",
                            autoRound: !1
                        }, "<").to(".e.cat0", {
                            x: -10,
                            filter: "blur(2px)",
                            autoRound: !1
                        }).to(".e.cat1", {
                            x: 10,
                            filter: "blur(2px)",
                            autoRound: !1
                        }, "<").to(".e.cat0", {
                            x: 0,
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.cat1", {
                            x: 0,
                            filter: "blur(0px)",
                            autoRound: !1
                        }, "<")
                    }
                }),
                Tr = He.extend({
                    imageManifest: {
                        lefttied: Promise.resolve().then(s.t.bind(s, 89544, 17)),
                        leftuntied: Promise.resolve().then(s.t.bind(s, 63481, 17)),
                        righttied: Promise.resolve().then(s.t.bind(s, 96453, 17)),
                        rightuntied: Promise.resolve().then(s.t.bind(s, 67384, 17))
                    }
                }),
                Sr = Tr.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("leftuntied", "rightuntied"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.leftuntied", {
                            x: 250,
                            rotate: -20,
                            scale: .5
                        }, {
                            rotate: 0,
                            ease: "back(3)"
                        }), this.timeline.fromTo(".e.rightuntied", {
                            x: -250,
                            rotate: 20,
                            scale: .5
                        }, {
                            rotate: 0,
                            ease: "back(3)"
                        })
                    }
                }),
                Mr = Tr.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("leftuntied", "rightuntied", "righttied"),
                    initializeTimeline() {
                        C.p8.set(".e.leftuntied,.e.rightuntied,.e.lefttied,.e.righttied", {
                            scale: .5,
                            x: -250
                        }), C.p8.set(".e.leftuntied", {
                            x: 250
                        }), C.p8.set(".e.righttied", {
                            hidden: !0
                        }), C.p8.to(".e.rightuntied, .e.righttied", {
                            scale: 1,
                            x: 0
                        }), C.p8.to(".e.leftuntied", {
                            scale: 1,
                            x: 1e3
                        }), this.timeline.to(".rightuntied", {
                            rotate: 4,
                            yoyo: !0,
                            repeat: 6
                        })
                    },
                    onProgress(e) {
                        e >= 99 && Ye.squashTransition("rightuntied", "righttied", .25)
                    }
                }),
                Cr = Tr.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("leftuntied", "lefttied", "righttied"),
                    initializeTimeline() {
                        C.p8.set(".e.lefttied", {
                            hidden: !0
                        }), C.p8.set(".e.righttied", {
                            scale: 1,
                            x: 0
                        }), C.p8.set(".e.leftuntied", {
                            x: 1e3
                        }), C.p8.to(".e.leftuntied", {
                            x: 0
                        }), C.p8.to(".e.righttied", {
                            x: -1e3
                        }), this.timeline.to(".leftuntied", {
                            rotate: 4,
                            yoyo: !0,
                            repeat: 6
                        })
                    },
                    onProgress(e) {
                        e >= 99 && Ye.squashTransition("leftuntied", "lefttied", .25)
                    }
                }),
                Dr = He.extend({
                    imageManifest: {
                        swing0: Promise.resolve().then(s.t.bind(s, 98502, 17)),
                        swing1: Promise.resolve().then(s.t.bind(s, 36964, 17)),
                        swing2: Promise.resolve().then(s.t.bind(s, 89202, 17)),
                        swing3: Promise.resolve().then(s.t.bind(s, 85377, 17)),
                        swing4: Promise.resolve().then(s.t.bind(s, 44475, 17)),
                        swing5: Promise.resolve().then(s.t.bind(s, 67512, 17))
                    }
                }),
                Fr = mn.extend({
                    imageManifest: {
                        swingset: Promise.resolve().then(s.t.bind(s, 17465, 17))
                    }
                }),
                zr = Jo.extend({
                    stepDuration: .25,
                    imageManifest: {
                        swing1: Promise.resolve().then(s.t.bind(s, 36964, 17)),
                        swing0: Promise.resolve().then(s.t.bind(s, 98502, 17))
                    }
                }),
                Lr = Jo.extend({
                    stepDuration: .25,
                    imageManifest: {
                        swing3: Promise.resolve().then(s.t.bind(s, 85377, 17)),
                        swing2: Promise.resolve().then(s.t.bind(s, 89202, 17))
                    }
                }),
                Rr = Dr.extend({
                    elements: [{
                        class: "swing-container",
                        type: "container",
                        children: Ye.elementsFromImages("swing2", "swing3", "swing4", "swing5")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.swing2", {
                            opacity: 0
                        }), C.p8.set(".e.swing4", {
                            opacity: 0
                        }), C.p8.set(".e.swing5", {
                            x: -300,
                            y: 100,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.swing3", {
                            opacity: 0
                        }).to(".e.swing2", {
                            opacity: 1
                        }, "<").to(".e.swing2", {
                            opacity: 0
                        }).to(".e.swing4", {
                            opacity: 1,
                            duration: .25
                        }).to(".e.swing5", {
                            x: 0,
                            y: 0,
                            opacity: 1,
                            duration: .25
                        }, "<")
                    },
                    onStartProgress() {
                        Ye.startHoldShake("swing-container")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("swing-container")
                    }
                }),
                Ir = He.extend({
                    imageManifest: {
                        awards: Promise.resolve().then(s.t.bind(s, 88383, 17)),
                        cartwheelleft: Promise.resolve().then(s.t.bind(s, 79698, 17)),
                        cartwheelright: Promise.resolve().then(s.t.bind(s, 60249, 17)),
                        clearpath: Promise.resolve().then(s.t.bind(s, 6075, 17)),
                        prep: Promise.resolve().then(s.t.bind(s, 75229, 17))
                    }
                }),
                Or = Ir.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("clearpath"),
                    onLoadComplete() {
                        C.p8.set(".e.clearpath", {
                            x: -700,
                            scale: 1.25
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.clearpath", {
                            x: 400,
                            ease: "power3.out"
                        })
                    }
                }),
                Br = Ir.extend({
                    elements: Ye.elementsFromImages("prep"),
                    onLoadComplete() {
                        C.p8.set(".e.prep", {
                            x: 400
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.prep", {
                            x: -200
                        })
                    }
                }),
                Yr = Ir.extend({
                    elements: Ye.elementsFromImages("cartwheelright"),
                    onLoadComplete() {
                        C.p8.set(".e.cartwheelright", {
                            x: -100,
                            rotation: 180
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cartwheelright", {
                            x: 100,
                            rotation: 540
                        })
                    }
                }),
                Ar = Ir.extend({
                    elements: Ye.elementsFromImages("cartwheelleft"),
                    onLoadComplete() {
                        C.p8.set(".e.cartwheelleft", {
                            x: 100,
                            rotation: 180
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cartwheelleft", {
                            x: 0,
                            rotation: -180
                        })
                    }
                }),
                Hr = Ir.extend({
                    elements: Ye.elementsFromImages("awards")
                }),
                Gr = He.extend({
                    imageManifest: {
                        lantern: Promise.resolve().then(s.t.bind(s, 6131, 17)),
                        lit: Promise.resolve().then(s.t.bind(s, 13263, 17)),
                        paper: Promise.resolve().then(s.t.bind(s, 53001, 17)),
                        scissors: Promise.resolve().then(s.t.bind(s, 56694, 17))
                    }
                }),
                Vr = Gr.extend({
                    elements: Ye.elementsFromImages(["paper", "paper1"], ["paper", "paper2"], ["paper", "paper3"], ["paper", "paper4"]),
                    onLoadComplete() {
                        C.p8.set(".e.paper2", {
                            height: 1e3,
                            width: 1e3,
                            clipPath: "polygon(6% 17%, 71% 4%, 84% 84%, 21% 95%)",
                            rotate: 20,
                            x: -20,
                            y: 80
                        }), C.p8.set(".e.paper3", {
                            height: 1e3,
                            width: 1e3,
                            clipPath: "polygon(6% 17%, 71% 4%, 84% 84%, 21% 95%)",
                            rotate: -80,
                            x: 60,
                            y: 100
                        }), C.p8.set(".e.paper4", {
                            height: 1e3,
                            width: 1e3,
                            clipPath: "polygon(6% 17%, 71% 4%, 84% 84%, 21% 95%)",
                            rotate: -100,
                            x: 0,
                            y: -80
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.paper2", {
                            rotate: 30,
                            x: -30,
                            y: 90
                        }).to(".e.paper2", {
                            rotate: 10,
                            x: 0,
                            y: 0
                        }).to(".e.paper3", {
                            rotate: -90,
                            x: 70,
                            y: 110
                        }).to(".e.paper3", {
                            rotate: 10,
                            x: 0,
                            y: 0
                        }).to(".e.paper4", {
                            rotate: -110,
                            x: 10,
                            y: -90
                        }).to(".e.paper4", {
                            rotate: 10,
                            x: 0,
                            y: 0
                        }).to(".e.paper1", {
                            rotate: 10,
                            x: -15,
                            y: 0,
                            clipPath: "polygon((6% 17%, 71% 4%, 84% 84%, 21% 95%)"
                        }).to([".e.paper2", ".e.paper3", ".e.paper4"], {
                            opacity: 0
                        }).to(".e.paper1", {
                            scale: .8,
                            y: 350,
                            x: 0
                        })
                    }
                }),
                Er = Gr.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages(["scissors", "scissorBack"], "paper", ["scissors", "scissorFront"]),
                    onLoadComplete() {
                        C.p8.set(".e.paper", {
                            scale: .8,
                            y: 350,
                            rotate: 10
                        }), C.p8.set(".e.scissorFront", {
                            scale: .7,
                            x: -120,
                            y: -350,
                            clip: "rect(0px, 501px, 1000px, 0px)"
                        }), C.p8.set(".e.scissorBack", {
                            scale: .7,
                            x: -120,
                            y: -350,
                            clip: "rect(0px, 1000px, 1000px, 499px)"
                        })
                    },
                    onDiscreteProgress(e) {
                        const t = [-30, 30, 90, 120][Math.round(e / 100 * 4) - 1],
                            s = C.p8.timeline();
                        s.timeScale(2).to([".e.scissorFront", ".e.scissorBack"], {
                            y: -400,
                            scaleY: .75
                        }).to([".e.scissorFront", ".e.scissorBack"], {
                            y: 80,
                            scaleY: .71
                        }).to([".e.paper"], {
                            y: 400
                        }).to([".e.paper"], {
                            y: 350
                        }), s.to([".e.scissorFront", ".e.scissorBack"], {
                            y: -400,
                            x: t
                        }), 100 === e && s.to([".e.scissorFront", ".e.scissorBack"], {
                            y: -1200,
                            x: 1200,
                            rotate: 500
                        })
                    }
                }),
                qr = Gr.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("lit", "lantern"),
                    initializeTimeline() {
                        this.timeline.to(".e.lantern", {
                            opacity: 0
                        }).to(".e.lit", {
                            background: "radial-gradient(circle, rgba(255,252,58,1) 0%, rgba(0,212,255,0) 75%)"
                        })
                    }
                }),
                Nr = Gr.extend({
                    elements: Ye.elementsFromImages("lit"),
                    onLoadComplete() {
                        C.p8.set(".e.lit", {
                            background: "radial-gradient(circle, rgba(255,252,58,1) 0%, rgba(0,212,255,0) 75%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.lit", {
                            background: "radial-gradient(circle, rgba(85,255,58,1) 0%, rgba(0,212,255,0) 75%)"
                        }).to(".e.lit", {
                            background: "radial-gradient(circle, rgba(58,105,255,1) 0%, rgba(0,212,255,0) 75%)"
                        }).to(".e.lit", {
                            background: "radial-gradient(circle, rgba(153,58,255,1) 0%, rgba(0,212,255,0) 75%)"
                        }).to(".e.lit", {
                            background: "radial-gradient(circle, rgba(255,58,231,1) 0%, rgba(0,212,255,0) 75%)"
                        }).to(".e.lit", {
                            background: "radial-gradient(circle, rgba(255,58,65,1) 0%, rgba(0,212,255,0) 75%)"
                        }).to(".e.lit", {
                            background: "radial-gradient(circle, rgba(255,146,58,1) 0%, rgba(0,212,255,0) 75%)"
                        }).to(".e.lit", {
                            background: "radial-gradient(circle, rgba(255,252,58,1) 0%, rgba(0,212,255,0) 75%)"
                        }).to(".e.lit", {
                            background: "radial-gradient(circle, rgba(85,255,58,1) 0%, rgba(0,212,255,0) 75%)"
                        }).to(".e.lit", {
                            background: "radial-gradient(circle, rgba(58,105,255,1) 0%, rgba(0,212,255,0) 75%)"
                        }).to(".e.lit", {
                            scale: 1.4,
                            duration: 10
                        }, "-=5")
                    }
                }),
                Xr = He.extend({
                    imageManifest: {
                        boot: Promise.resolve().then(s.t.bind(s, 63145, 17)),
                        fire: Promise.resolve().then(s.t.bind(s, 15803, 17)),
                        lantern: Promise.resolve().then(s.t.bind(s, 90793, 17)),
                        paper: Promise.resolve().then(s.t.bind(s, 24749, 17)),
                        scissors: Promise.resolve().then(s.t.bind(s, 18464, 17)),
                        stomp: Promise.resolve().then(s.t.bind(s, 25357, 17))
                    }
                }),
                Wr = Xr.extend({
                    elements: Ye.elementsFromImages(["paper", "paper1"], ["paper", "paper2"], ["paper", "paper3"], ["paper", "paper4"]),
                    onLoadComplete() {
                        C.p8.set(".e.paper2", {
                            height: 1e3,
                            width: 1e3,
                            clipPath: "polygon(6% 17%, 71% 4%, 84% 84%, 21% 95%)",
                            rotate: 20,
                            x: -20,
                            y: 80
                        }), C.p8.set(".e.paper3", {
                            height: 1e3,
                            width: 1e3,
                            clipPath: "polygon(6% 17%, 71% 4%, 84% 84%, 21% 95%)",
                            rotate: -80,
                            x: 60,
                            y: 100
                        }), C.p8.set(".e.paper4", {
                            height: 1e3,
                            width: 1e3,
                            clipPath: "polygon(6% 17%, 71% 4%, 84% 84%, 21% 95%)",
                            rotate: -100,
                            x: 0,
                            y: -80
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.paper2", {
                            rotate: 30,
                            x: -30,
                            y: 90
                        }).to(".e.paper2", {
                            rotate: 10,
                            x: 0,
                            y: 0
                        }).to(".e.paper3", {
                            rotate: -90,
                            x: 70,
                            y: 110
                        }).to(".e.paper3", {
                            rotate: 10,
                            x: 0,
                            y: 0
                        }).to(".e.paper4", {
                            rotate: -110,
                            x: 10,
                            y: -90
                        }).to(".e.paper4", {
                            rotate: 10,
                            x: 0,
                            y: 0
                        }).to(".e.paper1", {
                            rotate: 10,
                            x: -15,
                            y: 0,
                            clipPath: "polygon((6% 17%, 71% 4%, 84% 84%, 21% 95%)"
                        }).to([".e.paper2", ".e.paper3", ".e.paper4"], {
                            opacity: 0
                        }).to(".e.paper1", {
                            scale: .8,
                            y: 350,
                            x: 0
                        })
                    }
                }),
                Ur = Xr.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages(["scissors", "scissorBack"], "paper", ["scissors", "scissorFront"]),
                    onLoadComplete() {
                        C.p8.set(".e.paper", {
                            scale: .8,
                            y: 350,
                            rotate: 10
                        }), C.p8.set(".e.scissorFront", {
                            scale: .7,
                            x: -120,
                            y: -350,
                            clip: "rect(0px, 501px, 1000px, 0px)"
                        }), C.p8.set(".e.scissorBack", {
                            scale: .7,
                            x: -120,
                            y: -350,
                            clip: "rect(0px, 1000px, 1000px, 499px)"
                        })
                    },
                    onDiscreteProgress(e) {
                        const t = [-30, 30, 90, 120][Math.round(e / 100 * 4) - 1],
                            s = C.p8.timeline();
                        s.timeScale(2).to([".e.scissorFront", ".e.scissorBack"], {
                            y: -400,
                            scaleY: .75
                        }).to([".e.scissorFront", ".e.scissorBack"], {
                            y: 80,
                            scaleY: .71
                        }).to([".e.paper"], {
                            y: 400
                        }).to([".e.paper"], {
                            y: 350
                        }), s.to([".e.scissorFront", ".e.scissorBack"], {
                            y: -400,
                            x: t
                        }), 100 === e && s.to([".e.scissorFront", ".e.scissorBack"], {
                            y: -1200,
                            x: 1200,
                            rotate: 500
                        })
                    }
                }),
                $r = Xr.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("fire", "lantern"),
                    onLoadComplete() {
                        C.p8.set(".e.fire", {
                            scale: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.lantern", {
                            scale: 1.3,
                            duration: 1
                        }).to(".e.lantern", {
                            scale: 1
                        }).to(".e.lantern", {
                            opacity: 0
                        }).to(".e.fire", {
                            scale: 1.3
                        }).to(".e.fire", {
                            scale: 1.1
                        }).to(".e.fire", {
                            background: "radial-gradient(circle, rgba(255,252,58,1) 35%, rgba(0,212,255,0) 75%)"
                        }), Ye.startShake("fire", 5, 3)
                    }
                }),
                jr = Xr.extend({
                    elements: Ye.elementsFromImages("fire", "boot"),
                    onLoadComplete() {
                        C.p8.set(".e.boot", {
                            opacity: 0,
                            y: -500
                        }), C.p8.set(".e.fire", {
                            scale: 1.1,
                            background: "radial-gradient(circle, rgba(255,252,58,1) 35%, rgba(0,212,255,0) 75%)"
                        }), Ye.startShake("fire", 5, 3)
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.boot", {
                            opacity: 1
                        }).to(".e.boot", {
                            y: -600,
                            scaleY: 1.2
                        }).to(".e.boot", {
                            scaleY: 1,
                            y: 0
                        }).to(".e.boot", {
                            scaleY: 1.1,
                            y: -300
                        }).to(".e.boot", {
                            scaleY: 1,
                            y: 0
                        }).to(".e.fire", {
                            background: "radial-gradient(circle, rgba(255,252,58,1) 25%, rgba(0,212,255,0) 75%)",
                            scale: .9
                        }).to(".e.boot", {
                            y: -35,
                            rotateY: 180
                        }).to(".e.boot", {
                            rotateY: -0
                        }).to(".e.fire", {
                            background: "radial-gradient(circle, rgba(255,252,58,1) 20%, rgba(0,212,255,0) 75%)",
                            scale: .8
                        }).to(".e.boot", {
                            y: -600,
                            scaleY: 1.2
                        }).to(".e.boot", {
                            y: -45,
                            scaleY: 1
                        }).to(".e.boot", {
                            y: -350,
                            scaleY: 1.1
                        }).to(".e.boot", {
                            y: -45,
                            scaleY: 1
                        }).to(".e.fire", {
                            background: "radial-gradient(circle, rgba(255,252,58,1) 15%, rgba(0,212,255,0) 75%)",
                            scale: .7
                        }).to(".e.boot", {
                            y: -600,
                            scaleY: 1.2
                        }).to(".e.boot", {
                            y: -100,
                            scaleY: 1
                        }).to(".e.fire", {
                            background: "radial-gradient(circle, rgba(255,252,58,1) 10%, rgba(0,212,255,0) 75%)",
                            scale: .4
                        }).to(".e.boot", {
                            y: -120,
                            rotateY: 180
                        }).to(".e.boot", {
                            rotateY: 0
                        }).to(".e.fire", {
                            background: "radial-gradient(circle, rgba(255,252,58,1) 0%, rgba(0,212,255,0) 75%)",
                            opacity: 0
                        })
                    }
                }),
                Kr = He.extend({
                    imageManifest: {
                        juice: Promise.resolve().then(s.t.bind(s, 41957, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "juice",
                            images: {
                                strawOnly: [1340, 10, 241, 460, 311, 455],
                                puncture: [10, 10, 77, 20, 545, 389],
                                strawPuncture: [97, 10, 126, 142, 725, 404],
                                juiceBox: [10, 371, 636, 516, 482, 180],
                                shake: [466, 10, 476, 351, 378, 241],
                                appleJuice: [233, 10, 223, 295, 411, 542],
                                juiceFlavors: [952, 10, 378, 352, 294, 234],
                                drink: [656, 480, 788, 566, 212, 114]
                            }
                        }
                    }
                }),
                Zr = Kr.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["juiceFlavors", "appleJuice"])
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.appleJuice", {
                            x: -150,
                            y: 25,
                            duration: .5
                        }).to(".e.appleJuice", {
                            x: 0,
                            y: 0,
                            duration: .5
                        }).fillTime(1).to(".e.appleJuice", {
                            x: 30,
                            y: -500,
                            rotate: 10
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                Jr = Kr.extend({
                    elements: Ye.elementsFromSprite("sprite", ["shake"]),
                    onLoadComplete() {
                        C.p8.set(".e.shake", {
                            transformOrigin: "bottom left"
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            repeat: 10,
                            ease: "none"
                        }).to(".e.shake", {
                            rotate: 10
                        }).to(".e.shake", {
                            rotate: 0
                        }).to(".e.shake", {
                            rotate: -10
                        }).to(".e.shake", {
                            rotate: 0
                        });
                        this.timeline.add(e)
                    }
                }),
                _r = Kr.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromSprite("sprite", ["juiceBox", ["puncture", "puncture0"],
                        ["puncture", "puncture1", [605, 409]],
                        ["puncture", "puncture2", [635, 640]], "strawOnly"
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.strawOnly", {
                            x: -40,
                            y: -280
                        }), C.p8.set(".e.puncture0, .e.puncture1, .e.puncture2", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.strawOnly", {
                            y: -137,
                            duration: 1,
                            ease: "power2.in"
                        }).set(".e.puncture1", {
                            hidden: !1
                        }).to(".e.strawOnly", {
                            x: -60,
                            y: -310,
                            duration: 1,
                            ease: "power2.in"
                        }).to(".e.strawOnly", {
                            y: -197,
                            duration: 1,
                            ease: "power2.in"
                        }).set(".e.puncture0", {
                            hidden: !1
                        }).to(".e.strawOnly", {
                            x: 190,
                            y: -240,
                            duration: 1,
                            ease: "power2.in"
                        }).to(".e.strawOnly", {
                            y: -110,
                            duration: .7,
                            ease: "power2.in"
                        }).set(".e.puncture2", {
                            hidden: !1
                        }).to(".e.strawOnly", {
                            y: -240,
                            duration: .5,
                            ease: "power2.in"
                        });
                        this.timeline.add(e)
                    }
                }),
                Qr = Kr.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", ["strawOnly", "juiceBox", ["puncture", "puncture0"],
                        ["puncture", "puncture1", [605, 409]],
                        ["puncture", "puncture2", [635, 640]], "strawPuncture"
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.strawOnly", {
                            x: 190,
                            y: -240
                        }), C.p8.set(".e.strawPuncture", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.strawOnly", {
                            rotate: 16,
                            duration: .2
                        }, 0).to(".e.strawOnly", {
                            x: 11,
                            y: 120,
                            duration: 1
                        }, 0).set(".e.strawPuncture", {
                            hidden: !1
                        }, .83)
                    }
                }),
                el = Kr.extend({
                    elements: Ye.elementsFromSprite("sprite", ["drink"]),
                    onStartProgress() {
                        Ye.startHoldShake("drink")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("drink")
                    }
                }),
                tl = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 67400, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                handle: [10, 626, 614, 368, 289, 18],
                                wampus: [1457, 10, 502, 499, 345, 481],
                                ride: [725, 10, 722, 574, 226, 184],
                                relax: [725, 594, 847, 468, 380, 60],
                                hitch: [10, 10, 705, 606, 192, 198]
                            }
                        }
                    }
                }),
                sl = tl.extend({
                    elements: Ye.elementsFromSprite("sprite", ["wampus", "handle"]),
                    onLoadComplete() {
                        C.p8.set(".e.handle", {
                            rotate: -70,
                            transformOrigin: "bottom left"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.handle", {
                            rotate: 30
                        })
                    }
                }),
                il = tl.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["ride"]),
                    onLoadComplete() {
                        C.p8.set(".e.ride", {
                            x: 200
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.ride", {
                            x: 0,
                            ease: "back.in(3)"
                        })
                    }
                }),
                ol = tl.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["ride"]),
                    initializeTimeline() {
                        this.timeline.to(".e.ride", {
                            x: -200,
                            ease: "back.in(3)"
                        })
                    }
                }),
                nl = tl.extend({
                    elements: Ye.elementsFromSprite("sprite", ["hitch"]),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("hitch")).add(Ye.squashOnce("hitch"))
                    }
                }),
                al = tl.extend({
                    elements: Ye.elementsFromSprite("sprite", ["relax"])
                }),
                rl = He.extend({
                    imageManifest: {
                        closet: Promise.resolve().then(s.t.bind(s, 82499, 17)),
                        door: Promise.resolve().then(s.t.bind(s, 24754, 17)),
                        heels: Promise.resolve().then(s.t.bind(s, 61613, 17)),
                        jackets: Promise.resolve().then(s.t.bind(s, 47148, 17)),
                        outfit: Promise.resolve().then(s.t.bind(s, 44425, 17)),
                        toss: Promise.resolve().then(s.t.bind(s, 51766, 17))
                    }
                }),
                ll = rl.extend({
                    stepDuration: 1.25,
                    elements: [{
                        class: "closet-container",
                        type: "container",
                        children: [{
                            class: "closet",
                            type: "img",
                            key: "closet"
                        }, {
                            class: "door",
                            type: "img",
                            key: "door"
                        }]
                    }],
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.door", {
                            x: -250,
                            ease: "back.out",
                            duration: .5
                        }).to(".closet-container", {
                            scale: 3,
                            opacity: 0,
                            ease: "powerq.inOut",
                            duration: .5,
                            x: -200
                        }, .55)
                    }
                }),
                dl = rl.extend({
                    stepDuration: 1.5,
                    elements: Ye.elementsFromImages("jackets"),
                    initializeTimeline() {
                        C.p8.timeline().set(".e.jackets", {
                            x: 750,
                            opacity: 0,
                            scale: .8
                        }).to(".e.jackets", {
                            x: 250,
                            opacity: 1,
                            scale: 1
                        }), this.timeline.to(".e.jackets", {
                            x: -250
                        }).to(".e.jackets", {
                            rotation: 5,
                            yoyo: !0,
                            duration: .125
                        }).to(".e.jackets", {
                            rotation: -5,
                            yoyo: !0,
                            duration: .125
                        }).to(".e.jackets", {
                            rotation: 0,
                            yoyo: !0,
                            duration: .125
                        })
                    }
                }),
                pl = rl.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages(["heels", "heels1"], ["heels", "heels2"]),
                    onLoadComplete() {
                        C.p8.set([".e.heels1", ".e.heels2"], {
                            y: -500,
                            clipPath: "inset(100% 0 0 0)"
                        }), C.p8.set(".e.heels1", {
                            x: -250,
                            scale: .75
                        }), C.p8.set(".e.heels2", {
                            x: 250,
                            scaleX: -.75,
                            scaleY: .75
                        })
                    },
                    onDiscreteProgress(e) {
                        e <= 50 ? C.p8.timeline().to(".e.heels1", {
                            y: 0,
                            clipPath: "inset(0% 0 0 0)",
                            ease: "power4.out"
                        }).to(".e.heels1", {
                            filter: "blur(25px)",
                            y: "+=50",
                            duration: .1
                        }, ">-0.25").to(".e.heels1", {
                            filter: "blur(0px)",
                            y: "-=50",
                            duration: .1
                        }) : C.p8.timeline().to(".e.heels2", {
                            y: 0,
                            clipPath: "inset(0% 0 0 0)",
                            ease: "power4.out"
                        }).to(".e.heels2", {
                            filter: "blur(25px)",
                            y: "+=50",
                            duration: .1
                        }, ">-0.25").to(".e.heels2", {
                            filter: "blur(0px)",
                            y: "-=50",
                            duration: .1
                        })
                    }
                }),
                cl = rl.extend({
                    elements: Ye.elementsFromImages("outfit"),
                    onStartProgress() {
                        Ye.startHoldShake("outfit")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("outfit")
                    }
                }),
                ml = rl.extend({
                    stepDuration: .25,
                    lastStepDuration: 1.5,
                    elements: Ye.elementsFromImages("outfit", "toss"),
                    onLoadComplete() {
                        C.p8.set(".e.toss", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress(e) {
                        e <= 25 ? C.p8.timeline().to(".e.outfit", {
                            x: -50,
                            scaleX: .9,
                            duration: .125
                        }).to(".e.outfit", {
                            x: 0,
                            scaleX: 1,
                            duration: .125
                        }) : e <= 50 ? C.p8.timeline().to(".e.outfit", {
                            x: 50,
                            scaleX: .9,
                            duration: .125
                        }).to(".e.outfit", {
                            x: 0,
                            scaleX: 1,
                            duration: .125
                        }) : e <= 75 ? C.p8.timeline().to(".e.outfit", {
                            y: 50,
                            scaleY: .9,
                            duration: .125
                        }).to(".e.outfit", {
                            y: 0,
                            scaleY: 1,
                            duration: .125
                        }) : e <= 100 && Ye.squashTransition("outfit", "toss", .5)
                    }
                }),
                hl = He.extend({
                    imageManifest: {
                        fish: Promise.resolve().then(s.t.bind(s, 81255, 17)),
                        flakes: Promise.resolve().then(s.t.bind(s, 48760, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "fish",
                            images: {
                                food: [614, 646, 482, 480, 46, 455],
                                bowlWater: [10, 646, 594, 497, 415, 213],
                                towel: [10, 1153, 285, 463, 502, 351],
                                hand: [725, 10, 444, 471, 266, 288],
                                flakesExtra: [305, 1315, 238, 73, 493, 386],
                                net: [614, 1136, 424, 476, 188, 412],
                                fish: [305, 1153, 210, 152, 646, 394],
                                bowlFull: [10, 10, 705, 626, 341, 158]
                            }
                        }
                    }
                }),
                ul = hl.extend({
                    stepDuration: .25,
                    elements: [...Ye.elementsFromSprite("sprite", ["bowlFull", "fish", "food"]), {
                        class: "flake-container",
                        type: "container",
                        children: Ye.elementsFromImages("flakes")
                    }, ...Ye.elementsFromSprite("sprite", ["bowlWater", "hand"])],
                    onLoadComplete() {
                        C.p8.set(".e.hand", {
                            y: -550,
                            x: 370,
                            rotate: 40
                        }), C.p8.set(".e.food", {
                            y: -100,
                            x: 70
                        }), C.p8.set(".e.flakes", {
                            visibility: "hidden"
                        }), Ye.startShake("fish", 0, 3, .5)
                    },
                    onDiscreteProgress(e) {
                        C.p8.timeline().to(".e.hand", {
                            y: -600,
                            x: 350
                        }).to(".e.food", {
                            y: -150,
                            x: 90
                        }, "<").to(".e.hand", {
                            y: -500,
                            x: 350
                        }).to(".e.food", {
                            y: -50,
                            x: 90
                        }, "<").to(".e.hand", {
                            y: -600,
                            x: 350
                        }).to(".e.food", {
                            y: -150,
                            x: 90
                        }, "<"), e < 50 && Ye.addParticleEmitter({
                            conatiner: "flakes-container",
                            image: "flakes",
                            numberOfParticles: 5,
                            settings: {
                                boundaries: {
                                    left: 310,
                                    right: 400,
                                    top: 30,
                                    bottom: 150
                                },
                                minSize: 300,
                                maxSize: 500
                            }
                        })
                    }
                }),
                gl = hl.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", ["bowlFull", "fish", "hand", "bowlWater"]),
                    onLoadComplete() {
                        C.p8.set(".e.hand", {
                            visibility: "hidden",
                            y: -400
                        })
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.hand", {
                            visibility: "visible"
                        }).to(".e.hand", {
                            y: 50
                        }, 0).to(".e.hand", {
                            y: 20
                        }, 1).to(".e.hand", {
                            x: -20,
                            y: 50
                        }, 2)
                    }
                }),
                yl = hl.extend({
                    elements: Ye.elementsFromSprite("sprite", ["towel", "hand"]),
                    onLoadComplete() {
                        C.p8.set(".e.hand", {
                            y: -100
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.hand", {
                            y: 0
                        }).to(".e.towel", {
                            y: -50
                        }, 1).to(".e.hand", {
                            y: -50
                        }, 1).to(".e.towel", {
                            y: 0
                        }, 2).to(".e.hand", {
                            y: 0
                        }, 2).to(".e.towel", {
                            y: -50
                        }, 3).to(".e.hand", {
                            y: -50
                        }, 3).to(".e.towel", {
                            y: 0
                        }, 4).to(".e.hand", {
                            y: 0
                        }, 4)
                    }
                }),
                bl = ul,
                xl = ul.extend({
                    elements: [...Ye.elementsFromSprite("sprite", ["bowlFull", "fish", "food", "flakesExtra"]), {
                        class: "flake-container",
                        type: "container",
                        children: Ye.elementsFromImages("flakes")
                    }, ...Ye.elementsFromSprite("sprite", ["bowlWater", "hand"])],
                    initializeTimeline() {
                        C.p8.set(".e.flakesExtra", {
                            visibility: "hidden",
                            x: 50,
                            y: -150
                        }), this.timeline.fillTime(3).set(".e.flakesExtra", {
                            visibility: "visible"
                        }).to(".e.flakesExtra", {
                            x: 0,
                            y: 0
                        })
                    }
                }),
                fl = hl.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["bowlFull", "fish", "flakesExtra", "net", "bowlWater"]),
                    onLoadComplete() {
                        C.p8.set(".e.net", {
                            y: -300
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.net", {
                            y: 0
                        }).set(".e.flakesExtra", {
                            hidden: !0
                        }).to(".e.net", {
                            y: -150
                        })
                    }
                }),
                vl = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 53118, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                paper0: [0, 0, 484, 516],
                                paper1: [1, 516, 596, 636],
                                painting: [484, 0, 378, 357],
                                devil: [0, 1152, 432, 651],
                                cloud0: [484, 357, 113, 96],
                                cloud1: [862, 0, 395, 320],
                                fridge: [597, 357, 602, 896],
                                gothic: [432, 1253, 292, 379],
                                muse0: [862, 1253, 177, 154],
                                muse1: [1039, 1253, 160, 154],
                                muse2: [862, 1407, 177, 153],
                                muse3: [1039, 1407, 160, 153]
                            }
                        }
                    }
                }),
                kl = vl.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["paper0", "paper0", [317, 333]],
                        ["paper0", "paper1", [267, 283]],
                        ["paper0", "paper2", [217, 233]],
                        ["paper0", "paper3", [167, 183]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.paper1", {
                            x: 300,
                            y: 50,
                            rotate: -80,
                            opacity: 0
                        }), C.p8.set(".e.paper2", {
                            x: 300,
                            y: 50,
                            rotate: 140,
                            opacity: 0
                        }), C.p8.set(".e.paper3", {
                            x: 300,
                            y: 50,
                            rotate: -30,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.paper1", {
                            x: 0,
                            y: 0,
                            rotate: 0,
                            opacity: 1
                        }).to(".e.paper2", {
                            x: 0,
                            y: 0,
                            rotate: 0,
                            opacity: 1
                        }).to(".e.paper3", {
                            x: 0,
                            y: 0,
                            rotate: 0,
                            opacity: 1
                        })
                    }
                }),
                Pl = vl.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["devil", null, [300, 425]],
                        ["cloud0", null, [395, 440]],
                        ["cloud1", null, [95, 130]],
                        ["muse0", null, [176, 247]],
                        ["muse1", null, [176, 255]],
                        ["muse2", null, [176, 247]],
                        ["muse3", null, [176, 255]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.muse0, .e.muse1, .e.muse2, .e.muse3", {
                            opacity: 0
                        }), C.p8.fromTo(".e.cloud0", {
                            x: 50,
                            y: 50,
                            opacity: 0
                        }, {
                            x: 0,
                            y: 0,
                            opacity: 1,
                            duration: .35
                        }), C.p8.fromTo(".e.cloud1", {
                            x: 75,
                            y: 75,
                            opacity: 0
                        }, {
                            x: 0,
                            y: 0,
                            opacity: 1,
                            delay: .15,
                            duration: .35
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.muse0", {
                            opacity: 1
                        }).to(".e.muse0", {
                            opacity: 0
                        }).to(".e.muse1", {
                            opacity: 1
                        }, "-=0.25").to(".e.muse1", {
                            opacity: 0
                        }).to(".e.muse2", {
                            opacity: 1
                        }, "-=0.25").to(".e.muse2", {
                            opacity: 0
                        }).to(".e.muse3", {
                            opacity: 1
                        }, "-=0.25").to(".e.muse3", {
                            opacity: 0
                        }).to(".e.muse0", {
                            opacity: 1
                        }, "-=0.25").to(".e.muse0", {
                            opacity: 0
                        }).to(".e.muse1", {
                            opacity: 1
                        }, "-=0.25").to(".e.muse1", {
                            opacity: 0
                        }).to(".e.muse2", {
                            opacity: 1
                        }, "-=0.25")
                    }
                }),
                wl = vl.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["paper1", null, [182, 202]],
                        ["painting", null, [321.5, 311]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.painting", {
                            clipPath: "inset(0% 100% 0% 0%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.painting", {
                            clipPath: "inset(0% 0% 0% 0%)"
                        })
                    }
                }),
                Tl = vl.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["fridge", null, [52, 199]],
                        ["gothic", null, [480, 240]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.gothic", {
                            x: 360,
                            y: -80,
                            scale: 1.5,
                            rotate: 10
                        }), C.p8.set(".e.fridge", {
                            scale: .6
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.fridge", {
                            scale: 1
                        }).to(".e.gothic", {
                            x: 0,
                            y: 0,
                            scale: 1,
                            rotate: 0
                        }, 0)
                    }
                });
            C.p8.registerPlugin(Be.u);
            const Sl = He.extend({
                    imageManifest: {
                        climaxA: Promise.resolve().then(s.t.bind(s, 16642, 17)),
                        climaxB: Promise.resolve().then(s.t.bind(s, 72678, 17)),
                        directorTalkback: Promise.resolve().then(s.t.bind(s, 19469, 17)),
                        firstActA: Promise.resolve().then(s.t.bind(s, 32211, 17)),
                        firstActB: Promise.resolve().then(s.t.bind(s, 61509, 17)),
                        readLines: Promise.resolve().then(s.t.bind(s, 55310, 17)),
                        readLinesSpeech: Promise.resolve().then(s.t.bind(s, 2554, 17)),
                        stage: Promise.resolve().then(s.t.bind(s, 50398, 17))
                    }
                }),
                Ml = Sl.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages(["stage", null, [0, 750]]),
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.stage", {
                            x: -250,
                            ease: "power4.in"
                        }).to(".e.stage", {
                            x: -500,
                            ease: "power4.in"
                        }).to(".e.stage", {
                            x: -750,
                            ease: "power4.in"
                        });
                        this.timeline.add(e)
                    }
                }),
                Cl = Sl.extend({
                    elements: Ye.elementsFromImages("readLines", "readLinesSpeech"),
                    onLoadComplete() {
                        C.p8.set(".e.readLinesSpeech", {
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            repeat: 3
                        }).set(".e.readLinesSpeech", {
                            visibility: "visible"
                        }, 4).set(".e.readLinesSpeech", {
                            visibility: "hidden"
                        }, 5).set(".e.readLinesSpeech", {
                            visibility: "visible"
                        }, 8).set(".e.readLinesSpeech", {
                            visibility: "hidden"
                        }, 10).set(".e.readLinesSpeech", {
                            visibility: "visible"
                        }, 12).set(".e.readLinesSpeech", {
                            visibility: "hidden"
                        }, 13);
                        this.timeline.add(e)
                    }
                }),
                Dl = Sl.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("firstActA", "firstActB"),
                    onLoadComplete() {
                        C.p8.set(".e.firstActB", {
                            visibility: "hidden"
                        })
                    },
                    onDiscreteProgress(e) {
                        50 === e ? (C.p8.set(".e.firstActA", {
                            visibility: "hidden"
                        }), C.p8.set(".e.firstActB", {
                            visibility: "visible"
                        })) : (C.p8.set(".e.firstActA", {
                            visibility: "visible"
                        }), C.p8.set(".e.firstActB", {
                            visibility: "hidden"
                        }))
                    }
                }),
                Fl = Sl.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("climaxA", "climaxB"),
                    onLoadComplete() {
                        C.p8.set(".e.climaxB", {
                            visibility: "hidden"
                        })
                    },
                    onDiscreteProgress(e) {
                        40 === e || 80 === e ? (C.p8.set(".e.climaxA", {
                            visibility: "visible"
                        }), C.p8.set(".e.climaxB", {
                            visibility: "hidden"
                        })) : (C.p8.set(".e.climaxA", {
                            visibility: "hidden"
                        }), C.p8.set(".e.climaxB", {
                            visibility: "visible"
                        }))
                    }
                }),
                zl = Sl.extend({
                    elements: Ye.elementsFromImages("directorTalkback", "readLinesSpeech"),
                    onLoadComplete() {
                        C.p8.set(".e.readLinesSpeech", {
                            scaleX: -1,
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            repeat: 2
                        }).set(".e.readLinesSpeech", {
                            visibility: "visible"
                        }, 4).set(".e.readLinesSpeech", {
                            visibility: "hidden"
                        }, 5).set(".e.readLinesSpeech", {
                            visibility: "visible"
                        }, 8).set(".e.readLinesSpeech", {
                            visibility: "hidden"
                        }, 10).set(".e.readLinesSpeech", {
                            visibility: "visible"
                        }, 12).set(".e.readLinesSpeech", {
                            visibility: "hidden"
                        }, 13);
                        this.timeline.add(e)
                    }
                }),
                Ll = He.extend({
                    imageManifest: {
                        Child0: Promise.resolve().then(s.t.bind(s, 90200, 17)),
                        Child0v2: Promise.resolve().then(s.t.bind(s, 75446, 17)),
                        Child0v3: Promise.resolve().then(s.t.bind(s, 22477, 17)),
                        Child1: Promise.resolve().then(s.t.bind(s, 13855, 17)),
                        Child1v2: Promise.resolve().then(s.t.bind(s, 65038, 17)),
                        Child1v3: Promise.resolve().then(s.t.bind(s, 21622, 17)),
                        Child2: Promise.resolve().then(s.t.bind(s, 60597, 17)),
                        Child2v2: Promise.resolve().then(s.t.bind(s, 73556, 17)),
                        Child2v3: Promise.resolve().then(s.t.bind(s, 2071, 17)),
                        pile: Promise.resolve().then(s.t.bind(s, 5206, 17))
                    }
                }),
                Rl = Ll.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("pile"),
                    initializeTimeline() {
                        this.timeline.add(Ye.fallOut(".e.pile", .5))
                    }
                }),
                Il = Ll.extend({
                    elements() {
                        return [{
                            class: "devil",
                            type: "img",
                            key: this.model.get("playerInfo").avatar
                        }]
                    }
                }),
                Ol = He.extend({
                    imageManifest: {
                        collage: Promise.resolve().then(s.t.bind(s, 48489, 17)),
                        magazines: Promise.resolve().then(s.t.bind(s, 38352, 17)),
                        pile: Promise.resolve().then(s.t.bind(s, 9761, 17)),
                        paper: Promise.resolve().then(s.t.bind(s, 54334, 17))
                    }
                }),
                Bl = Ol.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages(["magazines", "magazine1"], ["magazines", "magazine2"], ["magazines", "magazine3"], ["magazines", "magazine4"]),
                    onLoadComplete() {
                        C.p8.set(".e.magazine1", {
                            clip: "rect(0px 503px 503px 0px)"
                        }), C.p8.set(".e.magazine2", {
                            clip: "rect(0px 1000px 503px 500px)"
                        }), C.p8.set(".e.magazine3", {
                            clip: "rect(500px 1000px 1000px 500px)"
                        }), C.p8.set(".e.magazine4", {
                            clip: "rect(500px 503px 1000px 0px)"
                        })
                    },
                    onDiscreteProgress(e) {
                        const t = Math.round(e / 100 * 3);
                        C.p8.to(`.e.magazine${t+1}`, {
                            x: "random(-300, 300)",
                            y: "random(-300, 300)",
                            rotate: "random(-30, 30)"
                        })
                    }
                }),
                Yl = Ol.extend({
                    elements: Ye.elementsFromImages("pile", "collage"),
                    onLoadComplete() {
                        C.p8.set(".e.collage", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.pile", {
                            rotate: 90
                        }).to(".e.pile", {
                            rotate: -200,
                            x: 90,
                            y: -300
                        }).to(".e.pile", {
                            rotate: 50,
                            x: -50,
                            y: 200
                        }).to(".e.pile", {
                            opacity: 0,
                            x: 0,
                            y: 0
                        }).to(".e.collage", {
                            opacity: 1
                        }, "<")
                    }
                }),
                Al = Ol.extend({
                    elements: Ye.elementsFromImages("paper", "collage"),
                    onLoadComplete() {
                        C.p8.set(".e.paper", {
                            y: -1500,
                            scaleY: 1.2
                        }), C.p8.to(".e.collage", {
                            scale: .5,
                            y: 400
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.paper", {
                            y: 0,
                            scaleY: 1
                        }).to(".e.collage", {
                            y: 430,
                            scaleY: .4
                        }).to(".e.collage", {
                            y: -10,
                            scale: .9,
                            rotate: 15
                        }).to(".e.collage", {
                            rotate: -15
                        }).to(".e.collage", {
                            rotate: 0
                        })
                    }
                }),
                Hl = Ol.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("paper", "collage"),
                    onLoadComplete() {
                        C.p8.set(".e.paper", {
                            y: 1500,
                            scaleY: 1.1
                        }), C.p8.set(".e.collage", {
                            y: 1510
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.paper", {
                            y: -30,
                            scaleY: .9,
                            duration: .25
                        }).to(".e.collage", {
                            y: -40,
                            scaleY: .8,
                            duration: .25
                        }, "<").to(".e.paper", {
                            y: 0,
                            scaleY: 1,
                            duration: .25
                        }).to(".e.collage", {
                            y: -10,
                            scale: .9,
                            duration: .25
                        }, "<")
                    }
                }),
                Gl = He.extend({
                    imageManifest: {
                        freezer: Promise.resolve().then(s.t.bind(s, 8767, 17)),
                        puddle: Promise.resolve().then(s.t.bind(s, 34455, 17))
                    }
                }),
                Vl = Gl.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("freezer"),
                    onDiscreteProgress() {
                        Ye.scaleBounce("freezer")
                    }
                }),
                El = Gl.extend({
                    elements: Ye.elementsFromImages("freezer", "puddle"),
                    onLoadComplete() {
                        C.p8.set(".e.puddle", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.puddle", {
                            opacity: 1,
                            duration: 5
                        }).to(".e.freezer", {
                            opacity: 0,
                            duration: 1
                        }, 3)
                    }
                }),
                ql = He.extend({
                    imageManifest: {
                        mirrorClean: Promise.resolve().then(s.t.bind(s, 65708, 17)),
                        mirrorSuds: Promise.resolve().then(s.t.bind(s, 21053, 17)),
                        mirrorDirty: Promise.resolve().then(s.t.bind(s, 51040, 17)),
                        mirror: Promise.resolve().then(s.t.bind(s, 73287, 17)),
                        Adult0: Promise.resolve().then(s.t.bind(s, 41679, 17)),
                        Adult1: Promise.resolve().then(s.t.bind(s, 16687, 17)),
                        Teen0: Promise.resolve().then(s.t.bind(s, 21568, 17)),
                        Teen1: Promise.resolve().then(s.t.bind(s, 74961, 17)),
                        Teen2: Promise.resolve().then(s.t.bind(s, 54889, 17))
                    }
                }),
                Nl = ql.extend({
                    elements: [{
                        class: "mirror-container",
                        type: "container",
                        children: [{
                            class: "mirror-suds",
                            type: "img",
                            pos: [40, 140],
                            key: "mirrorSuds"
                        }, {
                            class: "mirror-dirty",
                            type: "img",
                            pos: [40, 140],
                            key: "mirrorDirty"
                        }, {
                            class: "mirror",
                            type: "img",
                            pos: [40, 140],
                            key: "mirror"
                        }]
                    }],
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.mirror-dirty", {
                            opacity: 0
                        });
                        e.name = "dirty", this.timeline.add(e)
                    }
                }),
                Xl = ql.extend({
                    stepDuration: 1,
                    elements() {
                        return [{
                            class: "mirror-container",
                            type: "container",
                            children: [{
                                class: "mirror-clean",
                                type: "img",
                                pos: [40, 140],
                                key: "mirrorClean"
                            }, {
                                class: "mirror-suds",
                                type: "img",
                                pos: [40, 140],
                                key: "mirrorSuds"
                            }, {
                                class: "player",
                                type: "img",
                                pos: [210, 0],
                                key: this.model.get("playerInfo").avatar.replace(/(v2)|(v3)\b/, "")
                            }, {
                                class: "mirror",
                                type: "img",
                                pos: [40, 140],
                                key: "mirror"
                            }]
                        }]
                    },
                    initializeTimeline() {
                        C.p8.set(".e.player", {
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.mirror-suds", {
                            opacity: 0
                        });
                        e.name = "suds", this.timeline.add(e);
                        const t = C.p8.timeline().to(".e.player", {
                            opacity: 1
                        });
                        t.name = "suds", this.timeline.add(t, 0)
                    }
                }),
                Wl = He.extend({
                    stepDuration: .5,
                    imageManifest: {
                        bottle: Promise.resolve().then(s.t.bind(s, 22959, 17)),
                        bottleTrigger: Promise.resolve().then(s.t.bind(s, 87024, 17))
                    },
                    elements: [{
                        class: "bottle-container",
                        type: "container",
                        children: [{
                            class: "bottle-trigger",
                            type: "img",
                            pos: [240, 470],
                            key: "bottleTrigger"
                        }, {
                            class: "bottle",
                            type: "img",
                            pos: [190, 200],
                            key: "bottle"
                        }]
                    }],
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.bottle-trigger", {
                            rotation: 25,
                            transformOrigin: "center top",
                            duration: this.stepDuration / 2
                        }).to(".e.bottle-trigger", {
                            rotation: 0,
                            transformOrigin: "center top",
                            duration: this.stepDuration / 2
                        })
                    }
                }),
                Ul = He.extend({
                    imageManifest: {
                        Can: Promise.resolve().then(s.t.bind(s, 63862, 17)),
                        Lid: Promise.resolve().then(s.t.bind(s, 10070, 17)),
                        Scoop: Promise.resolve().then(s.t.bind(s, 2341, 17)),
                        CoffeeMaker: Promise.resolve().then(s.t.bind(s, 21002, 17)),
                        CoffeeMakerSmoking: Promise.resolve().then(s.t.bind(s, 46797, 17)),
                        Button: Promise.resolve().then(s.t.bind(s, 41158, 17)),
                        ButtonPressed: Promise.resolve().then(s.t.bind(s, 76709, 17))
                    }
                }),
                $l = Ul.extend({
                    elements: [{
                        class: "coffee-container",
                        type: "container",
                        children: [{
                            class: "Can",
                            type: "img",
                            pos: [40, 60],
                            key: "Can"
                        }, {
                            class: "Lid",
                            type: "img",
                            pos: [-170, -31],
                            key: "Lid"
                        }]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        C.p8.set(".Lid", {
                            rotate: 60
                        });
                        const e = C.p8.timeline().to(".Lid", {
                            rotate: -520,
                            ease: "power1.out",
                            duration: .4,
                            y: -500,
                            x: -1e3
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                jl = Ul.extend({
                    elements: [{
                        class: "coffee-container",
                        type: "container",
                        children: [{
                            class: "Scoop",
                            type: "img",
                            pos: [0, 0],
                            key: "Scoop"
                        }]
                    }],
                    stepDuration: 1,
                    particleEmitter: null,
                    initializeTimeline() {
                        this.particleEmitter = Ye.addParticleEmitter({
                            container: "coffee-container",
                            numberOfParticles: 200,
                            autoplay: !1,
                            zIndex: 2,
                            settings: {
                                fullThrottle: !0,
                                particleLimit: 50,
                                frequency: .005,
                                from: {
                                    backgroundColor: "#602304",
                                    opacity: 0
                                },
                                to: {
                                    duration: 1,
                                    delay: .1,
                                    opacity: 1
                                },
                                minSize: 6,
                                maxSize: 20,
                                boundaries: {
                                    top: 380,
                                    bottom: 380,
                                    left: 500,
                                    right: 500
                                },
                                force: -4,
                                gravity: 3,
                                angle: 45
                            }
                        }, this)
                    },
                    onProgressChange() {
                        C.p8.to(".Scoop", {
                            repeat: 1,
                            yoyo: !0,
                            rotate: 90,
                            duration: .35,
                            ease: "power2.out"
                        }), this.particleEmitter.restart()
                    }
                }),
                Kl = Ul.extend({
                    elements: [{
                        class: "coffee-container",
                        type: "container",
                        children: [{
                            class: "CoffeeMaker",
                            type: "img",
                            pos: [0, 0],
                            key: "CoffeeMaker"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.CoffeeMaker", {
                            scale: 1.4
                        });
                        const e = C.p8.timeline().to(".e.CoffeeMaker", {
                            duration: 5,
                            onStart: () => {
                                C.p8.timeline().to(".e.CoffeeMaker", {
                                    repeat: -1,
                                    yoyo: !0,
                                    duration: .2,
                                    ease: "linear",
                                    x: "+=20",
                                    y: "+=20"
                                }, 1)
                            },
                            scale: 1
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                Zl = Ul.extend({
                    elements: [{
                        class: "coffee-container",
                        type: "container",
                        children: [{
                            class: "CoffeeMakerSmoking",
                            type: "img",
                            pos: [-150, -20],
                            key: "CoffeeMakerSmoking"
                        }, {
                            class: "CoffeeMaker",
                            type: "img",
                            pos: [0, 0],
                            key: "CoffeeMaker"
                        }, {
                            class: "ButtonPressed",
                            type: "img",
                            pos: [191, -20],
                            key: "ButtonPressed"
                        }, {
                            class: "Button",
                            type: "img",
                            pos: [184, -20],
                            key: "Button"
                        }]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.CoffeeMakerSmoking", {
                                repeat: -1,
                                yoyo: !0,
                                opacity: 0,
                                duration: .3
                            }),
                            t = C.p8.timeline().to(".e.Button", {
                                opacity: 0,
                                duration: .5,
                                ease: "linear"
                            }, 0).to(".e.Button", {
                                opacity: 1,
                                duration: .5,
                                ease: "linear"
                            }, 1).to(".e.Button", {
                                opacity: 0,
                                duration: .5,
                                ease: "linear"
                            }, 2).to(".e.Button", {
                                opacity: 1,
                                duration: .5,
                                ease: "linear"
                            }, 3).to(".e.Button", {
                                opacity: 0,
                                duration: .5,
                                ease: "linear"
                            }, 4).to(".e.Button", {
                                opacity: 1,
                                duration: .5,
                                ease: "linear"
                            }, 5).to(".e.Button", {
                                opacity: 0,
                                duration: .5,
                                ease: "linear"
                            }, 6).to(".e.Button", {
                                opacity: 1,
                                duration: .5,
                                ease: "linear"
                            }, 7).to(".e.Button", {
                                opacity: 0,
                                duration: .5,
                                ease: "linear"
                            }, 8).to(".e.Button", {
                                opacity: 1,
                                duration: .5,
                                ease: "linear"
                            }, 9).to(".e.Button", {
                                opacity: 0,
                                duration: .5,
                                ease: "linear",
                                onComplete: () => {
                                    e.pause(), C.p8.to(".e.CoffeeMakerSmoking", {
                                        opacity: 0
                                    })
                                }
                            }, 10);
                        this.timeline.add(t)
                    }
                }),
                Jl = He.extend({
                    imageManifest: {
                        candle: Promise.resolve().then(s.t.bind(s, 1628, 17)),
                        candleLit: Promise.resolve().then(s.t.bind(s, 96770, 17)),
                        candleFront: Promise.resolve().then(s.t.bind(s, 12255, 17))
                    },
                    elements: [{
                        type: "container",
                        class: "jar",
                        children: [{
                            type: "img",
                            pos: [0, 0],
                            key: "candle",
                            class: "candle"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "candleLit",
                            class: "candleLit"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "candleFront",
                            class: "candleFront"
                        }]
                    }],
                    stepDuration: 2,
                    initializeTimeline() {
                        C.p8.set(".e.candleLit", {
                            opacity: 0
                        }), this.timeline.to(".e.jar", {
                            rotate: 15
                        }), this.timeline.to(".e.candleLit", {
                            opacity: 1,
                            onComplete() {
                                C.p8.to(".e.candleLit", {
                                    opacity: .5,
                                    ease: "bounce.out",
                                    yoyo: !0,
                                    repeat: -1
                                })
                            }
                        }), this.timeline.to(".e.jar", {
                            rotate: 0
                        })
                    }
                }),
                _l = ct.extend({
                    imageManifest: {
                        cheese: Promise.resolve().then(s.t.bind(s, 28249, 17)),
                        fish: Promise.resolve().then(s.t.bind(s, 25631, 17)),
                        sock: Promise.resolve().then(s.t.bind(s, 1549, 17))
                    },
                    elements: [{
                        type: "container",
                        class: "slider",
                        children: [{
                            type: "img",
                            pos: [0, 0],
                            key: "cheese",
                            class: "candle"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "fish",
                            class: "fish"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "sock",
                            class: "sock"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".fish", {
                            x: "-150%"
                        }), C.p8.set(".sock", {
                            x: "150%"
                        }), this.timeline.to(".slider", {
                            x: "-150%",
                            ease: "power2.inOut"
                        }).to(".slider", {
                            x: "150%",
                            ease: "power2.inOut"
                        })
                    }
                }),
                Ql = po.extend({
                    imageManifest: {
                        closed: Promise.resolve().then(s.t.bind(s, 96192, 17)),
                        open: Promise.resolve().then(s.t.bind(s, 36033, 17))
                    },
                    elements: [{
                        type: "img",
                        pos: [0, 0],
                        key: "closed",
                        class: "closed"
                    }, {
                        type: "img",
                        pos: [0, 0],
                        key: "open",
                        class: "open"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.open", {
                            opacity: 0
                        }), this.timeline.to(".e.open", {
                            opacity: 1
                        })
                    }
                }),
                ed = mn.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 18431, 17))
                    },
                    stepDuration: .5,
                    initializeTimeline() {
                        this.timeline.to(".image", {
                            rotate: 5,
                            scale: .9,
                            duration: .5
                        }), this.timeline.to(".image", {
                            rotate: 0,
                            scale: 1,
                            duration: .5
                        }), this.timeline.to(".image", {
                            rotate: -5,
                            scale: .9,
                            duration: .5
                        }), this.timeline.to(".image", {
                            rotate: 0,
                            scale: 1,
                            duration: .5
                        }), this.timeline.to(".image", {
                            rotate: 15,
                            scale: .8,
                            duration: .5
                        }), this.timeline.to(".image", {
                            rotate: 0,
                            scale: 1,
                            duration: .5
                        }), this.timeline.to(".image", {
                            rotate: -10,
                            scale: .9,
                            duration: .5
                        }), this.timeline.to(".image", {
                            rotate: 0,
                            scale: 1,
                            duration: .5
                        }), this.timeline.to(".image", {
                            rotate: 12,
                            scale: .8,
                            duration: .5
                        }), this.timeline.to(".image", {
                            rotate: 0,
                            scale: 1,
                            duration: .5
                        })
                    }
                }),
                td = He.extend({
                    imageManifest: {
                        toast: Promise.resolve().then(s.t.bind(s, 27454, 17)),
                        toastDone: Promise.resolve().then(s.t.bind(s, 79169, 17))
                    },
                    elements: [{
                        type: "img",
                        key: "toast",
                        class: "toast",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "toastDone",
                        class: "toastDone",
                        pos: [0, 0]
                    }],
                    initializeTimeline() {
                        C.p8.set(".toastDone", {
                            opacity: 0
                        }), this.timeline.to(".toastDone", {
                            opacity: .5
                        }), this.timeline.to(".toastDone", {
                            opacity: 1
                        })
                    }
                }),
                sd = He.extend({
                    imageManifest: {
                        closed: Promise.resolve().then(s.t.bind(s, 79596, 17)),
                        open: Promise.resolve().then(s.t.bind(s, 92021, 17))
                    },
                    elements: [{
                        type: "img",
                        key: "closed",
                        class: "closed",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "open",
                        class: "open",
                        pos: [0, 0]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.open", {
                            opacity: 0
                        }), this.timeline.to(".e.open", {
                            opacity: 1
                        }), this.timeline.to(".e.closed", {
                            opacity: 0
                        })
                    }
                }),
                id = He.extend({
                    imageManifest: {
                        open: Promise.resolve().then(s.t.bind(s, 92021, 17)),
                        ac: Promise.resolve().then(s.t.bind(s, 2919, 17))
                    },
                    elements: [{
                        type: "img",
                        key: "open",
                        class: "open",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "ac",
                        class: "ac",
                        pos: [0, 0]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.ac", {
                            scale: .35,
                            y: 100
                        }), this.timeline.to(".e.ac", {
                            scale: .5,
                            y: 105,
                            duration: .75
                        }), this.timeline.to(".e.ac", {
                            scale: .5,
                            y: 120,
                            duration: .25
                        })
                    }
                }),
                od = mn.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 2919, 17))
                    }
                }),
                nd = po.extend({
                    imageManifest: {
                        closed: Promise.resolve().then(s.t.bind(s, 65828, 17)),
                        open: Promise.resolve().then(s.t.bind(s, 87530, 17))
                    },
                    elements: [{
                        type: "img",
                        key: "closed",
                        class: "closed",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "open",
                        class: "open",
                        pos: [0, 0]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.closed", {
                            opacity: 0
                        }), this.timeline.to(".e.open", {
                            opacity: 0
                        }), this.timeline.to(".e.closed", {
                            opacity: 1
                        })
                    }
                }),
                ad = Zo.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 74199, 17))
                    }
                }),
                rd = He.extend({
                    imageManifest: {
                        brush: Promise.resolve().then(s.t.bind(s, 6311, 17)),
                        bubbles: Promise.resolve().then(s.t.bind(s, 20746, 17)),
                        fall: Promise.resolve().then(s.t.bind(s, 14399, 17)),
                        glue: Promise.resolve().then(s.t.bind(s, 55786, 17)),
                        paper: Promise.resolve().then(s.t.bind(s, 52322, 17))
                    }
                }),
                ld = rd.extend({
                    elements: Ye.elementsFromImages("paper", "glue", "brush"),
                    onLoadComplete() {
                        C.p8.set(".e.glue", {
                            y: 400,
                            scale: .8
                        }), C.p8.set(".e.brush", {
                            y: -300,
                            scale: .7
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.brush", {
                            y: -350,
                            rotate: -35
                        }).to(".e.brush", {
                            y: 85
                        }).to(".e.glue", {
                            y: 420
                        }, "<").to(".e.glue", {
                            y: 400
                        }).to(".e.brush", {
                            y: -300,
                            scale: .4
                        }).to(".e.brush", {
                            x: -90,
                            y: -150
                        }).to(".e.brush", {
                            x: 90,
                            y: -200
                        }).to(".e.brush", {
                            x: -90,
                            y: 50
                        }).to(".e.brush", {
                            x: 40,
                            y: -50
                        })
                    }
                }),
                dd = rd.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("bubbles"),
                    onLoadComplete() {
                        C.p8.set(".e.bubbles", {
                            y: 1500,
                            x: 100,
                            rotateX: 180
                        })
                    },
                    onDiscreteProgress(e) {
                        switch (e) {
                            case 25:
                                C.p8.to(".e.bubbles", {
                                    y: -150,
                                    rotateX: 0
                                });
                                break;
                            case 50:
                                C.p8.to(".e.bubbles", {
                                    y: 0
                                });
                                break;
                            case 75:
                                C.p8.to(".e.bubbles", {
                                    x: -100
                                });
                                break;
                            case 100:
                                C.p8.to(".e.bubbles", {
                                    x: 0
                                })
                        }
                    }
                }),
                pd = rd.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("paper", "bubbles"),
                    onDiscreteProgress(e) {
                        Ye.squashOnce("bubbles"), Ye.squashOnce("paper");
                        let t = 1e3;
                        switch (e) {
                            case 20:
                            case 40:
                                t = 600;
                                break;
                            case 60:
                                t = 350;
                                break;
                            case 80:
                                t = 250;
                                break;
                            case 100:
                                t = 0
                        }
                        C.p8.set(".e.bubbles", {
                            clip: `rect(0px 1000px ${t}px 0px)`
                        }), 100 === e && C.p8.to(".e.paper", {
                            visibility: "visible"
                        })
                    }
                }),
                cd = rd.extend({
                    elements: Ye.elementsFromImages("paper", "fall"),
                    onLoadComplete() {
                        C.p8.set(".e.fall", {
                            visibility: "hidden",
                            y: 1300,
                            scale: .1
                        }), C.p8.set(".e.paper", {
                            scale: .8,
                            y: -150
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.paper", {
                            rotate: 5,
                            y: -120
                        }).to(".e.paper", {
                            rotate: -5,
                            y: -90
                        }).to(".e.paper", {
                            rotate: -7,
                            y: -40
                        }).to(".e.paper", {
                            rotate: -9,
                            y: 50
                        }).to(".e.paper", {
                            y: 1300,
                            scaleY: .3,
                            duration: .25
                        }, "+=.25").to(".e.fall", {
                            visibility: "visible",
                            scale: .8
                        }).to(".e.paper", {
                            visibility: "hidden",
                            y: 0
                        }, "<-=.25").to(".e.fall", {
                            scale: 1.2,
                            y: 0
                        })
                    }
                }),
                md = He.extend({
                    imageManifest: {
                        curtain: Promise.resolve().then(s.t.bind(s, 31247, 17)),
                        headdown: Promise.resolve().then(s.t.bind(s, 94879, 17)),
                        shower: Promise.resolve().then(s.t.bind(s, 18242, 17)),
                        showering: Promise.resolve().then(s.t.bind(s, 32133, 17)),
                        showerTop: Promise.resolve().then(s.t.bind(s, 74700, 17))
                    }
                }).extend({
                    elements: [{
                        class: "shower",
                        type: "img",
                        pos: [0, 0],
                        key: "shower"
                    }, {
                        class: "curtain",
                        type: "img",
                        pos: [0, 0],
                        key: "curtain"
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        C.p8.set(".e.curtain", {
                            x: -135,
                            y: 46,
                            scaleX: .45
                        });
                        const e = C.p8.timeline().to(".e.curtain", {
                            x: -22,
                            y: 46,
                            scaleX: 1,
                            duration: 2
                        });
                        this.timeline.add(e)
                    }
                }),
                hd = po.extend({
                    imageManifest: {
                        showering: Promise.resolve().then(s.t.bind(s, 32133, 17)),
                        showerTop: Promise.resolve().then(s.t.bind(s, 74700, 17))
                    },
                    elements: [{
                        class: "move",
                        type: "img",
                        pos: [0, 0],
                        key: "showering"
                    }, {
                        class: "showering",
                        type: "img",
                        pos: [0, 0],
                        key: "showering"
                    }, {
                        class: "showerTop",
                        type: "img",
                        pos: [0, 0],
                        key: "showerTop"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.showerTop", {
                            zIndex: 2
                        }), Ye.addParticleEmitter({
                            container: "scene-container",
                            zIndex: 1,
                            settings: {
                                frequency: .03,
                                from: {
                                    backgroundColor: "#A21616",
                                    width: 10,
                                    height: 22,
                                    borderRadius: 10
                                },
                                to: {
                                    opacity: 0,
                                    duration: .6
                                },
                                boundaries: {
                                    top: 380,
                                    bottom: 390,
                                    left: 520,
                                    right: 560
                                },
                                gravity: 3,
                                force: 1.5,
                                angle: 320
                            }
                        }, this)
                    }
                }),
                ud = ts.extend({
                    imageManifest: {
                        headdown: Promise.resolve().then(s.t.bind(s, 94879, 17)),
                        showerTop: Promise.resolve().then(s.t.bind(s, 74700, 17))
                    },
                    elements: [{
                        class: "move",
                        type: "img",
                        pos: [0, 0],
                        key: "headdown"
                    }, {
                        class: "headdown",
                        type: "img",
                        pos: [0, 0],
                        key: "headdown"
                    }, {
                        class: "showerTop",
                        type: "img",
                        pos: [0, 0],
                        key: "showerTop"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.showerTop", {
                            zIndex: 2
                        }), Ye.addParticleEmitter({
                            container: "scene-container",
                            zIndex: 1,
                            settings: {
                                frequency: .03,
                                from: {
                                    backgroundColor: "#A21616",
                                    width: 10,
                                    height: 22,
                                    borderRadius: 10
                                },
                                to: {
                                    opacity: 0,
                                    duration: .6
                                },
                                boundaries: {
                                    top: 380,
                                    bottom: 390,
                                    left: 520,
                                    right: 560
                                },
                                gravity: 3,
                                force: 1.5,
                                angle: 320
                            }
                        }, this)
                    }
                }),
                gd = He.extend({
                    elements() {
                        return [{
                            class: "image",
                            type: "img",
                            pos: [0, 0],
                            key: Object.keys(this.imageManifest)[0]
                        }]
                    }
                }),
                yd = Zo.extend({
                    imageManifest: {
                        tie: Promise.resolve().then(s.t.bind(s, 61697, 17))
                    }
                }),
                bd = ct.extend({
                    imageManifest: {
                        tie: Promise.resolve().then(s.t.bind(s, 85692, 17))
                    }
                }),
                xd = gd.extend({
                    imageManifest: {
                        tie: Promise.resolve().then(s.t.bind(s, 47706, 17))
                    }
                }),
                fd = He.extend({
                    imageManifest: {
                        chain: Promise.resolve().then(s.t.bind(s, 20145, 17)),
                        gunk: Promise.resolve().then(s.t.bind(s, 31130, 17)),
                        clicker: Promise.resolve().then(s.t.bind(s, 98717, 17)),
                        door: Promise.resolve().then(s.t.bind(s, 21776, 17)),
                        open: Promise.resolve().then(s.t.bind(s, 16409, 17))
                    }
                }),
                vd = fd.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("clicker"),
                    initializeTimeline() {
                        this.timeline.to(".e.clicker", {
                            scale: .8,
                            rotate: 5
                        }), this.timeline.to(".e.clicker", {
                            scale: 1,
                            rotate: 0
                        }), this.timeline.to(".e.clicker", {
                            scale: .7,
                            rotate: 10
                        }), this.timeline.to(".e.clicker", {
                            scale: 1,
                            rotate: 0
                        }), this.timeline.to(".e.clicker", {
                            scale: .6,
                            rotate: 15
                        }), this.timeline.to(".e.clicker", {
                            scale: 1,
                            rotate: 0
                        })
                    }
                }),
                kd = fd.extend({
                    elements: Ye.elementsFromImages("gunk", "chain"),
                    initializeTimeline() {
                        this.timeline.to(".e.gunk", {
                            opacity: 0
                        })
                    }
                }),
                Pd = fd.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("open", "door"),
                    initializeTimeline() {
                        C.p8.set(".e.door", {
                            y: -50
                        }), this.timeline.to(".e.door", {
                            rotateX: 90
                        })
                    }
                }),
                wd = fd.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("open", "door"),
                    initializeTimeline() {
                        C.p8.set(".e.door", {
                            y: -50
                        }), this.timeline.from(".e.door", {
                            rotateX: 90
                        })
                    }
                }),
                Td = He.extend({
                    imageManifest: {
                        bulbDead: Promise.resolve().then(s.t.bind(s, 73818, 17)),
                        bulbNew: Promise.resolve().then(s.t.bind(s, 32537, 17)),
                        ladder: Promise.resolve().then(s.t.bind(s, 48455, 17)),
                        noBulb: Promise.resolve().then(s.t.bind(s, 63060, 17))
                    }
                }),
                Sd = Td.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("ladder"),
                    onLoadComplete() {
                        C.p8.set(".e.ladder", {
                            scale: 3,
                            y: -800,
                            rotate: 15,
                            maskImage: "linear-gradient(0deg, rgba(0,0,0,1) 1%, rgba(0,0,0,0))"
                        })
                    },
                    onDiscreteProgress(e) {
                        const t = 17 * e - 800;
                        C.p8.to(".e.ladder", {
                            y: t,
                            maskImage: `linear-gradient(0deg, rgba(0,0,0,1) ${e}%, rgba(0,0,0,0))`
                        })
                    }
                }),
                Md = Td.extend({
                    elements: Ye.elementsFromImages(["noBulb", "back"], "bulbDead", ["noBulb", "front"]),
                    onLoadComplete() {
                        C.p8.set(".e.bulbDead", {
                            y: 80
                        }), C.p8.set(".e.back", {
                            y: -200
                        }), C.p8.set(".e.front", {
                            y: -200,
                            clip: "rect(0px 1000px 615px 0px)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bulbDead", {
                            rotateY: 180,
                            y: 150
                        }).to(".e.bulbDead", {
                            rotateY: 360,
                            y: 275
                        }).to(".e.bulbDead", {
                            rotateY: 540,
                            y: 400
                        }).to(".e.bulbDead", {
                            scaleY: .9,
                            y: 380
                        }).to(".e.bulbDead", {
                            scaleY: 1.1,
                            y: 1500
                        })
                    }
                }),
                Cd = Td.extend({
                    elements: Ye.elementsFromImages(["noBulb", "back"], "bulbDead", "bulbNew", ["noBulb", "front"]),
                    onLoadComplete() {
                        C.p8.set(".e.back", {
                            y: -200
                        }), C.p8.set(".e.front", {
                            y: -200,
                            clip: "rect(0px 1000px 615px 0px)"
                        }), C.p8.set(".e.bulbDead", {
                            y: 1500,
                            scaleY: 1.1
                        }), C.p8.set(".e.bulbNew", {
                            y: 25,
                            scale: 1.1,
                            visibility: "hidden",
                            rotateY: 180
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bulbDead", {
                            scaleY: .9,
                            y: 380
                        }).to(".e.bulbDead", {
                            scaleY: 1,
                            y: 400
                        }).to(".e.bulbDead", {
                            rotateY: -180,
                            y: 275
                        }).to(".e.bulbDead", {
                            rotateY: -360,
                            y: 150
                        }).to(".e.bulbDead", {
                            rotateY: -540,
                            y: 40
                        }).to(".e.bulbNew", {
                            visibility: "visible"
                        })
                    }
                }),
                Dd = He.extend({
                    imageManifest: {
                        bulbDead: Promise.resolve().then(s.t.bind(s, 82729, 17)),
                        bulbNew: Promise.resolve().then(s.t.bind(s, 94247, 17)),
                        ladder: Promise.resolve().then(s.t.bind(s, 17808, 17)),
                        noBulb: Promise.resolve().then(s.t.bind(s, 99497, 17))
                    }
                }),
                Fd = Dd.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("ladder"),
                    onLoadComplete() {
                        C.p8.set(".e.ladder", {
                            scale: 3,
                            y: -800,
                            rotate: 15,
                            maskImage: "linear-gradient(0deg, rgba(0,0,0,1) 1%, rgba(0,0,0,0))"
                        })
                    },
                    onDiscreteProgress(e) {
                        const t = 17 * e - 800;
                        C.p8.to(".e.ladder", {
                            y: t,
                            maskImage: `linear-gradient(0deg, rgba(0,0,0,1) ${e}%, rgba(0,0,0,0))`
                        })
                    }
                }),
                zd = Dd.extend({
                    elements: Ye.elementsFromImages(["noBulb", "back"], "bulbDead", ["noBulb", "front"]),
                    onLoadComplete() {
                        C.p8.set(".e.bulbDead", {
                            y: 80,
                            filter: "brightness(10%"
                        }), C.p8.set(".e.back", {
                            y: -200
                        }), C.p8.set(".e.front", {
                            y: -200,
                            clip: "rect(0px 1000px 615px 0px)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bulbDead", {
                            rotateY: 180,
                            y: 150
                        }).to(".e.bulbDead", {
                            rotateY: 360,
                            y: 275
                        }).to(".e.bulbDead", {
                            rotateY: 540,
                            y: 400
                        })
                    }
                }),
                Ld = Dd.extend({
                    elements: Ye.elementsFromImages(["noBulb", "back"], "bulbDead", ["noBulb", "front"]),
                    onLoadComplete() {
                        C.p8.set(".e.bulbDead", {
                            y: 400,
                            rotateY: 540,
                            filter: "brightness(10%)"
                        }), C.p8.set(".e.back", {
                            y: -200
                        }), C.p8.set(".e.front", {
                            y: -200,
                            clip: "rect(0px 1000px 615px 0px)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bulbDead", {
                            filter: "brightness(100%)"
                        })
                    },
                    onStartProgress() {
                        Ye.startShake("bulbDead", 5, 5)
                    },
                    onStopProgress() {
                        Ye.stopShake("bulbDead")
                    }
                }),
                Rd = Dd.extend({
                    elements: Ye.elementsFromImages(["noBulb", "back"], "bulbDead", "bulbNew", ["noBulb", "front"]),
                    onLoadComplete() {
                        C.p8.set(".e.back", {
                            y: -200
                        }), C.p8.set(".e.front", {
                            y: -200,
                            clip: "rect(0px 1000px 615px 0px)"
                        }), C.p8.set(".e.bulbDead", {
                            y: 400,
                            scaleY: 1,
                            rotateY: -180
                        }), C.p8.set(".e.bulbNew", {
                            y: 25,
                            scale: 1.1,
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bulbDead", {
                            rotateY: -360,
                            y: 275
                        }).to(".e.bulbDead", {
                            rotateY: -540,
                            y: 150
                        }).to(".e.bulbDead", {
                            rotateY: -720,
                            y: 40
                        }).to(".e.bulbNew", {
                            visibility: "visible"
                        })
                    }
                }),
                Id = He.extend({
                    imageManifest: {
                        crustbottom: Promise.resolve().then(s.t.bind(s, 48701, 17)),
                        crustleft: Promise.resolve().then(s.t.bind(s, 56912, 17)),
                        crustright: Promise.resolve().then(s.t.bind(s, 62390, 17)),
                        crustup: Promise.resolve().then(s.t.bind(s, 26712, 17)),
                        crustless: Promise.resolve().then(s.t.bind(s, 8597, 17)),
                        sandwich: Promise.resolve().then(s.t.bind(s, 24301, 17))
                    }
                }),
                Od = Id.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("sandwich", "crustright"),
                    onLoadComplete() {
                        C.p8.set(".e.crustright", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.crustright", {
                            x: 100,
                            opacity: 1,
                            ease: "power2.out"
                        }).to(".e.sandwich", {
                            opacity: .25
                        }, "<")
                    }
                }),
                Bd = Id.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("sandwich", "crustright", "crustup"),
                    onLoadComplete() {
                        C.p8.set(".e.crustup", {
                            opacity: 0
                        }), C.p8.set(".e.crustright", {
                            x: 100
                        }), C.p8.set(".e.sandwich", {
                            opacity: .25
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.crustup", {
                            y: -100,
                            opacity: 1,
                            ease: "power2.out"
                        })
                    }
                }),
                Yd = Id.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("sandwich", "crustright", "crustup", "crustbottom"),
                    onLoadComplete() {
                        C.p8.set(".e.crustbottom", {
                            opacity: 0
                        }), C.p8.set(".e.crustup", {
                            y: -100
                        }), C.p8.set(".e.crustright", {
                            x: 100
                        }), C.p8.set(".e.sandwich", {
                            opacity: .25
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.crustbottom", {
                            y: 100,
                            opacity: 1,
                            ease: "power2.out"
                        })
                    }
                }),
                Ad = Id.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("sandwich", "crustright", "crustup", "crustleft", "crustless", "crustbottom"),
                    onLoadComplete() {
                        C.p8.set(".e.crustless", {
                            opacity: 0
                        }), C.p8.set(".e.crustleft", {
                            opacity: 0
                        }), C.p8.set(".e.crustbottom", {
                            y: 100
                        }), C.p8.set(".e.crustup", {
                            y: -100
                        }), C.p8.set(".e.crustright", {
                            x: 100
                        }), C.p8.set(".e.sandwich", {
                            opacity: .25
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.crustleft", {
                            x: -100,
                            opacity: 1,
                            ease: "power2.out"
                        }).to(".e.sandwich", {
                            opacity: 0
                        }, "<").to(".e.crustless", {
                            opacity: 1
                        }, "<")
                    }
                }),
                Hd = Id.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("crustright", "crustup", "crustleft", "crustless", "crustbottom"),
                    onLoadComplete() {
                        C.p8.set(".e.crustleft", {
                            x: -100
                        }), C.p8.set(".e.crustbottom", {
                            y: 100
                        }), C.p8.set(".e.crustup", {
                            y: -100
                        }), C.p8.set(".e.crustright", {
                            x: 100
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.crustbottom", {
                            scale: 1.1,
                            opacity: 0
                        }).to(".e.crustright", {
                            scale: 1.1,
                            opacity: 0
                        }).to(".e.crustup", {
                            scale: 1.1,
                            opacity: 0
                        }).to(".e.crustleft", {
                            scale: 1.1,
                            opacity: 0
                        })
                    }
                }),
                Gd = He.extend({
                    imageManifest: {
                        cap: Promise.resolve().then(s.t.bind(s, 53612, 17)),
                        soapCapped: Promise.resolve().then(s.t.bind(s, 34908, 17)),
                        soapFill: Promise.resolve().then(s.t.bind(s, 68066, 17)),
                        soapMessy: Promise.resolve().then(s.t.bind(s, 77733, 17)),
                        soapNoCap: Promise.resolve().then(s.t.bind(s, 68198, 17)),
                        soapSquirt: Promise.resolve().then(s.t.bind(s, 50565, 17)),
                        soapUncapped: Promise.resolve().then(s.t.bind(s, 10097, 17))
                    }
                }),
                Vd = Gd.extend({
                    elements: Ye.elementsFromImages("cap", "soapNoCap"),
                    onLoadComplete() {
                        C.p8.set(".e.cap", {
                            x: 95,
                            y: 20
                        }), C.p8.set(".e.soapNoCap", {
                            y: 170
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cap", {
                            rotateY: 180,
                            x: -95
                        }).to(".e.cap", {
                            rotateY: 0,
                            x: 95
                        }).to(".e.cap", {
                            rotateY: 180,
                            x: -95,
                            y: -50
                        }).to(".e.cap", {
                            rotateY: 0,
                            x: 95,
                            y: -100
                        }).to(".e.cap", {
                            rotateY: 180,
                            x: -95,
                            y: -200
                        }).to(".e.soapNoCap", {
                            y: 300
                        }).to(".e.cap", {
                            scaleY: 1.2,
                            y: -1500
                        })
                    }
                }),
                Ed = Gd.extend({
                    elements: Ye.elementsFromImages("soapNoCap", "soapFill"),
                    onLoadComplete() {
                        C.p8.set(".e.soapNoCap", {
                            y: 300
                        }), C.p8.set(".e.soapFill", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.soapNoCap", {
                            scale: .6,
                            x: 85,
                            y: 280
                        }).to(".e.soapFill", {
                            opacity: 1
                        }).to(".e.soapNoCap", {
                            visibility: "hidden"
                        }).to(".soapFill", {
                            scale: 1.1
                        }).to(".soapFill", {
                            scale: 1
                        }).to(".soapFill", {
                            scale: 1.1
                        }).to(".soapFill", {
                            scale: 1
                        }).to(".soapFill", {
                            scale: 1.1
                        }).to(".soapFill", {
                            scale: 1
                        })
                    }
                }),
                qd = Gd.extend({
                    elements: Ye.elementsFromImages("soapMessy", "soapNoCap"),
                    onLoadComplete() {
                        C.p8.set(".e.soapMessy", {
                            clip: "rect(330px 1000px 1000px 0px"
                        }), C.p8.set(".e.soapNoCap", {
                            y: 105,
                            x: -85,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.soapMessy", {
                            opacity: 0
                        }).to(".e.soapNoCap", {
                            opacity: 1
                        }, "<")
                    },
                    onStartProgress() {
                        Ye.startShake("soapMessy", 5, 5), Ye.startShake("soapNoCap", 5, 5)
                    },
                    onStopProgress() {
                        Ye.stopShake("soapMessy"), Ye.stopShake("soapNoCap")
                    }
                }),
                Nd = Gd.extend({
                    elements: Ye.elementsFromImages("cap", "soapNoCap"),
                    onLoadComplete() {
                        C.p8.set(".e.cap", {
                            y: -1500,
                            x: 95,
                            scaleY: 1.1
                        }), C.p8.set(".e.soapNoCap", {
                            x: -85,
                            y: 105
                        }), C.p8.to(".e.soapNoCap", {
                            x: 0,
                            y: 170
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cap", {
                            y: -300,
                            scaleY: 1
                        }).to(".e.cap", {
                            y: -40
                        }).to(".e.cap", {
                            rotateY: 180,
                            x: -95,
                            y: -25
                        }).to(".e.cap", {
                            rotateY: 0,
                            x: 95,
                            y: 0
                        }).to(".e.cap", {
                            rotateY: 180,
                            x: -95,
                            y: 15
                        }).to(".e.cap", {
                            rotateY: 0,
                            x: 95,
                            y: 25
                        })
                    }
                }),
                Xd = Gd.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("soapCapped", "soapSquirt"),
                    onLoadComplete() {
                        C.p8.set(".e.soapCapped", {
                            x: 15,
                            y: 20
                        }), C.p8.set(".e.soapSquirt", {
                            x: 100,
                            y: 25,
                            opacity: 0
                        }), C.p8.to(".e.soapCapped", {
                            x: 0,
                            y: 0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("soapCapped"), Ye.squashOnce("soapSquirt"), C.p8.timeline().to(".e.soapCapped", {
                            opacity: 0
                        }).to(".e.soapSquirt", {
                            opacity: 1
                        }, "<")
                    }
                }),
                Wd = He.extend({
                    imageManifest: {
                        cap: Promise.resolve().then(s.t.bind(s, 19682, 17)),
                        soapCapped: Promise.resolve().then(s.t.bind(s, 21851, 17)),
                        soapMessy: Promise.resolve().then(s.t.bind(s, 52547, 17)),
                        soapNoCap: Promise.resolve().then(s.t.bind(s, 4735, 17)),
                        soapSquirt: Promise.resolve().then(s.t.bind(s, 40517, 17)),
                        soapUncapped: Promise.resolve().then(s.t.bind(s, 8077, 17)),
                        soapWater: Promise.resolve().then(s.t.bind(s, 25127, 17))
                    }
                }),
                Ud = Wd.extend({
                    elements: Ye.elementsFromImages("cap", "soapNoCap"),
                    onLoadComplete() {
                        C.p8.set(".e.cap", {
                            x: 95,
                            y: 20
                        }), C.p8.set(".e.soapNoCap", {
                            y: 170
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cap", {
                            rotateY: 180,
                            x: -95
                        }).to(".e.cap", {
                            rotateY: 0,
                            x: 95
                        }).to(".e.cap", {
                            rotateY: 180,
                            x: -95,
                            y: -50
                        }).to(".e.cap", {
                            rotateY: 0,
                            x: 95,
                            y: -100
                        }).to(".e.cap", {
                            rotateY: 180,
                            x: -95,
                            y: -200
                        }).to(".e.soapNoCap", {
                            y: 300
                        }).to(".e.cap", {
                            scaleY: 1.2,
                            y: -1500
                        })
                    }
                }),
                $d = Wd.extend({
                    elements: Ye.elementsFromImages("soapWater"),
                    onLoadComplete() {
                        C.p8.set(".e.soapWater", {
                            clip: "rect(0px 640px 1000px 0px)",
                            x: 175
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.soapWater", {
                            scale: 1.1
                        }).to(".e.soapWater", {
                            scale: 1
                        }).to(".e.soapWater", {
                            scale: 1.1
                        }).to(".e.soapWater", {
                            scale: 1
                        }).to(".e.soapWater", {
                            scale: 1.1
                        }).to(".e.soapWater", {
                            scale: 1
                        }).to(".e.soapWater", {
                            scale: 1.1
                        }).to(".e.soapWater", {
                            scale: 1
                        })
                    },
                    onStartProgress() {
                        Ye.startShake("soapWater", 10, 5, .25)
                    },
                    onStopProgress() {
                        Ye.stopShake("soapWater")
                    }
                }),
                jd = Wd.extend({
                    elements: Ye.elementsFromImages("cap", "soapNoCap"),
                    onLoadComplete() {
                        C.p8.set(".e.cap", {
                            y: -1500,
                            x: 95,
                            scaleY: 1.1
                        }), C.p8.set(".e.soapNoCap", {
                            x: -85,
                            y: 105
                        }), C.p8.to(".e.soapNoCap", {
                            x: 0,
                            y: 170
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cap", {
                            y: -300,
                            scaleY: 1
                        }).to(".e.cap", {
                            y: -40
                        }).to(".e.cap", {
                            rotateY: 180,
                            x: -95,
                            y: -25
                        }).to(".e.cap", {
                            rotateY: 0,
                            x: 95,
                            y: 0
                        }).to(".e.cap", {
                            rotateY: 180,
                            x: -95,
                            y: 15
                        }).to(".e.cap", {
                            rotateY: 0,
                            x: 95,
                            y: 25
                        })
                    }
                }),
                Kd = He.extend({
                    imageManifest: {
                        apple: Promise.resolve().then(s.t.bind(s, 11135, 17)),
                        banana: Promise.resolve().then(s.t.bind(s, 56401, 17)),
                        blender: Promise.resolve().then(s.t.bind(s, 3874, 17)),
                        broccoli: Promise.resolve().then(s.t.bind(s, 1804, 17)),
                        carrot: Promise.resolve().then(s.t.bind(s, 90077, 17)),
                        celery: Promise.resolve().then(s.t.bind(s, 22409, 17)),
                        orange: Promise.resolve().then(s.t.bind(s, 12101, 17))
                    }
                }),
                Zd = Kd.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("banana", "apple", "orange", "blender"),
                    onLoadComplete() {
                        C.p8.set(".e.blender", {
                            scale: .8,
                            y: 400
                        }), C.p8.set(".e.banana", {
                            scale: .6,
                            y: -350
                        }), C.p8.set(".e.apple", {
                            scale: .3,
                            y: -350,
                            visibility: "hidden"
                        }), C.p8.set(".e.orange", {
                            scale: .5,
                            y: -350,
                            visibility: "hidden"
                        })
                    },
                    onDiscreteProgress(e) {
                        const t = ["banana", "apple", "orange"],
                            s = Math.round(e / 100 * 3) - 1,
                            i = C.p8.timeline();
                        i.timeScale(5).to(`.e.${t[s]}`, {
                            y: -375
                        }).to(`.e.${t[s]}`, {
                            y: 240,
                            scale: .3
                        }).to(".e.blender", {
                            y: 450
                        }).to(`.e.${t[s]}`, {
                            visibility: "hidden"
                        }).to(".e.blender", {
                            y: 400
                        }), t[s + 1] && i.to(`.e.${t[s+1]}`, {
                            visibility: "visible"
                        })
                    }
                }),
                Jd = Kd.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("carrot", "celery", "broccoli", "blender"),
                    onLoadComplete() {
                        C.p8.set(".e.blender", {
                            scale: .8,
                            y: 400
                        }), C.p8.set(".e.carrot", {
                            scale: .6,
                            y: -350
                        }), C.p8.set(".e.celery", {
                            scale: .5,
                            y: -350,
                            visibility: "hidden"
                        }), C.p8.set(".e.broccoli", {
                            scale: .4,
                            y: -350,
                            visibility: "hidden"
                        })
                    },
                    onDiscreteProgress(e) {
                        const t = ["carrot", "celery", "broccoli"],
                            s = Math.round(e / 100 * 3) - 1,
                            i = C.p8.timeline();
                        i.timeScale(5).to(`.e.${t[s]}`, {
                            y: -375
                        }).to(`.e.${t[s]}`, {
                            y: 240,
                            scale: .3
                        }).to(".e.blender", {
                            y: 450
                        }).to(`.e.${t[s]}`, {
                            visibility: "hidden"
                        }).to(".e.blender", {
                            y: 400
                        }), t[s + 1] && i.to(`.e.${t[s+1]}`, {
                            visibility: "visible"
                        })
                    }
                }),
                _d = Kd.extend({
                    elements: Ye.elementsFromImages("blender"),
                    onStartProgress() {
                        Ye.startShake("blender", 3, 4, 3)
                    },
                    onStopProgress() {
                        Ye.stopShake("blender")
                    }
                }),
                Qd = He.extend({
                    imageManifest: {
                        apple: Promise.resolve().then(s.t.bind(s, 30991, 17)),
                        banana: Promise.resolve().then(s.t.bind(s, 83774, 17)),
                        blender: Promise.resolve().then(s.t.bind(s, 38488, 17)),
                        chocolateChips: Promise.resolve().then(s.t.bind(s, 4625, 17)),
                        orange: Promise.resolve().then(s.t.bind(s, 79948, 17)),
                        peanutButter: Promise.resolve().then(s.t.bind(s, 19281, 17))
                    }
                }),
                ep = Qd.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("banana", "apple", "orange", "blender"),
                    onLoadComplete() {
                        C.p8.set(".e.blender", {
                            scale: .8,
                            y: 400
                        }), C.p8.set(".e.orange", {
                            scale: .5,
                            y: -350
                        }), C.p8.set(".e.apple", {
                            scale: .3,
                            y: -350,
                            visibility: "hidden"
                        }), C.p8.set(".e.banana", {
                            scale: .6,
                            y: -350,
                            visibility: "hidden"
                        })
                    },
                    onDiscreteProgress(e) {
                        const t = ["orange", "apple", "banana"],
                            s = Math.round(e / 100 * 3) - 1,
                            i = C.p8.timeline();
                        i.timeScale(5).to(`.e.${t[s]}`, {
                            y: -375
                        }).to(`.e.${t[s]}`, {
                            y: 240,
                            scale: .3
                        }).to(".e.blender", {
                            y: 450
                        }).to(`.e.${t[s]}`, {
                            visibility: "hidden"
                        }).to(".e.blender", {
                            y: 400
                        }), t[s + 1] && i.to(`.e.${t[s+1]}`, {
                            visibility: "visible"
                        })
                    }
                }),
                tp = Qd.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("peanutButter", "blender"),
                    onLoadComplete() {
                        C.p8.set(".e.blender", {
                            scale: .8,
                            y: 400
                        }), C.p8.set(".e.peanutButter", {
                            y: -300
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.peanutButter", {
                            y: -350,
                            scale: 1.2
                        }).to(".e.peanutButter", {
                            y: 240,
                            rotate: 100,
                            scale: .4
                        }).to(".e.blender", {
                            y: 450
                        }).to(".e.blender", {
                            y: 400
                        })
                    }
                }),
                sp = Qd.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages(["chocolateChips", "chips0"], ["chocolateChips", "chips1"], ["chocolateChips", "chips2"], "blender"),
                    onLoadComplete() {
                        C.p8.set(".e.blender", {
                            scale: .8,
                            y: 400
                        }), C.p8.set(".e.chips0", {
                            scale: .5,
                            y: -350
                        }), C.p8.set(".e.chips1", {
                            scale: .5,
                            x: 100,
                            y: -300,
                            rotate: 190
                        }), C.p8.set(".e.chips2", {
                            scale: .5,
                            x: -100,
                            y: -300,
                            rotate: 55
                        })
                    },
                    onDiscreteProgress(e) {
                        const t = ["chips0", "chips1", "chips2"],
                            s = Math.round(e / 100 * 3) - 1;
                        C.p8.timeline().timeScale(5).to(`.e.${t[s]}`, {
                            y: -375
                        }).to(`.e.${t[s]}`, {
                            y: 240,
                            scale: .3
                        }).to(".e.blender", {
                            y: 450
                        }).to(`.e.${t[s]}`, {
                            visibility: "hidden"
                        }).to(".e.blender", {
                            y: 400
                        })
                    }
                }),
                ip = Qd.extend({
                    elements: Ye.elementsFromImages("blender"),
                    onStartProgress() {
                        Ye.startShake("blender", 3, 4, 3)
                    },
                    onStopProgress() {
                        Ye.stopShake("blender")
                    }
                }),
                op = He.extend({
                    imageManifest: {
                        fixed: Promise.resolve().then(s.t.bind(s, 26257, 17)),
                        fridge: Promise.resolve().then(s.t.bind(s, 51319, 17)),
                        leak: Promise.resolve().then(s.t.bind(s, 91037, 17)),
                        mop: Promise.resolve().then(s.t.bind(s, 13179, 17)),
                        puddle: Promise.resolve().then(s.t.bind(s, 63792, 17)),
                        towel: Promise.resolve().then(s.t.bind(s, 79462, 17))
                    }
                }),
                np = op.extend({
                    elements: Ye.elementsFromImages("puddle", "fridge", "mop"),
                    onLoadComplete() {
                        C.p8.set(".e.puddle", {
                            y: 450
                        }), C.p8.set(".e.mop", {
                            y: 1500
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.mop", {
                            y: -30,
                            scaleY: 1.1
                        }).to(".e.mop", {
                            y: 0,
                            scaleY: 1
                        }).to(".e.mop", {
                            x: -90
                        }).to(".e.mop", {
                            x: 90,
                            y: 30
                        }).to(".e.mop", {
                            x: -90
                        }).to(".e.mop", {
                            x: 90,
                            y: 8
                        }).to(".e.mop", {
                            x: -90,
                            y: 20
                        }).to(".e.mop", {
                            x: 90
                        }).to(".e.mop", {
                            x: -90,
                            y: 30
                        }).to(".e.mop", {
                            x: 90,
                            y: 5
                        }).to(".e.mop", {
                            y: -20,
                            scaleY: 1.1
                        }).to(".e.mop", {
                            y: 1300
                        }).to(".e.puddle", {
                            opacity: 0,
                            duration: 4
                        }, "1")
                    }
                }),
                ap = op.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("leak", "fridge"),
                    onLoadComplete() {
                        C.p8.set(".e.leak", {
                            scale: .5,
                            y: -200,
                            x: 50
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.fridge", {
                            y: 1500,
                            x: -1500,
                            scale: 1.1
                        }), C.p8.to(".e.leak", {
                            scale: 1,
                            y: 0,
                            x: 0
                        })
                    }
                }),
                rp = op.extend({
                    elements: Ye.elementsFromImages("leak", "fixed"),
                    onLoadComplete() {
                        C.p8.set(".e.fixed", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.leak", {
                            rotate: 720,
                            opacity: 0
                        }).to(".e.fixed", {
                            rotate: 720,
                            opacity: 1
                        }, "<").to(".e.fixed", {
                            scale: 1.1
                        }).to(".e.fixed", {
                            scale: 1
                        })
                    }
                }),
                lp = op.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages(["towel", "towel1"], ["towel", "towel2"], "fridge"),
                    onLoadComplete() {
                        C.p8.set(".e.towel1", {
                            y: 600,
                            scale: .5,
                            rotate: 14
                        }), C.p8.set(".e.towel2", {
                            y: 600,
                            scale: .5
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().timeScale(2).to([".e.towel1", ".e.towel2"], {
                            y: 0,
                            scale: .25
                        }).to(".e.fridge", {
                            y: -45,
                            rotate: 3
                        }, "<").to(".e.fridge", {
                            y: 0,
                            rotate: 0
                        })
                    }
                }),
                dp = He.extend({
                    imageManifest: {
                        bowlback: Promise.resolve().then(s.t.bind(s, 26718, 17)),
                        bowlfront: Promise.resolve().then(s.t.bind(s, 4033, 17)),
                        dial: Promise.resolve().then(s.t.bind(s, 45884, 17)),
                        oven: Promise.resolve().then(s.t.bind(s, 37570, 17)),
                        pan: Promise.resolve().then(s.t.bind(s, 95834, 17)),
                        pour: Promise.resolve().then(s.t.bind(s, 93251, 17)),
                        spoon: Promise.resolve().then(s.t.bind(s, 75705, 17)),
                        timer: Promise.resolve().then(s.t.bind(s, 82822, 17))
                    }
                }),
                pp = dp.extend({
                    elements: Ye.elementsFromImages("bowlback", "spoon", "bowlfront"),
                    onLoadComplete() {
                        C.p8.set(".e.bowlback", {
                            y: 2
                        }), C.p8.set(".e.spoon", {
                            x: 150,
                            y: -750,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.spoon", {
                            x: -150
                        }).to(".e.spoon", {
                            x: 150
                        }).to(".e.spoon", {
                            x: -150
                        }).to(".e.spoon", {
                            x: 150
                        })
                    },
                    onStartProgress() {
                        C.p8.to(".e.spoon", {
                            y: -200,
                            opacity: 1,
                            duration: .25
                        })
                    },
                    onStopProgress() {
                        C.p8.to(".e.spoon", {
                            y: -750,
                            opacity: 0,
                            duration: .25
                        })
                    }
                }),
                cp = dp.extend({
                    elements: Ye.elementsFromImages("pour"),
                    onStartProgress() {
                        Ye.startHoldShake("pour")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("pour")
                    }
                }),
                mp = dp.extend({
                    stepDuration: .5,
                    elements: [...Ye.elementsFromImages("pan"), {
                        type: "div",
                        class: "particles",
                        html: "",
                        pos: [-40, 0]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.pan", {
                            x: -5,
                            y: 85
                        })
                    },
                    initializeTimeline() {
                        Ye.addParticleEmitter({
                            numberOfParticles: 4,
                            container: "particles",
                            autoplay: !1,
                            zIndex: 1,
                            restartOnProgress: !0,
                            settings: {
                                from: {
                                    backgroundColor: "#ffcd69",
                                    border: "2px solid black",
                                    opacity: 1
                                },
                                to: {
                                    duration: .4,
                                    opacity: 0,
                                    ease: "power2.in"
                                },
                                particleLimit: 4,
                                minSize: 35,
                                maxSize: 55,
                                randomAngle: !0,
                                randomAngleRange: -90,
                                force: 5,
                                gravity: 9.8
                            }
                        }, this)
                    }
                }),
                hp = dp.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("pan", "oven"),
                    onLoadComplete() {
                        C.p8.set(".e.pan", {
                            x: -5,
                            y: 85
                        }), C.p8.set(".e.oven", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.oven", {
                            opacity: 1,
                            duration: .5
                        })
                    }
                }),
                up = dp.extend({
                    lastStepDuration: .75,
                    elements: Ye.elementsFromImages("timer", "dial"),
                    onProgress(e) {
                        C.p8.to(".e.dial", {
                            rotation: -2.7 * e
                        })
                    }
                }),
                gp = He.extend({
                    imageManifest: {
                        car: Promise.resolve().then(s.t.bind(s, 25668, 17)),
                        notoil: Promise.resolve().then(s.t.bind(s, 70983, 17)),
                        note: Promise.resolve().then(s.t.bind(s, 69309, 17)),
                        nutbg: Promise.resolve().then(s.t.bind(s, 53578, 17)),
                        nutspin: Promise.resolve().then(s.t.bind(s, 62830, 17)),
                        pan: Promise.resolve().then(s.t.bind(s, 12942, 17)),
                        pouring: Promise.resolve().then(s.t.bind(s, 67137, 17))
                    }
                }),
                yp = gp.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("pan", "car"),
                    onLoadComplete() {
                        C.p8.set(".e.pan", {
                            y: 750
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.pan", {
                            y: 0,
                            duration: .25
                        })
                    }
                }),
                bp = gp.extend({
                    lastStepDuration: .5,
                    elements: Ye.elementsFromImages("nutbg", "nutspin"),
                    onProgress(e) {
                        C.p8.to(".e.nutspin", {
                            rotation: 2 * -e
                        }), e >= 100 && C.p8.to(".e.nutspin", {
                            opacity: 0,
                            duration: .25
                        })
                    }
                }),
                xp = gp.extend({
                    elements: [...Ye.elementsFromImages("pouring"), {
                        type: "div",
                        class: "particles",
                        pos: [125, -20]
                    }],
                    initializeTimeline() {
                        Ye.addParticleEmitter({
                            numberOfParticles: 45,
                            container: "particles",
                            autoplay: !0,
                            zIndex: 1,
                            settings: {
                                frequency: .2,
                                from: {
                                    backgroundColor: "#33ccff",
                                    border: "4px solid black",
                                    opacity: 1
                                },
                                to: {
                                    duration: .5,
                                    opacity: 0
                                },
                                minSize: 25,
                                maxSize: 50,
                                randomAngleRange: 90,
                                force: 1,
                                gravity: -.5
                            }
                        }, this)
                    }
                }),
                fp = gp.extend({
                    elements: [...Ye.elementsFromImages("notoil", "pouring"), {
                        type: "div",
                        class: "particles",
                        pos: [125, -20]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.notoil", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.emitter = Ye.addParticleEmitter({
                            numberOfParticles: 45,
                            container: "particles",
                            autoplay: !0,
                            zIndex: 1,
                            settings: {
                                frequency: .2,
                                from: {
                                    backgroundColor: "#33ccff",
                                    border: "4px solid black",
                                    opacity: 1
                                },
                                to: {
                                    duration: .5,
                                    opacity: 0
                                },
                                minSize: 25,
                                maxSize: 50,
                                randomAngleRange: 90,
                                force: 1,
                                gravity: -.5
                            }
                        }, this), this.timeline.to(".e.pouring", {
                            x: 10,
                            y: 5,
                            scale: 1.175
                        }).to(".e.notoil", {
                            opacity: 1
                        }).to(".e.pouring", {
                            opacity: 0
                        }, "<")
                    },
                    onStartProgress() {
                        this.emitter.pause()
                    },
                    onStopProgress() {
                        this.emitter.play()
                    }
                }),
                vp = gp.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("note"),
                    onDiscreteProgress() {
                        Ye.scaleBounce("note")
                    }
                }),
                kp = He.extend({
                    imageManifest: {
                        folded: Promise.resolve().then(s.t.bind(s, 90654, 17)),
                        fold1: Promise.resolve().then(s.t.bind(s, 68417, 17)),
                        fold2: Promise.resolve().then(s.t.bind(s, 79851, 17)),
                        fold3: Promise.resolve().then(s.t.bind(s, 19541, 17)),
                        fold4: Promise.resolve().then(s.t.bind(s, 82286, 17)),
                        fold5: Promise.resolve().then(s.t.bind(s, 60643, 17)),
                        fold6: Promise.resolve().then(s.t.bind(s, 44915, 17)),
                        fold7: Promise.resolve().then(s.t.bind(s, 54045, 17)),
                        flat: Promise.resolve().then(s.t.bind(s, 74050, 17)),
                        rolled: Promise.resolve().then(s.t.bind(s, 6868, 17))
                    }
                }),
                Pp = kp.extend({
                    elements: Ye.elementsFromImages(["folded", null, [100, 0]]),
                    onStartProgress() {
                        Ye.startHoldShake("folded")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("folded")
                    }
                }),
                wp = kp.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages(["folded", null, [100, 0]], ["flat", null, [100, 0]]),
                    onLoadComplete() {
                        C.p8.set(".e.toothpaste-container", {
                            y: 100
                        }), C.p8.set(".e.flat", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.flat", {
                            opacity: 1,
                            ease: "none"
                        }).to(".e.folded", {
                            opacity: 0,
                            ease: "none"
                        }, "<")
                    }
                }),
                Tp = kp.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages(["flat", null, [100, 0]], ["fold1", null, [100, 0]], ["fold2", null, [100, 0]], ["fold3", null, [100, 0]], ["fold4", null, [100, 0]], ["fold5", null, [100, 0]], ["fold6", null, [100, 0]], ["fold7", null, [100, 0]], ["rolled", null, [100, 0]]),
                    onLoadComplete() {
                        C.p8.set(".e.toothpaste-container", {
                            y: 100
                        }), C.p8.set([".e.fold1", ".e.fold2", ".e.fold3", ".e.fold4", ".e.fold5", ".e.fold6", ".e.fold7", ".e.rolled"], {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.fold7", {
                            opacity: 1
                        }).to(".e.flat", {
                            opacity: 0
                        }).to(".e.fold6", {
                            opacity: 1
                        }).to(".e.fold7", {
                            opacity: 0
                        }).to(".e.fold5", {
                            opacity: 1
                        }).to(".e.fold6", {
                            opacity: 0
                        }).to(".e.fold4", {
                            opacity: 1
                        }).to(".e.fold5", {
                            opacity: 0
                        }).to(".e.fold3", {
                            opacity: 1
                        }).to(".e.fold4", {
                            opacity: 0
                        }).to(".e.fold2", {
                            opacity: 1
                        }).to(".e.fold3", {
                            opacity: 0
                        }).to(".e.fold1", {
                            opacity: 1
                        }).to(".e.fold2", {
                            opacity: 0
                        }).to(".e.rolled", {
                            opacity: 1
                        }).to(".e.fold1", {
                            opacity: 0
                        });
                        this.timeline.add(e)
                    }
                }),
                Sp = kp.extend({
                    elements: Ye.elementsFromImages(["rolled", null, [100, 0]]),
                    onStartProgress() {
                        Ye.startHoldShake("rolled")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("rolled")
                    }
                }),
                Mp = He.extend({
                    imageManifest: {
                        power: Promise.resolve().then(s.t.bind(s, 19496, 17)),
                        project: Promise.resolve().then(s.t.bind(s, 79509, 17)),
                        sweep: Promise.resolve().then(s.t.bind(s, 39768, 17)),
                        vacin: Promise.resolve().then(s.t.bind(s, 167, 17)),
                        vacout: Promise.resolve().then(s.t.bind(s, 57219, 17))
                    }
                }),
                Cp = Mp.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("project"),
                    onDiscreteProgress() {
                        Ye.scaleBounce("project")
                    }
                }),
                Dp = Mp.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages(["sweep", "devil"], ["sweep", "dust"]),
                    onLoadComplete() {
                        C.p8.set(".e.devil", {
                            clip: "rect(0px 600px 1000px 0px)"
                        }), C.p8.set(".e.dust", {
                            clip: "rect(0px 1000px 1000px 600px)"
                        })
                    },
                    onDiscreteProgress(e) {
                        C.p8.timeline().to(".e.devil", {
                            x: 45
                        }).to(".e.dust", {
                            x: 5 * e
                        }, "<").to(".e.devil", {
                            x: 0
                        })
                    }
                }),
                Fp = Mp.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("vacout", "power"),
                    onLoadComplete() {
                        C.p8.set(".e.vacout", {
                            scale: .1
                        }), C.p8.set(".e.power", {
                            y: -200
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.set(".e.power", {
                            visibility: "hidden"
                        }), C.p8.to(".e.vacout", {
                            scale: 1
                        }), Ye.startShake("vacout", 10, 10, 2)
                    }
                }),
                zp = Mp.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("vacout", "vacin"),
                    onLoadComplete() {
                        Ye.startShake("vacout", 10, 10, 2), C.p8.set(".e.vacin", {
                            scale: .1,
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.vacout", {
                            scale: .1,
                            opacity: 0
                        }).to(".e.vacin", {
                            scale: 1,
                            opacity: 1
                        }), Ye.startShake("vacin", 2, 2, 1.5)
                    }
                }),
                Lp = Mp.extend({
                    elements: Ye.elementsFromImages(["sweep", "dust1"], ["sweep", "dust2"], ["sweep", "dust3"], ["sweep", "dust4"], ["sweep", "dust5"]),
                    onLoadComplete() {
                        C.p8.set(".e.dust1", {
                            clip: "rect(0px 1000px 1000px 600px)",
                            x: -543,
                            y: 200
                        }), C.p8.set(".e.dust2", {
                            clip: "rect(0px 1000px 1000px 600px)",
                            x: -357,
                            y: -124
                        }), C.p8.set(".e.dust3", {
                            clip: "rect(0px 1000px 1000px 600px)",
                            x: 105,
                            y: -523
                        }), C.p8.set(".e.dust4", {
                            clip: "rect(0px 1000px 1000px 600px)",
                            x: -468,
                            y: -600
                        }), C.p8.set(".e.dust5", {
                            clip: "rect(0px 1000px 1000px 600px)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.dust1", {
                            scaleX: .5,
                            scaleY: 3,
                            y: -3e3
                        }).to(".e.dust2", {
                            scaleX: .5,
                            scaleY: 3,
                            y: -3e3
                        }).to(".e.dust3", {
                            scaleX: .5,
                            scaleY: 3,
                            y: -3e3
                        }).to(".e.dust4", {
                            scaleX: .5,
                            scaleY: 3,
                            y: -3e3
                        }).to(".e.dust5", {
                            scaleX: .5,
                            scaleY: 3,
                            y: -3e3
                        })
                    }
                }),
                Rp = He.extend({
                    imageManifest: {
                        window: Promise.resolve().then(s.t.bind(s, 21412, 17)),
                        screen: Promise.resolve().then(s.t.bind(s, 11624, 17)),
                        torn: Promise.resolve().then(s.t.bind(s, 90787, 17))
                    }
                }),
                Ip = Rp.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("window", ["torn", null, [499, 294]]),
                    initializeTimeline() {
                        this.timeline.to(".e.torn", {
                            x: -300,
                            opacity: 0
                        })
                    }
                }),
                Op = Rp.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("window", ["screen", null, [499, 294]]),
                    onLoadComplete() {
                        C.p8.set(".e.screen", {
                            x: -300,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.screen", {
                            x: 0,
                            opacity: 1
                        })
                    }
                }),
                Bp = Rp.extend({
                    elements: Ye.elementsFromImages("window", ["screen", null, [499, 294]]),
                    initializeTimeline() {
                        this.timeline.to(".e.window", {
                            x: 100,
                            scale: .7
                        }).to(".e.screen", {
                            scale: 1.2,
                            rotate: 180
                        }, "<")
                    }
                }),
                Yp = Rp.extend({
                    elements: Ye.elementsFromImages("window", ["screen", null, [499, 294]]),
                    onLoadComplete() {
                        C.p8.set(".e.window", {
                            x: 100,
                            scale: .7
                        }), C.p8.set(".e.screen", {
                            scale: 1.2,
                            rotate: 180
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.screen", {
                            rotate: 0
                        })
                    }
                }),
                Ap = Rp.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("window", ["screen", null, [499, 294]]),
                    onLoadComplete() {
                        C.p8.set(".e.window", {
                            x: 100,
                            scale: .7
                        }), C.p8.set(".e.screen", {
                            scale: 1.2,
                            rotate: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.window", {
                            x: 0,
                            scale: 1
                        }).to(".e.screen", {
                            scale: 1
                        }, "<")
                    }
                }),
                Hp = He.extend({
                    imageManifest: {
                        legs: Promise.resolve().then(s.t.bind(s, 99935, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "legs",
                            images: {
                                lotion: [879, 630, 136, 146, 392, 455],
                                legOff: [10, 10, 930, 610, 182, 28],
                                legOn: [10, 630, 859, 551, 181, 27]
                            }
                        }
                    }
                }),
                Gp = Hp.extend({
                    stepDuration: .3,
                    elements: Ye.elementsFromSprite("sprite", ["legOn", "lotion"]),
                    onLoadComplete() {
                        C.p8.set(".e.lotion", {
                            y: -200,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.lotion", {
                            opacity: 1,
                            duration: .25
                        }).to(".e.lotion", {
                            y: 0,
                            ease: "none"
                        }, "<").to(".e.lotion", {
                            scaleY: .8,
                            duration: .15,
                            ease: "none",
                            transformOrigin: "center bottom"
                        }).to(".e.lotion", {
                            scaleY: 1,
                            duration: .15,
                            ease: "none"
                        })
                    }
                }),
                Vp = Hp.extend({
                    elements: Ye.elementsFromSprite("sprite", ["legOn", "lotion"]),
                    initializeTimeline() {
                        this.timeline.to(".e.lotion", {
                            opacity: 0
                        })
                    }
                }),
                Ep = Hp.extend({
                    elements: Ye.elementsFromSprite("sprite", ["legOff", "legOn"]),
                    onLoadComplete() {
                        C.p8.set(".e.legOn", {
                            opacity: 1
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.legOn", {
                            opacity: 0
                        })
                    }
                }),
                qp = He.extend({
                    imageManifest: {
                        closed: Promise.resolve().then(s.t.bind(s, 96033, 17)),
                        family: Promise.resolve().then(s.t.bind(s, 82784, 17)),
                        open: Promise.resolve().then(s.t.bind(s, 14647, 17)),
                        pic1: Promise.resolve().then(s.t.bind(s, 34750, 17)),
                        pic2: Promise.resolve().then(s.t.bind(s, 6447, 17)),
                        pic3: Promise.resolve().then(s.t.bind(s, 48064, 17)),
                        scarf: Promise.resolve().then(s.t.bind(s, 23324, 17)),
                        tear: Promise.resolve().then(s.t.bind(s, 16649, 17))
                    }
                }),
                Np = qp.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("closed", "open"),
                    onLoadComplete() {
                        C.p8.set(".e.open", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("closed", "open", .5)).to(".e.open", {
                            scale: 3,
                            opacity: 0,
                            delay: .25
                        })
                    }
                }),
                Xp = qp.extend({
                    elements: Ye.elementsFromImages("pic1", "pic2", "pic3"),
                    onLoadComplete() {
                        C.p8.set(".e.pic1", {
                            x: -275,
                            y: -50,
                            rotation: 2
                        }), C.p8.set(".e.pic2", {
                            y: 100,
                            rotation: -5
                        }), C.p8.set(".e.pic3", {
                            x: 275,
                            y: -50,
                            rotation: -3
                        }), C.p8.fromTo([".e.pic1", ".e.pic2", ".e.pic3"], {
                            scale: .5,
                            opacity: 0
                        }, {
                            opacity: 1
                        })
                    }
                }),
                Wp = qp.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("pic1", "pic2", "pic3"),
                    onLoadComplete() {
                        C.p8.set(".e.pic1", {
                            x: -275,
                            y: -50,
                            rotation: 2
                        }), C.p8.set(".e.pic2", {
                            y: 100,
                            rotation: -5
                        }), C.p8.set(".e.pic3", {
                            x: 275,
                            y: -50,
                            rotation: -3
                        }), C.p8.set([".e.pic1", ".e.pic2", ".e.pic3"], {
                            scale: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to([".e.pic1", ".e.pic2", ".e.pic3"], {
                            opacity: 0
                        })
                    }
                }),
                Up = qp.extend({
                    elements: Ye.elementsFromImages(["scarf", "scarf1"], "family", ["scarf", "scarf2"]),
                    onLoadComplete() {
                        C.p8.set(".e.scarf1", {
                            x: -200,
                            y: -300,
                            rotation: 5,
                            scale: .4
                        }), C.p8.set(".e.family", {
                            y: 100,
                            scale: .75
                        }), C.p8.set(".e.scarf2", {
                            x: 200,
                            y: -300,
                            rotation: -5,
                            scaleX: -.4,
                            scaleY: .4
                        }), C.p8.fromTo([".e.scarf1", ".e.family", ".e.scarf2"], {
                            opacity: 0
                        }, {
                            opacity: 1
                        })
                    }
                }),
                $p = qp.extend({
                    stepDuration: 1.25,
                    elements: Ye.elementsFromImages(["scarf", "scarf1"], "family", ["scarf", "scarf2"], "open", "closed"),
                    onLoadComplete() {
                        C.p8.set(".e.closed", {
                            hidden: !0
                        }), C.p8.set(".e.open", {
                            scale: 3,
                            opacity: 0
                        }), C.p8.set(".e.scarf1", {
                            x: -200,
                            y: -300,
                            rotation: 5,
                            scale: .4
                        }), C.p8.set(".e.family", {
                            y: 100,
                            scale: .75
                        }), C.p8.set(".e.scarf2", {
                            x: 200,
                            y: -300,
                            rotation: -5,
                            scaleX: -.4,
                            scaleY: .4
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to([".e.scarf1", ".e.family", ".e.scarf2"], {
                            opacity: 0
                        }).to(".e.open", {
                            scale: 1,
                            opacity: 1
                        }).add(Ye.squashTransition("open", "closed", .5))
                    }
                }),
                jp = qp.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("tear"),
                    initializeTimeline() {
                        this.timeline.to(".e.tear", {
                            x: -500,
                            y: 100,
                            rotation: 90,
                            opacity: 0
                        })
                    }
                }),
                Kp = He.extend({
                    imageManifest: {
                        bolts: Promise.resolve().then(s.t.bind(s, 72868, 17)),
                        carJack: Promise.resolve().then(s.t.bind(s, 46127, 17)),
                        noTire: Promise.resolve().then(s.t.bind(s, 56906, 17)),
                        tire: Promise.resolve().then(s.t.bind(s, 60776, 17))
                    }
                }),
                Zp = Kp.extend({
                    elements: Ye.elementsFromImages("noTire", "tire", "bolts", "bolts", "bolts", "bolts"),
                    initializeTimeline() {
                        const e = document.querySelectorAll(".e.bolts");
                        C.p8.set(".e.tire", {
                            y: 20
                        }), C.p8.set(e, {
                            scale: .5
                        }), C.p8.set(e[3], {
                            x: 10,
                            y: 70
                        }), C.p8.set(e[2], {
                            x: 50,
                            y: 70
                        }), C.p8.set(e[1], {
                            x: 30,
                            y: 50
                        }), C.p8.set(e[0], {
                            x: 30,
                            y: 90
                        }), this.timeline.to(e, {
                            x: 250,
                            opacity: 0,
                            stagger: .25
                        })
                    }
                }),
                Jp = Kp.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("noTire", "tire"),
                    initializeTimeline() {
                        C.p8.set(".e.tire", {
                            y: 20
                        }), this.timeline.to(".e.tire", {
                            x: 250,
                            opacity: 0
                        }), this.timeline.to(".e.tire", {
                            x: 0,
                            opacity: 1
                        })
                    }
                }),
                _p = Zp.extend({
                    elements: Ye.elementsFromImages("noTire", "tire", "bolts", "bolts", "bolts", "bolts"),
                    initializeTimeline() {
                        const e = document.querySelectorAll(".e.bolts");
                        C.p8.set(".e.tire", {
                            y: 20
                        }), C.p8.set(e, {
                            scale: .5
                        }), C.p8.set(e[3], {
                            x: 10,
                            y: 70
                        }), C.p8.set(e[2], {
                            x: 50,
                            y: 70
                        }), C.p8.set(e[1], {
                            x: 30,
                            y: 50
                        }), C.p8.set(e[0], {
                            x: 30,
                            y: 90
                        }), this.timeline.from(e, {
                            x: 250,
                            opacity: 0,
                            stagger: .25
                        })
                    }
                }),
                Qp = He.extend({
                    imageManifest: {
                        loveLetter: Promise.resolve().then(s.t.bind(s, 54304, 17)),
                        junkMail1: Promise.resolve().then(s.t.bind(s, 85933, 17)),
                        junkMail2: Promise.resolve().then(s.t.bind(s, 83265, 17)),
                        bill: Promise.resolve().then(s.t.bind(s, 46419, 17)),
                        lateNotice: Promise.resolve().then(s.t.bind(s, 39262, 17))
                    }
                }),
                ec = Qp.extend({
                    elements: [{
                        class: "mail-container",
                        type: "container",
                        children: [{
                            class: "bill",
                            type: "img",
                            pos: [0, 0],
                            key: "bill"
                        }]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        C.p8.timeline().to(".bill", {
                            repeat: -1,
                            yoyo: !0,
                            scale: 1.04,
                            duration: .4
                        }), C.p8.timeline().fromTo(".mail-container", {
                            rotate: -3
                        }, {
                            repeat: -1,
                            yoyo: !0,
                            rotate: 4,
                            duration: 1.5,
                            ease: "power3.out"
                        });
                        const e = C.p8.timeline().to(".bill", {
                            y: -3e3,
                            duration: .2,
                            ease: "power1.out"
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                tc = Qp.extend({
                    elements: [{
                        class: "mail-container",
                        type: "container",
                        children: [{
                            class: "junkMail2",
                            type: "img",
                            pos: [0, 0],
                            key: "junkMail2"
                        }, {
                            class: "junkMail1",
                            type: "img",
                            pos: [0, 0],
                            key: "junkMail1"
                        }]
                    }],
                    stepDuration: .5,
                    initializeTimeline() {
                        C.p8.to(".mail-container", {
                            scale: .8,
                            duration: 0
                        }), C.p8.to(".junkMail1", {
                            yoyo: !0,
                            rotate: -15,
                            y: 350,
                            x: -50,
                            duration: .4
                        }), C.p8.to(".junkMail2", {
                            yoyo: !0,
                            rotate: 15,
                            y: -250,
                            x: 50,
                            duration: .4
                        });
                        const e = C.p8.timeline().to(".junkMail1", {
                            x: 3e3,
                            y: -2e3,
                            duration: 2,
                            ease: "power1.inOut"
                        }, 0).to(".junkMail2", {
                            x: -3e3,
                            y: 2e3,
                            duration: 2,
                            ease: "power1.inOut"
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                sc = Qp.extend({
                    elements: [{
                        class: "mail-container",
                        type: "container",
                        children: [{
                            class: "loveLetter",
                            type: "img",
                            pos: [0, 0],
                            key: "loveLetter"
                        }]
                    }],
                    stepDuration: 3,
                    initializeTimeline() {
                        C.p8.timeline().to(".loveLetter", {
                            repeat: -1,
                            yoyo: !0,
                            scale: 1.04,
                            duration: 1.4
                        }), C.p8.timeline().fromTo(".mail-container", {
                            rotate: -3
                        }, {
                            repeat: -1,
                            yoyo: !0,
                            rotate: 4,
                            duration: 2.5,
                            ease: "power3:inOut"
                        })
                    }
                }),
                ic = He.extend({
                    imageManifest: {
                        importantDocument: Promise.resolve().then(s.t.bind(s, 28882, 17)),
                        sig: Promise.resolve().then(s.t.bind(s, 9757, 17)),
                        stack0: Promise.resolve().then(s.t.bind(s, 57, 17)),
                        stack1: Promise.resolve().then(s.t.bind(s, 28069, 17)),
                        stack2: Promise.resolve().then(s.t.bind(s, 24313, 17)),
                        stack3: Promise.resolve().then(s.t.bind(s, 78415, 17)),
                        stack4: Promise.resolve().then(s.t.bind(s, 44211, 17)),
                        dep0: Promise.resolve().then(s.t.bind(s, 19392, 17)),
                        dep1: Promise.resolve().then(s.t.bind(s, 42039, 17)),
                        dep2: Promise.resolve().then(s.t.bind(s, 93700, 17)),
                        dep3: Promise.resolve().then(s.t.bind(s, 40446, 17))
                    }
                }),
                oc = ic.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("stack0", ["stack1", null, [0, 800]], ["stack2", null, [0, 800]], ["stack3", null, [0, 800]], ["stack4", null, [0, 800]]),
                    onLoadComplete() {
                        C.p8.set([".e.stack1", ".e.stack2", ".e.stack3", ".e.stack4"], {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.stack0", {
                            opacity: 0
                        }).to(".e.stack1", {
                            x: -800,
                            opacity: 1,
                            ease: "power3.out"
                        }, "<").to(".e.stack2", {
                            x: -800,
                            opacity: 1,
                            ease: "power3.out"
                        }).to(".e.stack3", {
                            x: -800,
                            opacity: 1,
                            ease: "power3.out"
                        }).to(".e.stack4", {
                            x: -800,
                            opacity: 1,
                            ease: "power3.out"
                        });
                        this.timeline.add(e)
                    }
                }),
                nc = ic.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("dep0", "dep1", "dep2", "dep3"),
                    onLoadComplete() {
                        C.p8.set([".e.dep1", ".e.dep2", ".e.dep3"], {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.dep1", {
                            opacity: 1
                        }).to(".e.dep2", {
                            opacity: 1
                        }).to(".e.dep3", {
                            opacity: 1
                        });
                        this.timeline.add(e)
                    }
                }),
                ac = ic.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("stack1", "stack2", "stack3", "stack4"),
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.stack1", {
                            opacity: 0,
                            ease: "power3.out"
                        }).to(".e.stack2", {
                            opacity: 0,
                            ease: "power3.out"
                        }, "<").to(".e.stack3", {
                            y: 300,
                            ease: "power3.out"
                        }, "<").to(".e.stack4", {
                            y: 300,
                            ease: "power3.out"
                        }, "<");
                        this.timeline.add(e)
                    }
                }),
                rc = ic.extend({
                    elements: [{
                        class: "doc-container",
                        type: "container",
                        children: Ye.elementsFromImages("importantDocument", "sig")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.sig", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.sig", {
                            opacity: 1
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("doc-container", 2, 1)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("doc-container", 2, 1)
                    }
                }),
                lc = He.extend({
                    imageManifest: {
                        nest1: Promise.resolve().then(s.t.bind(s, 52001, 17)),
                        nest2: Promise.resolve().then(s.t.bind(s, 38906, 17)),
                        nest3: Promise.resolve().then(s.t.bind(s, 80310, 17)),
                        Bird: Promise.resolve().then(s.t.bind(s, 60833, 17)),
                        Cowering: Promise.resolve().then(s.t.bind(s, 79097, 17)),
                        Lease: Promise.resolve().then(s.t.bind(s, 61209, 17))
                    }
                }),
                dc = lc.extend({
                    elements: [{
                        class: "attic-container",
                        type: "container",
                        children: [{
                            class: "nest1",
                            type: "img",
                            pos: [0, 0],
                            key: "nest1"
                        }, {
                            class: "nest2",
                            type: "img",
                            pos: [80, -200],
                            key: "nest2"
                        }, {
                            class: "nest3",
                            type: "img",
                            pos: [110, 200],
                            key: "nest3"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.nest1", {
                            opacity: 1,
                            scale: 1.5
                        }), C.p8.set(".e.nest2", {
                            opacity: 0,
                            scale: 1.5,
                            rotate: -10
                        }), C.p8.set(".e.nest3", {
                            opacity: 0,
                            scale: 1.5,
                            rotate: 10
                        });
                        const e = C.p8.timeline().to(".attic-container", {
                            repeat: 1,
                            yoyo: !0,
                            scale: .9,
                            ease: "linear",
                            duration: .2
                        }, 0).to(".e.nest1", {
                            opacity: 1,
                            scale: 1,
                            y: -50,
                            ease: "elastic.inOut"
                        }, 0).to(".attic-container", {
                            repeat: 1,
                            yoyo: !0,
                            scale: .9,
                            ease: "linear",
                            duration: .2
                        }, 1).to(".e.nest2", {
                            opacity: 1,
                            scale: 1,
                            ease: "elastic.inOut"
                        }, 1).to(".attic-container", {
                            repeat: 1,
                            yoyo: !0,
                            scale: .9,
                            ease: "linear",
                            duration: .2
                        }, 2).to(".e.nest3", {
                            opacity: 1,
                            scale: 1,
                            ease: "elastic.inOut"
                        }, 2);
                        this.timeline.add(e)
                    }
                }),
                pc = lc.extend({
                    elements: [{
                        class: "attic-container",
                        type: "container",
                        children: [{
                            class: "Bird",
                            type: "img",
                            pos: [0, 0],
                            key: "Bird"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.Bird", {
                            scale: .6
                        });
                        const e = C.p8.timeline().to(".attic-container", {
                            repeat: 1,
                            yoyo: !0,
                            scale: .9,
                            ease: "linear",
                            duration: .2
                        }, 0).to(".e.Bird", {
                            opacity: .9,
                            scale: 1,
                            rotate: 10,
                            ease: "elastic.inOut"
                        }, 0).to(".attic-container", {
                            repeat: 1,
                            yoyo: !0,
                            scale: .9,
                            ease: "linear",
                            duration: .2
                        }, 1).to(".e.Bird", {
                            opacity: 1,
                            scale: 1.4,
                            x: -50,
                            rotate: -25,
                            ease: "elastic.inOut"
                        }, 1).to(".attic-container", {
                            repeat: 1,
                            yoyo: !0,
                            scale: .9,
                            ease: "linear",
                            duration: .2
                        }, 2).to(".e.Bird", {
                            opacity: 0,
                            scale: 1.8,
                            x: 50,
                            rotate: 25,
                            ease: "elastic.inOut"
                        }, 2);
                        this.timeline.add(e)
                    }
                }),
                cc = lc.extend({
                    elements: [{
                        class: "attic-container",
                        type: "container",
                        children: [{
                            class: "Cowering",
                            type: "img",
                            pos: [0, 0],
                            key: "Cowering"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.timeline().to(".e.Cowering", {
                            repeat: -1,
                            yoyo: !0,
                            duration: .1,
                            ease: "linear",
                            x: `+=${(0,i.random)(-30,30)}`,
                            y: `+=${(0,i.random)(-30,30)}`
                        })
                    }
                }),
                mc = lc.extend({
                    elements: [{
                        class: "attic-container",
                        type: "container",
                        children: [{
                            class: "Lease",
                            type: "img",
                            pos: [0, 0],
                            key: "Lease"
                        }]
                    }],
                    stepDuration: 2,
                    initializeTimeline() {
                        C.p8.set(".e.Lease", {
                            scale: 1.3,
                            rotate: -10,
                            y: 500,
                            x: 120
                        });
                        const e = C.p8.timeline().to(".e.Lease", {
                            scale: 1,
                            y: 0,
                            x: 0,
                            rotate: 10,
                            ease: "back.inOut",
                            duration: 2
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                hc = He.extend({
                    imageManifest: {
                        counterClean: Promise.resolve().then(s.t.bind(s, 82576, 17)),
                        counterCleaner: Promise.resolve().then(s.t.bind(s, 25107, 17)),
                        counterOkay: Promise.resolve().then(s.t.bind(s, 17870, 17)),
                        counterDirty: Promise.resolve().then(s.t.bind(s, 99389, 17))
                    }
                }),
                uc = hc.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("counterOkay", "counterDirty"),
                    initializeTimeline() {
                        this.timeline.to(".e.counterDirty", {
                            x: 25,
                            y: -75
                        }).to(".e.counterDirty", {
                            x: -50,
                            y: 150,
                            opacity: 0
                        })
                    }
                }),
                gc = Wl,
                yc = hc.extend({
                    elements: Ye.elementsFromImages("counterOkay", "counterCleaner"),
                    onLoadComplete() {
                        C.p8.set(".e.counterCleaner", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.counterCleaner", {
                            opacity: 1
                        }).to(".e.counterOkay", {
                            opacity: 0,
                            duration: .2
                        }, .8)
                    }
                }),
                bc = hc.extend({
                    elements: Ye.elementsFromImages("counterCleaner", "counterClean"),
                    onLoadComplete() {
                        C.p8.set(".e.counterClean", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.counterClean", {
                            opacity: 1
                        }).to(".e.counterCleaner", {
                            opacity: 0,
                            duration: .2
                        }, .8)
                    }
                }),
                xc = He.extend({
                    imageManifest: {
                        jelly: Promise.resolve().then(s.t.bind(s, 42721, 17)),
                        lamp: Promise.resolve().then(s.t.bind(s, 43003, 17)),
                        picture: Promise.resolve().then(s.t.bind(s, 71405, 17)),
                        tv: Promise.resolve().then(s.t.bind(s, 64358, 17)),
                        vase: Promise.resolve().then(s.t.bind(s, 54190, 17))
                    }
                }),
                fc = xc.extend({
                    elements: Ye.elementsFromImages("tv", ["jelly", "jelly1"], ["jelly", "jelly2"]),
                    onLoadComplete() {
                        C.p8.set(".e.tv", {
                            scale: .9
                        }), C.p8.set(".e.jelly1", {
                            x: -250,
                            y: 80,
                            scale: .8
                        }), C.p8.set(".e.jelly2", {
                            x: 400,
                            y: -275,
                            scale: 1.1,
                            rotate: 150
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.jelly2", {
                            opacity: 0
                        }).to(".e.jelly1", {
                            opacity: 0
                        }).to(".tv", {
                            scale: 1,
                            duration: .25
                        }).to(".tv", {
                            scale: .9,
                            duration: .25
                        })
                    },
                    onStartProgress() {
                        Ye.startShake("jelly1"), Ye.startShake("jelly2")
                    },
                    onStopProgress() {
                        Ye.stopShake("jelly1"), Ye.stopShake("jelly2")
                    }
                }),
                vc = xc.extend({
                    elements: Ye.elementsFromImages("lamp", ["jelly", "jelly1"], ["jelly", "jelly2"]),
                    onLoadComplete() {
                        C.p8.set(".e.lamp", {
                            scale: .9
                        }), C.p8.set(".e.jelly1", {
                            x: -190,
                            y: -100,
                            rotate: -30
                        }), C.p8.set(".e.jelly2", {
                            x: 200,
                            y: -250,
                            rotate: 150,
                            scale: .7
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.jelly2", {
                            opacity: 0
                        }).to(".e.jelly1", {
                            opacity: 0
                        }).to(".lamp", {
                            scale: 1,
                            duration: .25
                        }).to(".lamp", {
                            scale: .9,
                            duration: .25
                        })
                    },
                    onStartProgress() {
                        Ye.startShake("jelly1"), Ye.startShake("jelly2")
                    },
                    onStopProgress() {
                        Ye.stopShake("jelly1"), Ye.stopShake("jelly2")
                    }
                }),
                kc = xc.extend({
                    elements: Ye.elementsFromImages("picture", ["jelly", "jelly3"], "vase", ["jelly", "jelly1"], ["jelly", "jelly2"]),
                    onLoadComplete() {
                        C.p8.set(".e.picture", {
                            scale: .9
                        }), C.p8.set(".e.vase", {
                            scale: .5,
                            y: 250,
                            x: 150
                        }), C.p8.set(".e.jelly1", {
                            x: -150,
                            y: 50
                        }), C.p8.set(".e.jelly2", {
                            x: 300,
                            y: -200,
                            scale: .6,
                            rotate: 150
                        }), C.p8.set(".e.jelly3", {
                            scale: .5,
                            x: 150,
                            y: 230
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.jelly2", {
                            opacity: 0
                        }).to(".e.jelly1", {
                            opacity: 0
                        }).to(".picture", {
                            scale: 1,
                            duration: .25
                        }).to(".picture", {
                            scale: .9,
                            duration: .25
                        }).to(".vase", {
                            rotate: 5
                        }).to(".vase", {
                            rotate: -5
                        }).to(".vase", {
                            rotate: 0
                        }).to(".jelly3", {
                            y: -40,
                            scaleY: .7
                        }).to(".jelly3", {
                            y: -10,
                            scaleY: .5
                        }).to(".jelly3", {
                            opacity: 0
                        }, "+=.25").to(".vae", {
                            scale: .6
                        }).to(".vae", {
                            scale: .5
                        })
                    },
                    onStartProgress() {
                        Ye.startShake("jelly1"), Ye.startShake("jelly2")
                    },
                    onStopProgress() {
                        Ye.stopShake("jelly1"), Ye.stopShake("jelly2")
                    }
                }),
                Pc = He.extend({
                    imageManifest: {
                        armchair: Promise.resolve().then(s.t.bind(s, 91492, 17))
                    }
                }).extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("armchair"),
                    initializeTimeline() {
                        this.timeline.to(".e.armchair", {
                            x: -100
                        })
                    }
                }),
                wc = Pc.extend({
                    stepDuration: .25,
                    initializeTimeline() {
                        C.p8.set(".e.armchair", {
                            x: -100
                        }), this.timeline.to(".e.armchair", {
                            x: -200
                        })
                    }
                }),
                Tc = Pc.extend({
                    stepDuration: .25,
                    initializeTimeline() {
                        C.p8.set(".e.armchair", {
                            x: -200
                        }), this.timeline.to(".e.armchair", {
                            x: -300
                        })
                    }
                }),
                Sc = Pc.extend({
                    stepDuration: .25,
                    initializeTimeline() {
                        C.p8.set(".e.armchair", {
                            x: -300
                        }), this.timeline.to(".e.armchair", {
                            x: -400
                        })
                    }
                }),
                Mc = Pc.extend({
                    initializeTimeline() {
                        C.p8.set(".e.armchair", {
                            x: -400
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("armchair", 2, 1)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("armchair", 2, 1)
                    }
                }),
                Cc = Pc.extend({
                    initializeTimeline() {
                        C.p8.set(".e.armchair", {
                            x: -400
                        }), this.timeline.to(".e.armchair", {
                            x: 0
                        })
                    }
                }),
                Dc = He.extend({
                    imageManifest: {
                        grill: Promise.resolve().then(s.t.bind(s, 25322, 17)),
                        meat1: Promise.resolve().then(s.t.bind(s, 1703, 17)),
                        meat2: Promise.resolve().then(s.t.bind(s, 43063, 17)),
                        meat3: Promise.resolve().then(s.t.bind(s, 99240, 17)),
                        meat4: Promise.resolve().then(s.t.bind(s, 186, 17))
                    },
                    elements: [{
                        type: "container",
                        class: "grill-container",
                        children: [{
                            type: "img",
                            pos: [0, 0],
                            key: "grill",
                            class: "grill"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "meat1",
                            class: "meat1"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "meat2",
                            class: "meat2"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "meat3",
                            class: "meat3"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "meat4",
                            class: "meat4"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "meat2",
                            class: "meat5"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        this.timeline.fromTo(".e.meat1", {
                            x: -100,
                            y: -90,
                            opacity: 0,
                            rotate: 40,
                            scale: 1
                        }, {
                            opacity: 1,
                            x: 50,
                            y: -130,
                            rotate: 0,
                            scale: .3
                        }, 0), this.timeline.fromTo(".e.meat2", {
                            x: 100,
                            y: -90,
                            opacity: 0,
                            rotate: -5,
                            scale: 1
                        }, {
                            opacity: 1,
                            x: -50,
                            y: -130,
                            rotate: 0,
                            scale: .3
                        }, "+=0.01"), this.timeline.fromTo(".e.meat3", {
                            x: -50,
                            y: -90,
                            opacity: 0,
                            rotate: 60,
                            scale: 1
                        }, {
                            opacity: 1,
                            x: 75,
                            y: -110,
                            rotate: 0,
                            scale: .3
                        }, "+=0.01"), this.timeline.fromTo(".e.meat4", {
                            x: 50,
                            y: -90,
                            opacity: 0,
                            rotate: -15,
                            scale: 1
                        }, {
                            opacity: 1,
                            x: -75,
                            y: -110,
                            rotate: 0,
                            scale: .3,
                            rotateZ: -15
                        }, "+=0.01"), this.timeline.fromTo(".e.meat5", {
                            x: 60,
                            y: -90,
                            opacity: 0,
                            rotate: -15,
                            scale: 1
                        }, {
                            opacity: 1,
                            x: 0,
                            y: -95,
                            rotate: 0,
                            scale: .3
                        }, "+=0.01"), C.p8.set(".e.meat1, .e.meat2, .e.meat3, .e.meat4, .e.meat5", {
                            opacity: 0
                        })
                    }
                }),
                Fc = He.extend({
                    imageManifest: {
                        meat: Promise.resolve().then(s.t.bind(s, 186, 17))
                    },
                    elements: [{
                        type: "img",
                        pos: [0, 0],
                        key: "meat",
                        class: "meat"
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        this.timeline.to(".e.meat", {
                            rotateX: 360
                        })
                    }
                }),
                zc = He.extend({
                    imageManifest: {
                        knob: Promise.resolve().then(s.t.bind(s, 26376, 17)),
                        offOnText: Promise.resolve().then(s.t.bind(s, 35011, 17))
                    },
                    elements: [{
                        type: "img",
                        pos: [0, 0],
                        key: "knob",
                        class: "knob"
                    }, {
                        type: "img",
                        pos: [0, 0],
                        key: "offOnText",
                        class: "offOnText"
                    }],
                    initializeTimeline() {
                        this.timeline.from(".e.knob", {
                            rotation: -90
                        })
                    }
                }),
                Lc = mn.extend({
                    imageManifest: {
                        grill: Promise.resolve().then(s.t.bind(s, 84331, 17)),
                        spark: Promise.resolve().then(s.t.bind(s, 20641, 17))
                    },
                    elements: [{
                        type: "container",
                        class: "grill-container",
                        children: [{
                            type: "img",
                            pos: [0, 0],
                            key: "grill",
                            class: "grill"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "spark",
                            class: "spark"
                        }]
                    }],
                    initializeTimeline() {
                        const e = document.querySelector(".e.spark");
                        this.timeline.fromTo(e, {
                            x: 0,
                            y: -90,
                            opacity: 1,
                            rotate: 40
                        }, {
                            opacity: 0,
                            x: 50,
                            y: -200
                        }, 0), this.timeline.fromTo(e, {
                            x: 0,
                            y: -90,
                            opacity: 1,
                            rotate: -5
                        }, {
                            opacity: 0,
                            x: -50,
                            y: -200
                        }, "+=0.01"), this.timeline.fromTo(e, {
                            x: 0,
                            y: -90,
                            opacity: 1,
                            rotate: 60
                        }, {
                            opacity: 0,
                            x: 150,
                            y: -200
                        }, "+=0.01"), this.timeline.fromTo(e, {
                            x: 0,
                            y: -90,
                            opacity: 1,
                            rotate: -15
                        }, {
                            opacity: 0,
                            x: -150,
                            y: -200
                        }, "+=0.01"), C.p8.set(e, {
                            opacity: 0
                        })
                    }
                }),
                Rc = Lc.extend({
                    elements: [{
                        type: "container",
                        class: "grill-container",
                        children: [{
                            type: "img",
                            pos: [0, 0],
                            key: "grill",
                            class: "grill"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "spark",
                            class: "spark1"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "spark",
                            class: "spark2"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "spark",
                            class: "spark3"
                        }]
                    }],
                    initializeTimeline() {
                        const e = document.querySelector(".e.spark1"),
                            t = document.querySelector(".e.spark2"),
                            s = document.querySelector(".e.spark3");
                        this.timeline.fromTo(e, {
                            x: 0,
                            y: -90,
                            opacity: 1,
                            rotate: 40
                        }, {
                            opacity: 0,
                            x: 50,
                            y: -200
                        }, 0), this.timeline.fromTo(t, {
                            x: 0,
                            y: -90,
                            opacity: 1,
                            rotate: -5
                        }, {
                            opacity: 0,
                            x: -50,
                            y: -200
                        }, "<"), this.timeline.fromTo(s, {
                            x: 0,
                            y: -90,
                            opacity: 1,
                            rotate: 60
                        }, {
                            opacity: 0,
                            x: 150,
                            y: -200
                        }, "<"), this.timeline.fromTo(e, {
                            x: 0,
                            y: -90,
                            opacity: 1,
                            rotate: -15
                        }, {
                            opacity: 0,
                            x: -150,
                            y: -200
                        }, "+=0.01"), this.timeline.fromTo(t, {
                            x: -10,
                            y: -90,
                            opacity: 1,
                            rotate: -5
                        }, {
                            opacity: 0,
                            x: -50,
                            y: -200
                        }, "<"), this.timeline.fromTo(s, {
                            x: 10,
                            y: -90,
                            opacity: 1,
                            rotate: 60
                        }, {
                            opacity: 0,
                            x: 150,
                            y: -200
                        }, "<"), this.timeline.fromTo(e, {
                            x: 0,
                            y: -90,
                            opacity: 1,
                            rotate: 60
                        }, {
                            opacity: 0,
                            x: 150,
                            y: -200
                        }, "+=0.01"), this.timeline.fromTo(t, {
                            x: -15,
                            y: -90,
                            opacity: 1,
                            rotate: -5
                        }, {
                            opacity: 0,
                            x: -50,
                            y: -200
                        }, "<"), this.timeline.fromTo(s, {
                            x: 25,
                            y: -90,
                            opacity: 1,
                            rotate: 60
                        }, {
                            opacity: 0,
                            x: 150,
                            y: -200
                        }, "<"), this.timeline.fromTo(e, {
                            x: 0,
                            y: -90,
                            opacity: 1,
                            rotate: -15
                        }, {
                            opacity: 0,
                            x: -150,
                            y: -200
                        }, "+=0.01"), this.timeline.fromTo(t, {
                            x: -20,
                            y: -90,
                            opacity: 1,
                            rotate: -5
                        }, {
                            opacity: 0,
                            x: -50,
                            y: -200
                        }, "<"), this.timeline.fromTo(s, {
                            x: 12,
                            y: -90,
                            opacity: 1,
                            rotate: 60
                        }, {
                            opacity: 0,
                            x: 150,
                            y: -200
                        }, "<"), this.timeline.fromTo(e, {
                            x: 0,
                            y: -90,
                            opacity: 1,
                            rotate: 40
                        }, {
                            opacity: 0,
                            x: 50,
                            y: -200
                        }, "+=0.01"), this.timeline.fromTo(t, {
                            x: -25,
                            y: -90,
                            opacity: 1,
                            rotate: -5
                        }, {
                            opacity: 0,
                            x: -50,
                            y: -200
                        }, "<"), this.timeline.fromTo(s, {
                            x: 10,
                            y: -90,
                            opacity: 1,
                            rotate: 60
                        }, {
                            opacity: 0,
                            x: 150,
                            y: -200
                        }, "<"), this.timeline.fromTo(e, {
                            x: 0,
                            y: -90,
                            opacity: 1,
                            rotate: 40
                        }, {
                            opacity: 0,
                            x: 50,
                            y: -200
                        }, "+=0.01"), this.timeline.fromTo(t, {
                            x: -10,
                            y: -90,
                            opacity: 1,
                            rotate: -5
                        }, {
                            opacity: 0,
                            x: -50,
                            y: -200
                        }, "<"), this.timeline.fromTo(s, {
                            x: 12,
                            y: -90,
                            opacity: 1,
                            rotate: 60
                        }, {
                            opacity: 0,
                            x: 150,
                            y: -200
                        }, "<"), C.p8.set(e, {
                            opacity: 0
                        }), C.p8.set(t, {
                            opacity: 0
                        }), C.p8.set(s, {
                            opacity: 0
                        })
                    }
                }),
                Ic = He.extend({
                    imageManifest: {
                        grill: Promise.resolve().then(s.t.bind(s, 84331, 17)),
                        fire: Promise.resolve().then(s.t.bind(s, 33962, 17)),
                        extinguisher: Promise.resolve().then(s.t.bind(s, 63333, 17)),
                        smoke: Promise.resolve().then(s.t.bind(s, 83395, 17))
                    },
                    elements: [{
                        type: "img",
                        pos: [0, 0],
                        key: "grill",
                        class: "grill"
                    }, {
                        type: "container",
                        class: "fire-container",
                        pos: [100, 330],
                        children: [{
                            class: "fire",
                            type: "img",
                            pos: [0, 0],
                            key: "fire"
                        }]
                    }, {
                        type: "container",
                        class: "ext-container",
                        children: [{
                            type: "img",
                            pos: [-52, -505],
                            key: "smoke",
                            class: "smoke"
                        }, {
                            type: "img",
                            pos: [0, 0],
                            key: "extinguisher",
                            class: "extinguisher"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.smoke", {
                            display: "none"
                        }), C.p8.set(".e.fire-container", {
                            height: 350,
                            width: 350,
                            scale: .8,
                            overflow: "hidden"
                        }), C.p8.to(".e.fire", {
                            x: -2999.5,
                            duration: .5,
                            ease: "steps(7)",
                            repeat: -1
                        });
                        const e = C.p8.timeline();
                        e.fromTo(".e.ext-container", {
                            x: "25%",
                            y: "100%",
                            rotate: -10,
                            scale: 1.5,
                            opacity: 0
                        }, {
                            x: "25%",
                            y: "60%",
                            opacity: 1,
                            ease: "power1.inOut"
                        }), e.fromTo(".e.ext-container", {
                            x: "25%",
                            y: "60%",
                            rotate: -10,
                            scale: 1.5
                        }, {
                            x: "25%",
                            y: "55%",
                            yoyo: !0,
                            repeat: -1,
                            ease: "power1.inOut"
                        }), this.timeline.to(".e.ext-container", {
                            x: "45%",
                            y: "-10%",
                            scale: .6,
                            onComplete() {
                                C.p8.killTweensOf("*")
                            }
                        })
                    }
                }),
                Oc = Ic.extend({
                    initializeTimeline() {
                        const e = document.querySelector(".e.fire-container"),
                            t = document.querySelector(".e.fire"),
                            s = document.querySelector(".e.smoke"),
                            i = this.timeline;
                        let o = 0;
                        C.p8.set(e, {
                            height: 350,
                            width: 350,
                            scale: .8,
                            overflow: "hidden"
                        }), C.p8.to(t, {
                            x: -2999.5,
                            duration: .5,
                            ease: "steps(7)",
                            repeat: -1
                        }), this.timeline.set(".e.smoke", {
                            opacity: 1
                        }), this.timeline.to(".e.ext-container", {
                            rotate: -20,
                            yoyo: !0,
                            repeat: 20,
                            duration: .05,
                            ease: "sine.inOut",
                            onUpdate() {
                                i.progress() - o < 0 ? C.p8.set(s, {
                                    opacity: 0
                                }) : C.p8.set(s, {
                                    opacity: 1
                                }), o = i.progress()
                            }
                        }), this.timeline.to(".e.smoke", {
                            opacity: 0,
                            duration: .01
                        }), this.timeline.to(t, {
                            opacity: 0,
                            duration: .5
                        }, .5), C.p8.set(s, {
                            opacity: 0,
                            scale: 1.5
                        }), C.p8.set(".e.ext-container", {
                            x: "45%",
                            y: "-10%",
                            scale: .6,
                            rotate: -10
                        })
                    }
                }),
                Bc = He.extend({
                    imageManifest: {
                        capped: Promise.resolve().then(s.t.bind(s, 74440, 17)),
                        timer: Promise.resolve().then(s.t.bind(s, 78601, 17)),
                        top: Promise.resolve().then(s.t.bind(s, 99997, 17)),
                        uncapped: Promise.resolve().then(s.t.bind(s, 96976, 17)),
                        family: Promise.resolve().then(s.t.bind(s, 31174, 17))
                    }
                }),
                Yc = Bc.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("capped", "uncapped"),
                    onLoadComplete() {
                        C.p8.set(".e.uncapped", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.uncapped", {
                            opacity: 1
                        })
                    }
                }),
                Ac = Bc.extend({
                    elements: Ye.elementsFromImages("uncapped"),
                    initializeTimeline() {
                        this.timeline.to(".e.uncapped", {
                            rotate: 10
                        }).to(".e.uncapped", {
                            rotate: -10
                        }).to(".e.uncapped", {
                            rotate: 10
                        }).to(".e.uncapped", {
                            rotate: -10
                        }).to(".e.uncapped", {
                            rotate: 0
                        })
                    },
                    onStartProgress() {
                        C.p8.to(".e.uncapped", {
                            scale: .9
                        })
                    },
                    onStopProgress() {
                        C.p8.to(".e.uncapped", {
                            scale: 1
                        })
                    }
                }),
                Hc = Bc.extend({
                    elements: Ye.elementsFromImages("top", ["timer", !1, [500, 70]]),
                    initializeTimeline() {
                        this.timeline.to(".e.timer", {
                            rotate: 90
                        })
                    }
                }),
                Gc = Bc.extend({
                    elements: [{
                        class: "family",
                        type: "img",
                        key: "family"
                    }, {
                        class: "flash",
                        type: "div",
                        pos: [-5e3, -5e3],
                        html: ""
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.flash", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.family", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.family", {
                            filter: "blur(4px)",
                            autoRound: !1
                        }).to(".e.family", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.family", {
                            filter: "blur(10px)",
                            autoRound: !1
                        }).to(".e.family", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.family", {
                            filter: "blur(4px)",
                            autoRound: !1
                        }).to(".e.family", {
                            filter: "blur(0px)",
                            autoRound: !1
                        });
                        this.timeline.to(".e.flash", {
                            opacity: 1,
                            duration: .05,
                            ease: "none"
                        }, 5).to(".e.flash", {
                            opacity: 0,
                            duration: .15
                        }, "+=0.15").to(".e.flash", {
                            opacity: 0,
                            duration: 1
                        }), this.timeline.add(e, 0)
                    }
                }),
                Vc = He.extend({
                    imageManifest: {
                        liquor1: Promise.resolve().then(s.t.bind(s, 94809, 17)),
                        liquor2: Promise.resolve().then(s.t.bind(s, 72159, 17)),
                        liquor3: Promise.resolve().then(s.t.bind(s, 34507, 17)),
                        liquorshelf: Promise.resolve().then(s.t.bind(s, 99387, 17))
                    }
                }),
                Ec = Vc.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("liquor1", "liquor2", "liquor3"),
                    onLoadComplete() {
                        C.p8.set(".e.liquor1", {
                            x: -250,
                            scale: .525,
                            rotation: 55
                        }), C.p8.set(".e.liquor2", {
                            scale: .46
                        }), C.p8.set(".e.liquor3", {
                            x: 250,
                            y: 100,
                            scale: .45,
                            rotation: 255
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.fadeAway("liquor1")).add(Ye.fadeAway("liquor3")).add(Ye.fadeAway("liquor2"))
                    }
                }),
                qc = Vc.extend({
                    stepDuration: .7,
                    elements: Ye.elementsFromImages("liquor1", "liquor2", "liquor3", "liquorshelf"),
                    onLoadComplete() {
                        C.p8.set(".e.liquorshelf", {
                            opacity: 0
                        }), C.p8.set(".e.liquor1", {
                            x: 25,
                            y: 725,
                            scale: .525
                        }), C.p8.set(".e.liquor2", {
                            x: 190,
                            y: 800,
                            scale: .46
                        }), C.p8.set(".e.liquor3", {
                            x: -200,
                            y: 800,
                            scale: .45
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.liquor1", {
                            y: -35
                        }).to(".e.liquor2", {
                            y: 50
                        }, "<0.25").to(".e.liquor3", {
                            y: 50
                        }, "<0.25").to(".e.liquorshelf", {
                            opacity: 1
                        }).to(".e.liquor1", {
                            opacity: 0
                        }, "<0.5").to(".e.liquor2", {
                            opacity: 0
                        }, "<").to(".e.liquor3", {
                            opacity: 0
                        }, "<")
                    }
                }),
                Nc = He.extend({
                    imageManifest: {
                        milkmaid: Promise.resolve().then(s.t.bind(s, 72091, 17))
                    },
                    elements: Ye.elementsFromImages("milkmaid")
                }),
                Xc = Nc.extend({
                    stepDuration: .25,
                    initializeTimeline() {
                        this.timeline.to(".e.milkmaid", {
                            x: -50
                        })
                    }
                }),
                Wc = Nc.extend({
                    stepDuration: .25,
                    onLoadComplete() {
                        C.p8.set(".e.milkmaid", {
                            x: -50
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.milkmaid", {
                            x: 50
                        })
                    }
                }),
                Uc = Nc.extend({
                    onLoadComplete() {
                        C.p8.set(".e.milkmaid", {
                            x: 50
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.milkmaid", {
                            scaleX: .8
                        })
                    }
                }),
                $c = Nc.extend({
                    onLoadComplete() {
                        C.p8.set(".e.milkmaid", {
                            x: 50,
                            scaleX: .8
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.milkmaid", {
                            scaleX: 1
                        })
                    }
                }),
                jc = He.extend({
                    imageManifest: {
                        calculator: Promise.resolve().then(s.t.bind(s, 49462, 17)),
                        letter1: Promise.resolve().then(s.t.bind(s, 69817, 17)),
                        letter2: Promise.resolve().then(s.t.bind(s, 99819, 17)),
                        mailbox: Promise.resolve().then(s.t.bind(s, 71474, 17)),
                        money: Promise.resolve().then(s.t.bind(s, 81859, 17)),
                        signed: Promise.resolve().then(s.t.bind(s, 51174, 17)),
                        unsigned: Promise.resolve().then(s.t.bind(s, 26683, 17)),
                        yell: Promise.resolve().then(s.t.bind(s, 91318, 17))
                    }
                }),
                Kc = jc.extend({
                    stepDuration: 2,
                    elements: [...Ye.elementsFromImages("mailbox", "letter1"), {
                        type: "div",
                        class: "particles",
                        html: "",
                        pos: [-350, 50]
                    }],
                    initializeTimeline() {
                        Ye.addParticleEmitter({
                            container: "particles",
                            image: "letter1",
                            autoplay: !1,
                            numberOfParticles: 10,
                            restartOnProgress: !0,
                            zIndex: 1,
                            settings: {
                                randomAngleRange: -45,
                                minSize: 300,
                                maxSize: 500,
                                force: 3,
                                gravity: 3.6
                            }
                        }, this)
                    }
                }),
                Zc = jc.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages(["letter1", "letter1-1", [-90, -50]], ["letter2", "letter2-1", [0, 100]], ["letter1", "letter1-2", [85, -40]], ["letter2", "letter2-2", [150, 70]]),
                    onLoadComplete() {
                        for (let e = 1; e <= 2; e++) C.p8.set(`.e.letter1-${e}`, {
                            rotation: (0, i.random)(0, 25)
                        }), C.p8.set(`.e.letter2-${e}`, {
                            rotation: (0, i.random)(-25, 0)
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.letter2-2", {
                            x: -275,
                            y: 250,
                            rotation: 0
                        }).to(".e.letter1-2", {
                            x: 275,
                            y: 300,
                            rotation: 0
                        }).to(".e.letter2-1", {
                            x: -305,
                            y: 250,
                            rotation: 0
                        }).to(".e.letter1-1", {
                            x: 285,
                            y: 300,
                            rotation: 0
                        })
                    }
                }),
                Jc = jc.extend({
                    stepDuration: .5,
                    elements: [...Ye.elementsFromImages("calculator", "money"), {
                        type: "div",
                        class: "particles",
                        html: "",
                        pos: [-300, -50]
                    }],
                    onLoadComplete() {
                        Ye.addParticleEmitter({
                            container: "particles",
                            image: "money",
                            autoplay: !1,
                            numberOfParticles: 12,
                            restartOnProgress: !0,
                            zIndex: 1,
                            settings: {
                                angle: 0,
                                randomAngle: !1,
                                particleLimit: 3,
                                minSize: 100,
                                maxSize: 200,
                                gravity: -4.9
                            }
                        }, this)
                    },
                    onDiscreteProgress() {
                        Ye.scaleBounce("calculator")
                    }
                }),
                _c = jc.extend({
                    elements: Ye.elementsFromImages("yell"),
                    onStartProgress() {
                        Ye.startHoldShake("yell")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("yell")
                    }
                }),
                Qc = jc.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("unsigned", "signed"),
                    onLoadComplete() {
                        C.p8.set(".e.signed", {
                            clipPath: "inset(0 60% 0 0)"
                        })
                    },
                    onProgress(e) {
                        C.p8.set(".e.signed", {
                            clipPath: `inset(0 ${60-.4*e}% 0 0)`
                        })
                    }
                }),
                em = He.extend({
                    imageManifest: {
                        cottonballFront: Promise.resolve().then(s.t.bind(s, 14537, 17)),
                        cottonballs: Promise.resolve().then(s.t.bind(s, 65616, 17)),
                        cottonballBack: Promise.resolve().then(s.t.bind(s, 18780, 17)),
                        desk: Promise.resolve().then(s.t.bind(s, 53861, 17)),
                        dust: Promise.resolve().then(s.t.bind(s, 9359, 17)),
                        fight: Promise.resolve().then(s.t.bind(s, 86278, 17)),
                        fuss: Promise.resolve().then(s.t.bind(s, 9519, 17)),
                        ignore: Promise.resolve().then(s.t.bind(s, 73096, 17)),
                        kids: Promise.resolve().then(s.t.bind(s, 3063, 17)),
                        laptopScreen: Promise.resolve().then(s.t.bind(s, 40763, 17)),
                        laptopTop: Promise.resolve().then(s.t.bind(s, 96346, 17)),
                        yell: Promise.resolve().then(s.t.bind(s, 95937, 17))
                    }
                }),
                tm = em.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "desk",
                        type: "img",
                        key: "desk"
                    }, {
                        class: "laptop",
                        type: "container",
                        children: Ye.elementsFromImages("laptopScreen", "laptopTop")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.laptop", {
                            left: 340,
                            top: 494,
                            width: 297,
                            height: 239,
                            rotateX: 67,
                            skewX: -2.5,
                            scaleY: .7,
                            transformPerspective: 515,
                            transformOrigin: "top center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.laptop", {
                            rotateX: 170,
                            skewX: 0,
                            scaleY: 1,
                            transformPerspective: 1e3
                        }).set(".e.laptopTop", {
                            visibility: "hidden"
                        }, .07)
                    }
                }),
                sm = em.extend({
                    elements: Ye.elementsFromImages("fight", ["dust", null, [50, 600]]),
                    onLoadComplete() {
                        Ye.addInfiniteWiggle("dust"), C.p8.timeline({
                            yoyo: !0,
                            repeat: -1
                        }).to(".e.dust", {
                            opacity: .5,
                            duration: .25
                        }).to(".e.dust", {
                            opacity: 1,
                            duration: .25
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("fight")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("fight")
                    }
                }),
                im = em.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages(["kids", null, [150, -500]], ["cottonballBack", null, [299, 343]], "cottonballs", ["cottonballFront", null, [289, 578]]),
                    onLoadComplete() {
                        C.p8.set([".e.cottonballBack", ".e.cottonballFront"], {
                            opacity: 0
                        }), C.p8.timeline({
                            repeat: -1
                        }).set(".e.kids", {
                            scaleX: 1
                        }).to(".e.kids", {
                            x: 1600,
                            duration: 1.75,
                            ease: "power1.in"
                        }).set(".e.kids", {
                            scaleX: -1
                        }).to(".e.kids", {
                            x: 0,
                            duration: 1.75,
                            ease: "power1.in"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cottonballBack", {
                            opacity: 1
                        }).to(".e.cottonballFront", {
                            opacity: 1
                        })
                    }
                }),
                om = em.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("yell", ["fuss", null, [110, 450]]),
                    onLoadComplete() {
                        C.p8.set(".e.fuss", {
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.fuss", {
                            opacity: 1,
                            duration: .1
                        }).to(".e.fuss", {
                            opacity: 0,
                            duration: .1
                        }).to(".e.fuss", {
                            opacity: 1,
                            duration: .1
                        }).to(".e.fuss", {
                            opacity: 0,
                            duration: .1
                        })
                    }
                }),
                nm = em.extend({
                    elements: Ye.elementsFromImages(["kids", null, [150, -500]], "ignore"),
                    onLoadComplete() {
                        C.p8.timeline({
                            repeat: -1
                        }).set(".e.kids", {
                            scaleX: 1
                        }).to(".e.kids", {
                            x: 1600,
                            duration: 1.75,
                            ease: "power1.in"
                        }).set(".e.kids", {
                            scaleX: -1
                        }).to(".e.kids", {
                            x: 0,
                            duration: 1.75,
                            ease: "power1.in"
                        })
                    }
                }),
                am = He.extend({
                    imageManifest: {
                        insulationBag: Promise.resolve().then(s.t.bind(s, 58796, 17)),
                        insulationNew: Promise.resolve().then(s.t.bind(s, 3119, 17)),
                        insulationOld: Promise.resolve().then(s.t.bind(s, 48980, 17)),
                        stapler: Promise.resolve().then(s.t.bind(s, 1797, 17))
                    }
                }),
                rm = am.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("insulationBag", "insulationNew"),
                    onLoadComplete() {
                        C.p8.set(".e.insulationNew", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("insulationBag", "insulationNew"))
                    }
                }),
                lm = am.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("insulationOld"),
                    initializeTimeline() {
                        this.timeline.to(".e.insulationOld", {
                            y: 50,
                            opacity: 0
                        }).add(Ye.squashOnce("insulationOld", 1), 0)
                    }
                }),
                dm = am.extend({
                    elements: Ye.elementsFromImages("insulationNew"),
                    onStartProgress() {
                        Ye.startHoldShake("insulationNew")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("insulationNew")
                    }
                }),
                pm = am.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("insulationNew", "stapler"),
                    onLoadComplete() {
                        C.p8.set(".e.stapler", {
                            x: 200,
                            y: -200
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("stapler", .35)
                    }
                }),
                cm = He.extend({
                    imageManifest: {
                        pipe1: Promise.resolve().then(s.t.bind(s, 1654, 17)),
                        pipe2: Promise.resolve().then(s.t.bind(s, 80969, 17)),
                        wrench: Promise.resolve().then(s.t.bind(s, 39437, 17))
                    }
                });
            let mm;
            const hm = cm.extend({
                    elements: Ye.elementsFromImages("pipe1", "pipe2"),
                    onLoadComplete() {
                        mm = 0, C.p8.set(".e.pipe2", {
                            hidden: !0
                        })
                    },
                    onProgress(e) {
                        const t = Math.floor(e);
                        t > mm && (t % 50 == 0 ? (C.p8.set(".e.pipe1", {
                            hidden: !1
                        }), C.p8.set(".e.pipe2", {
                            hidden: !0
                        })) : t % 25 == 0 && (C.p8.set(".e.pipe1", {
                            hidden: !0
                        }), C.p8.set(".e.pipe2", {
                            hidden: !1
                        })), mm = e)
                    }
                }),
                um = cm.extend({
                    elements: Ye.elementsFromImages("pipe1", "pipe2"),
                    onLoadComplete() {
                        mm = 0, C.p8.set(".e.pipe2", {
                            hidden: !0
                        })
                    },
                    onProgress(e) {
                        const t = Math.floor(e);
                        t > mm && (t % 20 == 0 ? (C.p8.set(".e.pipe1", {
                            hidden: !1
                        }), C.p8.set(".e.pipe2", {
                            hidden: !0
                        })) : t % 10 == 0 && (C.p8.set(".e.pipe1", {
                            hidden: !0
                        }), C.p8.set(".e.pipe2", {
                            hidden: !1
                        })), mm = e)
                    }
                }),
                gm = cm.extend({
                    elements: Ye.elementsFromImages("pipe1", "pipe2"),
                    onLoadComplete() {
                        mm = 0, C.p8.set(".e.pipe2", {
                            hidden: !0
                        })
                    },
                    onProgress(e) {
                        const t = Math.floor(e);
                        t > mm && (t % 10 == 0 ? (C.p8.set(".e.pipe1", {
                            hidden: !1
                        }), C.p8.set(".e.pipe2", {
                            hidden: !0
                        })) : t % 5 == 0 && (C.p8.set(".e.pipe1", {
                            hidden: !0
                        }), C.p8.set(".e.pipe2", {
                            hidden: !1
                        })), mm = e)
                    }
                }),
                ym = cm.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("pipe1", ["wrench", null, [0, -1500]]),
                    initializeTimeline() {
                        this.timeline.to(".e.wrench", {
                            x: 1e3,
                            duration: .25
                        }).to(".e.wrench", {
                            x: 1700,
                            scaleX: .5,
                            rotation: -15,
                            duration: .25
                        }).to(".e.wrench", {
                            x: 1400,
                            scaleX: 1,
                            rotation: -75,
                            duration: .25
                        }).to(".e.wrench", {
                            x: 1e3,
                            y: 1500,
                            rotation: -180,
                            duration: .25
                        })
                    }
                });
            C.p8.registerPlugin(Ie.t, Be.u);
            const bm = He.extend({
                    className: "dont-pop-zit",
                    imageManifest: {
                        finger: Promise.resolve().then(s.t.bind(s, 55544, 17)),
                        popped: Promise.resolve().then(s.t.bind(s, 22101, 17)),
                        zitBase: Promise.resolve().then(s.t.bind(s, 15569, 17)),
                        zitPuss: Promise.resolve().then(s.t.bind(s, 96571, 17))
                    },
                    elements: [{
                        class: "popped",
                        type: "img",
                        pos: [400, 100],
                        key: "popped"
                    }, {
                        class: "pain",
                        type: "div",
                        pos: [100, 50],
                        html: ""
                    }, {
                        class: "zit-base",
                        type: "img",
                        pos: [400, 100],
                        key: "zitBase"
                    }, {
                        class: "zit-puss",
                        type: "img",
                        pos: [402, 311],
                        key: "zitPuss"
                    }, {
                        class: "finger",
                        type: "img",
                        pos: [180, -480],
                        key: "finger"
                    }]
                }),
                xm = bm.extend({
                    stepDuration: .6,
                    initializeTimeline() {
                        C.p8.set(".e.popped", {
                            visibility: "hidden"
                        }), C.p8.set(".e.pain", {
                            visibility: "hidden"
                        });
                        const e = C.p8.timeline().to(".e.finger", {
                            x: 80,
                            y: 140
                        }).to(".e.finger", {
                            x: 0,
                            y: 0
                        }).to(".e.finger", {
                            x: 80,
                            y: 140
                        }).to(".e.finger", {
                            x: 0,
                            y: 0
                        }).to(".e.finger", {
                            x: 80,
                            y: 140
                        }).to(".e.finger", {
                            x: 0,
                            y: 0
                        });
                        e.name = "finger", this.timeline.add(e);
                        const t = C.p8.timeline().to(".e.zit-puss", {
                            scaleY: .9,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: 1,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: .9,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: 1,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: .9,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: 1,
                            transformOrigin: "center bottom"
                        });
                        t.name = "puss", this.timeline.add(t, 0)
                    }
                }),
                fm = bm.extend({
                    initializeTimeline() {
                        C.p8.set(".e.popped", {
                            visibility: "hidden"
                        }), C.p8.set(".e.pain", {
                            opacity: 0
                        }), C.p8.set(".e.finger", {
                            x: 100,
                            y: -20,
                            rotation: 15
                        });
                        const e = C.p8.timeline().to(".e.finger", {
                            x: 100,
                            y: -20
                        }).to(".e.finger", {
                            x: 0,
                            y: 150
                        }).to(".e.finger", {
                            x: 100,
                            y: -20
                        }).to(".e.finger", {
                            x: 0,
                            y: 150
                        }).to(".e.finger", {
                            x: 100,
                            y: -20
                        }).to(".e.finger", {
                            x: 0,
                            y: 150
                        }).to(".e.finger", {
                            x: 100,
                            y: -20
                        }).to(".e.finger", {
                            x: 0,
                            y: 150
                        }).to(".e.finger", {
                            x: 100,
                            y: -20
                        }).to(".e.finger", {
                            x: 0,
                            y: 150
                        }).to(".e.finger", {
                            x: 100,
                            y: -20
                        }).to(".e.finger", {
                            x: 0,
                            y: 150
                        }).to(".e.finger", {
                            x: 100,
                            y: -20
                        }).to(".e.finger", {
                            x: 0,
                            y: 150
                        }).to(".e.finger", {
                            x: 100,
                            y: -20
                        }).to(".e.finger", {
                            x: 0,
                            y: 150
                        }).to(".e.finger", {
                            x: 100,
                            y: -20
                        }).to(".e.finger", {
                            x: 0,
                            y: 150
                        }).to(".e.finger", {
                            x: 100,
                            y: -20
                        });
                        e.name = "finger", this.timeline.add(e);
                        const t = C.p8.timeline().to(".e.zit-puss", {
                            scaleY: 1,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: .9,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: 1,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: .9,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: 1,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: .9,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: 1,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: .9,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: 1,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: .9,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: 1,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: .9,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: 1,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: .9,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: 1,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: .9,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: 1,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: .9,
                            transformOrigin: "center bottom"
                        }).to(".e.zit-puss", {
                            scaleY: 1,
                            transformOrigin: "center bottom"
                        });
                        t.name = "puss", this.timeline.add(t, 0);
                        const s = C.p8.timeline().to(".e.pain", {
                            opacity: 1,
                            duration: 9
                        });
                        s.name = "pain", this.timeline.add(s, 0)
                    }
                }),
                vm = bm.extend({
                    onLoadComplete() {
                        C.p8.set(".e.zit-base", {
                            visibility: "hidden"
                        }), C.p8.set(".e.zit-puss", {
                            visibility: "hidden"
                        }), C.p8.set(".e.pain", {
                            visibility: "hidden"
                        }), C.p8.set(".e.finger", {
                            x: 100,
                            y: -20
                        })
                    },
                    onStartProgress() {
                        C.p8.to(".e.finger", {
                            x: 370,
                            y: 140,
                            duration: .5
                        })
                    },
                    onStopProgress() {
                        C.p8.to(".e.finger", {
                            x: 100,
                            y: -20,
                            duration: .5
                        })
                    }
                }),
                km = He.extend({
                    imageManifest: {
                        watermelon: Promise.resolve().then(s.t.bind(s, 88591, 17)),
                        kiss1: Promise.resolve().then(s.t.bind(s, 11053, 17)),
                        kiss2: Promise.resolve().then(s.t.bind(s, 2125, 17)),
                        kiss3: Promise.resolve().then(s.t.bind(s, 10736, 17)),
                        frenchKiss1: Promise.resolve().then(s.t.bind(s, 61501, 17)),
                        frenchKiss2: Promise.resolve().then(s.t.bind(s, 78692, 17)),
                        frenchKiss3: Promise.resolve().then(s.t.bind(s, 99697, 17)),
                        frenchKiss4: Promise.resolve().then(s.t.bind(s, 15809, 17)),
                        frenchKiss5: Promise.resolve().then(s.t.bind(s, 51036, 17)),
                        frenchKiss6: Promise.resolve().then(s.t.bind(s, 98972, 17)),
                        frenchKiss7: Promise.resolve().then(s.t.bind(s, 67366, 17)),
                        frenchKiss8: Promise.resolve().then(s.t.bind(s, 69099, 17)),
                        frenchKiss9: Promise.resolve().then(s.t.bind(s, 95281, 17)),
                        frenchKiss10: Promise.resolve().then(s.t.bind(s, 30641, 17)),
                        frenchKiss11: Promise.resolve().then(s.t.bind(s, 11588, 17)),
                        heart: Promise.resolve().then(s.t.bind(s, 39228, 17))
                    }
                }),
                Pm = km.extend({
                    elements: [{
                        class: "kissing-container",
                        type: "container",
                        children: [{
                            class: "watermelon",
                            type: "img",
                            pos: [0, 0],
                            key: "watermelon"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".watermelon", {
                            scale: .4,
                            duration: 0
                        }, 0).to(".watermelon", {
                            scale: 1,
                            duration: 1.5,
                            ease: "back.out(2)"
                        }, 0).to(".watermelon", {
                            duration: 2,
                            ease: "linear"
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                wm = km.extend({
                    elements: [{
                        class: "kissing-container",
                        type: "container",
                        children: [{
                            class: "watermelon",
                            type: "img",
                            pos: [0, 0],
                            key: "watermelon"
                        }, {
                            class: "heart",
                            type: "img",
                            pos: [0, 0],
                            key: "heart"
                        }]
                    }],
                    stepDuration: 2,
                    initializeTimeline() {
                        Ye.addParticleEmitter({
                            container: "kissing-container",
                            numberOfParticles: 60,
                            autoplay: !1,
                            restartOnProgress: !0,
                            image: "heart",
                            settings: {
                                fullThrottle: !0,
                                randomAngleRange: 25,
                                minSize: 100,
                                maxSize: 500,
                                force: 2,
                                gravity: -1,
                                boundaries: {
                                    top: 250,
                                    bottom: 500,
                                    left: 100,
                                    right: 600
                                }
                            }
                        }, this)
                    }
                }),
                Tm = km.extend({
                    elements: [{
                        class: "kissing-container",
                        type: "container",
                        children: [{
                            class: "watermelon",
                            type: "img",
                            pos: [0, 0],
                            key: "watermelon"
                        }, {
                            class: "kiss1",
                            type: "img",
                            pos: [0, 0],
                            key: "kiss1"
                        }, {
                            class: "kiss2",
                            type: "img",
                            pos: [0, 0],
                            key: "kiss2"
                        }, {
                            class: "kiss3",
                            type: "img",
                            pos: [-10, -20],
                            key: "kiss3"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.set(".e.kiss1", {
                            opacity: 0,
                            scale: 1.2
                        }), C.p8.set(".e.kiss2", {
                            opacity: 0,
                            scale: 1.2
                        }), C.p8.set(".e.kiss3", {
                            opacity: 0,
                            scale: 1.2
                        });
                        const e = C.p8.timeline().to(".kissing-container", {
                            repeat: 1,
                            yoyo: !0,
                            scale: .9,
                            ease: "linear",
                            duration: .2
                        }, 0).to(".e.kiss1", {
                            opacity: 1,
                            scale: 1,
                            ease: "elastic.inOut"
                        }, 0).to(".kissing-container", {
                            repeat: 1,
                            yoyo: !0,
                            scale: .9,
                            ease: "linear",
                            duration: .2
                        }, 1).to(".e.kiss2", {
                            opacity: 1,
                            scale: 1,
                            ease: "elastic.inOut"
                        }, 1).to(".kissing-container", {
                            repeat: 1,
                            yoyo: !0,
                            scale: .9,
                            ease: "linear",
                            duration: .2
                        }, 2).to(".e.kiss3", {
                            opacity: 1,
                            scale: 1,
                            ease: "elastic.inOut"
                        }, 2);
                        this.timeline.add(e)
                    }
                }),
                Sm = km.extend({
                    elements: [{
                        class: "kissing-container",
                        type: "container",
                        children: [{
                            class: "watermelon",
                            type: "img",
                            pos: [0, 0],
                            key: "watermelon"
                        }, {
                            class: "frenchKiss",
                            type: "img",
                            pos: [-60, 0],
                            key: "frenchKiss1"
                        }, {
                            class: "frenchKiss",
                            type: "img",
                            pos: [-60, 0],
                            key: "frenchKiss2"
                        }, {
                            class: "frenchKiss",
                            type: "img",
                            pos: [-60, 0],
                            key: "frenchKiss3"
                        }, {
                            class: "frenchKiss",
                            type: "img",
                            pos: [-60, 0],
                            key: "frenchKiss4"
                        }, {
                            class: "frenchKiss",
                            type: "img",
                            pos: [-60, 0],
                            key: "frenchKiss5"
                        }, {
                            class: "frenchKiss",
                            type: "img",
                            pos: [-60, 0],
                            key: "frenchKiss6"
                        }, {
                            class: "frenchKiss",
                            type: "img",
                            pos: [-60, 0],
                            key: "frenchKiss7"
                        }, {
                            class: "frenchKiss",
                            type: "img",
                            pos: [-60, 0],
                            key: "frenchKiss8"
                        }, {
                            class: "frenchKiss",
                            type: "img",
                            pos: [-60, 0],
                            key: "frenchKiss9"
                        }, {
                            class: "frenchKiss",
                            type: "img",
                            pos: [-60, 0],
                            key: "frenchKiss10"
                        }, {
                            class: "frenchKiss",
                            type: "img",
                            pos: [-60, 0],
                            key: "frenchKiss11"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        const e = C.p8.timeline();
                        C.p8.set(".e.frenchKiss", {
                            opacity: 0,
                            scale: 1.2
                        });
                        for (let t = 0; t < 12; t++) e.to(`.e.frenchKiss:nth-child(${t+1})`, {
                            opacity: 1,
                            scale: 1,
                            ease: "elastic.inOut"
                        }, t / 4);
                        this.timeline.add(e)
                    }
                }),
                Mm = He.extend({
                    imageManifest: {
                        bobby: Promise.resolve().then(s.t.bind(s, 73765, 17))
                    }
                }).extend({
                    elements: Ye.elementsFromImages("bobby"),
                    onLoadComplete() {
                        C.p8.set(".e.bobby", {
                            scale: .7
                        }), Ye.addInfiniteWiggle("bobby")
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bobby", {
                            scale: 1.2,
                            ease: "power1.in"
                        })
                    }
                }),
                Cm = He.extend({
                    imageManifest: {
                        towel: Promise.resolve().then(s.t.bind(s, 8035, 17)),
                        weight: Promise.resolve().then(s.t.bind(s, 82953, 17))
                    }
                }),
                Dm = Cm.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages(["weight", null, [250, 0]]),
                    initializeTimeline() {
                        this.timeline.to(".e.weight", {
                            y: -400,
                            duration: 1,
                            ease: "Power2.inOut"
                        }).to(".e.weight", {
                            y: -100,
                            duration: 2
                        })
                    }
                }),
                Fm = Cm.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages(["weight", null, [150, 0]]),
                    initializeTimeline() {
                        this.timeline.to(".e.weight", {
                            y: -300,
                            duration: 1,
                            ease: "Power2.inOut"
                        }).to(".e.weight", {
                            y: 0,
                            duration: 2
                        })
                    }
                }),
                zm = Cm.extend({
                    stepDuration: 2.5,
                    elements: Ye.elementsFromImages(["weight", null, [150, 0]]),
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            yoyo: !0,
                            repeat: 8,
                            ease: "none"
                        }).to(".e.weight", {
                            x: -15,
                            duration: .25
                        }).to(".e.weight", {
                            x: 15,
                            duration: .2
                        });
                        this.timeline.to(".e.weight", {
                            y: -300,
                            duration: 4,
                            ease: "Power2.inOut"
                        }).to(".e.weight", {
                            y: 0,
                            duration: .01
                        }), this.timeline.add(e, 0)
                    }
                }),
                Lm = Cm.extend({
                    elements: Ye.elementsFromImages("towel")
                }),
                Rm = He.extend({
                    imageManifest: {
                        shades: Promise.resolve().then(s.t.bind(s, 63522, 17)),
                        Teen0: Promise.resolve().then(s.t.bind(s, 38151, 17)),
                        Teen0v2: Promise.resolve().then(s.t.bind(s, 73456, 17)),
                        Teen0v3: Promise.resolve().then(s.t.bind(s, 6054, 17)),
                        Teen1: Promise.resolve().then(s.t.bind(s, 81993, 17)),
                        Teen1v2: Promise.resolve().then(s.t.bind(s, 21664, 17)),
                        Teen1v3: Promise.resolve().then(s.t.bind(s, 71738, 17)),
                        Teen2: Promise.resolve().then(s.t.bind(s, 15578, 17)),
                        Teen2v2: Promise.resolve().then(s.t.bind(s, 8282, 17)),
                        Teen2v3: Promise.resolve().then(s.t.bind(s, 70105, 17))
                    }
                }),
                Im = Rm.extend({
                    elements() {
                        return [{
                            class: "player",
                            type: "img",
                            pos: [0, 0],
                            key: this.model.get("playerInfo").avatar
                        }, {
                            class: "shades",
                            type: "img",
                            pos: [-400, 0],
                            key: "shades"
                        }]
                    },
                    onLoadComplete() {
                        C.p8.set(".e.shades", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.shades", {
                            opacity: 1,
                            duration: .25
                        }).to(".e.shades", {
                            y: 400,
                            ease: "none"
                        }, "<").add((() => {
                            this.model.setUpdate({
                                infoText: "TAP AND HOLD"
                            })
                        })).add((() => {
                            this.model.setUpdate({
                                infoText: "DEAL WITH IT"
                            })
                        })).to(".e.shades", {
                            y: 400
                        })
                    }
                }),
                Om = Rm.extend({
                    elements() {
                        return [{
                            class: "player-container",
                            type: "container",
                            children: [{
                                class: "player",
                                type: "img",
                                pos: [0, 0],
                                key: this.model.get("playerInfo").avatar
                            }, {
                                class: "shades",
                                type: "img",
                                pos: [0, 0],
                                key: "shades"
                            }]
                        }]
                    },
                    onStartProgress() {
                        C.p8.to(".e.player-container", {
                            scale: .9,
                            duration: .25
                        })
                    },
                    onStopProgress() {
                        C.p8.to(".e.player-container", {
                            scale: 1,
                            duration: .25
                        })
                    }
                }),
                Bm = He.extend({
                    imageManifest: {
                        armPit: Promise.resolve().then(s.t.bind(s, 23019, 17)),
                        deodorant: Promise.resolve().then(s.t.bind(s, 20355, 17)),
                        nose: Promise.resolve().then(s.t.bind(s, 79216, 17))
                    }
                }),
                Ym = Bm.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "armPit",
                        type: "img",
                        pos: [0, 0],
                        key: "armPit"
                    }],
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("armPit", .5))
                    }
                }),
                Am = Bm.extend({
                    elements: [{
                        class: "armPit",
                        type: "img",
                        pos: [0, 0],
                        key: "armPit"
                    }, {
                        class: "deodorant",
                        type: "img",
                        pos: [0, 0],
                        key: "deodorant"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.deodorant", {
                            scale: .7,
                            y: 100
                        });
                        const e = C.p8.timeline().to(".e.deodorant", {
                            scale: .4,
                            x: -80,
                            y: 300
                        }, 0).to(".e.deodorant", {
                            rotate: 25
                        }, .5).to(".e.deodorant", {
                            rotate: -25
                        }, 1).to(".e.deodorant", {
                            rotate: 25
                        }, 1.5).to(".e.deodorant", {
                            rotate: -25
                        }, 2).to(".e.deodorant", {
                            rotate: 25
                        }, 2.5).to(".e.deodorant", {
                            rotate: -25
                        }, 3);
                        this.timeline.add(e)
                    }
                }),
                Hm = Bm.extend({
                    elements: [{
                        class: "nose",
                        type: "img",
                        pos: [0, 0],
                        key: "nose"
                    }],
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.nose", {
                            scaleX: 1.1,
                            scaleY: .9,
                            ease: "power3.inOut"
                        }, 0).to(".e.nose", {
                            scaleX: .9,
                            scaleY: 1.1,
                            ease: "back.inOut"
                        }, .5).to(".e.nose", {
                            scale: 1,
                            ease: "back.inOut"
                        }, 1);
                        this.timeline.add(e)
                    }
                }),
                Gm = He.extend({
                    imageManifest: {
                        bang: Promise.resolve().then(s.t.bind(s, 12887, 17)),
                        fixed: Promise.resolve().then(s.t.bind(s, 53917, 17)),
                        rewire: Promise.resolve().then(s.t.bind(s, 55341, 17)),
                        torch: Promise.resolve().then(s.t.bind(s, 98950, 17)),
                        wires: Promise.resolve().then(s.t.bind(s, 50249, 17))
                    }
                }),
                Vm = Gm.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("bang"),
                    onDiscreteProgress() {
                        C.p8.set(".e.bang", {
                            rotate: 30,
                            scale: .6
                        }), C.p8.to(".e.bang", {
                            rotate: 0,
                            scale: 1
                        })
                    }
                }),
                Em = Gm.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("bang", "wires", "rewire"),
                    onLoadComplete() {
                        C.p8.set(".e.rewire", {
                            opacity: 0,
                            x: -50,
                            y: -50
                        }), C.p8.set(".e.wires", {
                            y: 125,
                            x: 60,
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.bang", {
                            rotate: 300,
                            opacity: 0
                        }).to(".e.wires", {
                            rotate: 360,
                            opacity: 1
                        }, "<").to(".e.rewire", {
                            opacity: 1
                        })
                    }
                }),
                qm = Gm.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("wires", "rewire"),
                    onLoadComplete() {
                        C.p8.set(".e.rewire", {
                            x: -50,
                            y: -50
                        }), C.p8.set(".e.wires", {
                            x: 60,
                            y: 125
                        })
                    },
                    onDiscreteProgress(e) {
                        Ye.scaleBounce("wires"), Ye.scaleBounce("rewire");
                        const t = 1 - e / 100;
                        C.p8.to(".e.rewire", {
                            opacity: t
                        })
                    }
                }),
                Nm = Gm.extend({
                    elements: Ye.elementsFromImages("wires", "torch", "fixed"),
                    onLoadComplete() {
                        C.p8.set(".e.wires", {
                            x: 60,
                            y: 125
                        }), C.p8.set(".e.torch", {
                            y: 1500,
                            x: 300
                        }), C.p8.set(".e.fixed", {
                            opacity: 0,
                            scale: .7,
                            y: 60
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.wires", {
                            scale: .7
                        }).to(".e.torch", {
                            y: 30,
                            scaleY: 1.1
                        }).to(".e.torch", {
                            y: 90,
                            scaleY: 1
                        }).to(".e.torch", {
                            x: 200
                        }).to(".e.torch", {
                            x: -200,
                            rotateY: 180
                        }).to(".e.torch", {
                            y: 1500
                        }).to(".e.fixed", {
                            opacity: 1,
                            rotate: 360
                        }).to(".e.wires", {
                            opacity: 0,
                            rotate: 300
                        }, "<")
                    },
                    onStartProgress() {
                        Ye.startShake("wires", 5, 0)
                    },
                    onStopProgress() {
                        Ye.stopShake("wires")
                    }
                }),
                Xm = Gm.extend({
                    elements: Ye.elementsFromImages("fixed"),
                    onLoadComplete() {
                        C.p8.set(".e.fixed", {
                            scale: .7,
                            y: 60
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.fixed", {
                            scale: 1
                        }).to(".e.fixed", {
                            y: 0,
                            x: 200,
                            rotate: 30
                        }).to(".e.fixed", {
                            y: 60,
                            x: 0,
                            rotate: 0,
                            scale: 1.1
                        }).to(".e.fixed", {
                            y: 0,
                            x: -200,
                            rotate: -30,
                            scale: 1
                        }).to(".e.fixed", {
                            y: 60,
                            x: 0,
                            rotate: 0
                        }).to(".e.fixed", {
                            y: 60,
                            x: 0
                        }).to(".e.fixed", {
                            y: 0,
                            x: 200,
                            rotate: 30
                        }).to(".e.fixed", {
                            y: 60,
                            x: 0,
                            rotate: 0,
                            scale: 1.1
                        }).to(".e.fixed", {
                            y: 0,
                            x: -200,
                            rotate: -30,
                            scale: 1
                        }).to(".e.fixed", {
                            y: 60,
                            x: 0,
                            rotate: 0
                        }).to(".e.fixed", {
                            y: 60,
                            x: 0
                        }).to(".e.fixed", {
                            y: 0,
                            x: 200,
                            rotate: 30
                        }).to(".e.fixed", {
                            y: 60,
                            x: 0,
                            rotate: 0,
                            scale: 1.1
                        }).to(".e.fixed", {
                            y: 0,
                            x: -200,
                            rotate: -30,
                            scale: 1
                        }).to(".e.fixed", {
                            y: 60,
                            x: 0,
                            rotate: 0
                        }).to(".e.fixed", {
                            y: 60,
                            x: 0,
                            scale: 1.1
                        })
                    }
                }),
                Wm = He.extend({
                    imageManifest: {
                        barfbubbles: Promise.resolve().then(s.t.bind(s, 79593, 17)),
                        door: Promise.resolve().then(s.t.bind(s, 16249, 17)),
                        mouth: Promise.resolve().then(s.t.bind(s, 17394, 17)),
                        toilet: Promise.resolve().then(s.t.bind(s, 89559, 17))
                    }
                }),
                Um = Wm.extend({
                    elements: [...Ye.elementsFromImages("barfbubbles"), {
                        type: "div",
                        class: "particles",
                        html: "",
                        pos: [500, -275]
                    }],
                    initializeTimeline() {
                        Ye.addParticleEmitter({
                            container: "particles",
                            image: "barfbubbles",
                            autoplay: !0,
                            numberOfParticles: 10,
                            settings: {
                                angle: -180,
                                frequency: .25,
                                minSize: 500,
                                maxSize: 750,
                                force: 1,
                                gravity: -4
                            }
                        }, this)
                    }
                }),
                $m = Wm.extend({
                    elements: Ye.elementsFromImages("mouth"),
                    onStartProgress() {
                        Ye.startHoldShake("mouth")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("mouth")
                    }
                }),
                jm = Wm.extend({
                    stepDuration: .1,
                    elements: Ye.elementsFromImages("door"),
                    onLoadComplete() {
                        C.p8.set(".e.door", {
                            scale: .1
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(C.p8.to(".e.door", {
                            scale: .25,
                            rotation: -5
                        })).add(C.p8.to(".e.door", {
                            scale: .75,
                            rotation: 5
                        })).add(C.p8.to(".e.door", {
                            scale: 1.75,
                            rotation: -5
                        })).add(C.p8.to(".e.door", {
                            scale: 3.5,
                            rotation: 0
                        }))
                    }
                }),
                Km = Wm.extend({
                    stepDuration: 1.5,
                    elements: [...Ye.elementsFromImages("toilet", "barfbubbles"), {
                        type: "div",
                        class: "particles",
                        html: "",
                        pos: [-150, 50]
                    }],
                    initializeTimeline() {
                        Ye.addParticleEmitter({
                            container: "particles",
                            image: "barfbubbles",
                            autoplay: !1,
                            numberOfParticles: 10,
                            restartOnProgress: !0,
                            settings: {
                                angle: -180,
                                minSize: 125,
                                maxSize: 250,
                                gravity: -.25
                            }
                        }, this)
                    }
                }),
                Zm = He.extend({
                    imageManifest: {
                        tapebroken: Promise.resolve().then(s.t.bind(s, 6134, 17)),
                        tapefixed: Promise.resolve().then(s.t.bind(s, 36910, 17)),
                        vcr: Promise.resolve().then(s.t.bind(s, 65138, 17))
                    }
                }),
                Jm = Zm.extend({
                    stepDuration: 0,
                    lastStepDuration: .25,
                    elements: Ye.elementsFromImages("vcr"),
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.vcr", {
                            y: 100,
                            scaleX: 1.15,
                            scaleY: .85,
                            duration: .1
                        }).to(".e.vcr", {
                            y: 0,
                            scale: 1,
                            duration: .1
                        })
                    }
                }),
                _m = Zm.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("vcr"),
                    onDiscreteProgress() {
                        C.p8.to(".e.vcr", {
                            y: -100,
                            rotation: -60,
                            duration: .5
                        })
                    }
                }),
                Qm = Zm.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("vcr", "tapebroken"),
                    onLoadComplete() {
                        C.p8.set(".e.vcr", {
                            y: -100,
                            rotation: -60
                        }), C.p8.set(".e.tapebroken", {
                            y: 100,
                            rotation: -90,
                            scale: .7,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.vcr", {
                            scaleX: .9,
                            duration: .15
                        }).to(".e.vcr", {
                            scale: 1,
                            duration: .15
                        }).to(".e.tapebroken", {
                            y: 750,
                            opacity: 1,
                            duration: .7
                        }, "<")
                    }
                }),
                eh = Zm.extend({
                    lastStepDuration: .25,
                    elements: Ye.elementsFromImages("tapefixed", "tapebroken"),
                    initializeTimeline() {
                        this.timeline.to(".e.tapebroken", {
                            opacity: 0
                        })
                    }
                }),
                th = He.extend({
                    imageManifest: {
                        trash01: Promise.resolve().then(s.t.bind(s, 47893, 17)),
                        trash02: Promise.resolve().then(s.t.bind(s, 18022, 17)),
                        trash03: Promise.resolve().then(s.t.bind(s, 61918, 17))
                    }
                }),
                sh = th.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("trash01", "trash02", "trash03"),
                    onLoadComplete() {
                        C.p8.set([".e.trash02", ".e.trash03"], {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("trash01", "trash02", .35)), this.timeline.add(Ye.squashTransition("trash02", "trash03", .35))
                    }
                }),
                ih = th.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("trash03"),
                    initializeTimeline() {
                        this.timeline.add(Ye.fallOut("trash03", .5))
                    }
                }),
                oh = He.extend({
                    imageManifest: {
                        car: Promise.resolve().then(s.t.bind(s, 75106, 17)),
                        hose: Promise.resolve().then(s.t.bind(s, 78267, 17)),
                        sponge: Promise.resolve().then(s.t.bind(s, 82621, 17)),
                        towel: Promise.resolve().then(s.t.bind(s, 70310, 17))
                    }
                }),
                nh = oh.extend({
                    elements: [...Ye.elementsFromImages("car", "hose"), {
                        type: "div",
                        class: "particles",
                        html: "",
                        pos: [-325, -425]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.hose", {
                            x: -325,
                            y: -500,
                            clipPath: "inset(65% 0 0 0)"
                        }), this.emitter = Ye.addParticleEmitter({
                            numberOfParticles: 15,
                            container: "particles",
                            autoplay: !1,
                            zIndex: 1,
                            settings: {
                                frequency: .025,
                                from: {
                                    backgroundColor: "#8cdfe8",
                                    border: "2px solid black",
                                    opacity: 1
                                },
                                to: {
                                    duration: .4,
                                    opacity: 0,
                                    ease: "power2.in"
                                },
                                minSize: 35,
                                maxSize: 55,
                                angle: 270,
                                force: 8,
                                gravity: 9.8
                            }
                        }, this)
                    },
                    onStartProgress() {
                        this.emitter.play()
                    },
                    onStopProgress() {
                        this.emitter.pause()
                    }
                }),
                ah = oh.extend({
                    elements: Ye.elementsFromImages("car", "sponge"),
                    onLoadComplete() {
                        C.p8.set(".e.sponge", {
                            y: 50,
                            scale: .75
                        })
                    },
                    initializeTimeline() {
                        Be.u.create("spongeWiggleX", {
                            wiggles: 25,
                            type: "random"
                        }), Be.u.create("spongeWiggleY", {
                            wiggles: 25,
                            type: "random"
                        });
                        const e = C.p8.timeline().to(".e.sponge", {
                            x: 400,
                            duration: 1,
                            ease: "spongeWiggleX"
                        }).to(".e.sponge", {
                            y: 150,
                            duration: 1,
                            ease: "spongeWiggleY"
                        }, 0);
                        e.name = "sponge", this.timeline.add(e)
                    }
                }),
                rh = oh.extend({
                    stepDuration: .5,
                    lastStepDuration: 1,
                    elements: Ye.elementsFromImages("car", "towel"),
                    onLoadComplete() {
                        C.p8.set(".e.towel", {
                            x: 300,
                            scale: .75,
                            rotation: 180,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.towel", {
                            duration: .25,
                            opacity: 1
                        }).to(".e.towel", {
                            x: -300,
                            ease: "power4.in"
                        }, "<").to(".e.towel", {
                            x: 300,
                            ease: "power4.in"
                        }).to(".e.towel", {
                            x: -300,
                            ease: "power4.in"
                        }).to(".e.towel", {
                            x: 300,
                            ease: "power4.in",
                            opacity: 0
                        });
                        e.name = "towel", this.timeline.add(e)
                    }
                }),
                lh = He.extend({
                    imageManifest: {
                        table: Promise.resolve().then(s.t.bind(s, 87776, 17)),
                        textbook: Promise.resolve().then(s.t.bind(s, 32059, 17)),
                        textbook1Left: Promise.resolve().then(s.t.bind(s, 51226, 17)),
                        textbook1Right: Promise.resolve().then(s.t.bind(s, 79224, 17)),
                        textbook2Left: Promise.resolve().then(s.t.bind(s, 84900, 17)),
                        textbook2Right: Promise.resolve().then(s.t.bind(s, 89626, 17)),
                        textbook3Left: Promise.resolve().then(s.t.bind(s, 88502, 17)),
                        textbook3Right: Promise.resolve().then(s.t.bind(s, 31402, 17))
                    }
                }),
                dh = lh.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("textbook1Left", "textbook1Right", "textbook2Left", "textbook2Right"),
                    initializeTimeline() {
                        C.p8.set(".e.textbook2Left, .e.textbook2Right", {
                            opacity: 0
                        }), this.timeline.to(".e.textbook1Left", {
                            rotateY: 85
                        }), this.timeline.to(".e.textbook1Right", {
                            rotateY: -85
                        }), this.timeline.set(".e.textbook1Left", {
                            opacity: 0
                        }), this.timeline.set(".e.textbook1Right", {
                            opacity: 0
                        }), this.timeline.set(".e.textbook2Left", {
                            opacity: 1,
                            rotateY: 85
                        }), this.timeline.set(".e.textbook2Right", {
                            opacity: 1,
                            rotateY: -85
                        }), this.timeline.to(".e.textbook2Left", {
                            rotateY: 0
                        }), this.timeline.to(".e.textbook2Right", {
                            rotateY: 0
                        })
                    }
                }),
                ph = lh.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("textbook2Left", "textbook2Right", "textbook3Left", "textbook3Right"),
                    initializeTimeline() {
                        C.p8.set(".e.textbook3Left, .e.textbook3Right", {
                            opacity: 0
                        }), this.timeline.to(".e.textbook2Left", {
                            rotateY: 85
                        }), this.timeline.to(".e.textbook2Right", {
                            rotateY: -85
                        }), this.timeline.set(".e.textbook2Left", {
                            opacity: 0
                        }), this.timeline.set(".e.textbook2Right", {
                            opacity: 0
                        }), this.timeline.set(".e.textbook3Left", {
                            opacity: 1,
                            rotateY: 85
                        }), this.timeline.set(".e.textbook3Right", {
                            opacity: 1,
                            rotateY: -85
                        }), this.timeline.to(".e.textbook3Left", {
                            rotateY: 0
                        }), this.timeline.to(".e.textbook3Right", {
                            rotateY: 0
                        })
                    }
                }),
                ch = lh.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("textbook2Left", "textbook2Right", "textbook3Left", "textbook3Right"),
                    initializeTimeline() {
                        C.p8.set(".e.textbook2Left, .e.textbook2Right", {
                            opacity: 0
                        }), this.timeline.to(".e.textbook3Right", {
                            rotateY: 85
                        }), this.timeline.to(".e.textbook3Left", {
                            rotateY: -85
                        }), this.timeline.set(".e.textbook3Right", {
                            opacity: 0
                        }), this.timeline.set(".e.textbook3Left", {
                            opacity: 0
                        }), this.timeline.set(".e.textbook2Right", {
                            opacity: 1,
                            rotateY: 85
                        }), this.timeline.set(".e.textbook2Left", {
                            opacity: 1,
                            rotateY: -85
                        }), this.timeline.to(".e.textbook2Right", {
                            rotateY: 0
                        }), this.timeline.to(".e.textbook2Left", {
                            rotateY: 0
                        })
                    }
                }),
                mh = lh.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("table", "textbook"),
                    initializeTimeline() {
                        C.p8.set(".e.table", {
                            rotate: -158
                        }), C.p8.set(".e.textbook", {
                            rotate: 23,
                            scale: .45,
                            y: -60
                        }), this.timeline.to(".e.table", {
                            rotate: 0,
                            ease: "bounce.out"
                        }), this.timeline.to(".e.textbook", {
                            y: -700,
                            x: 700,
                            ease: "power2.out"
                        }, "<")
                    }
                }),
                hh = He.extend({
                    imageManifest: {
                        leaf01: Promise.resolve().then(s.t.bind(s, 46163, 17)),
                        leaf02: Promise.resolve().then(s.t.bind(s, 62706, 17)),
                        leaf03: Promise.resolve().then(s.t.bind(s, 33700, 17)),
                        leafBag: Promise.resolve().then(s.t.bind(s, 32870, 17)),
                        leafExplosion: Promise.resolve().then(s.t.bind(s, 17775, 17))
                    }
                }),
                uh = hh.extend({
                    stepDuration: 1.3,
                    elements: [{
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-500, 500), (0, i.random)(-500, 500)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-500, 500), (0, i.random)(-500, 500)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-500, 500), (0, i.random)(-500, 500)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-500, 500), (0, i.random)(-500, 500)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-500, 500), (0, i.random)(-500, 500)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-500, 500), (0, i.random)(-500, 500)],
                        key: "leaf03"
                    }],
                    onDiscreteProgress() {
                        for (let e = 1; e < 7; e++) C.p8.timeline().to(`.e.leaf:nth-child(${e})`, {
                            x: (0, i.random)(-200, 500),
                            rotate: (0, i.random)(100, 500),
                            y: (0, i.random)(-100, -500),
                            opacity: 0,
                            ease: "power3.out",
                            duration: 1
                        })
                    }
                }),
                gh = hh.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [-(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf03"
                    }],
                    onDiscreteProgress() {
                        for (let e = 1; e < 10; e++) C.p8.timeline().to(`.e.leaf:nth-child(${e})`, {
                            x: (0, i.random)(-200, 500),
                            rotate: (0, i.random)(100, 500),
                            y: (0, i.random)(-100, -500),
                            opacity: 0,
                            ease: "power3.out",
                            duration: 1
                        })
                    }
                }),
                yh = hh.extend({
                    stepDuration: 1.5,
                    elements: [{
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-150, 150), (0, i.random)(-150, 150)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-150, 150), (0, i.random)(-150, 150)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-150, 150), (0, i.random)(-150, 150)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-150, 150), (0, i.random)(-150, 150)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-50, 50), (0, i.random)(-50, 50)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-50, 50), (0, i.random)(-50, 50)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-50, 50), (0, i.random)(-50, 50)],
                        key: "leaf03"
                    }, {
                        class: "leafBag",
                        type: "img",
                        key: "leafBag"
                    }],
                    initializeTimeline() {
                        C.p8.timeline().set(".e.leafBag", {
                            scale: 1.5,
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        for (let e = 1; e < 13; e++) C.p8.timeline().to(`.e.leaf:nth-child(${e})`, {
                            rotate: (0, i.random)(100, 500),
                            scale: .5,
                            opacity: 0,
                            ease: "power3.out",
                            duration: 1.5
                        });
                        C.p8.timeline().to(".e.leafBag", {
                            scale: 1,
                            opacity: 1,
                            ease: "power2.in"
                        }, 0)
                    }
                }),
                bh = He.extend({
                    imageManifest: {
                        leaf01: Promise.resolve().then(s.t.bind(s, 46163, 17)),
                        leaf02: Promise.resolve().then(s.t.bind(s, 62706, 17)),
                        leaf03: Promise.resolve().then(s.t.bind(s, 33700, 17)),
                        leafBag: Promise.resolve().then(s.t.bind(s, 32870, 17)),
                        leafExplosion: Promise.resolve().then(s.t.bind(s, 17775, 17))
                    }
                }),
                xh = bh.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-500, 500), (0, i.random)(-500, 500)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-500, 500), (0, i.random)(-500, 500)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-500, 500), (0, i.random)(-500, 500)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-500, 500), (0, i.random)(-500, 500)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-500, 500), (0, i.random)(-500, 500)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-500, 500), (0, i.random)(-500, 500)],
                        key: "leaf03"
                    }],
                    onDiscreteProgress() {
                        for (let e = 1; e < 7; e++) C.p8.timeline().to(`.e.leaf:nth-child(${e})`, {
                            x: (0, i.random)(-200, 500),
                            rotate: (0, i.random)(100, 500),
                            y: (0, i.random)(-100, -500),
                            opacity: 0,
                            ease: "power3.out",
                            duration: 1
                        })
                    }
                }),
                fh = bh.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [-(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-300, 300), (0, i.random)(-300, 300)],
                        key: "leaf03"
                    }],
                    onDiscreteProgress() {
                        for (let e = 1; e < 10; e++) C.p8.timeline().to(`.e.leaf:nth-child(${e})`, {
                            x: (0, i.random)(-200, 500),
                            rotate: (0, i.random)(100, 500),
                            y: (0, i.random)(-100, -500),
                            opacity: 0,
                            ease: "power3.out",
                            duration: 1
                        })
                    }
                }),
                vh = bh.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-150, 150), (0, i.random)(-150, 150)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-150, 150), (0, i.random)(-150, 150)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-150, 150), (0, i.random)(-150, 150)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-150, 150), (0, i.random)(-150, 150)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-50, 50), (0, i.random)(-50, 50)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-50, 50), (0, i.random)(-50, 50)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-50, 50), (0, i.random)(-50, 50)],
                        key: "leaf03"
                    }, {
                        class: "leafBag",
                        type: "img",
                        key: "leafBag"
                    }],
                    initializeTimeline() {
                        C.p8.timeline().set(".e.leafBag", {
                            scale: 1.5,
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        for (let e = 1; e < 13; e++) C.p8.timeline().to(`.e.leaf:nth-child(${e})`, {
                            rotate: (0, i.random)(100, 500),
                            scale: .6,
                            ease: "power3.out",
                            duration: 1.5
                        })
                    }
                }),
                kh = bh.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-150, 150), (0, i.random)(-150, 150)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-150, 150), (0, i.random)(-150, 150)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-150, 150), (0, i.random)(-150, 150)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-150, 150), (0, i.random)(-150, 150)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-100, 100), (0, i.random)(-100, 100)],
                        key: "leaf03"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-50, 50), (0, i.random)(-50, 50)],
                        key: "leaf01"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-50, 50), (0, i.random)(-50, 50)],
                        key: "leaf02"
                    }, {
                        class: "leaf",
                        type: "img",
                        pos: [(0, i.random)(-50, 50), (0, i.random)(-50, 50)],
                        key: "leaf03"
                    }, {
                        class: "leafExplosion",
                        type: "img",
                        key: "leafExplosion"
                    }],
                    initializeTimeline() {
                        C.p8.timeline().set(".e.leafExplosion", {
                            scale: .5,
                            opacity: 0
                        }), C.p8.timeline().set(".e.leaf", {
                            scale: .6
                        })
                    },
                    onDiscreteProgress() {
                        for (let e = 1; e < 13; e++) C.p8.timeline().to(`.e.leaf:nth-child(${e})`, {
                            rotate: (0, i.random)(100, 500),
                            scale: 1.5,
                            opacity: 0,
                            ease: "power3.out",
                            duration: .5
                        });
                        C.p8.timeline().to(".e.leafExplosion", {
                            scale: 1.5,
                            opacity: 1,
                            ease: "elastic.out",
                            duration: 1
                        }, 0)
                    }
                }),
                Ph = He.extend({
                    imageManifest: {
                        teeth: Promise.resolve().then(s.t.bind(s, 14389, 17)),
                        toothbrush: Promise.resolve().then(s.t.bind(s, 36175, 17))
                    }
                }).extend({
                    elements: Ye.elementsFromImages("teeth").concat([{
                        type: "div",
                        class: "particles",
                        html: "",
                        pos: [-20, -200]
                    }, {
                        type: "img",
                        class: "toothbrush",
                        key: "toothbrush",
                        pos: [0, 0]
                    }]),
                    initializeTimeline() {
                        this.particles = Ye.addParticleEmitter({
                            numberOfParticles: 15,
                            container: "particles",
                            autoplay: !1,
                            zIndex: 1,
                            settings: {
                                particleLimit: 2,
                                frequency: .05,
                                from: {
                                    backgroundColor: "#ffd8d8",
                                    border: "2px solid black",
                                    opacity: 1
                                },
                                to: {
                                    duration: .4,
                                    opacity: 0,
                                    ease: "power2.in"
                                },
                                minSize: 35,
                                maxSize: 55,
                                angle: 180,
                                force: 4,
                                gravity: .5,
                                randomAngle: !0
                            }
                        }, this);
                        const e = this.particles;
                        this.timeline.fromTo(".e.toothbrush", {
                            x: 400
                        }, {
                            x: 0,
                            repeat: 5,
                            yoyo: !0,
                            ease: "sine.inOut",
                            onRepeat() {
                                e.restart()
                            }
                        }), this.timeline.fromTo(".e.particles", {
                            x: 400
                        }, {
                            x: 0,
                            repeat: 5,
                            yoyo: !0,
                            ease: "sine.inOut"
                        }, "<")
                    }
                }),
                wh = Ph.extend({
                    stepDuration: .25,
                    initializeTimeline() {
                        const e = Ye.addParticleEmitter({
                            numberOfParticles: 15,
                            container: "particles",
                            autoplay: !1,
                            zIndex: 1,
                            settings: {
                                particleLimit: 2,
                                frequency: .05,
                                from: {
                                    backgroundColor: "#ff9090",
                                    border: "2px solid black",
                                    opacity: 1
                                },
                                to: {
                                    duration: .4,
                                    opacity: 0,
                                    ease: "power2.in"
                                },
                                minSize: 35,
                                maxSize: 55,
                                angle: 180,
                                force: 4,
                                gravity: .5,
                                randomAngle: !0
                            }
                        }, this);
                        this.timeline.fromTo(".e.toothbrush", {
                            x: 400
                        }, {
                            x: 0,
                            repeat: 5,
                            yoyo: !0,
                            ease: "sine.inOut",
                            onRepeat() {
                                e.restart()
                            },
                            onStart() {
                                e.restart()
                            },
                            onReverseComplete() {
                                e.restart()
                            }
                        }), this.timeline.fromTo(".e.particles", {
                            x: 400
                        }, {
                            x: 0,
                            repeat: 5,
                            yoyo: !0,
                            ease: "sine.inOut"
                        }, "<")
                    }
                }),
                Th = He.extend({
                    imageManifest: {
                        mower: Promise.resolve().then(s.t.bind(s, 29523, 17)),
                        lawn: Promise.resolve().then(s.t.bind(s, 71759, 17))
                    }
                }),
                Sh = Th.extend({
                    elements: [{
                        class: "mower-container",
                        type: "container",
                        children: [{
                            class: "mower",
                            type: "img",
                            pos: [0, 0],
                            key: "mower"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        C.p8.timeline().to(".mower", {
                            repeat: -1,
                            yoyo: !0,
                            scale: 1.02,
                            duration: .1
                        }), Ye.addParticleEmitter({
                            container: "mower-container",
                            numberOfParticles: 40,
                            zIndex: -1,
                            autoplay: !1,
                            restartOnProgress: !0,
                            settings: {
                                frequency: .05,
                                from: {
                                    backgroundColor: "#26BD5E",
                                    borderRadius: "0",
                                    borderRight: "8px solid black",
                                    borderTop: "8px solid black",
                                    height: 50
                                },
                                boundaries: {
                                    left: 425,
                                    right: 575,
                                    top: 750,
                                    bottom: 750
                                },
                                minSize: 5,
                                maxSize: 20,
                                randomAngleRange: 270,
                                force: -3,
                                gravity: 1
                            }
                        }, this)
                    }
                }),
                Mh = Th.extend({
                    elements: [{
                        class: "lawn-container",
                        type: "container",
                        children: [{
                            class: "lawn",
                            type: "img",
                            pos: [0, 0],
                            key: "lawn"
                        }]
                    }]
                }),
                Ch = Th.extend({
                    elements: [{
                        class: "mower-container",
                        type: "container",
                        children: [{
                            class: "mower",
                            type: "img",
                            pos: [0, 0],
                            key: "mower"
                        }]
                    }],
                    stepDuration: .2,
                    initializeTimeline() {
                        C.p8.timeline().to(".mower", {
                            repeat: -1,
                            yoyo: !0,
                            scale: 1.03,
                            duration: .1
                        });
                        const e = C.p8.timeline().to(".e.mower-container", {
                            scaleX: -1
                        }, 0);
                        this.timeline.add(e), Ye.addParticleEmitter({
                            container: "mower-container",
                            numberOfParticles: 40,
                            zIndex: -1,
                            settings: {
                                frequency: .05,
                                from: {
                                    backgroundColor: "#26BD5E",
                                    borderRadius: "0",
                                    borderRight: "8px solid black",
                                    borderTop: "8px solid black",
                                    height: 50
                                },
                                boundaries: {
                                    left: 425,
                                    right: 575,
                                    top: 750,
                                    bottom: 750
                                },
                                minSize: 5,
                                maxSize: 20,
                                randomAngleRange: 270,
                                force: -3,
                                gravity: 1
                            }
                        }, this)
                    }
                }),
                Dh = Th.extend({
                    elements: [{
                        class: "lawn-container",
                        type: "container",
                        children: [{
                            class: "lawn",
                            type: "img",
                            pos: [0, 0],
                            key: "lawn"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.timeline().set(".e.lawn-container", {
                            scaleX: -1
                        }, 0)
                    }
                }),
                Fh = Th.extend({
                    elements: [{
                        class: "mower-container",
                        type: "container",
                        children: [{
                            class: "mower",
                            type: "img",
                            pos: [0, 0],
                            key: "mower"
                        }]
                    }],
                    stepDuration: 1,
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".mower", {
                                repeat: -1,
                                yoyo: !0,
                                scale: 1.03,
                                duration: .1
                            }),
                            t = C.p8.timeline().to(".mower", {
                                scale: .8,
                                duration: 1,
                                ease: "elastic",
                                onComplete: () => e.pause()
                            }, 0);
                        this.timeline.add(t)
                    }
                }),
                zh = po.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 38983, 17))
                    }
                }),
                Lh = He.extend({
                    imageManifest: {
                        paper1: Promise.resolve().then(s.t.bind(s, 71544, 17)),
                        paper2: Promise.resolve().then(s.t.bind(s, 17847, 17))
                    },
                    elements: Ye.elementsFromImages("paper1", "paper2"),
                    initializeTimeline() {
                        this.timeline.to(".e.paper1", {
                            opacity: 0
                        })
                    }
                }),
                Rh = po.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 17847, 17))
                    }
                }),
                Ih = po.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 99641, 17))
                    }
                }),
                Oh = Zo.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 24884, 17))
                    }
                }),
                Bh = He.extend({
                    imageManifest: {
                        crane: Promise.resolve().then(s.t.bind(s, 11161, 17)),
                        great: Promise.resolve().then(s.t.bind(s, 13658, 17)),
                        leg1: Promise.resolve().then(s.t.bind(s, 24859, 17)),
                        leg2: Promise.resolve().then(s.t.bind(s, 10637, 17)),
                        pants: Promise.resolve().then(s.t.bind(s, 84463, 17)),
                        pull: Promise.resolve().then(s.t.bind(s, 89252, 17))
                    }
                }),
                Yh = Bh.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("pants"),
                    onLoadComplete() {
                        C.p8.set(".e.pants", {
                            x: -700,
                            rotation: 90
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.pants", {
                            x: 0,
                            duration: .25
                        })
                    }
                }),
                Ah = Bh.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("leg1"),
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.leg1", {
                            y: -50,
                            duration: .15
                        }).to(".e.leg1", {
                            rotation: -75,
                            duration: .25
                        }, "<").to(".e.leg1", {
                            y: 75,
                            duration: .15
                        }, "<0.1").to(".e.leg1", {
                            y: 50,
                            duration: .15
                        })
                    }
                }),
                Hh = Bh.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("leg2"),
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.leg2", {
                            y: -50,
                            duration: .15
                        }).to(".e.leg2", {
                            rotation: -75,
                            duration: .25
                        }, "<").to(".e.leg2", {
                            y: 75,
                            duration: .15
                        }, "<0.1").to(".e.leg2", {
                            y: 50,
                            duration: .15
                        })
                    }
                }),
                Gh = Bh.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("pull"),
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.pull", {
                            y: -25,
                            duration: .1
                        }).to(".e.pull", {
                            y: 25,
                            duration: .1
                        })
                    }
                }),
                Vh = Bh.extend({
                    elements: Ye.elementsFromImages("crane")
                }),
                Eh = Bh.extend({
                    elements: Ye.elementsFromImages("great"),
                    onStartProgress() {
                        Ye.startHoldShake("great")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("great")
                    }
                }),
                qh = He.extend({
                    imageManifest: {
                        jar: Promise.resolve().then(s.t.bind(s, 79089, 17)),
                        lid: Promise.resolve().then(s.t.bind(s, 82865, 17)),
                        cookie: Promise.resolve().then(s.t.bind(s, 67351, 17))
                    }
                }),
                Nh = qh.extend({
                    stepDuration: .75,
                    elements: [{
                        class: "jar-container",
                        type: "container",
                        children: [{
                            class: "jar",
                            type: "img",
                            pos: [0, 0],
                            key: "jar"
                        }, {
                            class: "lid",
                            type: "img",
                            pos: [100, 0],
                            key: "lid"
                        }]
                    }],
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.lid", {
                            x: 30,
                            y: -80,
                            rotation: 7
                        });
                        e.name = "lid", this.timeline.add(e)
                    }
                }),
                Xh = qh.extend({
                    stepDuration: .75,
                    elements: [{
                        class: "cookie-container",
                        type: "container",
                        children: [{
                            class: "cookie-0",
                            type: "img",
                            pos: [0, 0],
                            key: "cookie"
                        }, {
                            class: "cookie-1",
                            type: "img",
                            pos: [0, 0],
                            key: "cookie"
                        }, {
                            class: "cookie-2",
                            type: "img",
                            pos: [0, 0],
                            key: "cookie"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.cookie-0", {
                            y: 800,
                            opacity: 0
                        }), C.p8.set(".e.cookie-1", {
                            y: 800,
                            rotation: 250,
                            opacity: 0
                        }), C.p8.set(".e.cookie-2", {
                            y: 800,
                            rotation: 90,
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.cookie-0", {
                            x: -200,
                            y: 0,
                            opacity: 1
                        }).to(".e.cookie-1", {
                            x: 0,
                            y: 0,
                            opacity: 1
                        }).to(".e.cookie-2", {
                            x: 200,
                            y: 0,
                            opacity: 1
                        });
                        e.name = "cookies", this.timeline.add(e)
                    }
                }),
                Wh = qh.extend({
                    stepDuration: .75,
                    elements: [{
                        class: "jar-container",
                        type: "container",
                        children: [{
                            class: "jar",
                            type: "img",
                            pos: [0, 0],
                            key: "jar"
                        }, {
                            class: "lid",
                            type: "img",
                            pos: [-100, 50],
                            key: "lid"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.lid", {
                            rotation: 30
                        }), C.p8.set(".e.ladybug", {
                            rotation: (0, i.random)(-90, 90)
                        }), C.p8.set(".e.ant", {
                            rotation: (0, i.random)(-90, 90)
                        });
                        const e = C.p8.timeline().to(".e.lid", {
                            x: -50,
                            y: 200,
                            rotation: 0
                        });
                        e.name = "lid", this.timeline.add(e)
                    }
                }),
                Uh = He.extend({
                    imageManifest: {
                        wall: Promise.resolve().then(s.t.bind(s, 76345, 17)),
                        draw: Promise.resolve().then(s.t.bind(s, 14615, 17)),
                        run: Promise.resolve().then(s.t.bind(s, 8459, 17)),
                        smear1: Promise.resolve().then(s.t.bind(s, 62853, 17)),
                        smear2: Promise.resolve().then(s.t.bind(s, 24953, 17))
                    }
                }),
                $h = Uh.extend({
                    elements: Ye.elementsFromImages("wall", "draw"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.draw", {
                            clipPath: "inset(0px 0px 650px 0px)"
                        }, {
                            clipPath: "inset(0px 0px 200px 0px)"
                        })
                    }
                }),
                jh = Uh.extend({
                    elements: Ye.elementsFromImages("smear1", "draw"),
                    initializeTimeline() {
                        this.timeline.to(".e.draw", {
                            opacity: 0
                        })
                    }
                }),
                Kh = Uh.extend({
                    elements: Ye.elementsFromImages("smear2", "smear1"),
                    initializeTimeline() {
                        this.timeline.to(".e.smear1", {
                            opacity: 0
                        })
                    }
                }),
                Zh = Uh.extend({
                    stepDuration: .2,
                    elements: Ye.elementsFromImages("run"),
                    onLoadComplete() {
                        C.p8.set(".e.run", {
                            x: -400
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.run", {
                            x: 400,
                            scale: .5
                        })
                    }
                }),
                Jh = He.extend({
                    imageManifest: {
                        creekSun: Promise.resolve().then(s.t.bind(s, 24342, 17)),
                        rope1: Promise.resolve().then(s.t.bind(s, 79950, 17)),
                        rope2: Promise.resolve().then(s.t.bind(s, 36439, 17)),
                        rope3: Promise.resolve().then(s.t.bind(s, 96755, 17))
                    }
                }),
                _h = Jh.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("rope1"),
                    onDiscreteProgress() {
                        Ye.squashOnce("rope1", .2)
                    }
                }),
                Qh = Jh.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("rope1", "rope3"),
                    onLoadComplete() {
                        C.p8.set(".e.rope3", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("rope1", "rope3", .25)
                    }
                }),
                eu = Jh.extend({
                    hasStarted: !1,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("rope3", "rope2")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.rope3", {
                            visibility: "hidden"
                        }), C.p8.set(".e.rope2", {
                            visibility: "visible"
                        }), C.p8.timeline({
                            repeat: -1
                        }).to(".e.rope2", {
                            visibility: "hidden",
                            duration: 1.5
                        }).to(".e.rope3", {
                            visibility: "visible",
                            duration: 1.5
                        }, "<").to(".e.rope3", {
                            visibility: "hidden",
                            duration: 1.5
                        }).to(".e.rope2", {
                            visibility: "visible",
                            duration: 1.5
                        }, "<")
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                tu = Jh.extend({
                    elements: Ye.elementsFromImages("creekSun")
                }),
                su = He.extend({
                    imageManifest: {
                        noGoosebumps: Promise.resolve().then(s.t.bind(s, 76482, 17)),
                        goosebumps: Promise.resolve().then(s.t.bind(s, 78260, 17)),
                        tv: Promise.resolve().then(s.t.bind(s, 48501, 17)),
                        guy: Promise.resolve().then(s.t.bind(s, 57243, 17)),
                        pillow: Promise.resolve().then(s.t.bind(s, 260, 17))
                    }
                }),
                iu = su.extend({
                    stepDuration: .25,
                    lastStepDuration: .5,
                    elements: [{
                        class: "gray",
                        type: "div",
                        pos: [380, 115],
                        html: ""
                    }, {
                        class: "red",
                        type: "div",
                        pos: [380, 115],
                        html: ""
                    }, {
                        class: "guy",
                        type: "img",
                        pos: [408, 160],
                        key: "guy"
                    }, {
                        class: "tv",
                        type: "img",
                        key: "tv"
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.guy", {
                            scaleY: .5,
                            opacity: 0,
                            transformOrigin: "bottom center"
                        }), C.p8.set(".e.gray", {
                            width: 520,
                            height: 472,
                            backgroundColor: "#111"
                        }), C.p8.set(".e.red", {
                            width: 520,
                            height: 472,
                            scale: .05,
                            borderRadius: 250,
                            opacity: 0,
                            backgroundColor: "#522630"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.red", {
                            opacity: 1
                        }).to(".e.red", {
                            scale: 1,
                            borderRadius: 0
                        }).to(".e.guy", {
                            scaleY: 1,
                            opacity: 1
                        })
                    }
                }),
                ou = su.extend({
                    elements: Ye.elementsFromImages("pillow"),
                    initializeTimeline() {
                        this.timeline.to(".e.pillow", {
                            scaleX: .85,
                            ease: "bounce.in"
                        }).to(".e.pillow", {
                            scaleX: .7,
                            ease: "bounce.in"
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("pillow")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("pillow")
                    }
                }),
                nu = su.extend({
                    elements: Ye.elementsFromImages("noGoosebumps", "goosebumps"),
                    initializeTimeline() {
                        this.timeline.to(".e.goosebumps", {
                            opacity: 0
                        })
                    }
                }),
                au = He.extend({
                    imageManifest: {
                        question: Promise.resolve().then(s.t.bind(s, 80064, 17)),
                        steps: Promise.resolve().then(s.t.bind(s, 91665, 17)),
                        tug: Promise.resolve().then(s.t.bind(s, 60793, 17))
                    }
                }),
                ru = au.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("tug"),
                    onLoadComplete() {
                        C.p8.set(".e.tug", {
                            transformOrigin: "top center"
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.tug", {
                            scaleY: 1.1,
                            duration: .2,
                            ease: "back.in(1.5)"
                        }).to(".e.tug", {
                            scaleY: 1,
                            duration: .15
                        })
                    }
                }),
                lu = au.extend({
                    elements: Ye.elementsFromImages("question")
                }),
                du = au.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("steps"),
                    onLoadComplete() {
                        C.p8.set(".e.steps", {
                            clipPath: "inset(70% 0% 0% 0%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.steps", {
                            clipPath: "inset(50% 0% 0% 0%)"
                        }).to(".e.steps", {
                            clipPath: "inset(28% 0% 0% 0%)"
                        }).to(".e.steps", {
                            clipPath: "inset(17% 0% 0% 0%)"
                        }).to(".e.steps", {
                            clipPath: "inset(5% 0% 0% 0%)"
                        })
                    }
                }),
                pu = He.extend({
                    imageManifest: {
                        cat: Promise.resolve().then(s.t.bind(s, 5724, 17)),
                        catSink: Promise.resolve().then(s.t.bind(s, 91653, 17)),
                        sink: Promise.resolve().then(s.t.bind(s, 76840, 17))
                    }
                }),
                cu = pu.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("catSink", ["cat", null, [0, -180]]),
                    initializeTimeline() {
                        this.timeline.to(".e.cat, .e.catSink", {
                            x: 180
                        }).to(".e.catSink", {
                            opacity: 0
                        }, 0)
                    }
                }),
                mu = pu.extend({
                    elements: Ye.elementsFromImages("cat"),
                    onStartProgress() {
                        Ye.startHoldShake("cat")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("cat")
                    }
                }),
                hu = pu.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("cat"),
                    onDiscreteProgress() {
                        Ye.squashOnce("cat", .35)
                    }
                }),
                uu = pu.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("cat"),
                    initializeTimeline() {
                        this.timeline.to(".e.cat", {
                            scaleY: 1.3,
                            duration: 1,
                            ease: "elastic.out(1.2, 0.5)"
                        }).to(".e.cat", {
                            scaleY: 1,
                            duration: .1
                        })
                    }
                }),
                gu = pu.extend({
                    elements: Ye.elementsFromImages("sink"),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("sink")), this.timeline.add(Ye.squashOnce("sink")), this.timeline.add(Ye.squashOnce("sink"))
                    }
                }),
                yu = He.extend({
                    imageManifest: {
                        pants: Promise.resolve().then(s.t.bind(s, 52046, 17))
                    }
                }).extend({
                    className: "poop",
                    elements: [{
                        class: "c",
                        type: "container",
                        children: [{
                            class: "text-0",
                            type: "div",
                            pos: [400, 1200],
                            html: "LOOK AWAY"
                        }, {
                            class: "text-1",
                            type: "div",
                            pos: [300, 2200],
                            html: "NO ONE WANTS<br/>TO SEE THIS"
                        }, {
                            class: "pants",
                            type: "img",
                            key: "pants"
                        }]
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            x: -1e3
                        }).to(".e.c", {
                            x: -2e3
                        }, 2).fillTime(2.5)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("text-0"), Ye.startHoldShake("text-1")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("pants"), Ye.stopHoldShake("pants")
                    }
                }),
                bu = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 22315, 17)),
                        bee: Promise.resolve().then(s.t.bind(s, 70441, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                bird: [0, 0, 443, 585, 380, 30],
                                heart: [0, 585, 160, 154, 290, 350]
                            }
                        }
                    }
                }),
                xu = bu.extend({
                    elements: Ye.elementsFromSprite("sprite", ["bird"]),
                    onStartProgress() {
                        Ye.startHoldShake("bird")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("bird")
                    }
                }),
                fu = bu.extend({
                    elements: [...Ye.elementsFromSprite("sprite", ["bird"]), ...Ye.elementsFromImages("bee")],
                    onLoadComplete() {
                        C.p8.set(".e.bee", {
                            x: 700,
                            y: -50,
                            opacity: 0,
                            scale: .7
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bee", {
                            x: 466,
                            y: 150
                        }).to(".e.bee", {
                            scale: 1,
                            duration: .5
                        }, 0).to(".e.bee", {
                            opacity: 1,
                            duration: .25
                        }, 0).fillTime(.25)
                    }
                }),
                vu = bu.extend({
                    stepDuration: .4,
                    elements: [...Ye.elementsFromSprite("sprite", ["bird", "heart"]), ...Ye.elementsFromImages("bee")],
                    onLoadComplete() {
                        C.p8.set(".e.bee", {
                            x: 466,
                            y: 150,
                            transformOrigin: "left center"
                        }), C.p8.set(".e.bird", {
                            transformOrigin: "right center"
                        }), C.p8.set(".e.heart", {
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().set(".e.heart", {
                            x: 0,
                            y: 0,
                            opacity: 0
                        }).to(".e.heart", {
                            x: -10,
                            y: -20,
                            opacity: 1,
                            duration: .1,
                            ease: "none"
                        }, .1).to(".e.heart", {
                            x: -40,
                            y: -80,
                            opacity: 0,
                            duration: .3,
                            ease: "none"
                        }), C.p8.timeline().to(".e.bee", {
                            x: 441,
                            y: 175,
                            scaleX: .9,
                            duration: .1,
                            ease: "none"
                        }).fillTime(.3).to(".e.bee", {
                            x: 466,
                            y: 150,
                            scaleX: 1,
                            duration: .2,
                            ease: "none"
                        }), C.p8.timeline().to(".e.bird", {
                            x: 25,
                            y: 15,
                            scaleX: .9,
                            duration: .1,
                            ease: "none"
                        }).fillTime(.3).to(".e.bird", {
                            x: 0,
                            y: 0,
                            scaleX: 1,
                            duration: .2,
                            ease: "none"
                        })
                    }
                }),
                ku = vu,
                Pu = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 43987, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                tree: [1020, 10, 462, 1120, -520, 200],
                                owl: [10, 754, 91, 125, 217, 373],
                                hole: [99, 755, 94, 129, 216, 369],
                                bg: [10, 10, 1e3, 740, -140, -120]
                            }
                        }
                    },
                    elements: [{
                        class: "c",
                        type: "container",
                        pos: [200, 100],
                        children: Ye.elementsFromSprite("sprite", ["bg", "hole", "owl", "tree"])
                    }, {
                        class: "vignette",
                        type: "div",
                        pos: [200, 100]
                    }],
                    setupContainer() {
                        C.p8.set(".e.c", {
                            width: 800,
                            height: 600,
                            overflow: "hidden"
                        }), C.p8.set(".e.vignette", {
                            width: 800,
                            height: 600
                        })
                    }
                }),
                wu = Pu.extend({
                    stepDuration: .45,
                    onLoadComplete() {
                        this.setupContainer(), C.p8.fromTo(".e.owl", {
                            y: 150
                        }, {
                            y: 0,
                            duration: .3
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bg", {
                            y: 45,
                            ease: "back.out(2)"
                        }).to(".e.tree, .e.owl, .e.hole", {
                            y: 175,
                            ease: "back.out(2)"
                        }, 0)
                    }
                }),
                Tu = Pu.extend({
                    stepDuration: .45,
                    onLoadComplete() {
                        this.setupContainer(), C.p8.set(".e.bg", {
                            y: 45
                        }), C.p8.set(".e.tree, .e.owl, .e.hole", {
                            y: 175
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bg", {
                            y: 90,
                            ease: "back.inOut(2)"
                        }).to(".e.tree, .e.owl, .e.hole", {
                            y: 350,
                            ease: "back.inOut(2)"
                        }, 0)
                    }
                }),
                Su = Pu.extend({
                    stepDuration: .45,
                    onLoadComplete() {
                        this.setupContainer(), C.p8.set(".e.bg", {
                            y: 90
                        }), C.p8.set(".e.tree, .e.owl, .e.hole", {
                            y: 350
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bg", {
                            y: 140,
                            ease: "back.in(2)"
                        }).to(".e.tree, .e.owl, .e.hole", {
                            y: 510,
                            ease: "back.in(2)"
                        }, 0)
                    }
                }),
                Mu = Pu.extend({
                    onLoadComplete() {
                        this.setupContainer(), C.p8.set(".e.bg", {
                            y: 140
                        }), C.p8.set(".e.tree, .e.owl, .e.hole", {
                            y: 510
                        }), Ye.startShake("c", 8, 0, 5)
                    }
                }),
                Cu = He.extend({
                    imageManifest: {
                        volcano: Promise.resolve().then(s.t.bind(s, 65351, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "volcano",
                            images: {
                                skull: [1218, 10, 245, 412, 294, 377],
                                volcano: [10, 10, 594, 856, 22, 203],
                                chair: [614, 10, 594, 696, 182, 203],
                                lava: [614, 716, 664, 373, 624, 168]
                            }
                        }
                    }
                }),
                Du = Cu.extend({
                    elements: Ye.elementsFromSprite("sprite", ["chair", "volcano"]),
                    onLoadComplete() {
                        C.p8.set(".e.volcano", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.volcano", {
                            opacity: 1,
                            duration: 1
                        }).to(".e.chair", {
                            opacity: 0,
                            duration: .2
                        }, .8)
                    }
                }),
                Fu = Cu.extend({
                    stepDuration: .4,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["lava", "lava0"],
                        ["lava", "lava1"], "chair"
                    ]),
                    onLoadComplete() {
                        C.p8.fromTo(".e.lava0", {
                            x: -300,
                            scale: .4
                        }, {
                            scale: 1,
                            duration: .5
                        }), C.p8.fromTo(".e.lava1", {
                            x: 300,
                            scale: .4
                        }, {
                            scale: 1,
                            duration: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("chair"), .4)
                    }
                }),
                zu = Cu.extend({
                    stepDuration: .4,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["lava", "lava0"],
                            ["lava", "lava1"],
                            ["chair", "chair0"],
                            ["chair", "chair1"]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.lava0", {
                            x: -300
                        }), C.p8.set(".e.lava1", {
                            x: 300
                        }), C.p8.set(".e.chair1", {
                            x: 700,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            x: -700,
                            ease: "back.out(2)"
                        }).to(".e.chair1", {
                            opacity: 1,
                            duration: .5
                        }, 0)
                    }
                }),
                Lu = zu.extend({
                    onLoadComplete() {
                        C.p8.set(".e.lava0", {
                            x: -300
                        }), C.p8.set(".e.lava1", {
                            x: 300
                        }), C.p8.set(".e.chair1", {
                            x: 700
                        }), C.p8.set(".e.c", {
                            x: -700
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            x: 0,
                            ease: "back.out(2)"
                        })
                    }
                }),
                Ru = Cu.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["lava", "lava0"],
                            ["lava", "lava1"],
                            ["chair", "chair0"],
                            ["chair", "chair1"], "skull"
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.lava0", {
                            x: -300
                        }), C.p8.set(".e.lava1", {
                            x: 300
                        }), C.p8.set(".e.chair1", {
                            x: 700
                        }), C.p8.set(".e.skull", {
                            y: 150,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.chair0, .e.chair1", {
                            y: -100,
                            scale: .6,
                            opacity: 0,
                            duration: .5
                        }, 0).to(".e.skull", {
                            y: 0,
                            opacity: 1,
                            duration: 1
                        }, 0)
                    }
                }),
                Iu = He.extend({
                    imageManifest: {
                        diary: Promise.resolve().then(s.t.bind(s, 4539, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "diary",
                            images: {
                                item4: [1763, 243, 218, 217, 361, 429],
                                item3: [1763, 470, 172, 184, 393, 401],
                                item2: [1763, 10, 226, 223, 381, 397],
                                item1: [1528, 981, 380, 309, 356, 311],
                                item0: [1528, 664, 419, 307, 393, 255],
                                run: [872, 601, 646, 758, 108, 216],
                                diary: [10, 721, 552, 722, 132, 218],
                                pile: [10, 10, 852, 701, 227, 38],
                                open: [872, 10, 881, 581, 199, 54]
                            }
                        }
                    }
                }),
                Ou = Iu.extend({
                    elements: Ye.elementsFromSprite("sprite", ["pile", "item0", "item1", "item2", "item3", "item4"]),
                    onLoadComplete() {
                        C.p8.set(".e.pile", {
                            transformOrigin: "bottom center"
                        }), C.p8.set(".e.item0, .e.item1, .e.item2, .e.item3, .e.item4", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.pile", {
                            scaleX: .9,
                            scaleY: 1.1
                        }).to(".e.pile", {
                            scaleX: 1.1,
                            scaleY: .9
                        }).call((() => {
                            C.p8.timeline().set(".e.item0", {
                                hidden: !1,
                                rotate: -150
                            }).to(".e.item0", {
                                x: -500,
                                y: -500,
                                rotate: -350
                            }).set(".e.item0", {
                                hidden: !0
                            })
                        })).to(".e.pile", {
                            scaleX: .9,
                            scaleY: 1.1
                        }).call((() => {
                            C.p8.timeline().set(".e.item1", {
                                hidden: !1,
                                rotate: 0
                            }).to(".e.item1", {
                                x: 500,
                                y: -500,
                                rotate: 200
                            }).set(".e.item1", {
                                hidden: !0
                            })
                        })).to(".e.pile", {
                            scaleX: 1.1,
                            scaleY: .9
                        }).to(".e.pile", {
                            scaleX: .9,
                            scaleY: 1.1
                        }).call((() => {
                            C.p8.timeline().set(".e.item2", {
                                hidden: !1,
                                rotate: -100
                            }).to(".e.item2", {
                                x: -500,
                                y: -500,
                                rotate: 100
                            }).set(".e.item2", {
                                hidden: !0
                            })
                        })).to(".e.pile", {
                            scaleX: 1.1,
                            scaleY: .9
                        }).to(".e.pile", {
                            scaleX: .9,
                            scaleY: 1.1
                        }).call((() => {
                            C.p8.timeline().set(".e.item3", {
                                hidden: !1,
                                rotate: 150
                            }).to(".e.item3", {
                                x: 500,
                                y: -500,
                                rotate: 350
                            }).set(".e.item3", {
                                hidden: !0
                            })
                        })).to(".e.pile", {
                            scaleX: 1.1,
                            scaleY: .9
                        }).to(".e.pile", {
                            scaleX: .9,
                            scaleY: 1.1
                        }).to(".e.pile", {
                            scaleX: 1.1,
                            scaleY: .9
                        }).call((() => {
                            C.p8.timeline().set(".e.item4", {
                                hidden: !1,
                                rotate: 0
                            }).to(".e.item4", {
                                x: -500,
                                y: -500,
                                rotate: -200
                            }).set(".e.item4", {
                                hidden: !0
                            })
                        })).to(".e.pile", {
                            scaleX: .9,
                            scaleY: 1.1
                        })
                    }
                }),
                Bu = Iu.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["pile", "diary", "open"]),
                    onLoadComplete() {
                        C.p8.fromTo(".e.pile", {
                            scaleX: .9,
                            scaleY: 1.1
                        }, {
                            scaleX: .6,
                            scaleY: .6,
                            opacity: 0,
                            duration: .5
                        }), C.p8.fromTo(".e.diary", {
                            scale: .6,
                            rotate: 120
                        }, {
                            scale: 1,
                            rotate: 0,
                            duration: .5
                        }), C.p8.set(".e.open", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("diary", "open", .35))
                    }
                }),
                Yu = Iu.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["open"]),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("open", .35))
                    }
                }),
                Au = Iu.extend({
                    stepDuration: .35,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["open"])
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.open", {
                            scale: .9,
                            ease: "back.in(3)"
                        }).to(".e.open", {
                            scale: .85,
                            ease: "back.in(3)"
                        }).to(".e.open", {
                            scale: .8,
                            ease: "back.in(3)"
                        }).to(".e.open", {
                            scale: .75,
                            ease: "back.in(3)"
                        }).to(".e.open", {
                            scale: .7,
                            ease: "back.in(3)"
                        }).to(".e.open", {
                            scale: .65,
                            ease: "back.in(3)"
                        }).to(".e.open", {
                            scale: .6,
                            ease: "back.in(3)"
                        }).to(".e.open", {
                            scale: .55,
                            ease: "back.in(3)"
                        }).to(".e.open", {
                            scale: .4,
                            ease: "back.in(3)"
                        }).to(".e.open", {
                            scale: .2,
                            ease: "back.in(3)"
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("c", .35)
                    }
                }),
                Hu = He.extend({
                    imageManifest: {
                        couch: Promise.resolve().then(s.t.bind(s, 90484, 17)),
                        fort: Promise.resolve().then(s.t.bind(s, 91368, 17)),
                        pillows: Promise.resolve().then(s.t.bind(s, 47439, 17)),
                        eyes: Promise.resolve().then(s.t.bind(s, 43489, 17))
                    }
                }),
                Gu = Hu.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("couch", "pillows"),
                    onLoadComplete() {
                        C.p8.set(".e.pillows", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("couch", "pillows"))
                    }
                }),
                Vu = Hu.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("pillows", "fort"),
                    onLoadComplete() {
                        C.p8.set(".e.fort", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("pillows", "fort"))
                    }
                }),
                Eu = Hu.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("fort", ["eyes", null, [380, 440]])
                    }],
                    onLoadComplete() {
                        const e = {
                                clipPath: "inset(50% 0% 80% 0%)",
                                duration: .2
                            },
                            t = {
                                clipPath: "inset(0% 0% 0% 0%)",
                                duration: .2
                            };
                        C.p8.set(".e.eyes", e), C.p8.timeline({
                            repeat: -1
                        }).to(".e.eyes", t).fillTime(.75).to(".e.eyes", e).to(".e.eyes", t).to(".e.eyes", e).to(".e.eyes", t).fillTime(2).to(".e.eyes", e).to(".e.eyes", t).fillTime(1.75).to(".e.eyes", e).to(".e.eyes", t)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                qu = He.extend({
                    imageManifest: {
                        tantrum1: Promise.resolve().then(s.t.bind(s, 68123, 17)),
                        tantrum2: Promise.resolve().then(s.t.bind(s, 18792, 17))
                    }
                }),
                Nu = qu.extend({
                    elements: Ye.elementsFromImages("tantrum1"),
                    onLoadComplete() {
                        Ye.startShake("tantrum1", 2, 3, .25)
                    },
                    onProgress(e) {
                        33 === e ? (Ye.stopShake("tantrum1"), Ye.startShake("tantrum1", 5, 5, .6)) : 66 === e && (Ye.stopShake("tantrum1"), Ye.startShake("tantrum1", 6, 7, 1.5))
                    }
                }),
                Xu = qu.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("tantrum1", "tantrum2"),
                    onLoadComplete() {
                        C.p8.set(".e.tantrum2", {
                            visibility: "hidden"
                        }), Ye.startShake("tantrum1", 6, 7, 1.5)
                    },
                    onDiscreteProgress() {
                        C.p8.set(".e.tantrum2", {
                            visibility: "visible"
                        }), C.p8.set(".e.tantrum1", {
                            visibility: "hidden"
                        }), Ye.scaleBounce("tantrum2", 1.2, 1)
                    }
                }),
                Wu = qu.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("tantrum2"),
                    onLoadComplete() {
                        Ye.startShake("tantrum2", 4, 5, 2)
                    },
                    onDiscreteProgress() {
                        Ye.scaleBounce("tantrum2", 1.5, .25)
                    }
                }),
                Uu = () => o().random(360),
                $u = He.extend({
                    imageManifest: {
                        brick: Promise.resolve().then(s.t.bind(s, 7548, 17)),
                        dump: Promise.resolve().then(s.t.bind(s, 30785, 17)),
                        soldier: Promise.resolve().then(s.t.bind(s, 77448, 17)),
                        step: Promise.resolve().then(s.t.bind(s, 87694, 17))
                    }
                }),
                ju = $u.extend({
                    stepDuration: 1.25,
                    elements: Ye.elementsFromImages(["soldier", "soldier1"], ["soldier", "soldier2"], ["soldier", "soldier3"], ["soldier", "soldier4"], ["soldier", "soldier5"]),
                    onLoadComplete() {
                        C.p8.set([".e.soldier1", ".e.soldier2", ".e.soldier3", ".e.soldier4", ".e.soldier5"], {
                            scale: .8
                        }), C.p8.set(".e.soldier1", {
                            x: -250,
                            y: 1250,
                            rotation: Uu()
                        }), C.p8.set(".e.soldier2", {
                            x: -100,
                            y: 1e3,
                            rotation: Uu()
                        }), C.p8.set(".e.soldier3", {
                            y: 750,
                            rotation: Uu()
                        }), C.p8.set(".e.soldier4", {
                            x: 100,
                            y: 1e3,
                            rotation: Uu()
                        }), C.p8.set(".e.soldier5", {
                            x: 250,
                            y: 1250,
                            rotation: Uu()
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to([".e.soldier1", ".e.soldier2", ".e.soldier3", ".e.soldier4", ".e.soldier5"], {
                            y: 0
                        })
                    }
                }),
                Ku = $u.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("dump"),
                    onDiscreteProgress() {
                        Ye.scaleBounce("dump")
                    }
                }),
                Zu = $u.extend({
                    stepDuration: 1.25,
                    elements: Ye.elementsFromImages(["brick", "brick1"], ["brick", "brick2"], ["brick", "brick3"], ["brick", "brick4"], ["brick", "brick5"]),
                    onLoadComplete() {
                        C.p8.set([".e.brick1", ".e.brick2", ".e.brick3", ".e.brick4", ".e.brick5"], {
                            scale: .8
                        }), C.p8.set(".e.brick1", {
                            x: -250,
                            y: 1250,
                            rotation: Uu()
                        }), C.p8.set(".e.brick2", {
                            x: -100,
                            y: 1e3,
                            rotation: Uu()
                        }), C.p8.set(".e.brick3", {
                            y: 750,
                            rotation: Uu()
                        }), C.p8.set(".e.brick4", {
                            x: 100,
                            y: 1e3,
                            rotation: Uu()
                        }), C.p8.set(".e.brick5", {
                            x: 250,
                            y: 1250,
                            rotation: Uu()
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to([".e.brick1", ".e.brick2", ".e.brick3", ".e.brick4", ".e.brick5"], {
                            y: 0
                        })
                    }
                }),
                Ju = $u.extend({
                    lastStepDuration: .25,
                    elements: Ye.elementsFromImages("step"),
                    onDiscreteProgress() {
                        Ye.scaleBounce("step", .9, .1)
                    }
                }),
                _u = He.extend({
                    imageManifest: {
                        football: Promise.resolve().then(s.t.bind(s, 86879, 17)),
                        lamp: Promise.resolve().then(s.t.bind(s, 654, 17))
                    }
                }),
                Qu = _u.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("football"),
                    initializeTimeline() {
                        this.timeline.to(".e.football", {
                            x: -250
                        })
                    }
                }),
                eg = _u.extend({
                    elements: Ye.elementsFromImages("football"),
                    onLoadComplete() {
                        C.p8.set(".e.football", {
                            x: -250
                        })
                    },
                    onStartProgress() {
                        Ye.startShake("football", 10, 0, 2)
                    },
                    onStopProgress() {
                        Ye.stopShake("football")
                    }
                }),
                tg = _u.extend({
                    stepDuration: 2.5,
                    elements: Ye.elementsFromImages("lamp", "football"),
                    onLoadComplete() {
                        C.p8.set(".e.lamp", {
                            x: 1500
                        }), C.p8.set(".e.football", {
                            x: -250
                        }), Ye.startShake("football", 10, 0, 2)
                    },
                    onDiscreteProgress() {
                        Ye.stopShake("football"), C.p8.timeline().to(".e.football", {
                            motionPath: [{
                                x: -250,
                                y: 0,
                                rotation: -25
                            }, {
                                x: 250,
                                y: -500,
                                rotation: 0
                            }, {
                                x: 1e3,
                                y: 0,
                                rotation: 115
                            }, {
                                x: 1500,
                                y: 0,
                                rotation: 180
                            }],
                            duration: 1
                        }).to(".e.lamp", {
                            x: -100
                        }, "<0.6").to(".e.football", {
                            x: 400
                        }, "<")
                    }
                }),
                sg = He.extend({
                    imageManifest: {
                        curse: Promise.resolve().then(s.t.bind(s, 82899, 17)),
                        tv: Promise.resolve().then(s.t.bind(s, 77355, 17)),
                        show1: Promise.resolve().then(s.t.bind(s, 8836, 17)),
                        static: Promise.resolve().then(s.t.bind(s, 11346, 17))
                    }
                }),
                ig = sg.extend({
                    elements: Ye.elementsFromImages("show1", "tv")
                }),
                og = sg.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("show1", "tv", "curse")
                    }],
                    onStartProgress() {
                        Ye.startHoldShake("c", 2, 5)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                ng = sg.extend({
                    elements: Ye.elementsFromImages("static", "tv")
                }),
                ag = He.extend({
                    imageManifest: {
                        candy: Promise.resolve().then(s.t.bind(s, 17237, 17)),
                        climb: Promise.resolve().then(s.t.bind(s, 61756, 17)),
                        push: Promise.resolve().then(s.t.bind(s, 36112, 17)),
                        steal: Promise.resolve().then(s.t.bind(s, 21827, 17))
                    }
                }),
                rg = ag.extend({
                    elements: Ye.elementsFromImages("push"),
                    onStartProgress() {
                        Ye.startHoldShake("push")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("push")
                    }
                }),
                lg = ag.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("climb"),
                    onDiscreteProgress() {
                        Ye.squashOnce("climb", .35)
                    }
                }),
                dg = ag.extend({
                    elements: Ye.elementsFromImages("steal"),
                    onLoadComplete() {
                        Ye.startShake("steal", 2, 2, 1)
                    }
                }),
                pg = ag.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("candy"),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("candy", .25))
                    }
                }),
                cg = He.extend({
                    imageManifest: {
                        matches: Promise.resolve().then(s.t.bind(s, 37622, 17)),
                        smoke: Promise.resolve().then(s.t.bind(s, 42394, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "matches",
                            images: {
                                trash: [468, 10, 440, 495, 440, 280],
                                matchFlame: [468, 515, 106, 252, 172, 434],
                                match: [918, 10, 73, 482, 328, 451],
                                leftFlame: [584, 515, 110, 240, 221, 158],
                                rightFlame: [704, 515, 93, 214, 371, 749],
                                flame: [10, 10, 448, 870, 65, 289]
                            }
                        }
                    }
                }),
                mg = cg.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromSprite("sprite", ["match"]),
                    onLoadComplete() {
                        C.p8.set(".e.match", {
                            rotate: 30
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.match", {
                            x: -200,
                            y: 200,
                            rotate: 80
                        }).to(".e.match", {
                            x: 0,
                            y: 0,
                            rotate: 0
                        })
                    }
                }),
                hg = cg.extend({
                    elements: [{
                        class: "small",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["match", "matchFlame"])
                    }, {
                        class: "large",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["flame", "leftFlame", "rightFlame"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.matchFlame", {
                            opacity: 0,
                            scale: .5,
                            transformOrigin: "bottom center"
                        }), C.p8.set(".e.large", {
                            opacity: 0
                        }), C.p8.set(".e.leftFlame, .e.rightFlame", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.matchFlame", {
                            opacity: 1,
                            scale: 1,
                            duration: 1
                        }, 0).to(".e.small", {
                            scale: 1.3,
                            opacity: 0,
                            duration: 1
                        }, 2).to(".e.large", {
                            opacity: 1,
                            duration: 1
                        }, 2).to(".e.leftFlame", {
                            x: -30,
                            y: -60,
                            opacity: 1,
                            duration: .4,
                            ease: "none"
                        }, 2.8).to(".e.leftFlame", {
                            x: -60,
                            y: -120,
                            opacity: 0,
                            duration: .4,
                            ease: "none"
                        }, 3.2).set(".e.leftFlame", {
                            x: 0,
                            y: 0,
                            opacity: 0
                        }, 3.6).to(".e.leftFlame", {
                            x: -30,
                            y: -60,
                            opacity: 1,
                            duration: .4,
                            ease: "none"
                        }, 3.7).to(".e.leftFlame", {
                            x: -60,
                            y: -120,
                            opacity: 0,
                            duration: .4,
                            ease: "none"
                        }, 4.1).to(".e.rightFlame", {
                            x: 30,
                            y: -60,
                            opacity: 1,
                            duration: .4,
                            ease: "none"
                        }, 3.2).to(".e.rightFlame", {
                            x: 60,
                            y: -120,
                            opacity: 0,
                            duration: .4,
                            ease: "none"
                        }, 3.6).set(".e.rightFlame", {
                            x: 0,
                            y: 0,
                            opacity: 0
                        }, 4).to(".e.rightFlame", {
                            x: 30,
                            y: -60,
                            opacity: 1,
                            duration: .4,
                            ease: "none"
                        }, 4.1).to(".e.rightFlame", {
                            x: 60,
                            y: -120,
                            opacity: 0,
                            duration: .4,
                            ease: "none"
                        }, 4.6)
                    }
                }),
                ug = cg.extend({
                    stepDuration: .5,
                    elements: [...Ye.elementsFromSprite("sprite", ["trash"]), {
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["match", "matchFlame"])
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            y: -300,
                            scale: .7,
                            rotate: -200
                        }).to(".e.c", {
                            y: -100,
                            scale: .4,
                            rotate: -400
                        }).to(".e.c", {
                            y: 0,
                            scale: .2,
                            opacity: 0,
                            rotate: -600
                        })
                    }
                }),
                gg = cg.extend({
                    elements: [...Ye.elementsFromSprite("sprite", ["trash"]), ...Ye.elementsFromImages("smoke")],
                    onLoadComplete() {
                        C.p8.set(".e.smoke", {
                            opacity: 0,
                            scale: .7
                        })
                    },
                    initializeTimeline() {
                        this.timeline.fillTime(1).to(".e.smoke", {
                            y: -100,
                            opacity: .9,
                            rotate: 50,
                            scale: 1,
                            ease: "none"
                        }).to(".e.smoke", {
                            y: -200,
                            opacity: .7,
                            rotate: 100,
                            ease: "none"
                        }).to(".e.smoke", {
                            y: -300,
                            opacity: .5,
                            rotate: 150,
                            ease: "none"
                        })
                    }
                }),
                yg = po.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 87891, 17))
                    }
                }),
                bg = ct.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 83353, 17))
                    }
                }),
                xg = Zo.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 59364, 17))
                    }
                }),
                fg = Zo.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 68782, 17))
                    }
                }),
                vg = mn.extend({
                    imageManifest: {
                        image: Promise.resolve().then(s.t.bind(s, 99207, 17))
                    }
                }),
                kg = He.extend({
                    imageManifest: {
                        aboutToBarf: Promise.resolve().then(s.t.bind(s, 84893, 17)),
                        barf: Promise.resolve().then(s.t.bind(s, 23007, 17)),
                        spin: Promise.resolve().then(s.t.bind(s, 50639, 17))
                    }
                }),
                Pg = kg.extend({
                    elements: Ye.elementsFromImages("spin"),
                    initializeTimeline() {
                        this.timeline.to(".e.spin", {
                            scaleX: -1
                        }).to(".e.spin", {
                            scaleX: 1
                        }).to(".e.spin", {
                            scaleX: -1
                        }).to(".e.spin", {
                            scaleX: 1
                        }).to(".e.spin", {
                            scaleX: -1
                        }).to(".e.spin", {
                            scaleX: 1
                        })
                    }
                }),
                wg = kg.extend({
                    elements: Ye.elementsFromImages("aboutToBarf"),
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.aboutToBarf", {
                                skewX: -10,
                                duration: .2
                            }).to(".e.aboutToBarf", {
                                skewX: 0,
                                duration: .2
                            }).to(".e.aboutToBarf", {
                                skewX: 0,
                                duration: .2
                            }).to(".e.aboutToBarf", {
                                skewX: 10,
                                duration: .2
                            }).to(".e.aboutToBarf", {
                                skewX: 0,
                                duration: .2
                            }),
                            t = C.p8.timeline().to(".e.aboutToBarf", {
                                skewY: 0,
                                duration: .25
                            }).to(".e.aboutToBarf", {
                                skewY: 0,
                                duration: .25
                            }).to(".e.aboutToBarf", {
                                skewY: 10,
                                duration: .25
                            }).to(".e.aboutToBarf", {
                                skewY: -10,
                                duration: .25
                            }),
                            s = C.p8.timeline().to(".e.aboutToBarf", {
                                rotate: 5,
                                duration: .5
                            }).to(".e.aboutToBarf", {
                                rotate: -5,
                                duration: .5
                            });
                        this.timeline.add(e), this.timeline.add(t, 0), this.timeline.add(s, 0)
                    }
                }),
                Tg = kg.extend({
                    elements: Ye.elementsFromImages("aboutToBarf"),
                    onStartProgress() {
                        Ye.startHoldShake("aboutToBarf", 5)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("aboutToBarf")
                    }
                }),
                Sg = kg.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("aboutToBarf", "barf"),
                    onLoadComplete() {
                        C.p8.set(".e.barf", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("aboutToBarf", "barf", .35)
                    }
                }),
                Mg = He.extend({
                    imageManifest: {
                        bowl: Promise.resolve().then(s.t.bind(s, 24945, 17)),
                        choke: Promise.resolve().then(s.t.bind(s, 85365, 17)),
                        drawer: Promise.resolve().then(s.t.bind(s, 65512, 17)),
                        marble: Promise.resolve().then(s.t.bind(s, 31691, 17)),
                        swallow: Promise.resolve().then(s.t.bind(s, 92130, 17))
                    }
                }),
                Cg = Mg.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("drawer", "marble"),
                    onLoadComplete() {
                        C.p8.set(".e.marble", {
                            scale: .35,
                            x: 127,
                            y: 50
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.marble", {
                            x: -100,
                            scale: .6,
                            opacity: 0
                        })
                    }
                }),
                Dg = Mg.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("swallow", "marble"),
                    onLoadComplete() {
                        C.p8.set(".e.marble", {
                            scale: .25,
                            x: 38,
                            y: -12
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.marble", {
                            x: -30,
                            opacity: 0
                        })
                    }
                }),
                Fg = Mg.extend({
                    elements: Ye.elementsFromImages("choke"),
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.choke", {
                                scaleY: .8
                            }).to(".e.choke", {
                                scaleY: 1.2
                            }).to(".e.choke", {
                                scaleY: 1
                            }),
                            t = C.p8.timeline({
                                repeat: 5
                            }).to(".e.choke", {
                                x: -4,
                                y: 2,
                                duration: .1
                            }).to(".e.choke", {
                                x: 4,
                                y: 0,
                                duration: .1
                            }).to(".e.choke", {
                                x: 0,
                                y: -2,
                                duration: .1
                            }).to(".e.choke", {
                                x: 2,
                                y: 2,
                                duration: .1
                            }).to(".e.choke", {
                                x: 3,
                                y: -4,
                                duration: .1
                            }).to(".e.choke", {
                                x: 2,
                                y: 0,
                                duration: .1
                            });
                        this.timeline.add(e), this.timeline.add(t, 4)
                    }
                }),
                zg = Mg.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages(["bowl", null, [0, -100]]),
                    initializeTimeline() {
                        this.timeline.to(".e.bowl", {
                            x: 100,
                            ease: "back.in(3)"
                        })
                    }
                }),
                Lg = He.extend({
                    imageManifest: {
                        pet: Promise.resolve().then(s.t.bind(s, 45983, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "pet",
                            images: {
                                bar: [10, 917, 650, 707, 256, 175],
                                bite0: [670, 950, 456, 249, 36, 270],
                                bite1: [670, 1209, 455, 224, 36, 270],
                                bite2: [1135, 1303, 454, 224, 36, 271],
                                bite3: [1527, 950, 454, 153, 107, 271],
                                bite4: [1527, 1113, 454, 153, 107, 271],
                                bite5: [670, 1443, 454, 139, 121, 271],
                                hi: [1136, 950, 381, 343, 173, 336],
                                bed: [936, 10, 792, 930, 35, 104],
                                raccoon: [10, 10, 916, 897, 52, 42]
                            }
                        }
                    }
                }),
                Rg = Lg.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["bite0", "bite1", "bite2", "bite3", "bite4", "bite5", "bar"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.bite1, .e.bite2, .e.bite3, .e.bite4, .e.bite5", {
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.swapHidden([".e.bite0", ".e.bite1"], .5).swapHidden([".e.bite1", ".e.bite2"], 1.5).swapHidden([".e.bite2", ".e.bite3"], 2.5).swapHidden([".e.bite3", ".e.bite4"], 3.5).swapHidden([".e.bite4", ".e.bite5"], 4.5).fillTime(.5)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                Ig = Lg.extend({
                    elements: Ye.elementsFromSprite("sprite", ["raccoon"]),
                    onLoadComplete() {
                        C.p8.set(".e.raccoon", {
                            y: 50,
                            scale: .8,
                            transformOrigin: "bottom center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.raccoon", {
                            skewX: 10,
                            duration: 1
                        }).to(".e.raccoon", {
                            skewX: 0,
                            duration: .1
                        }).to(".e.raccoon", {
                            skewX: 10,
                            duration: 1
                        }).to(".e.raccoon", {
                            skewX: 0,
                            duration: .1
                        }).to(".e.raccoon", {
                            skewX: 10,
                            duration: 1
                        }).to(".e.raccoon", {
                            skewX: 0,
                            duration: .1
                        }).to(".e.raccoon", {
                            skewX: 10,
                            duration: 1
                        }).to(".e.raccoon", {
                            skewX: 0,
                            duration: .1
                        })
                    }
                }),
                Og = Lg.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["raccoon"]),
                    onLoadComplete() {
                        C.p8.set(".e.raccoon", {
                            y: 50,
                            scale: .8,
                            transformOrigin: "bottom center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.raccoon", {
                            y: 0,
                            scale: 1,
                            ease: "back.out(3)"
                        })
                    }
                }),
                Bg = Lg.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["raccoon"]),
                    initializeTimeline() {
                        this.timeline.to(".e.raccoon", {
                            x: 500,
                            ease: "back.in(3)"
                        })
                    }
                }),
                Yg = Lg.extend({
                    stepDuration: .45,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["bed", "hi"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.hi", {
                            y: -150,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.hi", {
                            opacity: 1
                        }, 0).to(".e.hi", {
                            y: 0,
                            duration: 1,
                            ease: "back.out(2)"
                        }, 0).add(Ye.squashOnce("c", 1), .3)
                    }
                }),
                Ag = He.extend({
                    imageManifest: {
                        dirtPile: Promise.resolve().then(s.t.bind(s, 85398, 17)),
                        sprite: Promise.resolve().then(s.t.bind(s, 26868, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                pit: [0, 0, 901, 886],
                                magnet0: [901, 0, 488, 416],
                                magnet1: [901, 416, 488, 652],
                                magnet2: [0, 886, 404, 315],
                                magnet3: [404, 886, 497, 435]
                            }
                        }
                    }
                }),
                Hg = Ag.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["magnet3", null, [482, 2]],
                        ["magnet2", null, [32, 508]],
                        ["magnet1", null, [334, 496]],
                        ["magnet0", null, [52, 96]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.magnet0, .e.magnet1, .e.magnet2, .e.magnet3", {
                            scale: .8
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.magnet0", {
                            x: 160,
                            y: 240,
                            scale: 1.1
                        }).to(".e.magnet1", {
                            x: -240,
                            y: -160,
                            scale: 1.1
                        }).to(".e.magnet2", {
                            x: -210,
                            y: 310,
                            scale: 1.1
                        }).to(".e.magnet3", {
                            x: 249,
                            y: -200,
                            scale: 1.1
                        })
                    }
                }),
                Gg = Ag.extend({
                    stepDuration: .25,
                    elements: [...Ye.elementsFromSprite("sprite", [
                        ["pit", null, [57, 49]]
                    ]), {
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["magnet3", null, [482, 2]],
                            ["magnet2", null, [32, 508]],
                            ["magnet1", null, [334, 496]],
                            ["magnet0", null, [52, 96]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.magnet0", {
                            x: 160,
                            y: 240,
                            scale: 1.1
                        }), C.p8.set(".e.magnet1", {
                            x: -240,
                            y: -160,
                            scale: 1.1
                        }), C.p8.set(".e.magnet2", {
                            x: -210,
                            y: 310,
                            scale: 1.1
                        }), C.p8.set(".e.magnet3", {
                            x: 249,
                            y: -200,
                            scale: 1.1
                        }), C.p8.fromTo(".e.pit", {
                            x: 300,
                            opacity: 0
                        }, {
                            x: 0,
                            opacity: 1,
                            duration: .5
                        }), C.p8.to(".e.c", {
                            x: -250
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.magnet3", {
                            x: 559,
                            y: -130,
                            rotate: -220,
                            scale: .4
                        }).to(".e.magnet2", {
                            x: -40,
                            y: 210,
                            rotate: 110,
                            scale: .4
                        }).to(".e.magnet1", {
                            x: -30,
                            y: -140,
                            rotate: 40,
                            scale: .4
                        }).to(".e.magnet0", {
                            x: 523,
                            y: 140,
                            rotate: -230,
                            scale: .4
                        })
                    }
                }),
                Vg = Ag.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("dirtPile")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.c", {
                            transformOrigin: "bottom center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            scaleY: .5,
                            duration: 1,
                            ease: "power3.in"
                        }), this.timeline.add(Ye.squashOnce("dirtPile", .2), 0), this.timeline.add(Ye.squashOnce("dirtPile", .2), .2), this.timeline.add(Ye.squashOnce("dirtPile", .2), .4), this.timeline.add(Ye.squashOnce("dirtPile", .2), .6), this.timeline.add(Ye.squashOnce("dirtPile", .2), .8)
                    }
                });
            C.p8.registerPlugin(vt.X);
            const Eg = He.extend({
                    imageManifest: {
                        social: Promise.resolve().then(s.t.bind(s, 63347, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "social",
                            images: {
                                cursor: [944, 832, 175, 255, 445, 607],
                                post: [679, 532, 498, 201, 300, 218],
                                return: [787, 832, 93, 143, 386, 838],
                                space: [679, 743, 326, 79, 571, 292],
                                dKey: [1050, 1097, 90, 86, 448, 271],
                                eKey: [679, 832, 98, 84, 391, 256],
                                vKey: [944, 1097, 96, 106, 491, 296],
                                iKey: [1129, 743, 90, 85, 389, 609],
                                lKey: [1187, 532, 77, 93, 440, 686],
                                keyboard: [10, 1020, 924, 378, 311, 38],
                                computer: [679, 10, 734, 512, 244, 133],
                                content: [10, 10, 659, 1e3, 0, 176]
                            }
                        }
                    }
                }),
                qg = Eg.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", ["content", "computer"]),
                    onLoadComplete() {
                        C.p8.set(".e.content", {
                            y: 363,
                            clipPath: "inset(0% 0% 65%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.content", {
                            y: 154,
                            clipPath: "inset(20% 0% 44%)"
                        }).to(".e.content", {
                            y: -55,
                            clipPath: "inset(40% 0% 23%)"
                        }).to(".e.content", {
                            y: -264,
                            clipPath: "inset(60% 0% 0%)"
                        })
                    }
                }),
                Ng = Eg.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromSprite("sprite", ["keyboard", "space", "return", "dKey", "eKey", "vKey", "iKey", "lKey"]),
                    onLoadComplete() {
                        C.p8.set(".e.space, .e.return, .e.dKey, .e.eKey, .e.vKey, .e.iKey, .e.lKey", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.vKey", {
                            hidden: !1
                        }, 0).set(".e.vKey", {
                            hidden: !0
                        }, 1).set(".e.iKey", {
                            hidden: !1
                        }, 1).set(".e.iKey", {
                            hidden: !0
                        }, 2).set(".e.lKey", {
                            hidden: !1
                        }, 2).set(".e.lKey", {
                            hidden: !0
                        }, 3).set(".e.eKey", {
                            hidden: !1
                        }, 3).set(".e.eKey", {
                            hidden: !0
                        }, 4).set(".e.space", {
                            hidden: !1
                        }, 5).set(".e.space", {
                            hidden: !0
                        }, 6).set(".e.dKey", {
                            hidden: !1
                        }, 6).set(".e.dKey", {
                            hidden: !0
                        }, 7).set(".e.eKey", {
                            hidden: !1
                        }, 7).set(".e.eKey", {
                            hidden: !0
                        }, 8).set(".e.vKey", {
                            hidden: !1
                        }, 8).set(".e.vKey", {
                            hidden: !0
                        }, 9).set(".e.iKey", {
                            hidden: !1
                        }, 10).set(".e.iKey", {
                            hidden: !0
                        }, 11).set(".e.lKey", {
                            hidden: !1
                        }, 11).set(".e.lKey", {
                            hidden: !0
                        }, 12).set(".e.return", {
                            hidden: !1
                        }, 12).set(".e.return", {
                            hidden: !0
                        }, 13).set(".e.vKey", {
                            hidden: !1
                        }, 13).set(".e.vKey", {
                            hidden: !0
                        }, 14).set(".e.iKey", {
                            hidden: !1
                        }, 15).set(".e.iKey", {
                            hidden: !0
                        }, 16).set(".e.lKey", {
                            hidden: !1
                        }, 16).set(".e.lKey", {
                            hidden: !0
                        }, 17).set(".e.eKey", {
                            hidden: !1
                        }, 17).set(".e.eKey", {
                            hidden: !0
                        }, 18).set(".e.space", {
                            hidden: !1
                        }, 18).set(".e.space", {
                            hidden: !0
                        }, 19).set(".e.dKey", {
                            hidden: !1
                        }, 20).set(".e.dKey", {
                            hidden: !0
                        }, 21).set(".e.eKey", {
                            hidden: !1
                        }, 21).set(".e.eKey", {
                            hidden: !0
                        }, 22).set(".e.vKey", {
                            hidden: !1
                        }, 22).set(".e.vKey", {
                            hidden: !0
                        }, 23).set(".e.iKey", {
                            hidden: !1
                        }, 23).set(".e.iKey", {
                            hidden: !0
                        }, 24)
                    }
                }),
                Xg = Eg.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["post", "cursor"])
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.cursor", {
                            motionPath: {
                                path: "M127.8,68.5c-15-19-55-48-84-48s-20,17-13,17s42-19,26-32s-53,1-56,21c-2.9,19.2,15,40,50,27c22.8-8.5,40.2-31.2,30-38c-12-8-37,5-27,27c3.7,8.1,19.4,13.4,28,26c19,28,20.8,66.6-5,109c-50,82,131,125,152,56s-29-60-37-47",
                                offsetX: -110,
                                offsetY: -60
                            },
                            ease: "none"
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                Wg = Eg.extend({
                    stepDuration: .3,
                    elements: Ye.elementsFromSprite("sprite", ["post", "cursor"]),
                    onLoadComplete() {
                        C.p8.fromTo(".e.cursor", {
                            x: 81.8,
                            y: 126.5
                        }, {
                            x: -100,
                            y: -25
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.post", {
                            scale: .8,
                            duration: .2
                        }).fillTime(1).to(".e.post", {
                            scale: 1,
                            duration: .4
                        })
                    }
                }),
                Ug = He.extend({
                    imageManifest: {
                        eyesclosed: Promise.resolve().then(s.t.bind(s, 37421, 17)),
                        eyesopen: Promise.resolve().then(s.t.bind(s, 37654, 17)),
                        moose: Promise.resolve().then(s.t.bind(s, 2616, 17))
                    }
                }),
                $g = Ug.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("eyesopen", "eyesclosed"),
                    onLoadComplete() {
                        C.p8.set(".e.eyesclosed", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("eyesopen", "eyesclosed", .25)
                    }
                }),
                jg = Ug.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("eyesclosed"),
                    initializeTimeline() {
                        this.timeline.to(".e.eyesclosed", {
                            scale: .9
                        })
                    }
                }),
                Kg = Ug.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("eyesclosed"),
                    onLoadComplete() {
                        C.p8.set(".e.eyesclosed", {
                            scale: .9
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.eyesclosed", {
                            scale: .8
                        })
                    }
                }),
                Zg = Ug.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("eyesclosed"),
                    onLoadComplete() {
                        C.p8.set(".e.eyesclosed", {
                            scale: .8
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.eyesclosed", {
                            scale: .7
                        })
                    }
                }),
                Jg = Ug.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("eyesclosed"),
                    onLoadComplete() {
                        C.p8.set(".e.eyesclosed", {
                            scale: .7
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.eyesclosed", {
                            scale: .5
                        })
                    }
                }),
                _g = Ug.extend({
                    elements: Ye.elementsFromImages("eyesclosed", "moose"),
                    onLoadComplete() {
                        C.p8.set(".e.eyesclosed", {
                            scale: .5
                        }), C.p8.set(".e.moose", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.eyesclosed", {
                            opacity: 0
                        }).to(".e.moose", {
                            opacity: 1
                        }, "<")
                    }
                }),
                Qg = Ug.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("eyesclosed", "eyesopen"),
                    onLoadComplete() {
                        C.p8.set(".e.eyesclosed", {
                            scale: .5
                        }), C.p8.set(".e.eyesopen", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.eyesclosed", {
                            scale: 1,
                            duration: .5
                        }), Ye.squashTransition("eyesclosed", "eyesopen", .25), Ye.startShake("eyesopen", 5, 3, 2)
                    }
                }),
                ey = He.extend({
                    imageManifest: {
                        door: Promise.resolve().then(s.t.bind(s, 75755, 17)),
                        phone: Promise.resolve().then(s.t.bind(s, 5427, 17)),
                        toilet: Promise.resolve().then(s.t.bind(s, 29737, 17))
                    }
                }),
                ty = ey.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("toilet"),
                    onLoadComplete() {
                        C.p8.set(".e.toilet", {
                            scale: .6
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.toilet", {
                            scale: 1.3
                        })
                    }
                }),
                sy = ey.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("phone"),
                    onLoadComplete() {
                        C.p8.set(".e.phone", {
                            opacity: 0,
                            scale: .5
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.phone", {
                            opacity: 1,
                            scale: 1
                        })
                    }
                }),
                iy = ey.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("phone"),
                    onDiscreteProgress() {
                        Ye.squashOnce("phone")
                    }
                }),
                oy = ey.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("phone"),
                    onDiscreteProgress(e) {
                        Ye.stopShake("phone"), Ye.startShake("phone", e / 10, e / 10, 1)
                    }
                }),
                ny = ey.extend({
                    elements: Ye.elementsFromImages("door", "phone"),
                    onLoadComplete() {
                        C.p8.to(".e.phone", {
                            y: 700
                        })
                    },
                    onProgress(e) {
                        switch (e) {
                            case 2:
                            case 20:
                            case 35:
                            case 55:
                            case 66:
                            case 70:
                            case 80:
                            case 87:
                            case 90:
                            case 93:
                            case 95:
                            case 97:
                            case 100:
                                Ye.squashOnce("door")
                        }
                    }
                }),
                ay = He.extend({
                    imageManifest: {
                        window: Promise.resolve().then(s.t.bind(s, 7532, 17)),
                        Adult0: Promise.resolve().then(s.t.bind(s, 41679, 17)),
                        Adult1: Promise.resolve().then(s.t.bind(s, 16687, 17)),
                        Teen0: Promise.resolve().then(s.t.bind(s, 21568, 17)),
                        Teen1: Promise.resolve().then(s.t.bind(s, 74961, 17)),
                        Teen2: Promise.resolve().then(s.t.bind(s, 54889, 17))
                    },
                    elements() {
                        return [{
                            class: "window-container",
                            type: "container",
                            children: [{
                                class: "player",
                                type: "img",
                                pos: [0, 0],
                                key: this.model.get("playerInfo").avatar.replace(/(v2)|(v3)\b/, "")
                            }, {
                                class: "window",
                                type: "img",
                                pos: [0, 0],
                                key: "window"
                            }]
                        }]
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.window-container", {
                            scale: 1.05,
                            ease: "none"
                        });
                        e.name = "tv", this.timeline.add(e)
                    }
                }),
                ry = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 24116, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                door: [0, 0, 590, 967],
                                handle: [590, 350, 220, 80],
                                sign: [590, 0, 220, 350]
                            }
                        }
                    },
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["door", null, [17, 215]],
                            ["sign", null, [290, 585]],
                            ["handle", null, [474, 628]]
                        ])
                    }]
                }),
                ly = ry.extend({
                    onLoadComplete() {
                        C.p8.set(".e.sign", {
                            zIndex: 1,
                            transformOrigin: "91px 62px"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.sign", {
                            x: 30,
                            rotate: 90
                        })
                    }
                }),
                dy = ry.extend({
                    stepDuration: .25,
                    onLoadComplete() {
                        C.p8.timeline().set(".e.sign", {
                            x: 30,
                            rotate: 90,
                            transformOrigin: "91px 62px"
                        }).to(".e.sign", {
                            x: -12,
                            y: 153,
                            duration: .15
                        }).to(".e.sign", {
                            rotate: 0,
                            duration: 2,
                            ease: "elastic.out(2, 0.2)"
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("c")
                    }
                }),
                py = ry.extend({
                    onLoadComplete() {
                        C.p8.set(".e.sign", {
                            x: -12,
                            y: 153,
                            transformOrigin: "91px 62px"
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                cy = ry.extend({
                    stepDuration: .25,
                    onLoadComplete() {
                        C.p8.set(".e.sign", {
                            x: -12,
                            y: 153,
                            transformOrigin: "91px 62px"
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("c")
                    }
                }),
                my = ry.extend({
                    onLoadComplete() {
                        C.p8.set(".e.sign", {
                            x: -12,
                            y: 153,
                            transformOrigin: "91px 62px"
                        }), C.p8.set(".e.handle", {
                            transformOrigin: "59px 42px"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.handle", {
                            rotate: 90
                        })
                    }
                }),
                hy = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 24116, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                door: [0, 0, 590, 967],
                                handle: [590, 350, 220, 80],
                                sign: [590, 0, 220, 350]
                            }
                        }
                    },
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["door", null, [17, 215]],
                            ["sign", null, [290, 585]],
                            ["handle", null, [474, 628]]
                        ])
                    }]
                }),
                uy = hy.extend({
                    onLoadComplete() {
                        C.p8.set(".e.sign", {
                            zIndex: 1,
                            transformOrigin: "91px 62px"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.sign", {
                            x: 30,
                            rotate: 90
                        })
                    }
                }),
                gy = hy.extend({
                    onLoadComplete() {
                        C.p8.set(".e.sign", {
                            x: 30,
                            rotate: 90,
                            transformOrigin: "91px 62px"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.sign", {
                            x: -12,
                            y: 153,
                            duration: .01
                        }).to(".e.sign", {
                            rotate: 0,
                            ease: "elastic.out(2, 0.2)"
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                yy = hy.extend({
                    onLoadComplete() {
                        C.p8.set(".e.sign", {
                            x: -12,
                            y: 153,
                            transformOrigin: "91px 62px"
                        }), C.p8.set(".e.handle", {
                            transformOrigin: "91px 62px"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            scale: 1.1
                        }).to(".e.c", {
                            scale: .9
                        }).to(".e.c", {
                            scale: 1.1
                        }).to(".e.c", {
                            scale: .9
                        })
                    },
                    onStartProgress() {
                        Ye.startShake("c")
                    },
                    onStopProgress() {
                        Ye.stopShake("c")
                    }
                }),
                by = hy.extend({
                    onLoadComplete() {
                        C.p8.set(".e.sign", {
                            x: -12,
                            y: 153,
                            transformOrigin: "91px 62px"
                        }), C.p8.set(".e.handle", {
                            transformOrigin: "59px 42px"
                        }), C.p8.fromTo(".e.c", {
                            scale: .9
                        }, {
                            scale: 1,
                            duration: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.handle", {
                            rotate: 90
                        })
                    }
                }),
                xy = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 96634, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                bottle: [0, 0, 270, 540],
                                bottleTop: [95, 540, 183, 91],
                                cork: [0, 540, 94, 108],
                                glass: [270, 0, 300, 431],
                                wine: [286, 431, 284, 182]
                            }
                        }
                    }
                }),
                fy = xy.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["bottle", null, [285, 357]],
                        ["cork", null, [255, 447]],
                        ["bottleTop", null, [298, 405]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.cork", {
                            transformOrigin: "bottom center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cork", {
                            scaleY: .3,
                            duration: .4
                        }).to(".e.cork", {
                            scaleY: 1.1,
                            duration: .2
                        }).to(".e.cork", {
                            x: 20,
                            y: -800
                        }, "<")
                    }
                }),
                vy = xy.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["glass", null, [285, 350]],
                        ["wine", null, [345, 368]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.wine", {
                            clipPath: "inset(182px 0 0 0)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.wine", {
                            clipPath: "inset(20px 0 0 0)"
                        })
                    }
                }),
                ky = xy.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["bottle", null, [285, 357]]
                    ]),
                    initializeTimeline() {
                        this.timeline.to(".e.bottle", {
                            x: 250,
                            y: -450,
                            scale: .3,
                            rotate: 230,
                            duration: 1,
                            ease: "back.in(2)"
                        }).to(".e.bottle", {
                            opacity: 0,
                            duration: .15
                        }, .85)
                    }
                }),
                Py = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 98185, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                radio: [0, 0, 842, 831],
                                dial: [842, 0, 154, 313]
                            }
                        }
                    },
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["radio", null, [84.5, 79]],
                            ["dial", null, [525, 253]]
                        ])
                    }]
                }),
                wy = Py.extend({
                    onLoadComplete() {
                        C.p8.set(".e.dial", {
                            rotate: -20
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.dial", {
                            rotate: 60
                        })
                    }
                }),
                Ty = Py.extend({
                    onLoadComplete() {
                        C.p8.set(".e.dial", {
                            rotate: 60
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.dial", {
                            rotate: 10
                        })
                    }
                }),
                Sy = Py.extend({
                    onLoadComplete() {
                        C.p8.set(".e.dial", {
                            rotate: 10
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.dial", {
                            rotate: 35
                        })
                    }
                }),
                My = Py.extend({
                    onLoadComplete() {
                        C.p8.set(".e.dial", {
                            rotate: 35
                        }), C.p8.set(".e.c", {
                            transformOrigin: "bottom center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            scaleY: .7
                        }).to(".e.c", {
                            scaleY: 1.1,
                            skewX: -6
                        }).to(".e.c", {
                            scaleY: .7
                        }).to(".e.c", {
                            scaleY: 1.1,
                            skewX: 6
                        }).to(".e.c", {
                            scaleY: .7
                        }).to(".e.c", {
                            scaleY: 1.1,
                            skewX: -6
                        }).to(".e.c", {
                            scaleY: .7
                        }).to(".e.c", {
                            scaleY: 1.1,
                            skewX: 6
                        }).to(".e.c", {
                            scaleY: .7
                        }).to(".e.c", {
                            scaleY: 1.1,
                            skewX: -6
                        }).to(".e.c", {
                            scaleY: .7
                        }).to(".e.c", {
                            scaleY: 1.1,
                            skewX: 6
                        })
                    }
                }),
                Cy = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 14689, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                closet: [0, 0, 932, 756],
                                door: [0, 756, 496, 756],
                                hiding: [0, 1510, 131, 209]
                            }
                        }
                    }
                }),
                Dy = Cy.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["closet", null, [122, 34]],
                            ["door", null, [122, 468]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.c", {
                            x: 150,
                            scale: .6
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.c", {
                                x: 100,
                                scale: .7,
                                duration: 1,
                                ease: "none"
                            }).to(".e.c", {
                                x: 50,
                                scale: .85,
                                duration: 1,
                                ease: "none"
                            }).to(".e.c", {
                                x: 0,
                                scale: 1,
                                duration: 1,
                                ease: "none"
                            }).to(".e.door", {
                                x: -400,
                                duration: 1,
                                ease: "bounce.out"
                            }),
                            t = C.p8.timeline({
                                repeat: 9
                            }).to(".e.c", {
                                y: -15,
                                duration: .15,
                                ease: "power2.inOut"
                            }).to(".e.c", {
                                y: 0,
                                duration: .15,
                                ease: "power2.inOut"
                            });
                        this.timeline.add(e, 0), this.timeline.add(t, 0)
                    }
                }),
                Fy = Cy.extend({
                    stepDuration: .75,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["closet", null, [122, 34]],
                            ["door", null, [122, 468]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.door", {
                            x: -400
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.door", {
                            x: 0,
                            duration: 1,
                            ease: "bounce.out"
                        })
                    }
                }),
                zy = Cy.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["closet", null, [122, 34]],
                            ["hiding", null, [427, 754]],
                            ["door", null, [122, 468]]
                        ])
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.door", {
                            opacity: .25,
                            duration: 1
                        }).fillTime(2)
                    }
                }),
                Ly = He.extend({
                    imageManifest: {
                        inlaws: Promise.resolve().then(s.t.bind(s, 42038, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "inlaws",
                            images: {
                                ringRing: [604, 692, 72, 109, 264, 764],
                                ignore: [604, 878, 606, 679, 161, 164],
                                games: [740, 10, 584, 858, 71, 208],
                                fire: [921, 1567, 220, 292, 278, 393],
                                fighting: [400, 1567, 511, 248, 316, 243],
                                dishes: [10, 1560, 380, 340, 248, 316],
                                cloudBubble: [10, 10, 720, 672, 164, 140],
                                calling: [10, 692, 584, 858, 71, 208],
                                missed: [1220, 878, 584, 858, 71, 208]
                            }
                        }
                    }
                }),
                Ry = Ly.extend({
                    stepDuration: .3,
                    elements: Ye.elementsFromSprite("sprite", ["calling"]),
                    onLoadComplete() {
                        C.p8.timeline({
                            repeat: -1
                        }).call(Ye.startShake, ["calling", 5, 0, 5], 0).call(Ye.stopShake, ["calling"], .2).fillTime(.8)
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("calling", .3)
                    }
                }),
                Iy = Ly.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["ignore", "ringRing"])
                    }],
                    onLoadComplete() {
                        C.p8.timeline({
                            repeat: -1
                        }).set(".e.ringRing", {
                            hidden: !1
                        }, 0).set(".e.ringRing", {
                            hidden: !0
                        }, .1).set(".e.ringRing", {
                            hidden: !1
                        }, .2).set(".e.ringRing", {
                            hidden: !0
                        }, .3).fillTime(.8)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                Oy = Ly.extend({
                    stepDuration: .3,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["cloudBubble", "dishes", "fighting", "fire"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.dishes, .e.fighting, .e.fire", {
                            y: -30,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.dishes", {
                            y: 0,
                            opacity: 1
                        }, 0).to(".e.dishes", {
                            y: 30,
                            opacity: 0
                        }, 1).to(".e.fighting", {
                            y: 0,
                            opacity: 1
                        }, 1).to(".e.fighting", {
                            y: 30,
                            opacity: 0
                        }, 2).to(".e.fire", {
                            y: 0,
                            opacity: 1
                        }, 2)
                    }
                }),
                By = Ly.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", ["missed", "games"]),
                    onLoadComplete() {
                        C.p8.set(".e.games", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("missed", "games", 1)).add(Ye.squashOnce("games", 1)).add(Ye.squashOnce("games", 1)).add(Ye.squashOnce("games", 1)).add(Ye.squashOnce("games", 1))
                    }
                }),
                Yy = He.extend({
                    imageManifest: {
                        phone: Promise.resolve().then(s.t.bind(s, 46415, 17)),
                        phoneSet: Promise.resolve().then(s.t.bind(s, 40734, 17))
                    }
                }),
                Ay = Yy.extend({
                    elements: Ye.elementsFromImages("phone")
                }),
                Hy = Yy.extend({
                    elements: Ye.elementsFromImages("phone")
                }),
                Gy = Yy.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("phone", "phoneSet")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.phoneSet", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.fillTime(4).add(Ye.squashTransition("phone", "phoneSet"))
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                Vy = He.extend({
                    imageManifest: {
                        box: Promise.resolve().then(s.t.bind(s, 49676, 17)),
                        cabinet: Promise.resolve().then(s.t.bind(s, 52010, 17)),
                        cup: Promise.resolve().then(s.t.bind(s, 7589, 17)),
                        cuptea: Promise.resolve().then(s.t.bind(s, 57218, 17)),
                        lid: Promise.resolve().then(s.t.bind(s, 29090, 17)),
                        plate: Promise.resolve().then(s.t.bind(s, 28142, 17)),
                        pot: Promise.resolve().then(s.t.bind(s, 99779, 17)),
                        spoon: Promise.resolve().then(s.t.bind(s, 71314, 17)),
                        timer: Promise.resolve().then(s.t.bind(s, 17470, 17)),
                        timerdial: Promise.resolve().then(s.t.bind(s, 91023, 17))
                    }
                }),
                Ey = Vy.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("cabinet", "box"),
                    onLoadComplete() {
                        C.p8.set(".e.box", {
                            scale: .5,
                            x: -50,
                            y: -60
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.box", {
                            scale: .6
                        }).to(".e.box", {
                            scale: .5
                        }).to(".e.box", {
                            scale: 1.1,
                            x: 0,
                            y: 300
                        })
                    }
                }),
                qy = Vy.extend({
                    elements: Ye.elementsFromImages("lid", "pot"),
                    onLoadComplete() {
                        C.p8.set(".e.lid", {
                            x: -6,
                            y: -235
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.lid", {
                            y: -241
                        }).to(".e.lid", {
                            rotate: -3
                        }).to(".e.lid", {
                            rotate: 3,
                            y: -250
                        }).to(".e.lid", {
                            rotate: -4,
                            y: -255
                        }).to(".e.lid", {
                            rotate: 4,
                            y: -258
                        }).to(".e.lid", {
                            rotate: -3
                        }).to(".e.lid", {
                            rotate: 3
                        })
                    }
                }),
                Ny = Vy.extend({
                    elements: Ye.elementsFromImages("cup", "cuptea", "pot", "spoon"),
                    onLoadComplete() {
                        C.p8.set(".e.pot", {
                            y: -1500,
                            x: 500,
                            rotate: -50
                        }), C.p8.set(".e.cuptea", {
                            opacity: 0
                        }), C.p8.set(".e.spoon", {
                            rotate: 160,
                            x: 160,
                            y: 170
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.pot", {
                            x: 300,
                            y: -350
                        }).to(".e.cuptea", {
                            opacity: 1
                        }).to(".e.cup", {
                            opacity: 0
                        }).to(".e.pot", {
                            y: -1500,
                            x: 800,
                            rotate: 200
                        }, "<").to(".e.cuptea", {
                            scale: 1.1
                        }).to(".e.cuptea", {
                            scale: 1
                        })
                    }
                }),
                Xy = Vy.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("spoon", "cuptea"),
                    onLoadComplete() {
                        C.p8.set(".e.spoon", {
                            rotate: 160,
                            x: 160,
                            y: 170
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.cuptea", {
                            scale: 1.2,
                            y: 350
                        })
                    }
                }),
                Wy = He.extend({
                    imageManifest: {
                        book1: Promise.resolve().then(s.t.bind(s, 62974, 17)),
                        book2: Promise.resolve().then(s.t.bind(s, 21704, 17)),
                        bookCover: Promise.resolve().then(s.t.bind(s, 38904, 17)),
                        read: Promise.resolve().then(s.t.bind(s, 76462, 17)),
                        window: Promise.resolve().then(s.t.bind(s, 46583, 17))
                    }
                }),
                Uy = Wy.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("bookCover", "book2"),
                    onLoadComplete() {
                        C.p8.set(".e.book2", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("bookCover", "book2", .35)
                    }
                }),
                $y = Wy.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("book2", "book1"),
                    onLoadComplete() {
                        C.p8.set(".e.book1", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("book2", "book1", .35)
                    }
                }),
                jy = Wy.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("read"),
                    onDiscreteProgress() {
                        Ye.squashOnce("read", .35)
                    }
                }),
                Ky = Wy.extend({
                    elements: Ye.elementsFromImages("window"),
                    onStartProgress() {
                        Ye.startHoldShake("window")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("window")
                    }
                }),
                Zy = He.extend({
                    imageManifest: {
                        crisis: Promise.resolve().then(s.t.bind(s, 55651, 17)),
                        jacket: Promise.resolve().then(s.t.bind(s, 50834, 17))
                    }
                }),
                Jy = Zy.extend({
                    elements: Ye.elementsFromImages("crisis"),
                    initializeTimeline() {
                        this.timeline.to(".e.crisis", {
                            rotate: 10,
                            y: 100
                        }).to(".e.crisis", {
                            rotate: -10,
                            y: 200,
                            scale: 1.5
                        }).to(".e.crisis", {
                            rotate: 10,
                            y: 400,
                            scale: 2
                        }).to(".e.crisis", {
                            rotate: -10,
                            y: 600,
                            scale: 2.5
                        })
                    }
                }),
                _y = Zy.extend({
                    elements: Ye.elementsFromImages("crisis"),
                    onLoadComplete() {
                        C.p8.set(".e.crisis", {
                            rotate: -10,
                            y: 600,
                            scale: 2.5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.crisis", {
                            scale: 1,
                            y: 0,
                            rotate: 0
                        }).to(".e.crisis", {
                            scale: 2,
                            y: 0
                        })
                    },
                    onProgress(e) {
                        50 === e && Ye.startShake("crisis", 2, 5, 2)
                    }
                }),
                Qy = Zy.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("crisis"),
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.crisis", {
                            rotate: "random(-360, 360, 45)",
                            scale: 1.5
                        }).to(".e.crisis", {
                            scale: 1
                        })
                    }
                }),
                eb = Zy.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("jacket"),
                    onDiscreteProgress() {
                        C.p8.to(".e.jacket", {
                            scale: 5,
                            rotate: 720
                        })
                    }
                }),
                tb = He.extend({
                    imageManifest: {
                        novel: Promise.resolve().then(s.t.bind(s, 32404, 17)),
                        inside: Promise.resolve().then(s.t.bind(s, 25304, 17))
                    }
                }),
                sb = tb.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("novel", "inside"),
                    onLoadComplete() {
                        C.p8.set(".e.inside", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("novel", "inside", .35)
                    }
                }),
                ib = tb.extend({
                    elements: Ye.elementsFromImages("inside")
                }),
                ob = tb.extend({
                    elements: Ye.elementsFromImages("inside"),
                    onStartProgress() {
                        Ye.startHoldShake("inside")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("inside")
                    }
                }),
                nb = tb.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("inside", "novel"),
                    onLoadComplete() {
                        C.p8.set(".e.novel", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("inside", "novel", .35)
                    }
                }),
                ab = He.extend({
                    imageManifest: {
                        telenovela: Promise.resolve().then(s.t.bind(s, 72146, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "telenovela",
                            images: {
                                tv: [10, 10, 876, 825, 73, 66],
                                commercial: [1472, 10, 536, 458, 386, 133],
                                text20: [768, 956, 163, 58, 737, 316],
                                text10: [445, 845, 416, 71, 724, 185],
                                text03: [10, 922, 393, 66, 733, 201],
                                text02: [413, 926, 345, 64, 734, 225],
                                text01: [10, 998, 295, 62, 735, 250],
                                text00: [10, 845, 425, 67, 732, 185],
                                gloria0: [1472, 478, 517, 426, 411, 142],
                                gloria1: [896, 520, 517, 426, 411, 142],
                                rafael: [1423, 914, 517, 394, 431, 142],
                                off: [896, 10, 566, 500, 379, 110]
                            }
                        }
                    }
                }),
                rb = ab.extend({
                    elements: Ye.elementsFromSprite("sprite", ["off", "gloria0", "tv"]),
                    onLoadComplete() {
                        C.p8.set(".e.gloria0", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.fillTime(3).to(".e.gloria0", {
                            opacity: 1
                        })
                    }
                }),
                lb = ab.extend({
                    stepDuration: .35,
                    lastStepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["gloria0", "gloria1", "text00", "text01", "text02", "text03", "tv"]),
                    onLoadComplete() {
                        C.p8.set(".e.gloria1", {
                            visibility: "hidden"
                        }), C.p8.set(".e.text00, .e.text01, .e.text02, .e.text03", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.fillTime(4).set(".e.text00", {
                            hidden: !1
                        }, .5).set(".e.text00", {
                            hidden: !0
                        }, 1.5).set(".e.text01", {
                            hidden: !1
                        }, 1.5).set(".e.text01", {
                            hidden: !0
                        }, 2.5).set(".e.text02", {
                            hidden: !1
                        }, 2.5).set(".e.gloria0", {
                            visibility: "hidden"
                        }, 2.5).set(".e.gloria1", {
                            visibility: "visible"
                        }, 2.5).set(".e.text02", {
                            hidden: !0
                        }, 3.5).set(".e.text03", {
                            hidden: !1
                        }, 3.5)
                    }
                }),
                db = ab.extend({
                    elements: Ye.elementsFromSprite("sprite", ["gloria1", "text10", "tv"]),
                    initializeTimeline() {
                        this.timeline.to(".e.gloria1", {
                            y: 26.5,
                            scale: 1.35,
                            clipPath: "inset(10% 17% 22% 16%)",
                            ease: "none"
                        }).to(".e.gloria1", {
                            y: 53,
                            scale: 1.7,
                            clipPath: "inset(15% 25% 31% 22%)",
                            ease: "none"
                        }).to(".e.gloria1", {
                            y: 79.5,
                            scale: 2.05,
                            clipPath: "inset(18% 28% 35% 27%)",
                            ease: "none"
                        }).to(".e.gloria1", {
                            y: 106,
                            scale: 2.4,
                            clipPath: "inset(20% 30% 40% 31%)",
                            ease: "none"
                        })
                    }
                }),
                pb = ab.extend({
                    stepDuration: .35,
                    lastStepDuration: .75,
                    elements: Ye.elementsFromSprite("sprite", ["rafael", "text20", "text10", "off", "commercial", "tv"]),
                    onLoadComplete() {
                        C.p8.set(".e.text20, .e.text10, .e.off, .e.commercial", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.fillTime(4).set(".e.text20", {
                            hidden: !1
                        }, .5).set(".e.text20", {
                            hidden: !0
                        }, 1.5).set(".e.text10", {
                            hidden: !1
                        }, 1.5).set(".e.text10", {
                            hidden: !0
                        }, 2.5).set(".e.off", {
                            hidden: !1
                        }, 2.5).set(".e.commercial", {
                            hidden: !1
                        }, 3.5)
                    }
                }),
                cb = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 90420, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                chair: [641, 0, 463, 649],
                                grate: [0, 0, 641, 558],
                                hole: [0, 558, 641, 547],
                                candy: [641, 649, 393, 312]
                            }
                        }
                    }
                }),
                mb = cb.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["chair", null, [365, 268]],
                        ["grate", null, [221, 179]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.chair", {
                            x: -300,
                            y: 100,
                            opacity: 0
                        }), C.p8.set(".e.grate", {
                            x: 150,
                            y: -400,
                            scale: .4
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.chair", {
                            x: 0,
                            y: 0,
                            opacity: 1
                        })
                    }
                }),
                hb = cb.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["chair", null, [365, 268]],
                        ["hole", null, [221, 179]],
                        ["grate", null, [221, 179]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.grate, .e.hole", {
                            x: 150,
                            y: -400,
                            scale: .4
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.grate", {
                            x: 50,
                            y: -350
                        })
                    }
                }),
                ub = cb.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["chair", null, [365, 268]],
                        ["hole", null, [221, 179]],
                        ["candy", null, [344, 303]],
                        ["grate", null, [221, 179]]
                    ]),
                    onLoadComplete() {
                        C.p8.to(".e.chair", {
                            opacity: 0,
                            duration: .4
                        }), C.p8.fromTo(".e.candy", {
                            x: -100,
                            y: 150,
                            opacity: 1
                        }, {
                            y: 0,
                            opacity: 1,
                            duration: .4
                        }), C.p8.fromTo(".e.grate", {
                            x: 50,
                            y: -350,
                            scale: .4
                        }, {
                            y: 400,
                            rotate: -110,
                            scale: 1,
                            opacity: 0,
                            duration: .4
                        }), C.p8.fromTo(".e.hole", {
                            x: 150,
                            y: -400,
                            scale: .4
                        }, {
                            x: 0,
                            y: -100,
                            scale: 1,
                            duration: .4
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.candy", {
                            x: 100,
                            y: -100,
                            duration: 1
                        }).fillTime(.5).set(".e.grate", {
                            x: -100,
                            y: -50,
                            rotate: 0,
                            scale: 1
                        }).to(".e.grate", {
                            x: 0,
                            y: -100,
                            duration: 1
                        }).to(".e.grate", {
                            opacity: 1,
                            duration: .5
                        }, "<")
                    }
                }),
                gb = He.extend({
                    imageManifest: {
                        bear: Promise.resolve().then(s.t.bind(s, 85441, 17)),
                        brick: Promise.resolve().then(s.t.bind(s, 73536, 17)),
                        comic: Promise.resolve().then(s.t.bind(s, 24748, 17)),
                        distracted: Promise.resolve().then(s.t.bind(s, 38757, 17)),
                        shrug: Promise.resolve().then(s.t.bind(s, 3892, 17))
                    }
                }),
                yb = gb.extend({
                    elements: Ye.elementsFromImages("distracted"),
                    initializeTimeline() {
                        this.timeline.to(".e.distracted", {
                            scale: .5
                        })
                    },
                    onStartProgress() {
                        Ye.startShake("distracted", 10, 10, .5)
                    },
                    onStopProgress() {
                        Ye.stopShake("distracted")
                    }
                }),
                bb = gb.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("bear"),
                    onDiscreteProgress() {
                        C.p8.to(".e.bear", {
                            y: 1500,
                            scale: 1.1,
                            rotate: 200
                        })
                    }
                }),
                xb = gb.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages(["brick", "brick1"], ["brick", "brick2"], ["brick", "brick3"]),
                    onLoadComplete() {
                        C.p8.set([".e.brick1", ".e.brick2", ".e.brick3"], {
                            scale: .3,
                            y: -1500
                        }), C.p8.to(".e.brick3", {
                            y: 0
                        }), C.p8.to(".e.brick2", {
                            x: -150,
                            y: 25,
                            rotate: -20
                        }), C.p8.to(".e.brick1", {
                            x: 100,
                            y: 25,
                            rotate: 30
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.brick1", {
                            y: 1500,
                            rotate: 200
                        }).to(".e.brick2", {
                            y: 1500,
                            rotate: 200
                        }, "<").to(".e.brick3", {
                            y: 1500,
                            rotate: 200
                        }, "<")
                    }
                }),
                fb = gb.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("comic"),
                    onDiscreteProgress() {
                        C.p8.to(".e.comic", {
                            y: 1500,
                            rotate: 200
                        })
                    }
                }),
                vb = gb.extend({
                    elements: Ye.elementsFromImages("shrug"),
                    initializeTimeline() {
                        this.timeline.to(".e.shrug", {
                            y: -100,
                            scaleY: 1.1
                        }).to(".e.shrug", {
                            y: 0,
                            scaleY: 1
                        }).to(".e.shrug", {
                            y: -100,
                            scaleY: 1.1
                        }).to(".e.shrug", {
                            y: 0,
                            scaleY: 1
                        })
                    }
                }),
                kb = He.extend({
                    imageManifest: {
                        hands: Promise.resolve().then(s.t.bind(s, 96428, 17)),
                        mail: Promise.resolve().then(s.t.bind(s, 3716, 17)),
                        trash: Promise.resolve().then(s.t.bind(s, 81719, 17))
                    }
                }),
                Pb = kb.extend({
                    elements: Ye.elementsFromImages("mail"),
                    onStartProgress() {
                        Ye.startHoldShake("mail")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("mail")
                    }
                }),
                wb = kb.extend({
                    stepDuration: 1.5,
                    elements: Ye.elementsFromImages("mail", "hands"),
                    onLoadComplete() {
                        C.p8.set(".e.hands", {
                            y: 500
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.hands", {
                            y: 0,
                            duration: .5
                        }).to(".e.hands", {
                            y: 1e3,
                            duration: .5
                        }).to(".e.mail", {
                            y: 1e3,
                            duration: .5
                        }, "<")
                    }
                }),
                Tb = kb.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("trash", "mail", "hands"),
                    onLoadComplete() {
                        C.p8.set([".e.mail", ".e.hands"], {
                            y: -300
                        }), C.p8.set(".e.trash", {
                            y: 200
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.hands", {
                            y: 500,
                            opacity: 0,
                            duration: .25
                        }).to(".e.mail", {
                            y: 0,
                            scale: 0,
                            opacity: 0
                        }, "<")
                    }
                }),
                Sb = He.extend({
                    imageManifest: {
                        laptop: Promise.resolve().then(s.t.bind(s, 37327, 17)),
                        pic1: Promise.resolve().then(s.t.bind(s, 60433, 17)),
                        pic2: Promise.resolve().then(s.t.bind(s, 99712, 17)),
                        pic3: Promise.resolve().then(s.t.bind(s, 89926, 17)),
                        post: Promise.resolve().then(s.t.bind(s, 55718, 17))
                    }
                }),
                Mb = Sb.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("laptop"),
                    onDiscreteProgress() {
                        Ye.scaleBounce("laptop")
                    }
                }),
                Cb = Sb.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("pic1"),
                    onLoadComplete() {
                        C.p8.fromTo(".e.pic1", {
                            y: 1e3
                        }, {
                            y: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.pic1", {
                            y: -1e3,
                            opacity: 0
                        })
                    }
                }),
                Db = Sb.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("pic2"),
                    onLoadComplete() {
                        C.p8.fromTo(".e.pic2", {
                            y: 1e3
                        }, {
                            y: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.pic2", {
                            y: -1e3,
                            opacity: 0
                        })
                    }
                }),
                Fb = Sb.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("pic3"),
                    onLoadComplete() {
                        C.p8.fromTo(".e.pic3", {
                            y: 1e3
                        }, {
                            y: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.pic3", {
                            y: -1e3,
                            opacity: 0
                        })
                    }
                }),
                zb = Sb.extend({
                    elements: Ye.elementsFromImages("post"),
                    onDiscreteProgress() {
                        Ye.scaleBounce("post", .9, .1)
                    }
                }),
                Lb = He.extend({
                    imageManifest: {
                        door: Promise.resolve().then(s.t.bind(s, 94286, 17)),
                        house: Promise.resolve().then(s.t.bind(s, 90013, 17)),
                        tree: Promise.resolve().then(s.t.bind(s, 89010, 17)),
                        yard: Promise.resolve().then(s.t.bind(s, 9909, 17))
                    }
                }),
                Rb = Lb.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("door"),
                    onDiscreteProgress() {
                        Ye.squashOnce("door", .35)
                    }
                }),
                Ib = Lb.extend({
                    elements: Ye.elementsFromImages("yard")
                }),
                Ob = Lb.extend({
                    elements: Ye.elementsFromImages("house"),
                    initializeTimeline() {
                        this.timeline.to(".e.house", {
                            scaleY: .7
                        }).to(".e.house", {
                            scaleY: 1.1,
                            skewX: -6
                        }).to(".e.house", {
                            scaleY: .7
                        }).to(".e.house", {
                            scaleY: 1.1,
                            skewX: 6
                        }).to(".e.house", {
                            scaleY: .7
                        }).to(".e.house", {
                            scaleY: 1.1,
                            skewX: -6
                        }).to(".e.house", {
                            scaleY: .7
                        }).to(".e.house", {
                            scaleY: 1.1,
                            skewX: 6
                        }).to(".e.house", {
                            scaleY: .7
                        }).to(".e.house", {
                            scaleY: 1.1,
                            skewX: -6
                        }).to(".e.house", {
                            scaleY: .7
                        }).to(".e.house", {
                            scaleY: 1.1,
                            skewX: 6
                        })
                    }
                }),
                Bb = Lb.extend({
                    elements: Ye.elementsFromImages("tree")
                }),
                Yb = He.extend({
                    imageManifest: {
                        bag: Promise.resolve().then(s.t.bind(s, 58016, 17)),
                        chips: Promise.resolve().then(s.t.bind(s, 5789, 17)),
                        dump: Promise.resolve().then(s.t.bind(s, 45751, 17))
                    }
                }),
                Ab = Yb.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("bag"),
                    onLoadComplete() {
                        C.p8.set(".e.bag", {
                            y: 1e3
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bag", {
                            y: 0
                        })
                    }
                }),
                Hb = Yb.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("bag", "dump"),
                    onLoadComplete() {
                        C.p8.set(".e.dump", {
                            rotation: -155,
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("bag", "dump", .35)
                    }
                }),
                Gb = Yb.extend({
                    elements: Ye.elementsFromImages("dump"),
                    onLoadComplete() {
                        C.p8.set(".e.dump", {
                            rotation: -155
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.dump", {
                            x: -200,
                            y: -200,
                            rotation: 0
                        })
                    }
                }),
                Vb = Yb.extend({
                    elements: [...Ye.elementsFromImages("dump", "chips"), {
                        type: "div",
                        class: "particles",
                        pos: [-25, -275]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.dump", {
                            x: -200,
                            y: -200
                        })
                    },
                    initializeTimeline() {
                        this.emitter = Ye.addParticleEmitter({
                            container: "particles",
                            image: "chips",
                            autoplay: !1,
                            settings: {
                                frequency: .1,
                                minSize: 450,
                                maxSize: 600,
                                randomAngleRange: 15,
                                force: 4,
                                gravity: 9.8
                            }
                        }, this)
                    },
                    onStartProgress() {
                        this.emitter.play()
                    },
                    onStopProgress() {
                        this.emitter.pause()
                    }
                }),
                Eb = He.extend({
                    imageManifest: {
                        bathBubbles: Promise.resolve().then(s.t.bind(s, 23607, 17)),
                        bathEmpty: Promise.resolve().then(s.t.bind(s, 49054, 17)),
                        bathroomDoor: Promise.resolve().then(s.t.bind(s, 98711, 17)),
                        devilInBath: Promise.resolve().then(s.t.bind(s, 69055, 17))
                    }
                }),
                qb = Eb.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("bathroomDoor"),
                    onLoadComplete() {
                        C.p8.set(".e.bathroomDoor", {
                            scale: 2
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.bathroomDoor", {
                            scale: 1.8,
                            duration: .25
                        }).to(".e.bathroomDoor", {
                            scale: 2,
                            duration: .25
                        })
                    }
                }),
                Nb = Eb.extend({
                    elements: [...Ye.elementsFromImages("bathEmpty"), {
                        type: "div",
                        class: "particles",
                        pos: [-300, 70]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.bathEmpty", {
                            scale: 2
                        })
                    },
                    initializeTimeline() {
                        this.emitter = Ye.addParticleEmitter({
                            numberOfParticles: 15,
                            container: "particles",
                            autoplay: !1,
                            zIndex: -1,
                            settings: {
                                frequency: .025,
                                from: {
                                    backgroundColor: "#8cdfe8",
                                    border: "4px solid black",
                                    opacity: 1
                                },
                                to: {
                                    duration: .4,
                                    opacity: 0,
                                    ease: "power2.in"
                                },
                                minSize: 35,
                                maxSize: 55,
                                angle: 90,
                                force: 2,
                                gravity: 9.8
                            }
                        }, this)
                    },
                    onStartProgress() {
                        this.emitter.play()
                    },
                    onStopProgress() {
                        this.emitter.pause()
                    }
                }),
                Xb = Eb.extend({
                    lastStepDuration: .5,
                    elements: [...Ye.elementsFromImages("bathEmpty", "bathBubbles"), {
                        type: "div",
                        class: "particles",
                        pos: [-300, 70]
                    }],
                    onLoadComplete() {
                        C.p8.set([".e.bathEmpty", ".e.bathBubbles"], {
                            scale: 2
                        }), C.p8.set(".e.bathBubbles", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.emitter = Ye.addParticleEmitter({
                            numberOfParticles: 15,
                            container: "particles",
                            autoplay: !0,
                            zIndex: -1,
                            settings: {
                                frequency: .025,
                                from: {
                                    backgroundColor: "#8cdfe8",
                                    border: "4px solid black",
                                    opacity: 1
                                },
                                to: {
                                    duration: .4,
                                    opacity: 0,
                                    ease: "power2.in"
                                },
                                minSize: 35,
                                maxSize: 55,
                                angle: 90,
                                force: 2,
                                gravity: 9.8
                            }
                        }, this)
                    },
                    onDiscreteProgress(e) {
                        C.p8.to(".e.bathBubbles", {
                            opacity: e / 100 * 1
                        })
                    }
                }),
                Wb = Eb.extend({
                    elements: Ye.elementsFromImages("devilInBath"),
                    onLoadComplete() {
                        C.p8.set(".e.devilInBath", {
                            scale: 2
                        })
                    }
                }),
                Ub = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 42316, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                table: [0, 0, 915, 746],
                                book: [915, 453, 305, 241],
                                keys: [915, 311, 130, 142],
                                pencil: [1045, 311, 90, 142],
                                cup: [1135, 0, 220, 311],
                                cupSpilled: [915, 0, 220, 311]
                            }
                        }
                    }
                }),
                $b = Ub.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["table", null, [277, 42]],
                            ["book", null, [439, 277]],
                            ["keys", null, [419, 115]],
                            ["pencil", null, [459, 255]],
                            ["cup", null, [354, 710]],
                            ["cupSpilled", null, [364, 720]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.cupSpilled", {
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.fillTime(4).addLabel("flip", 4.3).to(".e.table", {
                            x: -20,
                            y: -240,
                            rotate: 120,
                            ease: "back.in(1)"
                        }).to(".e.book", {
                            x: -20,
                            y: -300,
                            rotate: 20,
                            ease: "power1.out"
                        }, "flip").to(".e.keys", {
                            x: -120,
                            y: -300,
                            rotate: -60,
                            ease: "power1.out"
                        }, "flip").to(".e.pencil", {
                            x: -40,
                            y: -440,
                            rotate: -320,
                            ease: "power1.out"
                        }, "flip").to(".e.cup", {
                            x: -40,
                            y: -280,
                            rotate: 70,
                            ease: "power1.out"
                        }, "flip").to(".e.cupSpilled", {
                            x: -40,
                            y: -280,
                            rotate: 70,
                            ease: "power1.out"
                        }, "flip").set(".e.cup", {
                            visibility: "hidden"
                        }, 4.4).set(".e.cupSpilled", {
                            visibility: "visible"
                        }, 4.4)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                jb = He.extend({
                    className: "hide-magazine",
                    titles: ["SIN<br/>CITY", "RED HOT<br/>HORNS", "DEVILISH", "PITCHED<br/>FORKS", "CLOVEN<br/>HOOVES", "FANGED<br/>FANTASIES", "PENTAGRAM<br/>FORUM", "GOATEE<br/>FANCY"],
                    imageManifest: {
                        magazine: Promise.resolve().then(s.t.bind(s, 48169, 17)),
                        pillow: Promise.resolve().then(s.t.bind(s, 90602, 17))
                    },
                    elements: [{
                        class: "pillow",
                        type: "img",
                        pos: [0, 0],
                        key: "pillow"
                    }, {
                        class: "magazine-container",
                        type: "container",
                        children: [{
                            class: "magazine",
                            type: "img",
                            pos: [0, 0],
                            key: "magazine"
                        }, {
                            class: "cover",
                            type: "div",
                            pos: [200, 295],
                            html: ""
                        }]
                    }],
                    bindings: {
                        ".cover": {
                            observe: "magazineTitle",
                            updateMethod: "html"
                        }
                    },
                    onLoadComplete() {
                        this.model.get("magazineTitle") || this.model.set({
                            magazineTitle: (0, i.sample)(this.titles)
                        })
                    }
                }),
                Kb = jb.extend({
                    stepDuration: .75,
                    initializeTimeline() {
                        C.p8.set(".e.magazine-container", {
                            visibility: "hidden"
                        });
                        const e = C.p8.timeline().to(".e.pillow", {
                            y: -300
                        });
                        e.name = "pillow", this.timeline.add(e)
                    }
                }),
                Zb = jb.extend({
                    stepDuration: .75,
                    initializeTimeline() {
                        C.p8.set(".e.magazine-container", {
                            y: 30,
                            opacity: 0
                        }), C.p8.to(".e.magazine-container", {
                            opacity: 1,
                            rotation: -10,
                            duration: .25
                        }), C.p8.set(".e.pillow", {
                            y: -300
                        });
                        const e = C.p8.timeline().to(".e.magazine-container", {
                            scale: .6,
                            y: 230,
                            rotation: -85
                        });
                        e.name = "magazine", this.timeline.add(e)
                    }
                }),
                Jb = jb.extend({
                    stepDuration: .75,
                    initializeTimeline() {
                        C.p8.set(".e.magazine-container", {
                            scale: .6,
                            y: 230,
                            rotation: -85
                        }), C.p8.set(".e.pillow", {
                            y: -300,
                            zIndex: 1
                        });
                        const e = C.p8.timeline().to(".e.pillow", {
                            y: 190
                        });
                        e.name = "pillow", this.timeline.add(e)
                    }
                }),
                _b = He.extend({
                    imageManifest: {
                        sneak: Promise.resolve().then(s.t.bind(s, 17366, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sneak",
                            images: {
                                head: [578, 476, 134, 118, 556, 433],
                                hands: [296, 476, 272, 54, 643, 364],
                                opening: [10, 10, 405, 369, 379, 191],
                                running: [296, 540, 93, 89, 0, 0],
                                closed: [10, 389, 276, 181, 500, 360],
                                open: [425, 10, 322, 456, 272, 339]
                            }
                        }
                    }
                }),
                Qb = _b.extend({
                    stepDuration: .4,
                    elements: Ye.elementsFromSprite("sprite", ["open", "closed"]),
                    onLoadComplete() {
                        C.p8.set(".e.closed", {
                            clipPath: "inset(0% 0% 0% 0%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.closed", {
                            y: -150,
                            clipPath: "inset(82% 0% 0% 0%)"
                        })
                    }
                }),
                ex = _b.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["open", "opening"])
                    }],
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                tx = _b.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["open", "head", "hands"])
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.head", {
                            y: 80,
                            clipPath: "inset(0% 0% 61% 0%)",
                            duration: 1
                        }).to(".e.head", {
                            y: 115,
                            clipPath: "inset(0% 0% 100% 0%)",
                            duration: .02
                        }).to(".e.hands", {
                            y: 30,
                            clipPath: "inset(0% 0% 100% 0%)",
                            duration: .02
                        }, 1).fillTime(.2)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                sx = _b.extend({
                    stepDuration: .5,
                    elements: [...Ye.elementsFromSprite("sprite", ["open"]), {
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["running"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.c", {
                            top: 528,
                            left: 393,
                            width: 212,
                            height: 144,
                            overflow: "hidden"
                        }), C.p8.set(".e.running", {
                            x: -110,
                            y: 45,
                            scale: 1.4
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.running", {
                            x: 230,
                            scale: 1.4
                        }).set(".e.running", {
                            scaleX: -1.4
                        }).to(".e.running", {
                            x: -110,
                            scaleX: -1.1,
                            scaleY: 1.1
                        }).set(".e.running", {
                            scale: 1.1
                        }).to(".e.running", {
                            x: 230,
                            scale: .8
                        }).set(".e.running", {
                            scaleX: -.8
                        }).to(".e.running", {
                            x: -110,
                            scaleX: -.5,
                            scaleY: .5
                        }).set(".e.running", {
                            scale: .5
                        }).to(".e.running", {
                            x: 230,
                            scale: .3
                        })
                    }
                }),
                ix = He.extend({
                    imageManifest: {
                        coaster: Promise.resolve().then(s.t.bind(s, 85582, 17)),
                        coasterRefuse: Promise.resolve().then(s.t.bind(s, 80279, 17)),
                        drinkRing: Promise.resolve().then(s.t.bind(s, 50071, 17)),
                        drinks: Promise.resolve().then(s.t.bind(s, 7489, 17))
                    }
                }),
                ox = ix.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("drinks"),
                    onDiscreteProgress() {
                        Ye.squashOnce("drinks", .25)
                    }
                }),
                nx = ix.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("coaster"),
                    onDiscreteProgress() {
                        Ye.squashOnce("coaster", .25)
                    }
                }),
                ax = ix.extend({
                    elements: Ye.elementsFromImages("coasterRefuse")
                }),
                rx = ix.extend({
                    elements: Ye.elementsFromImages("drinkRing")
                }),
                lx = He.extend({
                    imageManifest: {
                        grandpa1: Promise.resolve().then(s.t.bind(s, 26532, 17)),
                        grandpa2: Promise.resolve().then(s.t.bind(s, 15378, 17)),
                        grandpa3: Promise.resolve().then(s.t.bind(s, 18925, 17))
                    }
                }),
                dx = lx.extend({
                    stepDuration: .4,
                    elements: Ye.elementsFromImages("grandpa1"),
                    onDiscreteProgress() {
                        Ye.squashOnce("grandpa1", .4)
                    }
                }),
                px = lx.extend({
                    elements: Ye.elementsFromImages("grandpa2"),
                    onStartProgress() {
                        Ye.startHoldShake("grandpa2")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("grandpa2")
                    }
                }),
                cx = lx.extend({
                    elements: Ye.elementsFromImages("grandpa3"),
                    onLoadComplete() {
                        Ye.startHoldShake("grandpa3")
                    }
                }),
                mx = He.extend({
                    imageManifest: {
                        hide: Promise.resolve().then(s.t.bind(s, 71903, 17)),
                        tv: Promise.resolve().then(s.t.bind(s, 21315, 17))
                    }
                }),
                hx = mx.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("tv"),
                    onDiscreteProgress() {
                        Ye.squashOnce("tv", .35)
                    }
                }),
                ux = mx.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("tv", ["hide", "handL"], ["hide", "handR"]),
                    onLoadComplete() {
                        C.p8.set(".e.handL", {
                            x: -800,
                            y: 500,
                            scaleX: -1
                        }), C.p8.set(".e.handR", {
                            x: 800,
                            y: 500
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.handL", {
                            x: -100,
                            y: 0
                        }, 0).to(".e.handR", {
                            x: 100,
                            y: 0
                        }, 0)
                    }
                }),
                gx = mx.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("tv", ["hide", "handL"], ["hide", "handR"]),
                    onLoadComplete() {
                        C.p8.set(".e.handL", {
                            x: -100,
                            scaleX: -1
                        }), C.p8.set(".e.handR", {
                            x: 100
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.handL", {
                            x: -300,
                            y: 700
                        }, 0).to(".e.handR", {
                            x: 300,
                            y: 700
                        }, 0)
                    }
                }),
                yx = mx.extend({
                    elements: Ye.elementsFromImages("tv", ["hide", "handL"], ["hide", "handR"]),
                    onLoadComplete() {
                        C.p8.set(".e.handL", {
                            x: -300,
                            y: 700,
                            scaleX: -1
                        }), C.p8.set(".e.handR", {
                            x: 300,
                            y: 700
                        }), Ye.startShake("tv", 8, 0, 2)
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.tv", {
                            scale: 1.3,
                            duration: 10
                        }).to(".e.handL, .e.handR", {
                            opacity: 0,
                            duration: 1
                        }, 0)
                    }
                }),
                bx = He.extend({
                    imageManifest: {
                        door: Promise.resolve().then(s.t.bind(s, 54425, 17)),
                        iron: Promise.resolve().then(s.t.bind(s, 9714, 17))
                    },
                    sprites: {
                        iron: {
                            key: "iron",
                            images: {
                                front: [0, 0, 197, 937],
                                back: [197, 0, 131, 937]
                            }
                        }
                    }
                }),
                xx = bx.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("door"),
                    onDiscreteProgress() {
                        Ye.squashOnce("door", .45)
                    }
                }),
                fx = bx.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("iron", ["back", "front"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.front", {
                            x: 300,
                            y: 50,
                            rotate: 25
                        }), C.p8.set(".e.back", {
                            x: 193,
                            y: 40,
                            rotate: 45,
                            transformOrigin: "55px 856px"
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c"), C.p8.to(".e.back", {
                            rotate: 25,
                            duration: .2
                        })
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c"), C.p8.to(".e.back", {
                            rotate: 45,
                            duration: .2
                        })
                    }
                }),
                vx = bx.extend({
                    elements: Ye.elementsFromImages("door"),
                    onLoadComplete() {
                        C.p8.timeline({
                            repeat: -1
                        }).to(".e.door", {
                            x: -12,
                            y: 12,
                            duration: .03
                        }).to(".e.door", {
                            x: 8,
                            y: -8,
                            duration: .03
                        }).to(".e.door", {
                            x: -6,
                            y: -6,
                            duration: .03
                        }).to(".e.door", {
                            x: 4,
                            y: 4,
                            duration: .03
                        }).fillTime(.1).to(".e.door", {
                            x: 12,
                            y: -12,
                            duration: .03
                        }).to(".e.door", {
                            x: -8,
                            y: 8,
                            duration: .03
                        }).to(".e.door", {
                            x: 6,
                            y: 6,
                            duration: .03
                        }).to(".e.door", {
                            x: -4,
                            y: -4,
                            duration: .03
                        }).fillTime(.5)
                    }
                }),
                kx = fx,
                Px = He.extend({
                    imageManifest: {
                        downloadMore: Promise.resolve().then(s.t.bind(s, 30269, 17)),
                        ignoreMessage: Promise.resolve().then(s.t.bind(s, 62005, 17)),
                        phoneMusic: Promise.resolve().then(s.t.bind(s, 22498, 17)),
                        phoneStream: Promise.resolve().then(s.t.bind(s, 21082, 17)),
                        phoneVideo: Promise.resolve().then(s.t.bind(s, 16535, 17))
                    }
                }),
                wx = Px.extend({
                    elements: Ye.elementsFromImages("phoneVideo"),
                    onStartProgress() {
                        Ye.startHoldShake("phoneVideo")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("phoneVideo")
                    }
                }),
                Tx = Px.extend({
                    elements: Ye.elementsFromImages("phoneMusic"),
                    onStartProgress() {
                        Ye.startHoldShake("phoneMusic")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("phoneMusic")
                    }
                }),
                Sx = Px.extend({
                    elements: Ye.elementsFromImages("phoneStream"),
                    onStartProgress() {
                        Ye.startHoldShake("phoneStream")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("phoneStream")
                    }
                }),
                Mx = Px.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("ignoreMessage"),
                    onDiscreteProgress() {
                        Ye.squashOnce("ignoreMessage")
                    }
                }),
                Cx = Px.extend({
                    elements: Ye.elementsFromImages("downloadMore"),
                    onStartProgress() {
                        Ye.startHoldShake("downloadMore")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("downloadMore")
                    }
                }),
                Dx = He.extend({
                    imageManifest: {
                        shooParent: Promise.resolve().then(s.t.bind(s, 33624, 17)),
                        trentTalk: Promise.resolve().then(s.t.bind(s, 50157, 17)),
                        phone: Promise.resolve().then(s.t.bind(s, 99163, 17))
                    }
                }),
                Fx = Dx.extend({
                    elements: Ye.elementsFromImages("trentTalk"),
                    onStartProgress() {
                        Ye.startHoldShake("trentTalk")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("trentTalk")
                    }
                }),
                zx = Dx.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("shooParent"),
                    onDiscreteProgress() {
                        Ye.squashOnce("shooParent", .35, "y")
                    }
                }),
                Lx = Dx.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("phone"),
                    onDiscreteProgress() {
                        Ye.squashOnce("phone", .35)
                    }
                }),
                Rx = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 73184, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                phone: [0, 0, 604, 878],
                                camera: [604, 0, 508, 748],
                                timer: [1112, 0, 508, 748],
                                frame: [1620, 0, 508, 748],
                                devil: [2128, 0, 433, 748]
                            }
                        }
                    }
                }),
                Ix = Rx.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["phone", null, [61, 198]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.phone", {
                            x: -150,
                            y: 150,
                            scale: .7,
                            rotate: -30
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.phone", {
                            x: 0,
                            y: 0,
                            scale: 1,
                            rotate: 0,
                            ease: "back.out(2)"
                        })
                    }
                }),
                Ox = Rx.extend({
                    stepDuration: .35,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["phone", null, [61, 198]],
                            ["camera", null, [96, 252]],
                            ["timer", null, [96, 252]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.camera, .e.timer", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.camera", {
                            opacity: 1
                        }).to(".e.timer", {
                            opacity: 1
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("c", .35)
                    }
                }),
                Bx = Rx.extend({
                    elements: [...Ye.elementsFromSprite("sprite", [
                        ["phone", null, [61, 198]],
                        ["devil", null, [96, 283.5]]
                    ]), {
                        class: "flash",
                        type: "div",
                        pos: [250, 310]
                    }, ...Ye.elementsFromSprite("sprite", [
                        ["frame", null, [96, 252]]
                    ])],
                    onLoadComplete() {
                        C.p8.set(".e.flash", {
                            width: 370,
                            height: 380,
                            skewX: 8,
                            skewY: -13,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.devil", {
                            x: 10,
                            y: 17,
                            duration: 1,
                            ease: "sine.inOut"
                        }).to(".e.devil", {
                            x: 0,
                            y: 6,
                            duration: 1,
                            ease: "sine.inOut"
                        }, 1).to(".e.devil", {
                            x: 5,
                            y: 17,
                            duration: 1,
                            ease: "sine.inOut"
                        }, 2).to(".e.devil", {
                            x: 0,
                            y: 0,
                            duration: 1,
                            ease: "sine.inOut"
                        }, 3).to(".e.devil", {
                            x: 5,
                            y: 0,
                            duration: 1,
                            ease: "sine.inOut"
                        }, 4).to(".e.devil", {
                            x: 5,
                            y: 6,
                            duration: 1,
                            ease: "sine.inOut"
                        }, 5).to(".e.flash", {
                            opacity: 1,
                            duration: .1
                        }, 6).to(".e.flash", {
                            opacity: 0,
                            duration: .4
                        }, 6.15).fillTime(1)
                    }
                }),
                Yx = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 91407, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                card0: [794, 424, 774, 498, 251, 113],
                                card1: [10, 374, 774, 497, 252, 113],
                                card2: [10, 881, 774, 498, 251, 113],
                                sleeve2: [1266, 10, 376, 404, 384, 479],
                                sleeve1: [345, 10, 353, 352, 436, 479],
                                sleeve0: [10, 10, 325, 288, 500, 479],
                                open: [794, 932, 742, 598, 201, 129],
                                closed: [708, 10, 548, 354, 323, 226]
                            }
                        }
                    },
                    elements: [{
                        class: "open-c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["open", null, [201, 129]],
                            ["card2", null, [251, 113]],
                            ["sleeve2", null, [384, 479]],
                            ["card1", null, [252, 113]],
                            ["sleeve1", null, [436, 479]],
                            ["card0", null, [251, 113]],
                            ["sleeve0", null, [500, 479]]
                        ])
                    }, ...Ye.elementsFromSprite("sprite", [
                        ["closed", null, [323, 226]]
                    ])]
                }),
                Ax = Yx.extend({
                    stepDuration: .35,
                    onLoadComplete() {
                        C.p8.set(".e.open-c", {
                            hidden: !0
                        }), C.p8.set(".e.card0", {
                            x: 147,
                            y: 115,
                            scale: .35,
                            rotate: 30
                        }), C.p8.set(".e.card1", {
                            x: 159,
                            y: 75,
                            scale: .35,
                            rotate: 28
                        }), C.p8.set(".e.card2", {
                            x: 190,
                            y: 30,
                            scale: .35,
                            rotate: 26
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("closed", "open-c", .35)
                    }
                }),
                Hx = Yx.extend({
                    onLoadComplete() {
                        C.p8.set(".e.closed", {
                            hidden: !0
                        }), C.p8.set(".e.card0", {
                            x: 147,
                            y: 115,
                            scale: .35,
                            rotate: 30
                        }), C.p8.set(".e.card1", {
                            x: 159,
                            y: 75,
                            scale: .35,
                            rotate: 28
                        }), C.p8.set(".e.card2", {
                            x: 190,
                            y: 30,
                            scale: .35,
                            rotate: 26
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.card0", {
                            x: 157,
                            y: 15,
                            rotate: 10
                        }).to(".e.card0", {
                            x: 147,
                            y: 115,
                            rotate: 30
                        }).to(".e.card1", {
                            x: 169,
                            y: -25,
                            rotate: 10
                        }).to(".e.card1", {
                            x: 159,
                            y: 75,
                            rotate: 28
                        }).to(".e.card2", {
                            x: 200,
                            y: -70,
                            rotate: 10
                        }).to(".e.card2", {
                            x: 190,
                            y: 30,
                            rotate: 26
                        })
                    }
                }),
                Gx = Yx.extend({
                    onLoadComplete() {
                        C.p8.set(".e.closed", {
                            hidden: !0
                        }), C.p8.set(".e.card0", {
                            x: 147,
                            y: 115,
                            scale: .35,
                            rotate: 30
                        }), C.p8.set(".e.card1", {
                            x: 159,
                            y: 75,
                            scale: .35,
                            rotate: 28
                        }), C.p8.set(".e.card2", {
                            x: 190,
                            y: 30,
                            scale: .35,
                            rotate: 26
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("open-c", "closed", .5)).fillTime(1).add(Ye.squashTransition("closed", "open-c", .5)).fillTime(1).add(Ye.squashTransition("open-c", "closed", .5)).fillTime(1).add(Ye.squashTransition("closed", "open-c", .5)).fillTime(1).add(Ye.squashTransition("open-c", "closed", .5))
                    }
                }),
                Vx = Yx.extend({
                    onLoadComplete() {
                        C.p8.set(".e.open-c", {
                            hidden: !0
                        }), C.p8.set(".e.card0", {
                            x: 147,
                            y: 115,
                            scale: .35,
                            rotate: 30
                        }), C.p8.set(".e.card1", {
                            x: 159,
                            y: 75,
                            scale: .35,
                            rotate: 28
                        }), C.p8.set(".e.card2", {
                            x: 190,
                            y: 30,
                            scale: .35,
                            rotate: 26
                        })
                    },
                    initializeTimeline() {
                        this.timeline.fillTime(3).add(Ye.squashTransition("closed", "open-c", .5)).fillTime(.25)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("closed")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("closed")
                    }
                }),
                Ex = Yx.extend({
                    stepDuration: .65,
                    onLoadComplete() {
                        C.p8.set(".e.closed", {
                            hidden: !0
                        }), C.p8.set(".e.card0", {
                            x: 147,
                            y: 115,
                            scale: .35,
                            rotate: 30
                        }), C.p8.set(".e.card1", {
                            x: 159,
                            y: 75,
                            scale: .35,
                            rotate: 28
                        }), C.p8.set(".e.card2", {
                            x: 190,
                            y: 30,
                            scale: .35,
                            rotate: 26
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.card0", {
                            x: 203,
                            y: 0,
                            ease: "power2.in"
                        }).set(".e.card0", {
                            zIndex: 1
                        }).to(".e.card0", {
                            x: 0,
                            y: 0,
                            scale: 1,
                            rotate: 0,
                            ease: "power2.out"
                        }).fillTime(.15)
                    }
                }),
                qx = He.extend({
                    imageManifest: {
                        slam: Promise.resolve().then(s.t.bind(s, 47242, 17)),
                        yell: Promise.resolve().then(s.t.bind(s, 97369, 17))
                    }
                }),
                Nx = qx.extend({
                    elements: Ye.elementsFromImages("yell"),
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            repeat: 7,
                            yoyo: !0
                        }).to(".e.yell", {
                            scale: .9
                        });
                        this.timeline.add(e)
                    }
                }),
                Xx = qx.extend({
                    elements: Ye.elementsFromImages("yell"),
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            repeat: 7,
                            yoyo: !0
                        }).to(".e.yell", {
                            scale: 1.2
                        });
                        this.timeline.add(e)
                    }
                }),
                Wx = qx.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("slam"),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("slam"))
                    }
                }),
                Ux = Zo.extend({
                    imageManifest: {
                        scowl: Promise.resolve().then(s.t.bind(s, 38233, 17))
                    }
                }),
                $x = ts.extend({
                    imageManifest: {
                        frown: Promise.resolve().then(s.t.bind(s, 13568, 17))
                    }
                }),
                jx = po.extend({
                    imageManifest: {
                        glare: Promise.resolve().then(s.t.bind(s, 41531, 17))
                    }
                }),
                Kx = He.extend({
                    imageManifest: {
                        car: Promise.resolve().then(s.t.bind(s, 91030, 17)),
                        mailbox: Promise.resolve().then(s.t.bind(s, 3521, 17)),
                        pedal: Promise.resolve().then(s.t.bind(s, 5890, 17))
                    }
                }),
                Zx = Kx.extend({
                    elements: Ye.elementsFromImages("car"),
                    onStartProgress() {
                        C.p8.to(".e.car", {
                            y: "-=20",
                            yoyo: !0,
                            repeat: -1,
                            duration: .1
                        }), C.p8.to(".e.car", {
                            y: "+=20",
                            yoyo: !0,
                            repeat: -1,
                            duration: .1
                        })
                    },
                    onStopProgress() {
                        C.p8.killTweensOf(".e.car")
                    }
                }),
                Jx = Kx.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("pedal"),
                    initializeTimeline() {
                        this.timeline.to(".e.pedal", {
                            rotation: -10,
                            scaleY: .9
                        })
                    }
                }),
                _x = Kx.extend({
                    elements: Ye.elementsFromImages("mailbox"),
                    onLoadComplete() {
                        C.p8.set(".e.mailbox", {
                            scale: .75
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.mailbox", {
                            scale: 2,
                            motionPath: [{
                                x: 0,
                                y: 0
                            }, {
                                x: 250,
                                y: 125
                            }, {
                                x: 500,
                                y: 500
                            }, {
                                x: 1e3,
                                y: 500
                            }]
                        })
                    }
                }),
                Qx = Kx.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("car"),
                    onLoadComplete() {
                        C.p8.to(".e.car", {
                            y: "-=20",
                            yoyo: !0,
                            repeat: -1,
                            duration: .1
                        }), C.p8.to(".e.car", {
                            y: "+=20",
                            yoyo: !0,
                            repeat: -1,
                            duration: .1
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.killTweensOf(".e.car")
                    }
                }),
                ef = He.extend({
                    imageManifest: {
                        toy: Promise.resolve().then(s.t.bind(s, 43282, 17))
                    }
                }),
                tf = ef.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("toy"),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("toy", .25))
                    }
                }),
                sf = ef.extend({
                    elements: Ye.elementsFromImages("toy"),
                    onStartProgress() {
                        Ye.startHoldShake("toy")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("toy")
                    }
                }),
                of = ef.extend({
                    elements: Ye.elementsFromImages("toy")
                }),
                nf = He.extend({
                    imageManifest: {
                        shrine0: Promise.resolve().then(s.t.bind(s, 10740, 17)),
                        shrine1: Promise.resolve().then(s.t.bind(s, 37032, 17))
                    },
                    sprites: {
                        sprite0: {
                            key: "shrine0",
                            images: {
                                star2: [10, 935, 705, 890, 71, 136],
                                star1: [725, 935, 705, 890, 71, 136],
                                star0: [826, 10, 705, 890, 71, 136],
                                shrine2: [1644, 1073, 194, 245, 22, 30],
                                shrine4: [1440, 1204, 194, 240, 314, 30],
                                shrine1: [1780, 619, 195, 218, 577, 45],
                                shrine5: [1440, 945, 194, 249, 57, 724],
                                shrine3: [1541, 619, 229, 316, 322, 724],
                                shrine0: [1780, 847, 195, 216, 643, 724],
                                shrine: [1541, 10, 427, 599, 77, 266],
                                magazine: [10, 10, 806, 915, 30, 83]
                            }
                        },
                        sprite1: {
                            key: "shrine1",
                            images: {
                                dream: [10, 10, 880, 587, 207, 65],
                                devil: [900, 390, 802, 572, 121, 132],
                                cry: [900, 10, 875, 370, 526, 54]
                            }
                        }
                    }
                }),
                af = nf.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite0", ["magazine", "star0", "star1", "star2"]),
                    onLoadComplete() {
                        C.p8.set(".e.star0, .e.star1, .e.star2", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("magazine", "star2")).add(Ye.squashTransition("star2", "star1")).add(Ye.squashTransition("star1", "star0"))
                    }
                }),
                rf = nf.extend({
                    elements: Ye.elementsFromSprite("sprite0", ["shrine", "star0", "shrine0", "shrine1", "shrine2", "shrine3", "shrine4", "shrine5"]),
                    onLoadComplete() {
                        C.p8.set(".e.shrine0", {
                            x: -350,
                            y: -310,
                            rotate: 8,
                            scale: .7,
                            hidden: !0
                        }), C.p8.set(".e.shrine1", {
                            x: 330,
                            y: -240,
                            rotate: -8,
                            scale: .7,
                            hidden: !0
                        }), C.p8.set(".e.shrine2", {
                            x: 350,
                            y: 290,
                            rotate: 8,
                            scale: .7,
                            hidden: !0
                        }), C.p8.set(".e.shrine3", {
                            x: -350,
                            y: -50,
                            rotate: -8,
                            scale: .7,
                            hidden: !0
                        }), C.p8.set(".e.shrine4", {
                            x: 350,
                            y: 0,
                            rotate: 8,
                            scale: .7,
                            hidden: !0
                        }), C.p8.set(".e.shrine5", {
                            x: -340,
                            y: 260,
                            rotate: -8,
                            scale: .7,
                            hidden: !0
                        }), C.p8.to(".e.star0", {
                            y: -100,
                            scale: .7,
                            opacity: 0,
                            duration: .4
                        })
                    },
                    initializeTimeline() {
                        for (let e = 0; e <= 5; e++) {
                            const t = `.e.shrine${e}`,
                                s = C.p8.timeline().set(t, {
                                    hidden: !1
                                }, 0).to(t, {
                                    scale: 2,
                                    ease: "back.out(2)"
                                }, 0).to(t, {
                                    x: 0,
                                    y: 0,
                                    rotate: 0,
                                    scale: 1
                                }, 1.2);
                            this.timeline.add(s)
                        }
                    }
                }),
                lf = nf.extend({
                    elements: Ye.elementsFromSprite("sprite1", ["dream"])
                }),
                df = nf.extend({
                    elements: Ye.elementsFromSprite("sprite1", ["cry", "devil"]),
                    onLoadComplete() {
                        C.p8.set(".e.cry", {
                            x: 200,
                            y: -100,
                            scale: .3
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cry", {
                            x: 0,
                            y: 0,
                            scale: 1
                        })
                    }
                }),
                pf = He.extend({
                    imageManifest: {
                        disguised: Promise.resolve().then(s.t.bind(s, 35706, 17)),
                        manga: Promise.resolve().then(s.t.bind(s, 70225, 17)),
                        open: Promise.resolve().then(s.t.bind(s, 3796, 17)),
                        textbook: Promise.resolve().then(s.t.bind(s, 37727, 17))
                    }
                }),
                cf = pf.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("textbook", "open"),
                    onLoadComplete() {
                        C.p8.set(".e.open", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("textbook", "open", .5)
                    }
                }),
                mf = pf.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("open", "manga"),
                    onLoadComplete() {
                        C.p8.set(".e.manga", {
                            y: 300,
                            scale: 3,
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.manga", {
                            y: 0,
                            x: 200,
                            scale: .65,
                            opacity: 1,
                            duration: .5
                        })
                    }
                }),
                hf = pf.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("open", "manga", "disguised"),
                    onLoadComplete() {
                        C.p8.set(".e.manga", {
                            x: 200,
                            scale: .65
                        }), C.p8.set(".e.disguised", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("open", "disguised", .5), C.p8.timeline().to(".e.manga", {
                            scaleY: .9,
                            duration: .25
                        }).to(".e.manga", {
                            scaleX: .9,
                            scaleY: .5,
                            duration: .125
                        }).set(".e.manga", {
                            hidden: !0
                        })
                    }
                }),
                uf = He.extend({
                    imageManifest: {
                        trash: Promise.resolve().then(s.t.bind(s, 19765, 17)),
                        broom: Promise.resolve().then(s.t.bind(s, 84030, 17)),
                        distraction: Promise.resolve().then(s.t.bind(s, 32931, 17)),
                        controller: Promise.resolve().then(s.t.bind(s, 20010, 17)),
                        yoke: Promise.resolve().then(s.t.bind(s, 95684, 17)),
                        up: Promise.resolve().then(s.t.bind(s, 56374, 17)),
                        down: Promise.resolve().then(s.t.bind(s, 69482, 17))
                    }
                }),
                gf = uf.extend({
                    elements: [{
                        class: "items",
                        type: "container",
                        children: Ye.elementsFromImages("trash", "broom", "distraction")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.trash", {
                            scale: .9,
                            x: -120
                        }), C.p8.set(".e.broom", {
                            x: 280
                        }), C.p8.set(".e.distraction", {
                            x: 640,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.items", {
                            x: 120,
                            ease: "power1.in"
                        }).to(".e.items", {
                            x: -280,
                            delay: .15,
                            ease: "power1.in"
                        }).to(".e.items", {
                            x: -640,
                            delay: .15,
                            ease: "power1.in"
                        }).to(".e.distraction", {
                            opacity: 1
                        }, "<")
                    }
                }),
                yf = uf.extend({
                    stepDuration: .3,
                    elements: Ye.elementsFromImages("controller", ["yoke", null, [50, 406]], ["up", null, [506, 205]], ["down", null, [506, 205]]),
                    onLoadComplete() {
                        C.p8.set(".e.down", {
                            visibility: "hidden"
                        }), C.p8.set(".e.yoke", {
                            transformOrigin: "center 105%"
                        })
                    },
                    onDiscreteProgress() {
                        const e = Math.random();
                        e < .33 ? C.p8.to(".e.yoke", {
                            rotate: 30,
                            duration: .12,
                            yoyo: !0,
                            repeat: 1
                        }) : e < .66 ? C.p8.to(".e.yoke", {
                            rotate: -30,
                            duration: .12,
                            yoyo: !0,
                            repeat: 1
                        }) : (C.p8.to(".e.up", {
                            visibility: "hidden",
                            duration: .1,
                            yoyo: !0,
                            repeat: 1
                        }), C.p8.to(".e.down", {
                            visibility: "visible",
                            duration: .1,
                            yoyo: !0,
                            repeat: 1
                        }))
                    }
                }),
                bf = He.extend({
                    imageManifest: {
                        straw: Promise.resolve().then(s.t.bind(s, 95451, 17)),
                        ball: Promise.resolve().then(s.t.bind(s, 34589, 17)),
                        spit: Promise.resolve().then(s.t.bind(s, 90981, 17))
                    }
                }),
                xf = bf.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("straw", ["spit", null, [510, 850]], ["ball", null, [335, 833]])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.spit", {
                            transformOrigin: "top center",
                            scaleY: .6
                        }), C.p8.to(".e.spit", {
                            scaleY: 1.1,
                            duration: 2.5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            rotate: -10
                        }).to(".e.c", {
                            rotate: 0
                        }).to(".e.c", {
                            rotate: 10
                        }).to(".e.c", {
                            rotate: 0
                        })
                    }
                }),
                ff = bf.extend({
                    stepDuration: .7,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("straw", ["spit", null, [510, 850]], ["ball", null, [335, 833]])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.spit", {
                            transformOrigin: "top center",
                            scaleY: 1.1
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.straw, .e.spit", {
                            x: -1e3,
                            duration: .4
                        }).to(".e.ball", {
                            x: -400,
                            rotate: -300,
                            duration: 1
                        })
                    }
                }),
                vf = He.extend({
                    imageManifest: {
                        sign: Promise.resolve().then(s.t.bind(s, 88411, 17))
                    },
                    sprites: {
                        sign: {
                            key: "sign",
                            images: {
                                tape: [10, 10, 113, 171, 82, 443],
                                sign: [401, 10, 590, 770, 148, 219],
                                young: [133, 10, 258, 467, 397, 543],
                                adult: [1001, 10, 281, 800, 64, 219]
                            }
                        }
                    }
                }),
                kf = vf.extend({
                    elements: Ye.elementsFromSprite("sign", [
                        ["adult", null, [64, 219]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.adult", {
                            x: 150
                        })
                    }
                }),
                Pf = vf.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sign", [
                        ["young", null, [397, 543]],
                        ["adult", null, [64, 219]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.young", {
                            x: 150,
                            y: 50,
                            scale: .7,
                            opacity: 0
                        }), C.p8.set(".e.adult", {
                            x: 150
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.adult", {
                            x: 0
                        }).to(".e.young", {
                            x: 0,
                            y: 0,
                            scale: 1,
                            opacity: 1
                        }, 0)
                    }
                }),
                wf = vf.extend({
                    elements: Ye.elementsFromSprite("sign", [
                        ["sign", null, [148, 219]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.sign", {
                            x: 50,
                            y: 50,
                            rotate: -120
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.sign", {
                            x: 0,
                            y: 0,
                            rotate: 0
                        })
                    }
                }),
                Tf = vf.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sign", [
                        ["sign", null, [148, 219]],
                        ["tape", null, [82, 443]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.tape", {
                            clipPath: "inset(100% 0% 0% 0%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.tape", {
                            clipPath: "inset(0% 0% 0% 0%)"
                        })
                    }
                }),
                Sf = He.extend({
                    imageManifest: {
                        milk: Promise.resolve().then(s.t.bind(s, 86766, 17))
                    },
                    elements: Ye.elementsFromImages("milk")
                }),
                Mf = Sf.extend({
                    stepDuration: .45,
                    initializeTimeline() {
                        this.timeline.to(".e.milk", {
                            y: -100,
                            rotate: -120,
                            scale: 1.2
                        })
                    }
                }),
                Cf = Sf.extend({
                    stepDuration: .5,
                    onLoadComplete() {
                        C.p8.set(".e.milk", {
                            y: -100,
                            rotate: -120,
                            scale: 1.2
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.milk", {
                            y: 0,
                            rotate: 0,
                            scale: 1,
                            ease: "back.in(2)"
                        })
                    }
                }),
                Df = Sf.extend({
                    initializeTimeline() {
                        this.timeline.to(".e.milk", {
                            x: 150,
                            scale: .9
                        }).to(".e.milk", {
                            x: 275,
                            scale: .8
                        }).to(".e.milk", {
                            x: 375,
                            scale: .7
                        }).to(".e.milk", {
                            x: 450,
                            scale: .6
                        }).to(".e.milk", {
                            x: 500,
                            scale: .5
                        })
                    }
                }),
                Ff = He.extend({
                    imageManifest: {
                        reportcard1: Promise.resolve().then(s.t.bind(s, 94905, 17)),
                        reportcard2: Promise.resolve().then(s.t.bind(s, 6246, 17)),
                        reportcard3: Promise.resolve().then(s.t.bind(s, 33075, 17))
                    }
                }),
                zf = Ff.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("reportcard1", "reportcard2"),
                    onLoadComplete() {
                        C.p8.set(".e.reportcard2", {
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("reportcard1"), Ye.squashOnce("reportcard2"), C.p8.timeline().to(".e.reportcard1", {
                            opacity: 0
                        }).to(".e.reportcard2", {
                            opacity: 1
                        }, "<")
                    }
                }),
                Lf = Ff.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("reportcard2", "reportcard3"),
                    onLoadComplete() {
                        C.p8.set(".e.reportcard3", {
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("reportcard2"), Ye.squashOnce("reportcard3"), C.p8.timeline().to(".e.reportcard2", {
                            opacity: 0
                        }).to(".e.reportcard3", {
                            opacity: 1
                        }, "<")
                    }
                }),
                Rf = Ff.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("reportcard3"),
                    onDiscreteProgress() {
                        C.p8.to(".e.reportcard3", {
                            x: -1500,
                            scaleX: 1.2
                        })
                    }
                }),
                If = He.extend({
                    imageManifest: {
                        eyeroll: Promise.resolve().then(s.t.bind(s, 60666, 17)),
                        pupils: Promise.resolve().then(s.t.bind(s, 31152, 17)),
                        frown: Promise.resolve().then(s.t.bind(s, 12980, 17)),
                        snarl: Promise.resolve().then(s.t.bind(s, 56170, 17))
                    }
                }),
                Of = If.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("frown"),
                    onDiscreteProgress() {
                        Ye.scaleBounce("frown")
                    }
                }),
                Bf = If.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("snarl", "frown"),
                    onLoadComplete() {
                        C.p8.set(".e.snarl", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("frown", "snarl", .5)
                    }
                }),
                Yf = If.extend({
                    elements: Ye.elementsFromImages("eyeroll", "pupils"),
                    onLoadComplete() {
                        C.p8.set(".e.pupils", {
                            x: -30,
                            y: 10
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.pupils", {
                            x: 0,
                            y: 0,
                            ease: "none"
                        }).to(".e.pupils", {
                            x: 47,
                            y: 6,
                            ease: "none"
                        })
                    }
                }),
                Af = He.extend({
                    imageManifest: {
                        phone: Promise.resolve().then(s.t.bind(s, 46415, 17)),
                        hangUp: Promise.resolve().then(s.t.bind(s, 40734, 17)),
                        routerBroken: Promise.resolve().then(s.t.bind(s, 41143, 17)),
                        routerFixed: Promise.resolve().then(s.t.bind(s, 66317, 17))
                    }
                }),
                Hf = Af.extend({
                    elements: Ye.elementsFromImages("phone")
                }),
                Gf = Af.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("routerBroken"),
                    onDiscreteProgress() {
                        Ye.squashOnce("routerBroken", .35, "y")
                    }
                }),
                Vf = Af.extend({
                    stepDuration: .35,
                    lastStepDuration: .5,
                    elements: Ye.elementsFromImages("routerBroken", "routerFixed"),
                    onLoadComplete() {
                        C.p8.set(".e.routerFixed", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("routerBroken", "routerFixed", .35)
                    }
                }),
                Ef = Af.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("hangUp"),
                    onDiscreteProgress() {
                        Ye.squashOnce("hangUp", .35, "y")
                    }
                }),
                qf = He.extend({
                    imageManifest: {
                        carHoodDown: Promise.resolve().then(s.t.bind(s, 26512, 17)),
                        carHoodUp: Promise.resolve().then(s.t.bind(s, 16490, 17)),
                        hammer: Promise.resolve().then(s.t.bind(s, 72166, 17))
                    }
                }),
                Nf = qf.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("carHoodDown", "carHoodUp"),
                    onLoadComplete() {
                        C.p8.set(".e.carHoodUp", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("carHoodDown", "carHoodUp", .35)
                    }
                }),
                Xf = qf.extend({
                    elements: Ye.elementsFromImages("carHoodUp"),
                    onStartProgress() {
                        Ye.startHoldShake("carHoodUp")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("carHoodUp")
                    }
                }),
                Wf = qf.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("hammer"),
                    onDiscreteProgress() {
                        Ye.squashOnce("hammer")
                    }
                }),
                Uf = qf.extend({
                    elements: Ye.elementsFromImages("carHoodUp")
                }),
                $f = He.extend({
                    imageManifest: {
                        ant: Promise.resolve().then(s.t.bind(s, 97137, 17)),
                        magnifyingGlass: Promise.resolve().then(s.t.bind(s, 536, 17))
                    }
                }),
                jf = $f.extend({
                    elements: Ye.elementsFromImages(["ant", "ant1"], ["ant", "ant2"], ["ant", "ant3"], "magnifyingGlass"),
                    onLoadComplete() {
                        C.p8.set(".e.ant1", {
                            x: -300,
                            scale: .5,
                            rotate: 5
                        }), C.p8.set(".e.ant2", {
                            scale: .5
                        }), C.p8.set(".e.ant3", {
                            x: 300,
                            scale: .5,
                            rotate: -5
                        }), C.p8.set(".e.magnifyingGlass", {
                            scale: .25,
                            y: 600,
                            x: 400
                        }), Ye.startShake("e.ant1", 2, 0, 1), Ye.startShake("e.ant2", 2, 0, 1), Ye.startShake("e.ant3", 2, 0, 1)
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.magnifyingGlass", {
                            scale: 1.5,
                            x: 0,
                            y: 300,
                            duration: 4
                        }).to(".e.ant2", {
                            scale: 1
                        }, "<1.8")
                    }
                }),
                Kf = $f.extend({
                    elements: Ye.elementsFromImages(["ant", "ant1"], ["ant", "ant2"], ["ant", "ant3"], ["ant", "ant4"], ["ant", "ant5"], "magnifyingGlass"),
                    onLoadComplete() {
                        C.p8.set(".e.ant1", {
                            x: -300,
                            scale: .5,
                            rotate: 5
                        }), C.p8.set(".e.ant2", {
                            scale: 1
                        }), C.p8.set(".e.ant3", {
                            x: 300,
                            scale: .5,
                            rotate: -5
                        }), C.p8.set(".e.ant4", {
                            x: 600,
                            scale: .5
                        }), C.p8.set(".e.ant5", {
                            x: 900,
                            scale: .5
                        }), C.p8.set(".e.magnifyingGlass", {
                            scale: 1.5,
                            y: 300,
                            x: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.ant1", {
                            x: -600
                        }).to(".e.ant2", {
                            x: -300
                        }, "<").to(".e.ant2", {
                            scale: .5,
                            duration: .2
                        }, "<").to(".e.ant3", {
                            x: 0
                        }, "<<").to(".e.ant3", {
                            scale: 1,
                            duration: .2
                        }, "<").to(".e.ant4", {
                            x: 300
                        }, "<").to(".e.ant5", {
                            x: 600
                        }, "<")
                    }
                }),
                Zf = He.extend({
                    imageManifest: {
                        call: Promise.resolve().then(s.t.bind(s, 12751, 17)),
                        phone3: Promise.resolve().then(s.t.bind(s, 39765, 17))
                    }
                }),
                Jf = Zf.extend({
                    elements: Ye.elementsFromImages("call")
                }),
                _f = Zf.extend({
                    elements: Ye.elementsFromImages("phone3")
                }),
                Qf = He.extend({
                    imageManifest: {
                        cake: Promise.resolve().then(s.t.bind(s, 62531, 17)),
                        noinscription: Promise.resolve().then(s.t.bind(s, 23328, 17))
                    }
                }),
                ev = Qf.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("cake"),
                    onLoadComplete() {
                        C.p8.set(".e.cake", {
                            x: -750
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cake", {
                            x: 0,
                            ease: "back.out(1.4)"
                        }).add(Ye.scaleBounce("cake", .95, .1), "-=0.3")
                    }
                }),
                tv = Qf.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("cake", "noinscription"),
                    onLoadComplete() {
                        C.p8.set(".e.noinscription", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("cake", "noinscription", .25)
                    }
                }),
                sv = Qf.extend({
                    elements: Ye.elementsFromImages("noinscription"),
                    initializeTimeline() {
                        this.timeline.to(".e.noinscription", {
                            scale: 2
                        })
                    },
                    onProgress(e) {
                        80 === e ? Ye.startShake("noinscription", 10, 0, 8) : 60 === e ? Ye.startShake("noinscription", 7, 0, 5) : 40 === e ? Ye.startShake("noinscription", 4, 0, 3) : 20 === e && Ye.startShake("noinscription")
                    }
                }),
                iv = He.extend({
                    imageManifest: {
                        hourglass: Promise.resolve().then(s.t.bind(s, 87439, 17)),
                        money: Promise.resolve().then(s.t.bind(s, 25128, 17)),
                        shatter: Promise.resolve().then(s.t.bind(s, 81760, 17))
                    }
                }),
                ov = iv.extend({
                    elements: Ye.elementsFromImages("hourglass")
                }),
                nv = iv.extend({
                    elements: Ye.elementsFromImages("hourglass"),
                    onProgress(e, t) {
                        0 === t && C.p8.timeline().to(".e.hourglass", {
                            y: -50,
                            duration: .15
                        }).to(".e.hourglass", {
                            rotation: "+=360",
                            duration: .25
                        }, ">").to(".e.hourglass", {
                            y: 0,
                            duration: .15
                        }, ">")
                    }
                }),
                av = iv.extend({
                    elements: Ye.elementsFromImages("hourglass", "shatter"),
                    onLoadComplete() {
                        C.p8.set(".e.shatter", {
                            hidden: !0
                        })
                    },
                    onProgress(e, t) {
                        0 === t && Ye.squashTransition("hourglass", "shatter")
                    }
                }),
                rv = iv.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("money"),
                    onDiscreteProgress() {
                        Ye.scaleBounce("money", 2)
                    }
                }),
                lv = He.extend({
                    imageManifest: {
                        calendar: Promise.resolve().then(s.t.bind(s, 96508, 17)),
                        phone: Promise.resolve().then(s.t.bind(s, 99163, 17))
                    }
                }),
                dv = lv.extend({
                    stepDuration: 1.5,
                    elements: Ye.elementsFromImages("calendar"),
                    onDiscreteProgress() {
                        C.p8.to(".e.calendar", {
                            x: -300,
                            y: -300,
                            scale: 2
                        })
                    }
                }),
                pv = lv.extend({
                    elements: Ye.elementsFromImages("phone")
                }),
                cv = He.extend({
                    imageManifest: {
                        bush: Promise.resolve().then(s.t.bind(s, 45013, 17)),
                        door: Promise.resolve().then(s.t.bind(s, 48829, 17)),
                        opossum: Promise.resolve().then(s.t.bind(s, 5546, 17))
                    }
                }),
                mv = cv.extend({
                    elements: Ye.elementsFromImages("bush"),
                    onProgress(e) {
                        80 === e ? Ye.startShake("bush", 10, 0, 8) : 60 === e ? Ye.startShake("bush", 7, 0, 5) : 40 === e ? Ye.startShake("bush", 4, 0, 3) : 20 === e && Ye.startShake("bush")
                    },
                    onStopProgress() {
                        Ye.stopShake("bush")
                    }
                }),
                hv = cv.extend({
                    stepDuration: 1.25,
                    elements: Ye.elementsFromImages("opossum"),
                    onLoadComplete() {
                        Ye.startShake("opossum", 10, 0, 8)
                    },
                    onDiscreteProgress() {
                        Ye.stopShake("opossum"), C.p8.to(".e.opossum", {
                            scale: .25,
                            duration: .5
                        })
                    }
                }),
                uv = cv.extend({
                    stepDuration: 2,
                    elements: Ye.elementsFromImages("opossum", "door"),
                    onLoadComplete() {
                        C.p8.set(".e.door", {
                            opacity: 0
                        }), C.p8.set(".e.opossum", {
                            scale: .25
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.opossum", {
                            x: -500,
                            opacity: 0,
                            duration: .25
                        }).to(".e.door", {
                            opacity: 1,
                            duration: .5
                        }, "<")
                    }
                }),
                gv = He.extend({
                    imageManifest: {
                        magazines: Promise.resolve().then(s.t.bind(s, 15714, 17)),
                        trash: Promise.resolve().then(s.t.bind(s, 13949, 17))
                    }
                }),
                yv = gv.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("magazines"),
                    onDiscreteProgress() {
                        C.p8.timeline().add(Ye.fallOut("magazines", .5))
                    }
                }),
                bv = gv.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("magazines", "trash"),
                    onLoadComplete() {
                        C.p8.set(".e.magazines", {
                            y: -1e3,
                            scale: .5
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.magazines", {
                            y: -250,
                            rotation: 35,
                            ease: "power4.out"
                        })
                    }
                }),
                xv = He.extend({
                    imageManifest: {
                        call: Promise.resolve().then(s.t.bind(s, 87062, 17)),
                        choose: Promise.resolve().then(s.t.bind(s, 13123, 17))
                    }
                }),
                fv = xv.extend({
                    elements: Ye.elementsFromImages("choose"),
                    onStartProgress() {
                        Ye.startHoldShake("choose")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("choose")
                    }
                }),
                vv = xv.extend({
                    elements: Ye.elementsFromImages("call"),
                    onStartProgress() {
                        Ye.startHoldShake("call")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("call")
                    }
                }),
                kv = He.extend({
                    imageManifest: {
                        pout: Promise.resolve().then(s.t.bind(s, 34025, 17)),
                        stomp: Promise.resolve().then(s.t.bind(s, 2302, 17)),
                        yell: Promise.resolve().then(s.t.bind(s, 43262, 17))
                    }
                }),
                Pv = kv.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("stomp"),
                    onDiscreteProgress() {
                        Ye.squashOnce("stomp", .35)
                    }
                }),
                wv = kv.extend({
                    elements: Ye.elementsFromImages("yell"),
                    onStartProgress() {
                        Ye.startHoldShake("yell")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("yell")
                    }
                }),
                Tv = kv.extend({
                    elements: Ye.elementsFromImages("pout")
                }),
                Sv = He.extend({
                    imageManifest: {
                        bed: Promise.resolve().then(s.t.bind(s, 73105, 17)),
                        candy: Promise.resolve().then(s.t.bind(s, 98016, 17)),
                        closet: Promise.resolve().then(s.t.bind(s, 46397, 17))
                    }
                }),
                Mv = Sv.extend({
                    stepDuration: .3,
                    elements: Ye.elementsFromImages("bed"),
                    initializeTimeline() {
                        this.timeline.to(".e.bed", {
                            y: -200
                        })
                    }
                }),
                Cv = Sv.extend({
                    stepDuration: .3,
                    elements: Ye.elementsFromImages("closet"),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("closet", .3))
                    }
                }),
                Dv = Sv.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("candy"),
                    onDiscreteProgress() {
                        Ye.squashOnce("candy", .25)
                    }
                }),
                Fv = He.extend({
                    imageManifest: {
                        book: Promise.resolve().then(s.t.bind(s, 5592, 17)),
                        drum: Promise.resolve().then(s.t.bind(s, 96578, 17)),
                        drumkit: Promise.resolve().then(s.t.bind(s, 80588, 17)),
                        highhat: Promise.resolve().then(s.t.bind(s, 67343, 17)),
                        snare: Promise.resolve().then(s.t.bind(s, 71114, 17)),
                        stick: Promise.resolve().then(s.t.bind(s, 23049, 17))
                    }
                }),
                zv = Fv.extend({
                    elements: [{
                        class: "band-container",
                        type: "container",
                        children: [{
                            class: "book",
                            type: "img",
                            key: "book"
                        }]
                    }]
                }),
                Lv = Fv.extend({
                    elements: [{
                        class: "band-container",
                        type: "container",
                        children: [{
                            class: "drum",
                            type: "img",
                            key: "drum"
                        }, {
                            class: "highhat",
                            type: "img",
                            key: "highhat"
                        }, {
                            class: "snare",
                            type: "img",
                            key: "snare"
                        }]
                    }, {
                        class: "drumkit",
                        type: "img",
                        key: "drumkit"
                    }],
                    lastStepDuration: .5,
                    initializeTimeline() {
                        C.p8.set(".e.drumkit", {
                            hidden: !0
                        });
                        const e = C.p8.timeline().fromTo(".e.drum", {
                            rotate: 90,
                            x: 100,
                            scale: .75,
                            y: 100
                        }, {
                            rotate: 0,
                            x: 150,
                            y: 50,
                            scale: .8,
                            ease: "power3.out",
                            duration: .75
                        }, 0).fromTo(".e.highhat", {
                            x: -100,
                            y: 100,
                            scale: .9
                        }, {
                            x: -100,
                            y: 0,
                            scale: .6,
                            ease: "power3.out",
                            duration: .75
                        }, .5).fromTo(".e.snare", {
                            rotate: -90,
                            x: 0,
                            y: 50,
                            scale: 1
                        }, {
                            rotate: 0,
                            x: 0,
                            y: 100,
                            scale: .7,
                            ease: "power3.out",
                            duration: .75,
                            onComplete: () => {
                                Ye.squashTransition("band-container", "drumkit", .25)
                            }
                        }, 1);
                        this.timeline.add(e)
                    }
                }),
                Rv = Fv.extend({
                    stepDuration: 1.25,
                    elements: [{
                        class: "band-container",
                        type: "container",
                        children: [{
                            class: "drumkit",
                            type: "img",
                            key: "drumkit"
                        }, {
                            class: "stickLeft",
                            type: "img",
                            key: "stick"
                        }, {
                            class: "stickRight",
                            type: "img",
                            key: "stick"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.timeline().fromTo(".e.stickLeft", {
                            x: -200,
                            y: 500,
                            opacity: 0,
                            scale: .7
                        }, {
                            y: 150,
                            opacity: 1,
                            ease: "back.out"
                        }, 0).fromTo(".e.stickRight", {
                            x: 200,
                            y: 500,
                            opacity: 0,
                            scale: .7
                        }, {
                            y: 150,
                            opacity: 1,
                            ease: "back.out"
                        }, 0)
                    },
                    onDiscreteProgress(e) {
                        50 === e ? C.p8.timeline().to(".e.stickLeft", {
                            rotate: -1080,
                            duration: 1
                        }) : C.p8.timeline().to(".e.stickRight", {
                            rotate: 1080,
                            duration: 1
                        })
                    }
                }),
                Iv = Fv.extend({
                    stepDuration: .25,
                    elements: [{
                        class: "band-container",
                        type: "container",
                        children: [{
                            class: "drumkit",
                            type: "img",
                            key: "drumkit"
                        }, {
                            class: "stickLeft",
                            type: "img",
                            key: "stick"
                        }, {
                            class: "stickRight",
                            type: "img",
                            key: "stick"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.timeline().set(".e.stickLeft", {
                            x: -200,
                            y: 150,
                            scale: .7
                        }).set(".e.stickRight", {
                            x: 200,
                            y: 150,
                            scale: .7
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("drumkit", (0, i.random)(10, 25) / 100), C.p8.timeline().to(".e.stickLeft", {
                            rotate: (0, i.random)(-35, -5),
                            scale: .8,
                            yoyo: !0,
                            duration: (0, i.random)(10, 25) / 100,
                            repeat: 1
                        }), C.p8.timeline().to(".e.stickRight", {
                            rotate: (0, i.random)(5, 35),
                            scale: .8,
                            yoyo: !0,
                            duration: (0, i.random)(10, 25) / 100,
                            repeat: 1
                        })
                    }
                }),
                Ov = He.extend({
                    imageManifest: {
                        bass: Promise.resolve().then(s.t.bind(s, 24244, 17)),
                        hat: Promise.resolve().then(s.t.bind(s, 91970, 17)),
                        sunglasses: Promise.resolve().then(s.t.bind(s, 36479, 17))
                    }
                }),
                Bv = Ov.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "band-container",
                        type: "container",
                        children: [{
                            class: "hat",
                            type: "img",
                            key: "hat"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.hat", {
                            scale: .4,
                            rotate: -15,
                            y: -200
                        }), this.timeline.to(".e.hat", {
                            scale: .7,
                            rotate: 385,
                            y: -50,
                            ease: "back.inOut"
                        }, 0)
                    }
                }),
                Yv = Ov.extend({
                    stepDuration: 2,
                    elements: [{
                        class: "band-container",
                        type: "container",
                        children: [{
                            class: "hat",
                            type: "img",
                            key: "hat"
                        }, {
                            class: "sunglasses",
                            type: "img",
                            key: "sunglasses"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.hat", {
                            scale: .7,
                            rotate: 385,
                            y: -50
                        }), C.p8.fromTo(".e.sunglasses", {
                            scale: .4,
                            rotate: -25,
                            y: 500,
                            opacity: 0
                        }, {
                            opacity: 1,
                            duration: .25
                        }), this.timeline.to(".e.sunglasses", {
                            scale: .6,
                            rotate: -360,
                            y: 375,
                            ease: "back.inOut"
                        }, 0).to(".e.hat", {
                            rotate: 360,
                            y: -75
                        }, 0)
                    }
                }),
                Av = Ov.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "band-container",
                        type: "container",
                        children: [{
                            class: "hat",
                            type: "img",
                            key: "hat"
                        }, {
                            class: "sunglasses",
                            type: "img",
                            key: "sunglasses"
                        }, {
                            class: "bass",
                            type: "img",
                            key: "bass"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.hat", {
                            scale: .7,
                            rotate: 360,
                            y: -75
                        }), C.p8.set(".e.sunglasses", {
                            scale: .6,
                            rotate: -360,
                            y: 375
                        }), C.p8.timeline().to(".e.hat", {
                            scale: .4,
                            y: -225
                        }, 0).to(".e.sunglasses", {
                            scale: .3,
                            y: 0
                        }, 0).fromTo(".e.bass", {
                            scale: 1.5,
                            y: 0,
                            opacity: 0
                        }, {
                            scale: 1,
                            y: 350,
                            x: 125,
                            rotate: 65,
                            opacity: 1
                        }, 0)
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("bass", .3), Ye.squashOnce("band-container", .4)
                    }
                }),
                Hv = Ov.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "band-container",
                        type: "container",
                        children: [{
                            class: "hat",
                            type: "img",
                            key: "hat"
                        }, {
                            class: "sunglasses",
                            type: "img",
                            key: "sunglasses"
                        }, {
                            class: "bass",
                            type: "img",
                            key: "bass"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.hat", {
                            scale: .4,
                            y: -225
                        }), C.p8.set(".e.sunglasses", {
                            scale: .3,
                            y: 0
                        }), C.p8.set(".e.bass", {
                            scale: 1,
                            y: 350,
                            x: 125,
                            rotate: 65
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("bass", .2), Ye.squashOnce("band-container", .3)
                    }
                }),
                Gv = He.extend({
                    imageManifest: {
                        cowbell: Promise.resolve().then(s.t.bind(s, 26785, 17)),
                        cowbellbroke: Promise.resolve().then(s.t.bind(s, 14983, 17)),
                        mic1: Promise.resolve().then(s.t.bind(s, 59870, 17)),
                        mic2: Promise.resolve().then(s.t.bind(s, 89599, 17)),
                        mic3: Promise.resolve().then(s.t.bind(s, 85111, 17)),
                        mic4: Promise.resolve().then(s.t.bind(s, 60960, 17)),
                        stand: Promise.resolve().then(s.t.bind(s, 77932, 17)),
                        standbroke: Promise.resolve().then(s.t.bind(s, 91402, 17))
                    }
                }),
                Vv = Gv.extend({
                    stepDuration: .25,
                    elements: [{
                        class: "band-container",
                        type: "container",
                        children: [{
                            class: "music",
                            type: "img",
                            key: "mic1"
                        }, {
                            class: "music",
                            type: "img",
                            key: "mic2"
                        }, {
                            class: "music",
                            type: "img",
                            key: "mic3"
                        }, {
                            class: "music",
                            type: "img",
                            key: "mic4"
                        }, {
                            class: "music",
                            type: "img",
                            key: "cowbell"
                        }, {
                            class: "music",
                            type: "img",
                            key: "cowbellbroke"
                        }, {
                            class: "music",
                            type: "img",
                            key: "stand"
                        }, {
                            class: "music",
                            type: "img",
                            key: "standbroke"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.music", {
                            hidden: !0
                        }), C.p8.set(".e.music:nth-child(1)", {
                            hidden: !1
                        })
                    },
                    lastStepDuration: 1,
                    onDiscreteProgress(e) {
                        switch (Math.floor(e)) {
                            case 5:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(2)", {
                                    hidden: !1
                                });
                                break;
                            case 10:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(3)", {
                                    hidden: !1
                                });
                                break;
                            case 15:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(4)", {
                                    hidden: !1
                                });
                                break;
                            case 20:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(1)", {
                                    hidden: !1
                                });
                                break;
                            case 25:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(2)", {
                                    hidden: !1
                                });
                                break;
                            case 30:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(3)", {
                                    hidden: !1
                                });
                                break;
                            case 35:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(4)", {
                                    hidden: !1
                                });
                                break;
                            case 40:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(5)", {
                                    hidden: !1
                                });
                                break;
                            case 45:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(6)", {
                                    hidden: !1
                                });
                                break;
                            case 50:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(5)", {
                                    hidden: !1
                                });
                                break;
                            case 55:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(6)", {
                                    hidden: !1
                                });
                                break;
                            case 60:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(1)", {
                                    hidden: !1
                                });
                                break;
                            case 65:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(2)", {
                                    hidden: !1
                                });
                                break;
                            case 70:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(3)", {
                                    hidden: !1
                                });
                                break;
                            case 75:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(4)", {
                                    hidden: !1
                                });
                                break;
                            case 80:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(5)", {
                                    hidden: !1
                                });
                                break;
                            case 85:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(6)", {
                                    hidden: !1
                                });
                                break;
                            case 90:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(7)", {
                                    hidden: !1
                                });
                                break;
                            case 95:
                                C.p8.set(".e.music", {
                                    hidden: !0
                                }), C.p8.set(".e.music:nth-child(8)", {
                                    hidden: !1
                                });
                                break;
                            case 100:
                                C.p8.to(".e.music:nth-child(8)", {
                                    rotate: -720,
                                    y: -500,
                                    opacity: 0,
                                    duration: .75,
                                    ease: "back.in"
                                })
                        }
                        Ye.squashOnce("music", .3)
                    }
                }),
                Ev = He.extend({
                    imageManifest: {
                        balance: Promise.resolve().then(s.t.bind(s, 99357, 17)),
                        boogy: Promise.resolve().then(s.t.bind(s, 31135, 17)),
                        camera: Promise.resolve().then(s.t.bind(s, 20763, 17)),
                        hooray: Promise.resolve().then(s.t.bind(s, 51615, 17)),
                        left: Promise.resolve().then(s.t.bind(s, 38970, 17)),
                        right: Promise.resolve().then(s.t.bind(s, 2370, 17)),
                        squat: Promise.resolve().then(s.t.bind(s, 50542, 17)),
                        starburst: Promise.resolve().then(s.t.bind(s, 64921, 17)),
                        twirl: Promise.resolve().then(s.t.bind(s, 35365, 17))
                    }
                }),
                qv = Ev.extend({
                    stepDuration: .25,
                    elements: [{
                        class: "pose-container",
                        type: "container",
                        children: [{
                            class: "twirl",
                            type: "img",
                            key: "twirl"
                        }, {
                            class: "squat",
                            type: "img",
                            key: "squat"
                        }, {
                            class: "boogy",
                            type: "img",
                            key: "boogy"
                        }, {
                            class: "balance",
                            type: "img",
                            key: "balance"
                        }]
                    }, {
                        class: "pose",
                        type: "img",
                        key: "boogy"
                    }, {
                        class: "starburst",
                        type: "img",
                        key: "starburst"
                    }],
                    lastStepDuration: 1,
                    dance: null,
                    initializeTimeline() {
                        C.p8.set(".e.squat", {
                            opacity: 0
                        }), C.p8.set(".e.boogy", {
                            opacity: 0
                        }), C.p8.set(".e.balance", {
                            opacity: 0
                        }), C.p8.set(".e.starburst", {
                            opacity: 0
                        }), C.p8.set(".e.pose", {
                            hidden: !0,
                            x: -130,
                            y: -100
                        }), this.dance = C.p8.timeline({
                            repeat: -1
                        }).fromTo(".e.twirl", {
                            opacity: 0
                        }, {
                            opacity: 1,
                            duration: .25
                        }, 0).to(".e.twirl", {
                            opacity: 0,
                            duration: .15
                        }, .25).to(".e.squat", {
                            opacity: 1,
                            duration: .15
                        }, .2).to(".e.squat", {
                            opacity: 0,
                            duration: .15
                        }, .5).to(".e.boogy", {
                            opacity: 1,
                            duration: .15
                        }, .45).to(".e.boogy", {
                            opacity: 0,
                            duration: .15
                        }, .75).to(".e.balance", {
                            opacity: 1,
                            duration: .15
                        }, .7).to(".e.balance", {
                            opacity: 0,
                            duration: .15
                        }, 1), this.dance.timeScale(.7)
                    },
                    onDiscreteProgress() {
                        this.dance.pause(), Ye.squashTransition("pose-container", "pose", .25), C.p8.timeline().to(".e.starburst", {
                            scale: 3,
                            opacity: .75,
                            duration: .25,
                            yoyo: !0,
                            repeat: 1
                        })
                    }
                }),
                Nv = Ev.extend({
                    stepDuration: 2,
                    elements: [{
                        class: "pose-container",
                        type: "container",
                        children: [{
                            class: "pose",
                            type: "img",
                            key: "boogy"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.pose", {
                            x: -130,
                            y: -100
                        }), Ye.startShake("pose-container", 3, .1, 2)
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.pose", {
                            scale: 1.6,
                            x: -200,
                            ease: "back.inOut",
                            duration: 1.5
                        }).to(".e.pose", {
                            filter: "blur(10px)",
                            duration: .25
                        }, .8).to(".e.pose", {
                            filter: "blur(0px)",
                            duration: .25
                        }, 1.25)
                    }
                }),
                Xv = Ev.extend({
                    stepDuration: 2,
                    elements: [{
                        class: "pose-container",
                        type: "container",
                        children: [{
                            class: "pose",
                            type: "img",
                            key: "boogy"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.pose", {
                            x: -200,
                            y: -100,
                            scale: 1.6
                        }), Ye.startShake("pose-container", 3, .1, 2)
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.pose", {
                            scale: 4,
                            x: -580,
                            y: 150,
                            ease: "back.inOut",
                            duration: 1.5
                        }).to(".e.pose", {
                            filter: "blur(10px)",
                            duration: .25
                        }, .8).to(".e.pose", {
                            filter: "blur(0px)",
                            duration: .25
                        }, 1.25)
                    }
                }),
                Wv = Ev.extend({
                    elements: [{
                        class: "pose-container",
                        type: "container",
                        children: [{
                            class: "pose",
                            type: "img",
                            key: "boogy"
                        }]
                    }, {
                        class: "starburst",
                        type: "img",
                        key: "starburst"
                    }],
                    lastStepDuration: 1.5,
                    initializeTimeline() {
                        C.p8.set(".e.pose", {
                            x: -580,
                            y: 150,
                            scale: 4
                        }), C.p8.set(".e.starburst", {
                            opacity: 0
                        }), Ye.startShake("pose-container", 4, .2, 3), this.timeline.fromTo(".e.starburst", {
                            x: 0,
                            y: 0
                        }, {
                            scale: 3,
                            opacity: .75,
                            duration: .1,
                            yoyo: !0,
                            repeat: 1
                        }, 0).fromTo(".e.starburst", {
                            x: 500,
                            y: -200,
                            rotate: -45
                        }, {
                            scale: 2,
                            opacity: .75,
                            duration: .1,
                            yoyo: !0,
                            repeat: 1
                        }, .5).fromTo(".e.starburst", {
                            x: -500,
                            y: 500
                        }, {
                            scale: 3,
                            opacity: .75,
                            duration: .1,
                            yoyo: !0,
                            repeat: 1
                        }, 1).fromTo(".e.starburst", {
                            x: 0,
                            y: 0,
                            rotate: 180
                        }, {
                            scale: 4,
                            opacity: .75,
                            duration: .1,
                            yoyo: !0,
                            repeat: 1
                        }, 1.5).fromTo(".pose-container", {
                            background: "transparent",
                            border: "10px solid transparent"
                        }, {
                            background: "red",
                            border: "45px solid white",
                            overflow: "hidden",
                            duration: .2,
                            scale: .7,
                            onStart: () => {
                                C.p8.set(".e.pose", {
                                    x: -278,
                                    y: -130,
                                    scale: 2.2
                                }), Ye.stopShake("pose-container"), C.p8.set(".pose-container", {
                                    left: "-138px"
                                })
                            }
                        }, 1.5).set(".scene-container", {
                            rotate: -15
                        }, 1.5)
                    }
                }),
                Uv = He.extend({
                    imageManifest: {
                        paper: Promise.resolve().then(s.t.bind(s, 15208, 17)),
                        run: Promise.resolve().then(s.t.bind(s, 2788, 17)),
                        signature: Promise.resolve().then(s.t.bind(s, 42677, 17)),
                        wave: Promise.resolve().then(s.t.bind(s, 39444, 17))
                    }
                }),
                $v = Uv.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "autograph-container",
                        type: "container",
                        children: [{
                            class: "wave",
                            type: "img",
                            key: "wave"
                        }]
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.wave", {
                            rotate: -25,
                            ease: "back.out",
                            duration: .75
                        }, 0).to(".e.wave", {
                            rotate: 25,
                            x: 100,
                            ease: "back.out",
                            duration: .75
                        }, 1)
                    }
                }),
                jv = Uv.extend({
                    elements: [{
                        class: "paper1",
                        type: "img",
                        key: "paper"
                    }, {
                        class: "paper2",
                        type: "img",
                        key: "paper"
                    }, {
                        class: "autograph-container",
                        type: "container",
                        children: [{
                            class: "signature",
                            type: "img",
                            key: "signature"
                        }]
                    }],
                    signAutograph: null,
                    initializeTimeline() {
                        C.p8.set(".autograph-container", {
                            background: "white",
                            border: "20px solid black",
                            scale: .7,
                            overflow: "hidden",
                            width: "800px",
                            height: "1200px",
                            rotate: -8,
                            x: 100,
                            y: -50
                        }), C.p8.set(".e.signature", {
                            opacity: 0
                        }), this.signAutograph = (0, i.throttle)((() => {
                            this.signing = C.p8.timeline().fromTo(".e.signature:nth-child(1)", {
                                rotate: (0, i.random)(-45, 45),
                                x: (0, i.random)(-250, 150),
                                scale: .6,
                                y: (0, i.random)(-250, 600),
                                opacity: 0
                            }, {
                                opacity: 1,
                                duration: .25
                            }), C.p8.set(".e.autograph-container", {
                                rotate: (0, i.random)(-12, 12)
                            }), C.p8.set(".e.paper2", {
                                scaleX: (0, i.random)(-1, 1)
                            }), C.p8.set(".e.paper1", {
                                scaleX: (0, i.random)(-1, 1)
                            })
                        }), 200)
                    },
                    onProgress() {
                        this.signAutograph()
                    }
                }),
                Kv = Uv.extend({
                    elements: [{
                        class: "paper1",
                        type: "img",
                        key: "paper"
                    }, {
                        class: "paper2",
                        type: "img",
                        key: "paper"
                    }, {
                        class: "autograph-container",
                        type: "container",
                        children: [{
                            class: "signature",
                            type: "img",
                            key: "signature"
                        }]
                    }],
                    signAutograph: null,
                    initializeTimeline() {
                        C.p8.set(".autograph-container", {
                            background: "white",
                            border: "20px solid black",
                            scale: .7,
                            overflow: "hidden",
                            width: "800px",
                            height: "1200px",
                            rotate: -8,
                            x: 100,
                            y: -50
                        }), C.p8.set(".e.signature", {
                            opacity: 0
                        }), this.signAutograph = (0, i.throttle)((() => {
                            this.signing = C.p8.timeline().fromTo(".e.signature:nth-child(1)", {
                                rotate: (0, i.random)(-45, 45),
                                x: (0, i.random)(-250, 150),
                                scale: .6,
                                y: (0, i.random)(-250, 600),
                                opacity: 0
                            }, {
                                opacity: 1,
                                duration: .25
                            }), C.p8.set(".e.autograph-container", {
                                rotate: (0, i.random)(-12, 12)
                            }), C.p8.set(".e.paper2", {
                                scaleX: (0, i.random)(-1, 1)
                            }), C.p8.set(".e.paper1", {
                                scaleX: (0, i.random)(-1, 1)
                            })
                        }), 100)
                    },
                    onProgress() {
                        this.signAutograph()
                    }
                }),
                Zv = Uv.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "autograph-container",
                        type: "container",
                        children: [{
                            class: "run",
                            type: "img",
                            key: "run"
                        }]
                    }],
                    onDiscreteProgress() {
                        Ye.squashOnce("autograph-container", .5), C.p8.set(".e.run", {
                            rotate: (0, i.random)(-35, 35)
                        })
                    }
                }),
                Jv = He.extend({
                    imageManifest: {
                        music1: Promise.resolve().then(s.t.bind(s, 99731, 17)),
                        music2: Promise.resolve().then(s.t.bind(s, 25821, 17)),
                        music3: Promise.resolve().then(s.t.bind(s, 23838, 17)),
                        music4: Promise.resolve().then(s.t.bind(s, 78568, 17))
                    }
                }),
                _v = Jv.extend({
                    stepDuration: .1,
                    lastStepDuration: .5,
                    elements: [{
                        class: "show-container",
                        type: "container",
                        children: [{
                            class: "music",
                            type: "img",
                            key: "music1"
                        }, {
                            class: "music",
                            type: "img",
                            key: "music2"
                        }, {
                            class: "music",
                            type: "img",
                            key: "music3"
                        }, {
                            class: "music",
                            type: "img",
                            key: "music4"
                        }]
                    }],
                    initializeTimeline() {
                        Ye.squashOnce("show-container", .5)
                    },
                    playNote(e) {
                        const t = e || (0, i.random)(1, 4);
                        C.p8.timeline().fromTo(`.e.music:nth-child(${t})`, {
                            opacity: 0
                        }, {
                            opacity: 1
                        }), Ye.squashOnce(`music:nth-child(${t})`, .25)
                    },
                    onDiscreteProgress(e) {
                        20 === e ? (this.playNote(1), this.playNote(3)) : 40 === e ? (this.playNote(2), this.playNote(4)) : e >= 60 && e <= 75 ? (this.playNote(), this.playNote(), this.playNote()) : e >= 85 ? (this.playNote(1), this.playNote(2), this.playNote(3), this.playNote(4)) : this.playNote()
                    }
                }),
                Qv = He.extend({
                    imageManifest: {
                        marinate: Promise.resolve().then(s.t.bind(s, 44661, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "marinate",
                            images: {
                                salt: [1380, 748, 385, 427, 403, 214],
                                shaker: [1197, 10, 529, 530, 22, 440],
                                liquidOut: [739, 10, 448, 775, 113, 276],
                                marinate3: [911, 1185, 682, 168, 334, 199],
                                marinate2: [739, 795, 631, 117, 359, 224],
                                marinate1: [1197, 550, 806, 188, 304, 116],
                                marinate0: [10, 965, 891, 393, 304, 55],
                                liquidIn: [10, 10, 719, 945, 55, 179]
                            }
                        }
                    }
                }),
                ek = Qv.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["liquidOut", "liquidIn"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.liquidIn", {
                            hidden: !0
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c"), Ye.squashTransition("liquidOut", "liquidIn", .3)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c"), Ye.squashTransition("liquidIn", "liquidOut", .3)
                    }
                }),
                tk = Qv.extend({
                    stepDuration: .35,
                    emitter: null,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["shaker", "salt"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.salt", {
                            opacity: 0
                        }), C.p8.set(".e.c", {
                            scaleX: -1
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.shaker", {
                            x: 20,
                            y: -20,
                            duration: .2
                        }, 0).to(".e.shaker", {
                            x: -50,
                            y: 70,
                            duration: .05
                        }, .2).to(".e.shaker", {
                            x: 0,
                            y: 0,
                            duration: .05
                        }, .25).to(".e.salt", {
                            x: -50,
                            y: 150,
                            duration: .25
                        }, .2).to(".e.salt", {
                            opacity: 1,
                            duration: .05
                        }, .2).to(".e.salt", {
                            opacity: 0,
                            duration: .05
                        }, .4).set(".e.salt", {
                            x: 0,
                            y: 0
                        })
                    }
                }),
                sk = Qv.extend({
                    elements: Ye.elementsFromSprite("sprite", ["marinate0", "marinate1"]),
                    onLoadComplete() {
                        C.p8.set(".e.marinate1", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.marinate1", {
                            opacity: 1
                        })
                    }
                }),
                ik = Qv.extend({
                    elements: Ye.elementsFromSprite("sprite", ["marinate0", "marinate1", "marinate2"]),
                    onLoadComplete() {
                        C.p8.set(".e.marinate2", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.marinate2", {
                            opacity: 1
                        })
                    }
                }),
                ok = Qv.extend({
                    elements: Ye.elementsFromSprite("sprite", ["marinate0", "marinate1", "marinate2", "marinate3"]),
                    onLoadComplete() {
                        C.p8.set(".e.marinate3", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.marinate3", {
                            opacity: 1
                        })
                    }
                }),
                nk = He.extend({
                    imageManifest: {
                        fire: Promise.resolve().then(s.t.bind(s, 10879, 17)),
                        fluid: Promise.resolve().then(s.t.bind(s, 35573, 17)),
                        matches: Promise.resolve().then(s.t.bind(s, 9951, 17))
                    }
                }),
                ak = nk.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("fluid"),
                    onDiscreteProgress() {
                        Ye.squashOnce("fluid", .25, "y")
                    }
                }),
                rk = ak,
                lk = ak,
                dk = nk.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("matches"),
                    onDiscreteProgress() {
                        Ye.squashOnce("matches", .5)
                    }
                }),
                pk = nk.extend({
                    elements: Ye.elementsFromImages("fire"),
                    onStartProgress() {
                        Ye.startHoldShake("fire")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("fire")
                    }
                }),
                ck = He.extend({
                    imageManifest: {
                        burn: Promise.resolve().then(s.t.bind(s, 77530, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "burn",
                            images: {
                                tongs: [10, 10, 817, 696, 207, 76],
                                thumb: [10, 1130, 524, 675, 147, 239],
                                math: [837, 10, 490, 287, 152, 217],
                                gym: [1304, 307, 429, 275, 356, 298],
                                science: [837, 307, 457, 312, 541, 286],
                                afc: [1260, 629, 457, 496, 357, 286],
                                reportCard: [724, 716, 526, 701, 152, 217],
                                fireSmoke: [1260, 1135, 290, 365, 116, 360],
                                fire: [10, 716, 704, 404, 448, 160]
                            }
                        }
                    }
                }),
                mk = ck.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["reportCard", "afc", "science", "gym", "math"]),
                    onLoadComplete() {
                        C.p8.set(".e.afc, .e.science, .e.gym, .e.math", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().set(".e.afc, .e.math", {
                                hidden: !1
                            }).set(".e.reportCard", {
                                hidden: !0
                            }, .2).to(".e.math", {
                                x: 300,
                                y: -100,
                                rotate: 35,
                                duration: 1
                            }, 1).to(".e.math", {
                                opacity: 0
                            }, 1.8),
                            t = C.p8.timeline().set(".e.science, .e.gym", {
                                hidden: !1
                            }).set(".e.afc, .e.math", {
                                hidden: !0
                            }, .2).to(".e.gym", {
                                x: 300,
                                y: -100,
                                rotate: 35,
                                duration: 1
                            }, 1).to(".e.gym", {
                                opacity: 0
                            }, 1.8);
                        this.timeline.add(e).add(t)
                    }
                }),
                hk = ck.extend({
                    stepDuration: .4,
                    elements: Ye.elementsFromSprite("sprite", ["fire", "fireSmoke"]),
                    onLoadComplete() {
                        C.p8.timeline({
                            repeat: -1
                        }).to(".e.fireSmoke", {
                            y: -150,
                            opacity: 0,
                            duration: 2
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("fire", .4)
                    }
                }),
                uk = ck.extend({
                    stepDuration: .4,
                    elements: Ye.elementsFromSprite("sprite", ["thumb"]),
                    onDiscreteProgress() {
                        Ye.squashOnce("thumb", .4)
                    }
                }),
                gk = ck.extend({
                    elements: [...Ye.elementsFromSprite("sprite", ["fire", "fireSmoke", "tongs"])],
                    onLoadComplete() {
                        C.p8.timeline({
                            repeat: -1
                        }).to(".e.fireSmoke", {
                            y: -150,
                            opacity: 0,
                            duration: 2
                        }), C.p8.set(".e.tongs", {
                            x: -120,
                            y: 350,
                            rotate: -13,
                            scale: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.fireSmoke", {
                            hidden: !0
                        }, 0).to(".e.fire", {
                            scale: .5
                        }, 0).to(".e.tongs", {
                            x: 0,
                            y: 0,
                            rotate: 0,
                            scale: 1
                        }, 0).fillTime(.5)
                    }
                }),
                yk = He.extend({
                    imageManifest: {
                        grill: Promise.resolve().then(s.t.bind(s, 74304, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "grill",
                            images: {
                                thumb: [839, 580, 618, 714, 143, 192],
                                apron: [1467, 580, 467, 876, 62, 274],
                                sunglasses: [10, 253, 819, 426, 287, 91],
                                cookedPatty: [10, 10, 614, 233, 395, 190],
                                rawPatty: [634, 10, 614, 233, 395, 190],
                                juice: [10, 689, 686, 728, 116, 192],
                                hat: [1258, 10, 679, 560, 182, 164]
                            }
                        }
                    }
                }),
                bk = yk.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["apron", "sunglasses", "hat"]),
                    onLoadComplete() {
                        C.p8.set(".e.hat, .e.sunglasses", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.apron", {
                            y: 220,
                            scale: .8,
                            duration: 1,
                            ease: "back.in(2)"
                        }, 0).to(".e.hat", {
                            opacity: 1,
                            duration: .2
                        }, .8).to(".e.hat", {
                            y: -300,
                            scale: .4,
                            opacity: 1,
                            duration: 1,
                            ease: "back.in(2)"
                        }, 1).to(".e.sunglasses", {
                            opacity: 1,
                            duration: .2
                        }, 1.8).to(".e.sunglasses", {
                            y: -200,
                            scale: .3,
                            rotate: 12,
                            duration: 1,
                            ease: "back.in(2)"
                        }, 2)
                    }
                }),
                xk = yk.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["rawPatty", "cookedPatty"])
                    }],
                    onLoadComplete() {
                        C.p8.fromTo(".e.cookedPatty", {
                            opacity: 0
                        }, {
                            opacity: 1,
                            duration: 1.2
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            rotate: 90,
                            ease: "back.in(2)"
                        }).set(".e.c", {
                            rotate: -90
                        }).set(".e.cookedPatty", {
                            opacity: 0
                        }).to(".e.c", {
                            rotate: 0,
                            ease: "back.out(2)"
                        })
                    }
                }),
                fk = yk.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["rawPatty", "cookedPatty"])
                    }],
                    onLoadComplete() {
                        C.p8.fromTo(".e.cookedPatty", {
                            opacity: 0
                        }, {
                            opacity: 1,
                            duration: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            rotate: 90,
                            ease: "back.in(2)"
                        }).set(".e.c", {
                            rotate: -90
                        }).to(".e.c", {
                            rotate: 0,
                            ease: "back.out(2)"
                        })
                    }
                }),
                vk = yk.extend({
                    elements: Ye.elementsFromSprite("sprite", ["juice"]),
                    onStartProgress() {
                        Ye.startHoldShake("juice")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("juice")
                    }
                }),
                kk = yk.extend({
                    elements: Ye.elementsFromSprite("sprite", ["thumb"]),
                    initializeTimeline() {
                        this.timeline.add(C.p8.timeline({
                            repeat: 1
                        }).to(".e.thumb", {
                            rotate: 10,
                            ease: "none"
                        }).to(".e.thumb", {
                            rotate: 0,
                            ease: "none"
                        }).to(".e.thumb", {
                            rotate: -10,
                            ease: "none"
                        }).to(".e.thumb", {
                            rotate: 0,
                            ease: "none"
                        }))
                    }
                }),
                Pk = He.extend({
                    imageManifest: {
                        button1: Promise.resolve().then(s.t.bind(s, 9949, 17)),
                        button2: Promise.resolve().then(s.t.bind(s, 33369, 17)),
                        button3: Promise.resolve().then(s.t.bind(s, 10596, 17)),
                        buttonbase: Promise.resolve().then(s.t.bind(s, 86559, 17)),
                        channels: Promise.resolve().then(s.t.bind(s, 64045, 17)),
                        dial: Promise.resolve().then(s.t.bind(s, 33442, 17)),
                        laptop: Promise.resolve().then(s.t.bind(s, 54808, 17)),
                        notes: Promise.resolve().then(s.t.bind(s, 61301, 17)),
                        radio: Promise.resolve().then(s.t.bind(s, 58253, 17))
                    }
                }),
                wk = Pk.extend({
                    elements: Ye.elementsFromImages("radio", "channels", "dial").concat([{
                        type: "container",
                        children: Ye.elementsFromImages("button1", "button2", "button3", "buttonbase"),
                        class: "buttons",
                        pos: [-250, -90]
                    }]),
                    initializeTimeline() {
                        C.p8.set(".e.dial", {
                            y: 60,
                            x: -210
                        }), this.timeline.to(".e.dial", {
                            rotate: 90
                        })
                    }
                }),
                Tk = wk.extend({
                    initializeTimeline() {
                        C.p8.set(".e.dial", {
                            y: 60,
                            x: -210,
                            rotate: 90
                        }), this.timeline.to(".e.dial", {
                            rotate: -90
                        })
                    }
                }),
                Sk = Tk.extend({
                    initializeTimeline() {
                        C.p8.set(".e.dial", {
                            y: 60,
                            x: -210,
                            rotate: -90
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.button3", {
                            y: 20,
                            duration: .1
                        }), C.p8.to(".e.button3", {
                            y: 0,
                            delay: .3
                        })
                    }
                }),
                Mk = Sk.extend({
                    elements: Ye.elementsFromImages("laptop", "notes", "notes", "notes"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.notes", {
                            display: "none",
                            scale: .1,
                            y: 0,
                            opacity: 1
                        }, {
                            display: "block",
                            scale: 1,
                            y: 100,
                            opacity: 0,
                            rotate: "random(-20, 20)",
                            stagger: .33,
                            duration: .5
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("laptop", 2, 1)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("laptop", 2, 1)
                    }
                }),
                Ck = He.extend({
                    imageManifest: {
                        big: Promise.resolve().then(s.t.bind(s, 47037, 17)),
                        medium: Promise.resolve().then(s.t.bind(s, 25408, 17)),
                        small: Promise.resolve().then(s.t.bind(s, 57870, 17))
                    }
                }),
                Dk = Ck.extend({
                    elements: Ye.elementsFromImages("small", "medium", "big"),
                    initializeTimeline() {
                        C.p8.set(".e.medium", {
                            y: 20
                        }), C.p8.set(".e.big", {
                            y: 50
                        }), this.timeline.from(".e.small,.e.medium,.e.big", {
                            opacity: 0,
                            stagger: 1
                        }), this.particles = this.addParticleEmitter({
                            numberOfParticles: 50,
                            autoplay: !0,
                            restartOnProgress: !1,
                            zIndex: -1,
                            settings: {
                                frequency: .025,
                                from: {
                                    backgroundColor: "#f1d0aa",
                                    border: "1px solid black"
                                },
                                to: {
                                    ease: "power2.in",
                                    duration: .3
                                },
                                boundaries: {
                                    left: 480,
                                    right: 520,
                                    top: 0,
                                    bottom: 0
                                },
                                minSize: 13,
                                maxSize: 25,
                                angle: 0,
                                force: 3,
                                randomAngle: !1
                            }
                        })
                    }
                }),
                Fk = He.extend({
                    imageManifest: {
                        ball: Promise.resolve().then(s.t.bind(s, 63496, 17)),
                        balls: Promise.resolve().then(s.t.bind(s, 23816, 17)),
                        ballsflat: Promise.resolve().then(s.t.bind(s, 78849, 17)),
                        flat: Promise.resolve().then(s.t.bind(s, 16619, 17)),
                        kid: Promise.resolve().then(s.t.bind(s, 66931, 17))
                    }
                }),
                zk = Fk.extend({
                    stepDuration: .5,
                    elements: [{
                        type: "img",
                        key: "flat",
                        class: "flat1",
                        pos: [-300, -100]
                    }, {
                        type: "img",
                        key: "flat",
                        class: "flat2",
                        pos: [0, 0]
                    }, {
                        type: "img",
                        key: "flat",
                        class: "flat3",
                        pos: [200, -40]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.flat1,.e.flat2,.e.flat3", {
                            x: 800,
                            y: 100,
                            scale: .5
                        }), C.p8.to(".e.flat1", {
                            x: 0,
                            duration: .5
                        }), this.timeline.to(".e.flat1", {
                            scale: .4,
                            yoyo: !0,
                            repeat: 1
                        }), this.timeline.to(".e.flat1", {
                            x: -800
                        }), this.timeline.to(".e.flat2", {
                            x: 0
                        }, "<"), this.timeline.to(".e.flat2", {
                            scale: .4,
                            yoyo: !0,
                            repeat: 1
                        }), this.timeline.to(".e.flat2", {
                            x: -800
                        }), this.timeline.to(".e.flat3", {
                            x: 0
                        }, "<"), this.timeline.to(".e.flat3", {
                            scale: .4,
                            yoyo: !0,
                            repeat: 1
                        }), this.timeline.to(".e.flat3", {
                            x: -800
                        })
                    }
                }),
                Lk = Fk.extend({
                    elements: Ye.elementsFromImages("ball"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.ball", {
                            scaleX: .5,
                            scaleY: .1
                        }, {
                            scaleX: 1,
                            scaleY: 1
                        })
                    }
                }),
                Rk = Lk.extend({
                    elements: Ye.elementsFromImages("ball", "ball"),
                    initializeTimeline() {
                        C.p8.set(".e.ball:first-child", {
                            x: -250
                        }), C.p8.set(".e.ball:last-child", {
                            x: 250,
                            y: 100
                        }), this.timeline.fromTo(".e.ball", {
                            scaleX: .5,
                            scaleY: .1
                        }, {
                            scaleX: 1,
                            scaleY: 1,
                            stagger: .5
                        })
                    }
                }),
                Ik = Fk.extend({
                    elements: Ye.elementsFromImages("ball", "balls", "ball"),
                    initializeTimeline() {
                        C.p8.set(".e.balls", {
                            y: 350
                        }), C.p8.set(".e.ball:first-child", {
                            x: -250,
                            y: 180
                        }), C.p8.set(".e.ball:last-child", {
                            x: 250,
                            y: 180,
                            zIndex: -1
                        }), this.timeline.fromTo(".e.ball", {
                            scaleX: .25,
                            scaleY: .1
                        }, {
                            scaleX: .4,
                            scaleY: .4,
                            stagger: .5
                        })
                    }
                }),
                Ok = Fk.extend({
                    elements: Ye.elementsFromImages("kid")
                }),
                Bk = He.extend({
                    imageManifest: {
                        blender: Promise.resolve().then(s.t.bind(s, 53906, 17)),
                        drink1: Promise.resolve().then(s.t.bind(s, 93701, 17)),
                        drink2: Promise.resolve().then(s.t.bind(s, 2889, 17)),
                        drink3: Promise.resolve().then(s.t.bind(s, 99328, 17)),
                        fruit1: Promise.resolve().then(s.t.bind(s, 48469, 17)),
                        fruit2: Promise.resolve().then(s.t.bind(s, 8415, 17)),
                        fruit3: Promise.resolve().then(s.t.bind(s, 83781, 17)),
                        liquid: Promise.resolve().then(s.t.bind(s, 25472, 17))
                    }
                }),
                Yk = Bk.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("blender", "fruit1", "fruit2", "fruit3"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.fruit1", {
                            y: -50,
                            opacity: 0
                        }, {
                            y: 0,
                            opacity: 1
                        }), this.timeline.fromTo(".e.fruit2", {
                            y: -50,
                            opacity: 0
                        }, {
                            y: 0,
                            opacity: 1
                        }), this.timeline.fromTo(".e.fruit3", {
                            y: -50,
                            opacity: 0
                        }, {
                            y: 0,
                            opacity: 1
                        })
                    }
                }),
                Ak = Bk.extend({
                    elements: [{
                        type: "container",
                        class: "smoothie",
                        children: Ye.elementsFromImages("blender", "fruit1", "fruit2", "fruit3", "liquid"),
                        pos: [0, 0]
                    }],
                    initializeTimeline() {
                        this.timeline.fromTo(".e.liquid", {
                            opacity: 0
                        }, {
                            opacity: 1
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("smoothie", 2, 1)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("smoothie", 2, 1)
                    }
                }),
                Hk = Bk.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("drink2", "drink1", "drink2", "drink3", "drink3"),
                    initializeTimeline() {
                        C.p8.set(".e.drink2:first-child", {
                            x: 80,
                            scaleY: .8,
                            scaleX: -.8
                        }), C.p8.set(".e.drink3:last-child", {
                            x: 30,
                            scaleX: -1.1,
                            scaleY: 1.1
                        }), this.timeline.fromTo(".e.drink1", {
                            opacity: 1
                        }, {
                            opacity: 0,
                            x: 100,
                            duration: .5
                        }), this.timeline.fromTo(".e.drink2", {
                            opacity: 1
                        }, {
                            opacity: 0,
                            x: -100,
                            stagger: .5
                        }), this.timeline.fromTo(".e.drink3", {
                            opacity: 1
                        }, {
                            opacity: 0,
                            x: 100,
                            stagger: .5
                        })
                    }
                }),
                Gk = He.extend({
                    imageManifest: {
                        hose: Promise.resolve().then(s.t.bind(s, 76887, 17)),
                        hosedrip: Promise.resolve().then(s.t.bind(s, 39214, 17)),
                        hosepuddle: Promise.resolve().then(s.t.bind(s, 80291, 17)),
                        spigot: Promise.resolve().then(s.t.bind(s, 91726, 17)),
                        spigot2: Promise.resolve().then(s.t.bind(s, 72139, 17)),
                        swim: Promise.resolve().then(s.t.bind(s, 73993, 17))
                    }
                }),
                Vk = Gk.extend({
                    elements: Ye.elementsFromImages("spigot", "spigot2"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.spigot", {
                            opacity: 1
                        }, {
                            opacity: 0,
                            yoyo: !0,
                            repeat: 3
                        }), this.timeline.fromTo(".e.spigot2", {
                            opacity: 0
                        }, {
                            opacity: 1,
                            yoyo: !0,
                            repeat: 3
                        }, "<")
                    }
                }),
                Ek = Gk.extend({
                    elements: Ye.elementsFromImages("hose", "hosedrip"),
                    initializeTimeline() {
                        this.timeline.from(".e.hosedrip", {
                            opacity: 0
                        }), this.timeline.to(".e.hose", {
                            opacity: 0
                        }, "<")
                    }
                }),
                qk = Gk.extend({
                    elements: Ye.elementsFromImages("hosedrip", "hosepuddle"),
                    initializeTimeline() {
                        this.timeline.from(".e.hosepuddle", {
                            opacity: 0
                        }), this.timeline.to(".e.hosedrip", {
                            opacity: 0
                        }, "<")
                    }
                }),
                Nk = Gk.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("swim"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.swim", {
                            scale: 2.2,
                            x: -300
                        }, {
                            x: 200
                        }).to(".e.swim", {
                            scale: 1.5,
                            x: -100
                        }).to(".e.swim", {
                            scale: 1,
                            x: 0
                        })
                    }
                }),
                Xk = He.extend({
                    imageManifest: {
                        board: Promise.resolve().then(s.t.bind(s, 74178, 17)),
                        dive: Promise.resolve().then(s.t.bind(s, 38417, 17)),
                        lifeguard: Promise.resolve().then(s.t.bind(s, 27991, 17)),
                        pose: Promise.resolve().then(s.t.bind(s, 57892, 17)),
                        zzz: Promise.resolve().then(s.t.bind(s, 51536, 17))
                    }
                }),
                Wk = Xk.extend({
                    elements: [{
                        type: "container",
                        class: "cam",
                        children: Ye.elementsFromImages("board", "dive", "pose"),
                        pos: [0, 0]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.board", {
                            x: 0
                        }), C.p8.set(".e.dive", {
                            opacity: 0,
                            x: -550,
                            y: -225
                        }), C.p8.set(".e.pose", {
                            y: 110,
                            scale: .8
                        }), this.timeline.to(".e.pose", {
                            x: -650
                        }), this.timeline.to(".e.pose", {
                            y: -200,
                            ease: "bounce.in"
                        }, "<"), this.timeline.to(".e.cam", {
                            x: 500
                        }, "<"), this.timeline.to(".e.pose", {
                            rotate: -90
                        }), this.timeline.to(".e.cam", {
                            x: 700
                        }, "<"), this.timeline.to(".e.dive", {
                            opacity: 1,
                            duration: .1
                        }), this.timeline.to(".e.pose", {
                            opacity: 0,
                            duration: .1
                        }, "<"), this.timeline.to(".e.dive", {
                            y: 800,
                            x: -750,
                            ease: "none",
                            opacity: 0
                        }), this.timeline.to(".e.cam", {
                            x: 900
                        }, "<")
                    }
                }),
                Uk = Xk.extend({
                    elements: Ye.elementsFromImages("lifeguard"),
                    onStartProgress() {
                        Ye.startHoldShake("lifeguard", 2, 1)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("lifeguard", 2, 1)
                    }
                }),
                $k = Xk.extend({
                    elements: Ye.elementsFromImages("lifeguard", "zzz"),
                    initializeTimeline() {
                        C.p8.to(".e.zzz", {
                            opacity: 0,
                            x: 50,
                            y: -50,
                            repeat: -1,
                            duration: 1
                        })
                    }
                }),
                jk = Xk.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("lifeguard"),
                    onDiscreteProgress() {
                        C.p8.to(".e.lifeguard", {
                            x: "-=100",
                            scale: "-=0.25",
                            opacity: "-=0.33"
                        })
                    }
                }),
                Kk = He.extend({
                    imageManifest: {
                        award: Promise.resolve().then(s.t.bind(s, 44613, 17)),
                        bar: Promise.resolve().then(s.t.bind(s, 8721, 17)),
                        bend1: Promise.resolve().then(s.t.bind(s, 90067, 17)),
                        bend2: Promise.resolve().then(s.t.bind(s, 73309, 17)),
                        bend3: Promise.resolve().then(s.t.bind(s, 65460, 17))
                    }
                }),
                Zk = Kk.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("bend1", "bend2", "bar"),
                    initializeTimeline() {
                        C.p8.set(".e.bend1,.e.bend2", {
                            scaleX: -1
                        }), this.timeline.to(".e.bend1", {
                            opacity: 0
                        }), this.timeline.fromTo(".e.bend2", {
                            opacity: 0
                        }, {
                            opacity: 1
                        })
                    }
                }),
                Jk = Kk.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("bend2", "bend3", "bar"),
                    initializeTimeline() {
                        C.p8.set(".e.bend2,.e.bend3", {
                            scaleX: -1
                        }), this.timeline.to(".e.bend2", {
                            opacity: 0
                        }), this.timeline.fromTo(".e.bend3", {
                            opacity: 0
                        }, {
                            opacity: 1
                        })
                    }
                }),
                _k = Kk.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("bend3", "bar"),
                    onLoadComplete() {
                        C.p8.set(".e.bend3", {
                            scaleX: -1
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.bend3", {
                            x: "+=100"
                        }), C.p8.to(".e.bend3", {
                            y: -50,
                            yoyo: !0,
                            repeat: 1,
                            ease: "none",
                            duration: .25
                        })
                    }
                }),
                Qk = Kk.extend({
                    elements: Ye.elementsFromImages("award", "bar"),
                    onLoadComplete() {
                        C.p8.set(".e.award", {
                            scaleX: -1
                        }), C.p8.fromTo(".e.bar", {
                            y: 0
                        }, {
                            y: 500,
                            ease: "bounce.out",
                            duration: 2
                        })
                    }
                }),
                eP = He.extend({
                    imageManifest: {
                        rat: Promise.resolve().then(s.t.bind(s, 32208, 17)),
                        shells1: Promise.resolve().then(s.t.bind(s, 42121, 17)),
                        shells2: Promise.resolve().then(s.t.bind(s, 17317, 17)),
                        shell: Promise.resolve().then(s.t.bind(s, 32801, 17)),
                        shell2: Promise.resolve().then(s.t.bind(s, 62408, 17)),
                        shell3: Promise.resolve().then(s.t.bind(s, 25897, 17)),
                        shell4: Promise.resolve().then(s.t.bind(s, 35875, 17)),
                        trash: Promise.resolve().then(s.t.bind(s, 13632, 17))
                    }
                }),
                tP = eP.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("shells1", "shell"),
                    initializeTimeline() {
                        this.timeline.to(".e.shell", {
                            scale: 2,
                            opacity: 0,
                            rotateY: 90,
                            ease: "back.inOut(3)"
                        })
                    }
                }),
                sP = eP.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("shell2", "shell3", "shell4"),
                    onLoadComplete() {
                        this.timeline.to(".e.shell2", {
                            scale: 2,
                            opacity: 0,
                            rotateY: 90,
                            ease: "back.inOut(3)"
                        }), this.timeline.to(".e.shell3", {
                            scale: 2,
                            opacity: 0,
                            rotateY: 90,
                            ease: "back.inOut(3)"
                        }), this.timeline.to(".e.shell4", {
                            scale: 2,
                            opacity: 0,
                            rotateY: 90,
                            ease: "back.inOut(3)"
                        })
                    }
                }),
                iP = eP.extend({
                    elements: Ye.elementsFromImages("trash"),
                    initializeTimeline() {
                        this.timeline.to(".e.trash", {
                            x: 200,
                            scale: 4,
                            ease: "none"
                        })
                    }
                }),
                oP = eP.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("trash", "rat"),
                    initializeTimeline() {
                        C.p8.set(".e.trash", {
                            x: 200,
                            scale: 4
                        }), C.p8.to(".e.trash", {
                            scale: .1,
                            opacity: 0,
                            ease: "back.in(3)"
                        }), C.p8.fromTo(".e.rat", {
                            opacity: 0
                        }, {
                            opacity: 1
                        }), this.timeline.to(".e.rat", {
                            rotate: 14,
                            yoyo: !0,
                            repeat: 1,
                            duration: .25
                        }), this.timeline.to(".e.rat", {
                            rotate: 24,
                            yoyo: !0,
                            repeat: 1,
                            duration: .25
                        }), this.timeline.to(".e.rat", {
                            rotate: -180,
                            x: -600,
                            y: -200,
                            scale: .5,
                            opacity: 0
                        })
                    }
                }),
                nP = He.extend({
                    imageManifest: {
                        sun: Promise.resolve().then(s.t.bind(s, 89461, 17)),
                        tan: Promise.resolve().then(s.t.bind(s, 77525, 17))
                    }
                }),
                aP = nP.extend({
                    elements: Ye.elementsFromImages("tan", "sun"),
                    initializeTimeline() {
                        C.p8.fromTo(".e.sun", {
                            x: 1400,
                            y: 1e3,
                            scale: 3
                        }, {
                            scale: 4,
                            x: 200,
                            y: 500,
                            ease: "power2.out",
                            duration: 4
                        }), C.p8.fromTo(".e.tan", {
                            x: 50,
                            y: 50
                        }, {
                            x: -50,
                            y: 0,
                            scale: 1.3,
                            ease: "power2.out",
                            duration: 4
                        })
                    }
                }),
                rP = He.extend({
                    imageManifest: {
                        drinks: Promise.resolve().then(s.t.bind(s, 57790, 17)),
                        drink1: Promise.resolve().then(s.t.bind(s, 93701, 17)),
                        drink2: Promise.resolve().then(s.t.bind(s, 2889, 17)),
                        drink3: Promise.resolve().then(s.t.bind(s, 99328, 17)),
                        frown: Promise.resolve().then(s.t.bind(s, 46838, 17)),
                        party1: Promise.resolve().then(s.t.bind(s, 24969, 17)),
                        party2: Promise.resolve().then(s.t.bind(s, 16958, 17)),
                        party3: Promise.resolve().then(s.t.bind(s, 41561, 17)),
                        tear1: Promise.resolve().then(s.t.bind(s, 60252, 17)),
                        tear2: Promise.resolve().then(s.t.bind(s, 48729, 17)),
                        tear3: Promise.resolve().then(s.t.bind(s, 38263, 17)),
                        van: Promise.resolve().then(s.t.bind(s, 32826, 17))
                    }
                }),
                lP = rP.extend({
                    elements: Ye.elementsFromImages("van"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.van", {
                            x: 900
                        }, {
                            x: 0,
                            duration: 1.9
                        }), this.timeline.to(".e.van", {
                            rotate: -3
                        }, "<"), this.timeline.to(".e.van", {
                            rotate: 0
                        }, 1.9)
                    }
                }),
                dP = rP.extend({
                    elements: Ye.elementsFromImages("frown", "tear1", "tear2", "tear3"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.tear1,.e.tear2,.e.tear3", {
                            y: 0,
                            opacity: 1,
                            display: "none"
                        }, {
                            display: "block",
                            y: 100,
                            opacity: 0,
                            stagger: .33,
                            ease: "power2.in"
                        })
                    }
                }),
                pP = rP.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("drink1", "drink2", "drink3"),
                    initializeTimeline() {
                        this.timeline.to(".e.drink1", {
                            x: -900,
                            ease: "back.in(2)"
                        }), this.timeline.to(".e.drink2", {
                            x: 1600,
                            ease: "back.in(2)"
                        }), this.timeline.to(".e.drink3", {
                            x: -1200,
                            ease: "back.in(2)"
                        })
                    }
                }),
                cP = rP.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("party1", "party2", "party3"),
                    initializeTimeline() {
                        C.p8.set(".e.party1", {
                            x: 0,
                            y: 400
                        }), C.p8.set(".e.party2", {
                            x: 350,
                            y: 400
                        }), C.p8.set(".e.party3", {
                            x: 660,
                            y: 330
                        }), C.p8.fromTo(".e.party1", {
                            rotate: 3
                        }, {
                            rotate: -3,
                            yoyo: !0,
                            repeat: -1,
                            duration: .5,
                            ease: "power2.inOut"
                        }), C.p8.fromTo(".e.party3", {
                            y: 310
                        }, {
                            y: 330,
                            yoyo: !0,
                            repeat: -1,
                            duration: .25,
                            ease: "power2.inOut"
                        }), C.p8.fromTo(".e.party2", {
                            rotate: 5
                        }, {
                            rotate: -5,
                            yoyo: !0,
                            repeat: -1,
                            duration: .5,
                            ease: "steps(1)"
                        }), C.p8.fromTo(".e.party2", {
                            scale: .8
                        }, {
                            scale: 1.2,
                            yoyo: !0,
                            repeat: -1,
                            duration: 1,
                            ease: "steps(3)"
                        }), this.timeline.to(".e.party1", {
                            rotateY: "+=180"
                        }), this.timeline.to(".e.party2", {
                            rotateX: "+=360"
                        }), this.timeline.to(".e.party3", {
                            rotateY: "+=180"
                        }), this.timeline.to(".e.party2", {
                            rotateX: "-=360"
                        }), this.timeline.to(".e.party1", {
                            rotateY: "+=180"
                        })
                    }
                }),
                mP = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 54529, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                arch: [0, 0, 870, 700],
                                deflated0: [0, 700, 400, 210],
                                deflated1: [0, 910, 400, 210],
                                deflated2: [400, 700, 210, 420],
                                bow: [610, 700, 260, 290],
                                small: [870, 551, 368, 551],
                                medium: [1238, 0, 368, 551],
                                big: [870, 3, 368, 548],
                                big2: [1238, 551, 368, 551]
                            }
                        }
                    }
                }),
                hP = mP.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["deflated0", null, [305, 100]],
                        ["deflated2", null, [400, 595]]
                    ]),
                    initializeTimeline() {
                        this.timeline.to(".e.deflated0", {
                            scale: .5,
                            duration: 1,
                            ease: "back.in(3)"
                        }).to(".e.deflated0", {
                            opacity: 0,
                            duration: .1
                        }, .9).to(".e.deflated2", {
                            scale: .5,
                            duration: 1,
                            ease: "back.in(3)"
                        }, 1).to(".e.deflated2", {
                            opacity: 0,
                            duration: .1
                        }, 1.9)
                    }
                }),
                uP = mP.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["big", null, [256, 316]],
                            ["medium", null, [254.5, 316]],
                            ["small", null, [254.5, 316]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.big, .e.medium, .e.small", {
                            transformOrigin: "bottom center"
                        }), C.p8.set(".e.big, .e.medium", {
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.small", {
                            scaleY: 1.3,
                            scaleX: 1.2,
                            ease: "power3.out"
                        }).to(".e.small", {
                            scaleY: 1.2,
                            scaleX: 1.2,
                            ease: "power3.in"
                        }).set(".e.small", {
                            visibility: "hidden"
                        }).set(".e.medium", {
                            visibility: "visible"
                        }).to(".e.medium", {
                            scaleY: 1.3,
                            scaleX: 1.2,
                            ease: "power3.out"
                        }).to(".e.medium", {
                            scaleY: 1.2,
                            scaleX: 1.2,
                            ease: "power3.out"
                        }).set(".e.medium", {
                            visibility: "hidden"
                        }).set(".e.big", {
                            visibility: "visible"
                        }).to(".e.big", {
                            scaleY: 1.3,
                            scaleX: 1.2,
                            ease: "power3.out"
                        }).to(".e.big", {
                            scaleY: 1.2,
                            scaleX: 1.2,
                            ease: "power3.out"
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                gP = mP.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["big2", null, [226, 566]],
                        ["big", null, [226, 66]],
                        ["bow", null, [616, 336]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.big", {
                            transformOrigin: "bottom center"
                        }), C.p8.set(".e.big2", {
                            transformOrigin: "bottom center"
                        }), C.p8.set(".e.bow", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.big2", {
                            x: -310,
                            y: 0,
                            rotate: 45,
                            ease: "back.out(2)"
                        }).to(".e.big", {
                            x: 273,
                            rotate: -58,
                            ease: "back.out(2)"
                        }).to(".e.bow", {
                            opacity: 1
                        })
                    }
                }),
                yP = mP.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["arch", null, [150, 65]]
                    ])
                }),
                bP = He.extend({
                    imageManifest: {
                        bottle: Promise.resolve().then(s.t.bind(s, 2552, 17)),
                        snack: Promise.resolve().then(s.t.bind(s, 84470, 17)),
                        tissue: Promise.resolve().then(s.t.bind(s, 76289, 17)),
                        wallet: Promise.resolve().then(s.t.bind(s, 1467, 17)),
                        yardstick: Promise.resolve().then(s.t.bind(s, 22882, 17))
                    }
                }),
                xP = bP.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("wallet", "tissue"),
                    onLoadComplete() {
                        C.p8.set(".e.tissue", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("wallet", "tissue"))
                    }
                }),
                fP = bP.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("tissue", "bottle", "snack", "yardstick"),
                    onLoadComplete() {
                        C.p8.set(".e.bottle, .e.snack, .e.yardstick", {
                            opacity: 0
                        }), C.p8.to(".e.tissue", {
                            x: -200,
                            y: -220,
                            scale: .5,
                            rotate: 10,
                            duration: .5,
                            ease: "back.in(2)"
                        }), C.p8.to(".e.bottle", {
                            opacity: 1,
                            duration: .2
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bottle", {
                            x: 200,
                            y: -220,
                            scale: .5,
                            rotate: -20,
                            duration: 1,
                            ease: "back.in(2)"
                        }).to(".e.snack", {
                            opacity: 1,
                            duration: .2
                        }, .8).to(".e.snack", {
                            x: -200,
                            y: 220,
                            scale: .5,
                            rotate: -27,
                            duration: 1,
                            ease: "back.in(2)"
                        }, 1).to(".e.yardstick", {
                            opacity: 1,
                            duration: .2
                        }, 1.8).to(".e.yardstick", {
                            x: 200,
                            y: 220,
                            scale: .5,
                            rotate: 130,
                            duration: 1,
                            ease: "back.in(2)"
                        }, 2)
                    }
                }),
                vP = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 57504, 17)),
                        clean: Promise.resolve().then(s.t.bind(s, 51842, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                cream0: [610, 1, 200, 764],
                                cream1: [0, 0, 610, 195],
                                cream2: [0, 195, 610, 250],
                                cream3: [0, 445, 610, 260],
                                cream4: [0, 705, 610, 268],
                                razor: [810, 0, 290, 705],
                                blob0: [610, 765, 430, 208],
                                blob1: [1040, 833, 348, 140],
                                blob2: [1043, 664, 348, 161]
                            }
                        }
                    }
                }),
                kP = vP.extend({
                    stepDuration: .25,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["blob2", null, [302, 348]],
                            ["blob1", null, [427, 315]],
                            ["blob0", null, [530, 270]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.blob1, .e.blob2", {
                            y: 50,
                            scaleY: .5,
                            opacity: 0,
                            transformOrigin: "bottom center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.blob1", {
                            y: 0,
                            scaleY: 1,
                            opacity: 1,
                            duration: 1
                        }).to(".e.blob2", {
                            y: 0,
                            scaleY: 1,
                            opacity: 1,
                            duration: 1
                        }).to(".e.c", {
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("c")
                    }
                }),
                PP = vP.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["cream4", null, [637, 140]],
                        ["cream3", null, [450, 140]],
                        ["cream2", null, [268, 140]],
                        ["cream1", null, [140, 140]],
                        ["cream0", null, [140, 677]],
                        ["razor", null, [110, 640]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.razor", {
                            scale: 1.1,
                            transformOrigin: "top center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.razor", {
                            scale: 1,
                            duration: .1
                        }).to(".e.cream0", {
                            clipPath: "inset(100% 0 0 0)",
                            duration: 1
                        }, 0).to(".e.razor", {
                            y: 700,
                            duration: 1
                        }, 0)
                    }
                }),
                wP = vP.extend({
                    stepDuration: .5,
                    elements: [...Ye.elementsFromImages(["clean", null, [225, 180]]), ...Ye.elementsFromSprite("sprite", [
                        ["cream4", null, [637, 140]],
                        ["cream3", null, [450, 140]],
                        ["cream2", null, [268, 140]],
                        ["cream1", null, [140, 140]],
                        ["razor", null, [110, 640]]
                    ])],
                    onLoadComplete() {
                        C.p8.timeline().set(".e.razor", {
                            y: 700,
                            transformOrigin: "top center"
                        }).to(".e.razor", {
                            scale: 1.1,
                            duration: .05
                        }).to(".e.razor", {
                            x: 40,
                            y: 140,
                            rotate: 90,
                            duration: .2
                        }, 0)
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.razor", {
                            scale: 1,
                            duration: .1
                        }, 0).to(".e.cream1", {
                            clipPath: "inset(0 100% 0 0)",
                            duration: .7
                        }, 0).to(".e.razor", {
                            x: -550,
                            duration: .7
                        }, 0).to(".e.razor", {
                            scale: 1.1,
                            duration: .1
                        }, .7).to(".e.razor", {
                            x: -700,
                            y: 280,
                            rotate: -90,
                            duration: .2
                        }, .8).to(".e.razor", {
                            scale: 1,
                            duration: .1
                        }, 1).to(".e.cream2", {
                            clipPath: "inset(0 0 0 100%)",
                            duration: .7
                        }, 1).to(".e.razor", {
                            x: -80,
                            duration: .7
                        }, 1).to(".e.razor", {
                            scale: 1.1,
                            duration: .1
                        }, 1.7).to(".e.razor", {
                            x: 40,
                            y: 420,
                            rotate: 90,
                            duration: .2
                        }, 1.8).to(".e.razor", {
                            scale: 1,
                            duration: .1
                        }, 2).to(".e.cream3", {
                            clipPath: "inset(0 100% 0 0)",
                            duration: .7
                        }, 2).to(".e.razor", {
                            x: -550,
                            duration: .7
                        }, 2).to(".e.razor", {
                            scale: 1.1,
                            duration: .1
                        }, 2.7).to(".e.razor", {
                            x: -700,
                            y: 660,
                            rotate: -90,
                            duration: .2
                        }, 2.8).to(".e.razor", {
                            scale: 1,
                            duration: .1
                        }, 3).to(".e.cream4", {
                            clipPath: "inset(0 0 0 100%)",
                            duration: .7
                        }, 3).to(".e.razor", {
                            x: -80,
                            duration: .7
                        }, 3).to(".e.razor", {
                            scale: 1.1,
                            duration: .1
                        }, 3.7).to(".e.razor", {
                            x: -280,
                            y: 20,
                            rotate: 0,
                            opacity: 0,
                            duration: .2
                        }, 3.8)
                    }
                }),
                TP = vP.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages(["clean", null, [225, 180]]),
                    initializeTimeline() {
                        this.timeline.to(".e.clean", {
                            opacity: 0
                        })
                    }
                }),
                SP = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 14689, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                closet: [0, 0, 932, 756],
                                door: [0, 756, 496, 756],
                                hanging: [496, 756, 239, 431],
                                coat: [735, 949, 751, 990],
                                devil0: [1468, 0, 496, 949],
                                devil1: [932, 0, 536, 949],
                                devil2: [1964, 0, 725, 949],
                                devil3: [1486, 949, 634, 990],
                                devil4: [2120, 949, 634, 990]
                            }
                        }
                    }
                }),
                MP = SP.extend({
                    stepDuration: .65,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["closet", null, [122, 34]],
                        ["hanging", null, [196, 810]],
                        ["door", null, [122, 468]],
                        ["coat", null, [5, 124.5]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.hanging", {
                            clipPath: "inset(0 115px 0 0)"
                        }), C.p8.set(".e.coat", {
                            x: 256,
                            y: -31,
                            scaleX: .3,
                            scaleY: .4,
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.door", {
                            x: -400,
                            duration: 1,
                            ease: "bounce.out"
                        }).to(".e.hanging", {
                            x: -173,
                            clipPath: "inset(0 -58px 0 0)",
                            duration: 1,
                            ease: "power3.out"
                        }, 1).set(".e.hanging", {
                            visibility: "hidden"
                        }, 2.01).set(".e.coat", {
                            visibility: "visible"
                        }, 2.01).to(".e.coat", {
                            x: 0,
                            y: 0,
                            scale: 1,
                            duration: 1,
                            ease: "back.out(2)"
                        }, 2)
                    }
                }),
                CP = SP.extend({
                    stepDuration: .25,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["devil0", null, [25.5, 252]],
                            ["devil1", null, [25.5, 232]],
                            ["devil2", null, [25.5, 137.5]],
                            ["devil3", null, [5, 243]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.devil1, .e.devil2, .e.devil3", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        const e = Ye.squashTransition("devil0", "devil1"),
                            t = Ye.squashTransition("devil1", "devil2"),
                            s = Ye.squashTransition("devil2", "devil3");
                        this.timeline.add(e), this.timeline.add(t), this.timeline.add(s)
                    }
                }),
                DP = SP.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["devil4", null, [5, 183]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.devil4", {
                            transformOrigin: "center bottom"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.devil4", {
                            x: -20,
                            rotate: -5,
                            ease: "elastic.out(1.2, 0.5)"
                        }).to(".e.devil4", {
                            x: 20,
                            rotate: 5,
                            ease: "elastic.out(1.2, 0.5)"
                        }).to(".e.devil4", {
                            x: 0,
                            rotate: 0,
                            ease: "power4.inOut"
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                FP = SP.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["devil3", null, [5, 183]]
                    ]),
                    initializeTimeline() {
                        this.timeline.to(".e.devil3", {
                            x: 200,
                            ease: "back.out(2)"
                        }).to(".e.devil3", {
                            x: 400,
                            ease: "back.out(2)"
                        })
                    }
                }),
                zP = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 47416, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                window: [0, 0, 952, 783],
                                content: [952, 0, 757, 1070],
                                flower2: [0, 783, 952, 654],
                                flower1: [0, 1437, 952, 654],
                                flower0: [0, 2091, 952, 654],
                                flower: [952, 1070, 498, 943],
                                arm: [952, 2013, 968, 368]
                            }
                        }
                    }
                }),
                LP = zP.extend({
                    stepDuration: .5,
                    elements: [...Ye.elementsFromSprite("sprite", [
                        ["window", null, [108.5, 24]]
                    ]), {
                        class: "window-mask",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["content", null, [30, 62]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.window-mask", {
                            top: 197,
                            left: 59,
                            width: 877,
                            height: 661,
                            overflow: "hidden"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.content", {
                            y: -485,
                            ease: "power2.out"
                        })
                    }
                }),
                RP = zP.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["flower", null, [28.5, 251]]
                    ]),
                    initializeTimeline() {
                        this.timeline.to(".e.flower", {
                            rotate: 90
                        })
                    }
                }),
                IP = zP.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["flower2", null, [173, 24]],
                        ["flower1", null, [173, 24]],
                        ["flower0", null, [173, 24]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.flower1, .e.flower2", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        const e = Ye.squashTransition("flower0", "flower1"),
                            t = Ye.squashTransition("flower1", "flower2");
                        this.timeline.add(e), this.timeline.add(t)
                    }
                }),
                OP = zP.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["arm", null, [316, 16]],
                        ["flower2", null, [173, 24]]
                    ]),
                    onLoadComplete() {
                        C.p8.fromTo(".e.arm", {
                            opacity: 0,
                            y: 75
                        }, {
                            opacity: 1,
                            y: 0,
                            duration: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.flower2", {
                            rotate: 15,
                            duration: .7,
                            ease: "power2.out"
                        }, 0).to(".e.flower2", {
                            rotate: 0,
                            duration: .3,
                            ease: "power2.in"
                        }, .7).to(".e.flower2", {
                            x: 48,
                            y: -195,
                            scale: .5,
                            duration: 1,
                            ease: "back.in(2)"
                        }, 0)
                    }
                }),
                BP = He.extend({
                    imageManifest: {
                        bored: Promise.resolve().then(s.t.bind(s, 44610, 17)),
                        goofy: Promise.resolve().then(s.t.bind(s, 115, 17)),
                        skeletons: Promise.resolve().then(s.t.bind(s, 28871, 17)),
                        smile: Promise.resolve().then(s.t.bind(s, 49548, 17))
                    }
                }),
                YP = BP.extend({
                    stepDuration: .25,
                    elements: [...Ye.elementsFromImages("smile"), {
                        class: "flash",
                        type: "div",
                        pos: [-5e3, -5e3]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.flash", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.flash", {
                            opacity: 1,
                            duration: .05,
                            ease: "none"
                        }).to(".e.flash", {
                            opacity: 0,
                            duration: .15
                        }, "+=0.15")
                    }
                }),
                AP = BP.extend({
                    stepDuration: .25,
                    elements: [...Ye.elementsFromImages("goofy"), {
                        class: "flash",
                        type: "div",
                        pos: [-5e3, -5e3]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.flash", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.flash", {
                            opacity: 1,
                            duration: .05,
                            ease: "none"
                        }).to(".e.flash", {
                            opacity: 0,
                            duration: .15
                        }, "+=0.15")
                    }
                }),
                HP = BP.extend({
                    stepDuration: .25,
                    elements: [...Ye.elementsFromImages("smile", "bored"), {
                        class: "flash",
                        type: "div",
                        pos: [-5e3, -5e3]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.flash", {
                            opacity: 0
                        }), C.p8.set(".e.bored", {
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.flash", {
                            opacity: 1,
                            duration: .05,
                            ease: "none"
                        }).to(".e.flash", {
                            opacity: 0,
                            duration: .15
                        }, "+=0.15").to(".e.flash", {
                            opacity: 1,
                            duration: .05,
                            ease: "none"
                        }).to(".e.flash", {
                            opacity: 0,
                            duration: .15
                        }, "+=0.15").to(".e.flash", {
                            opacity: 1,
                            duration: .05,
                            ease: "none"
                        }).set(".e.smile", {
                            visibility: "hidden"
                        }).set(".e.bored", {
                            visibility: "visible"
                        }).to(".e.flash", {
                            opacity: 0,
                            duration: .15
                        }, "+=0.15")
                    }
                }),
                GP = BP.extend({
                    stepDuration: .25,
                    elements: [...Ye.elementsFromImages("bored", "skeletons"), {
                        class: "flash",
                        type: "div",
                        pos: [-5e3, -5e3]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.flash", {
                            opacity: 0
                        }), C.p8.set(".e.skeletons", {
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.flash", {
                            opacity: 1,
                            duration: .05,
                            ease: "none"
                        }).to(".e.flash", {
                            opacity: 0,
                            duration: .15
                        }, "+=0.15").to(".e.flash", {
                            opacity: 1,
                            duration: .05,
                            ease: "none"
                        }).set(".e.bored", {
                            visibility: "hidden"
                        }).set(".e.skeletons", {
                            visibility: "visible"
                        }).to(".e.flash", {
                            opacity: 0,
                            duration: .15
                        }, "+=0.15").to(".e.flash", {
                            opacity: 1,
                            duration: .05,
                            ease: "none"
                        }).to(".e.flash", {
                            opacity: 0,
                            duration: .15
                        }, "+=0.15")
                    }
                }),
                VP = He.extend({
                    imageManifest: {
                        closeDance: Promise.resolve().then(s.t.bind(s, 73280, 17)),
                        farDance: Promise.resolve().then(s.t.bind(s, 69893, 17)),
                        mediumDance: Promise.resolve().then(s.t.bind(s, 64188, 17))
                    }
                }),
                EP = VP.extend({
                    elements: Ye.elementsFromImages("closeDance"),
                    onStartProgress() {
                        Ye.startHoldShake("closeDance")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("closeDance")
                    }
                }),
                qP = VP.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("closeDance", "mediumDance"),
                    onLoadComplete() {
                        C.p8.set(".e.mediumDance", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("closeDance", "mediumDance"))
                    }
                }),
                NP = VP.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("mediumDance", "farDance"),
                    onLoadComplete() {
                        C.p8.set(".e.farDance", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("mediumDance", "farDance"))
                    }
                }),
                XP = VP.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("farDance"),
                    initializeTimeline() {
                        this.timeline.to(".e.farDance", {
                            scale: 1.05
                        }).to(".e.farDance", {
                            scale: .95
                        }).to(".e.farDance", {
                            scale: 1.05
                        }).to(".e.farDance", {
                            scale: .95
                        })
                    }
                }),
                WP = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 34605, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                bomb: [0, 0, 590, 717],
                                pin: [827, 985, 338, 215],
                                lines: [0, 717, 590, 268],
                                toss: [0, 985, 827, 720],
                                run: [590, 0, 712, 918]
                            }
                        }
                    }
                }),
                UP = WP.extend({
                    stepDuration: .7,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["pin", null, [130, 500]],
                            ["bomb", null, [141, 205]]
                        ])
                    }],
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            repeat: 3,
                            ease: "power2.inOut"
                        }).to(".e.c", {
                            x: 50,
                            y: -50,
                            rotate: 8
                        }).to(".e.c", {
                            x: 0,
                            y: 0,
                            rotate: 0
                        }).to(".e.c", {
                            x: 50,
                            y: 50,
                            rotate: -8
                        }).to(".e.c", {
                            x: 0,
                            y: 0,
                            rotate: 0
                        });
                        this.timeline.add(e)
                    }
                }),
                $P = WP.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["pin", null, [130, 500]],
                            ["bomb", null, [141, 205]]
                        ])
                    }],
                    initializeTimeline() {
                        this.timeline.fillTime(1).to(".e.pin", {
                            x: -10,
                            duration: .2,
                            ease: "power1.out"
                        }).to(".e.pin", {
                            x: 150,
                            duration: .5,
                            ease: "back.out(3)"
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.startHoldShake("c")
                    }
                }),
                jP = WP.extend({
                    stepDuration: .65,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["lines", null, [360, 375]],
                            ["toss", null, [140, 86]],
                            ["bomb", null, [141, 205]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.lines", {
                            opacity: 0
                        }), C.p8.set(".e.toss", {
                            x: 561,
                            y: -17,
                            scale: 2,
                            rotate: 39,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.toss", {
                            x: 0,
                            y: 0,
                            scale: 1,
                            rotate: 0,
                            duration: 1
                        }, 0).to(".e.bomb", {
                            x: -212,
                            y: 81,
                            scale: .5,
                            rotate: -39,
                            duration: 1
                        }, 0).to(".e.lines", {
                            opacity: 1,
                            duration: .5
                        }, .5).set(".e.toss", {
                            opacity: 1
                        }, .01).set(".e.bomb", {
                            opacity: 0
                        }, .01)
                    }
                }),
                KP = WP.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["run", null, [41, 300]]
                    ]),
                    initializeTimeline() {
                        this.timeline.to(".e.run", {
                            x: -250
                        }).to(".e.run", {
                            x: -500
                        }).to(".e.run", {
                            x: -750
                        })
                    }
                }),
                ZP = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 31989, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                argueLeft: [0, 0, 492, 632],
                                argueRight: [492, 0, 422, 632],
                                fight: [914, 0, 650, 649],
                                fightFoot: [1564, 0, 236, 234],
                                fightHand: [1564, 234, 129, 212],
                                fightTail: [1564, 446, 149, 152],
                                fightBang: [1432, 1179, 193, 185],
                                fistMan: [867, 649, 565, 737],
                                fistFist: [1432, 649, 406, 530],
                                holdBack: [0, 632, 867, 848]
                            }
                        }
                    }
                }),
                JP = ZP.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["argueLeft", null, [184, 34]],
                        ["argueRight", null, [184, 529]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.argueLeft", {
                            transformOrigin: "left center"
                        }), C.p8.set(".e.argueRight", {
                            transformOrigin: "right center"
                        }), C.p8.timeline({
                            repeat: -1
                        }).to(".e.argueLeft", {
                            scaleX: 1.05,
                            duration: .1
                        }).to(".e.argueLeft", {
                            scaleX: 1,
                            duration: .15
                        }).to(".e.argueLeft", {
                            scaleX: 1.05,
                            duration: .1
                        }).to(".e.argueLeft", {
                            scaleX: 1,
                            duration: .2
                        }).to(".e.argueLeft", {
                            scaleX: 1.05,
                            duration: .13
                        }).to(".e.argueLeft", {
                            scaleX: 1,
                            duration: .1
                        }).to(".e.argueLeft", {
                            scaleX: 1.05,
                            duration: .1
                        }).to(".e.argueLeft", {
                            scaleX: 1,
                            duration: .1
                        }), C.p8.timeline({
                            repeat: -1
                        }).to(".e.argueRight", {
                            scaleX: 1.05,
                            duration: .13
                        }).to(".e.argueRight", {
                            scaleX: 1,
                            duration: .1
                        }).to(".e.argueRight", {
                            scaleX: 1.05,
                            duration: .1
                        }).to(".e.argueRight", {
                            scaleX: 1,
                            duration: .15
                        }).to(".e.argueRight", {
                            scaleX: 1.05,
                            duration: .1
                        }).to(".e.argueRight", {
                            scaleX: 1,
                            duration: .2
                        }).to(".e.argueRight", {
                            scaleX: 1.05,
                            duration: .13
                        }).to(".e.argueRight", {
                            scaleX: 1,
                            duration: .1
                        })
                    }
                }),
                _P = ZP.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["fistFist", null, [336, 66]],
                        ["fistMan", null, [131, 400]]
                    ]),
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            repeat: 10
                        }).to(".e.fistFist", {
                            x: 30
                        }).to(".e.fistFist", {
                            x: 0
                        }).to(".e.fistFist", {
                            x: -30
                        }).to(".e.fistFist", {
                            x: 0
                        });
                        this.timeline.add(e)
                    }
                }),
                QP = ZP.extend({
                    stepDuration: .35,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["fight", null, [175, 175]],
                            ["fightFoot", null, [383, 382]],
                            ["fightHand", null, [394, 435]],
                            ["fightTail", null, [424, 425]],
                            ["fightBang", "bang0", [87, 656]],
                            ["fightBang", "bang1", [577, 42]],
                            ["fightBang", "bang2", [687, 683]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.fightFoot, .e.fightHand, .e.fightTail, .e.bang0, .e.bang1, .e.bang2", {
                            opacity: 0
                        }), C.p8.set(".e.bang1", {
                            rotate: 198
                        }), C.p8.set(".e.bang2", {
                            rotate: 88
                        }), C.p8.timeline({
                            repeat: -1
                        }).set(".e.c", {
                            x: -20,
                            y: 10,
                            rotate: -20,
                            scale: 1.1
                        }, 0).set(".e.c", {
                            x: 0,
                            y: 20,
                            rotate: 20,
                            scale: .9
                        }, .25).set(".e.c", {
                            x: -10,
                            y: -10,
                            rotate: 0,
                            scale: 1
                        }, .5).set(".e.c", {
                            x: 0,
                            y: 20,
                            rotate: -20,
                            scale: 1.1
                        }, .75).set(".e.c", {
                            x: 20,
                            y: -20,
                            rotate: 0,
                            scale: .9
                        }, 1).set(".e.c", {
                            x: 0,
                            y: 0,
                            rotate: -20,
                            scale: 1.1
                        }, 1.25).set(".e.c", {
                            x: -10,
                            y: 10,
                            rotate: 20,
                            scale: 1
                        }, 1.5)
                    },
                    onDiscreteProgress: e => (C.p8.to(".e.bang0, .e.bang1, .e.bang2", {
                        opacity: 1,
                        duration: .25,
                        yoyo: !0,
                        repeat: 1
                    }), C.p8.fromTo(".e.fightFoot, .e.fightHand, .e.fightTail", {
                        opacity: 0
                    }, {
                        opacity: 1,
                        duration: .15
                    }), e < 40 ? (C.p8.set(".e.fightFoot", {
                        x: 287,
                        y: -73,
                        rotate: 0
                    }), C.p8.set(".e.fightHand", {
                        x: -39,
                        y: -219,
                        rotate: 0
                    }), void C.p8.set(".e.fightTail", {
                        x: -194,
                        y: 231,
                        rotate: 0
                    })) : e < 70 ? (C.p8.set(".e.fightFoot", {
                        x: -120,
                        y: -240,
                        rotate: 295
                    }), C.p8.set(".e.fightHand", {
                        x: -201,
                        y: 240,
                        rotate: 233
                    }), void C.p8.set(".e.fightTail", {
                        x: 246,
                        y: -79,
                        rotate: 185
                    })) : (C.p8.set(".e.fightFoot", {
                        x: -180,
                        y: 273,
                        rotate: 150
                    }), C.p8.set(".e.fightHand", {
                        x: 290,
                        y: -30,
                        rotate: 85
                    }), void C.p8.set(".e.fightTail", {
                        x: -179,
                        y: -189,
                        rotate: 104
                    })))
                }),
                ew = ZP.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["holdBack", null, [76, 366]]
                    ]),
                    onLoadComplete() {
                        C.p8.to(".e.holdBack", {
                            scaleX: 1.1,
                            duration: .65,
                            repeat: -1,
                            yoyo: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.holdBack", {
                            x: -500
                        })
                    }
                }),
                tw = He.extend({
                    imageManifest: {
                        kissLeft: Promise.resolve().then(s.t.bind(s, 36400, 17)),
                        kissRight: Promise.resolve().then(s.t.bind(s, 61714, 17)),
                        braces: Promise.resolve().then(s.t.bind(s, 62551, 17)),
                        lips: Promise.resolve().then(s.t.bind(s, 97913, 17)),
                        lick: Promise.resolve().then(s.t.bind(s, 45067, 17)),
                        smile: Promise.resolve().then(s.t.bind(s, 27791, 17))
                    }
                }),
                sw = tw.extend({
                    stepDuration: .4,
                    elements: Ye.elementsFromImages("lips", "lick", "smile"),
                    onLoadComplete() {
                        C.p8.set(".e.lips, .e.lick", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("smile", "lick")), this.timeline.add(Ye.squashTransition("lick", "lips"))
                    }
                }),
                iw = tw.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("kissLeft", "kissRight")
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.kissLeft", {
                            x: 20,
                            y: -100
                        }).to(".e.kissLeft", {
                            x: 0,
                            y: 0
                        }).to(".e.kissLeft", {
                            x: 10,
                            y: -40
                        }).to(".e.kissLeft", {
                            x: -10,
                            y: 80
                        }).to(".e.kissLeft", {
                            x: 0,
                            y: -20
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                ow = tw.extend({
                    stepDuration: .4,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("kissLeft", "kissRight")
                    }],
                    onDiscreteProgress() {
                        C.p8.timeline({
                            repeat: 1,
                            yoyo: !0
                        }).to(".e.kissLeft", {
                            x: 35,
                            duration: .25
                        }, 0).to(".e.kissRight", {
                            x: -35,
                            duration: .25
                        }, 0).to(".e.c", {
                            scaleX: .8,
                            duration: .25
                        }, 0)
                    }
                }),
                nw = tw.extend({
                    elements: Ye.elementsFromImages("braces"),
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            repeat: 6,
                            yoyo: !0
                        }).to(".e.braces", {
                            scaleX: 1.15,
                            ease: "power3.inOut"
                        });
                        this.timeline.add(e)
                    }
                }),
                aw = He.extend({
                    imageManifest: {
                        birds1: Promise.resolve().then(s.t.bind(s, 85487, 17)),
                        birds2: Promise.resolve().then(s.t.bind(s, 45648, 17)),
                        birds3: Promise.resolve().then(s.t.bind(s, 75751, 17)),
                        bookclean: Promise.resolve().then(s.t.bind(s, 90946, 17)),
                        bookdirty: Promise.resolve().then(s.t.bind(s, 46956, 17)),
                        bookswipe: Promise.resolve().then(s.t.bind(s, 11476, 17)),
                        pile: Promise.resolve().then(s.t.bind(s, 35859, 17))
                    }
                }),
                rw = aw.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("pile", "bookdirty"),
                    initializeTimeline() {
                        this.timeline.from(".e.bookdirty", {
                            scale: .65,
                            x: 50,
                            y: 250
                        })
                    }
                }),
                lw = aw.extend({
                    elements: Ye.elementsFromImages("bookclean", "bookdirty", "bookswipe"),
                    initializeTimeline() {
                        this.timeline.from(".e.bookswipe", {
                            opacity: 0
                        }), this.timeline.to(".e.bookdirty", {
                            opacity: 0
                        }, "<"), this.timeline.from(".e.bookclean", {
                            opacity: 0
                        }), this.timeline.to(".e.bookswipe", {
                            opacity: 0,
                            ease: "power2.out"
                        }, "<")
                    }
                }),
                dw = aw.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("birds1", "birds2", "birds3"),
                    initializeTimeline() {
                        this.timeline.to(".e.birds3", {
                            opacity: 0
                        }), this.timeline.to(".e.birds2", {
                            opacity: 0
                        }), this.timeline.to(".e.birds1", {
                            scale: 1.5
                        })
                    }
                }),
                pw = aw.extend({
                    elements: Ye.elementsFromImages("birds1"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.birds1", {
                            scale: 1.5
                        }, {
                            scale: 1.9,
                            rotate: 360,
                            ease: "none"
                        })
                    }
                }),
                cw = aw.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("birds1"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.birds1", {
                            scale: 1.9
                        }, {
                            x: 1550
                        })
                    }
                }),
                mw = He.extend({
                    imageManifest: {
                        boss: Promise.resolve().then(s.t.bind(s, 13786, 17)),
                        closed: Promise.resolve().then(s.t.bind(s, 28424, 17)),
                        teeth: Promise.resolve().then(s.t.bind(s, 70163, 17))
                    }
                }),
                hw = mw.extend({
                    elements: Ye.elementsFromImages("teeth"),
                    onStartProgress() {
                        Ye.startHoldShake("teeth", 2, 1)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("teeth", 2, 1)
                    }
                }),
                uw = mw.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("boss", "closed"),
                    initializeTimeline() {
                        this.timeline.from(".e.boss", {
                            opacity: 0
                        }), this.timeline.to(".e.closed", {
                            opacity: 0
                        }, "<"), this.timeline.to(".e.boss", {
                            scale: 1.5,
                            x: 100
                        })
                    }
                }),
                gw = He.extend({
                    imageManifest: {
                        pose: Promise.resolve().then(s.t.bind(s, 59443, 17)),
                        steps: Promise.resolve().then(s.t.bind(s, 41447, 17)),
                        tap: Promise.resolve().then(s.t.bind(s, 86617, 17)),
                        steps1: Promise.resolve().then(s.t.bind(s, 2729, 17)),
                        steps2: Promise.resolve().then(s.t.bind(s, 358, 17)),
                        foot: Promise.resolve().then(s.t.bind(s, 57784, 17))
                    }
                }),
                yw = gw.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("foot", "tap"),
                    initializeTimeline() {
                        C.p8.set(".e.foot", {
                            x: 380,
                            y: 535
                        }), this.timeline.from(".e.foot", {
                            rotate: -20,
                            yoyo: !0,
                            repeat: 5
                        })
                    }
                }),
                bw = gw.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("steps1"),
                    initializeTimeline() {
                        this.timeline.to(".e.steps1", {
                            x: -600
                        })
                    }
                }),
                xw = gw.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("steps2"),
                    initializeTimeline() {
                        this.timeline.to(".e.steps2", {
                            x: 600
                        })
                    }
                }),
                fw = gw.extend({
                    elements: Ye.elementsFromImages("pose"),
                    onStartProgress() {
                        Ye.startHoldShake("pose", 2, 1)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("pose", 2, 1)
                    }
                }),
                vw = He.extend({
                    imageManifest: {
                        cousin: Promise.resolve().then(s.t.bind(s, 6359, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "cousin",
                            images: {
                                doorClosed: [10, 1339, 338, 466, 98, 414],
                                doorOpen: [10, 863, 373, 466, 101, 57],
                                cousin: [358, 1339, 324, 419, 325, 432],
                                entrance: [10, 10, 718, 843, 49, 227]
                            }
                        }
                    }
                }),
                kw = vw.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["entrance", "doorOpen", "doorClosed", "cousin"]),
                    onLoadComplete() {
                        C.p8.set(".e.doorOpen", {
                            visibility: "hidden",
                            scaleX: 0,
                            transformOrigin: "right center"
                        }), C.p8.set(".e.doorClosed", {
                            transformOrigin: "left center"
                        }), C.p8.set(".e.cousin", {
                            transformOrigin: "bottom center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.doorClosed", {
                            scaleX: 0
                        }, 0).set(".e.doorClosed", {
                            visibility: "hidden"
                        }, 1).set(".e.doorOpen", {
                            visibility: "visible"
                        }, 1).to(".e.doorOpen", {
                            scaleX: 1
                        }, 1).to(".e.cousin", {
                            scaleY: .9
                        }, 1).to(".e.cousin", {
                            scaleY: 1.1
                        }, 2)
                    }
                }),
                Pw = He.extend({
                    imageManifest: {
                        family: Promise.resolve().then(s.t.bind(s, 99073, 17))
                    }
                }),
                ww = Pw.extend({
                    elements: [{
                        class: "family",
                        type: "img",
                        key: "family"
                    }, {
                        class: "flash",
                        type: "div",
                        pos: [-5e3, -5e3],
                        html: ""
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.flash", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.family", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.family", {
                            filter: "blur(4px)",
                            autoRound: !1
                        }).to(".e.family", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.family", {
                            filter: "blur(10px)",
                            autoRound: !1
                        }).to(".e.family", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.family", {
                            filter: "blur(4px)",
                            autoRound: !1
                        }).to(".e.family", {
                            filter: "blur(0px)",
                            autoRound: !1
                        });
                        this.timeline.to(".e.flash", {
                            opacity: 1,
                            duration: .05,
                            ease: "none"
                        }, 5).to(".e.flash", {
                            opacity: 0,
                            duration: .15
                        }, "+=0.15").to(".e.flash", {
                            opacity: 0,
                            duration: 1
                        }), this.timeline.add(e, 0)
                    }
                }),
                Tw = He.extend({
                    imageManifest: {
                        ladder: Promise.resolve().then(s.t.bind(s, 29984, 17)),
                        roofHang: Promise.resolve().then(s.t.bind(s, 83596, 17))
                    }
                }),
                Sw = Tw.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("ladder"),
                    onDiscreteProgress() {
                        Ye.squashOnce("ladder", .25)
                    }
                }),
                Mw = ft.extend({
                    initializeTimeline() {
                        this.timeline.call((() => {
                            this.onDiscreteProgress()
                        }), null, 1).call((() => {
                            this.onDiscreteProgress()
                        }), null, 2).call((() => {
                            this.onDiscreteProgress()
                        }), null, 3).fillTime(1)
                    }
                }),
                Cw = Tw.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("ladder", "roofHang"),
                    onLoadComplete() {
                        C.p8.set(".e.roofHang", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("ladder", "roofHang", .35)
                    }
                }),
                Dw = Tw.extend({
                    elements: Ye.elementsFromImages("roofHang"),
                    onStartProgress() {
                        Ye.startHoldShake("roofHang")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("roofHang")
                    }
                }),
                Fw = He.extend({
                    imageManifest: {
                        sink: Promise.resolve().then(s.t.bind(s, 976, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sink",
                            images: {
                                cat: [10, 10, 873, 924, 38, 31],
                                glass4: [893, 10, 794, 791, 207, 103],
                                glass3: [958, 882, 668, 452, 526, 166],
                                glass2: [893, 811, 668, 61, 511, 166],
                                glass1: [10, 1560, 668, 61, 453, 166],
                                glass0: [958, 1344, 794, 216, 102, 103],
                                water: [1636, 811, 94, 296, 357, 398],
                                handle: [1636, 1117, 137, 178, 165, 315],
                                sink: [10, 944, 938, 606, 271, 31]
                            }
                        }
                    }
                }),
                zw = Fw.extend({
                    imageManifest: {
                        sink: Promise.resolve().then(s.t.bind(s, 976, 17)),
                        paw: Promise.resolve().then(s.t.bind(s, 41705, 17))
                    },
                    elements: [...Ye.elementsFromSprite("sprite", ["glass0", "glass1"]), {
                        class: "paw-container",
                        type: "container",
                        children: Ye.elementsFromImages(["paw", null, [-1200, 0]])
                    }, ...Ye.elementsFromSprite("sprite", ["glass2", "glass3", "glass4"])],
                    onLoadComplete() {
                        C.p8.set(".e.paw", {
                            rotation: 180,
                            scale: .9
                        })
                    },
                    initializeTimeline() {
                        const e = this.model.get("durationInMs"),
                            t = C.p8.timeline({
                                ease: "none",
                                repeat: e / 1e3
                            }).to(".e.paw-container", {
                                x: 2,
                                y: 2
                            }).to(".e.paw-container", {
                                x: -2,
                                y: -2
                            }).to(".e.paw-container", {
                                x: -2,
                                y: 2
                            }).to(".e.paw-container", {
                                x: 2,
                                y: 2
                            }).to(".e.paw-container", {
                                x: 2,
                                y: -2
                            }).to(".e.paw-container", {
                                x: -2,
                                y: 2
                            }).to(".e.paw-container", {
                                x: -2,
                                y: 2
                            }).to(".e.paw-container", {
                                x: 2,
                                y: 2
                            }).to(".e.paw-container", {
                                x: 2,
                                y: -2
                            }).to(".e.paw-container", {
                                x: 2,
                                y: 2
                            }).to(".e.paw-container", {
                                x: 2,
                                y: 2
                            });
                        t.name = "image", this.timeline.add(t)
                    },
                    onStartProgress() {
                        C.p8.to(".e.paw", {
                            y: 650,
                            duration: .35
                        }), C.p8.to(".e.glass1", {
                            y: -82,
                            duration: .17,
                            delay: .18
                        }), C.p8.to(".e.glass2", {
                            y: -82,
                            duration: .17,
                            delay: .18
                        }), C.p8.to(".e.glass3", {
                            scaleY: 1.2,
                            transformOrigin: "bottom",
                            duration: .17,
                            delay: .18
                        })
                    },
                    onStopProgress() {
                        C.p8.to(".e.paw", {
                            y: 0,
                            duration: .35
                        }), C.p8.to(".e.glass1", {
                            y: 0,
                            duration: .17
                        }), C.p8.to(".e.glass2", {
                            y: 0,
                            duration: .17
                        }), C.p8.to(".e.glass3", {
                            scaleY: 1,
                            transformOrigin: "bottom",
                            duration: .17
                        })
                    }
                }),
                Lw = Fw.extend({
                    elements: Ye.elementsFromSprite("sprite", ["handle", "sink", "water"]),
                    onLoadComplete() {
                        C.p8.set(".e.handle", {
                            transformOrigin: "center bottom"
                        }), C.p8.set(".e.water", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.handle", {
                            rotate: 30
                        }).set(".e.water", {
                            hidden: !1
                        }).fillTime(.1)
                    }
                }),
                Rw = Fw.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["glass0", "glass1", "glass2", "glass3", "glass4"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.glass1", {
                            y: 80
                        }), C.p8.set(".e.glass2", {
                            y: 80
                        }), C.p8.set(".e.glass3", {
                            scaleY: .8,
                            transformOrigin: "bottom"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.glass1", {
                            y: -80
                        }, 0).to(".e.glass2", {
                            y: -80
                        }, 0).to(".e.glass3", {
                            scaleY: 1.2
                        }, 0)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                Iw = Fw.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["cat"]),
                    onDiscreteProgress() {
                        Ye.squashOnce("cat", .45, "y")
                    }
                }),
                Ow = He.extend({
                    imageManifest: {
                        drain: Promise.resolve().then(s.t.bind(s, 43046, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "drain",
                            images: {
                                pool: [10, 695, 658, 226, 649, 143],
                                ragOut: [818, 10, 371, 422, 179, 362],
                                ragIn: [678, 695, 208, 219, 381, 381],
                                drain: [10, 10, 798, 675, 147, 98]
                            }
                        }
                    }
                }),
                Bw = Lw,
                Yw = Tt,
                Aw = Ow.extend({
                    elements: Ye.elementsFromSprite("sprite", ["pool"]),
                    onLoadComplete() {
                        C.p8.set(".e.pool", {
                            scale: .6
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.pool", {
                            scale: 1
                        })
                    }
                }),
                Hw = Ow.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["drain", "ragIn", "ragOut"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.ragOut", {
                            hidden: !0,
                            scale: .7
                        })
                    },
                    initializeTimeline() {
                        this.timeline.fillTime(3).add(Ye.squashOnce("c", .5)).set(".e.ragOut", {
                            hidden: !1
                        }, 3.25).set(".e.ragIn", {
                            hidden: !0
                        }, 3.25).to(".e.drain", {
                            scale: .7
                        }, 3.25).to(".e.ragOut", {
                            scale: 1
                        }, 3.25)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                Gw = He.extend({
                    imageManifest: {
                        samosa: Promise.resolve().then(s.t.bind(s, 35542, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "samosa",
                            images: {
                                flat: [405, 836, 445, 802, 99, 277],
                                ball: [860, 1016, 642, 485, 257, 178],
                                oil: [10, 836, 385, 924, 46, 291],
                                fire: [10, 10, 821, 816, 100, 80],
                                dough: [860, 603, 840, 403, 61, 83],
                                bowl: [841, 10, 921, 583, 354, 43]
                            }
                        }
                    }
                }),
                Vw = Gw.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["bowl", "dough"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.dough", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.fillTime(1).add(Ye.squashOnce("c", 1)).set(".e.dough", {
                            hidden: !1
                        }, 1.5)
                    }
                }),
                Ew = Gw.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["oil"]),
                    onDiscreteProgress() {
                        Ye.squashOnce("oil", .35)
                    }
                }),
                qw = Gw.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["ball", "flat"]),
                    onLoadComplete() {
                        C.p8.set(".e.flat", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("ball", "flat", .35)
                    }
                }),
                Nw = Gw.extend({
                    elements: Ye.elementsFromSprite("sprite", ["fire"]),
                    onLoadComplete() {
                        C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.fire", {
                            scaleX: .9,
                            scaleY: 1.1
                        }).to(".e.fire", {
                            scaleX: 1.1,
                            scaleY: .9
                        })
                    }
                }),
                Xw = He.extend({
                    imageManifest: {
                        bucket: Promise.resolve().then(s.t.bind(s, 92673, 17)),
                        extinguisher: Promise.resolve().then(s.t.bind(s, 63333, 17)),
                        fire: Promise.resolve().then(s.t.bind(s, 79912, 17)),
                        stomp: Promise.resolve().then(s.t.bind(s, 77766, 17)),
                        cloud: Promise.resolve().then(s.t.bind(s, 83395, 17))
                    }
                }),
                Ww = Xw.extend({
                    elements: [...Ye.elementsFromImages("fire"), {
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("extinguisher", "cloud")
                    }],
                    onLoadComplete() {
                        C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.fire", {
                            scaleX: .9,
                            scaleY: 1.1
                        }).to(".e.fire", {
                            scaleX: 1.1,
                            scaleY: .9
                        }), C.p8.set(".e.c", {
                            x: 350,
                            y: 200
                        }), C.p8.set(".e.extinguisher", {
                            scale: .8
                        }), C.p8.set(".e.cloud", {
                            x: -370,
                            y: 30,
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            rotate: 20
                        }).to(".e.c", {
                            rotate: -20
                        }).to(".e.c", {
                            rotate: 20
                        })
                    },
                    onStartProgress() {
                        C.p8.set(".e.cloud", {
                            hidden: !1
                        })
                    },
                    onStopProgress() {
                        C.p8.set(".e.cloud", {
                            hidden: !0
                        })
                    }
                }),
                Uw = Xw.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("fire", "bucket"),
                    onLoadComplete() {
                        C.p8.set(".e.bucket", {
                            x: -250,
                            opacity: 0,
                            scale: .7
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.fire", {
                            scaleX: .9,
                            scaleY: 1.1
                        }).to(".e.fire", {
                            scaleX: 1.1,
                            scaleY: .9
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bucket", {
                            x: -100,
                            opacity: 1,
                            scale: 1
                        })
                    }
                }),
                $w = Xw.extend({
                    elements: Ye.elementsFromImages("stomp"),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("stomp")).add(Ye.squashOnce("stomp")).add(Ye.squashOnce("stomp")).add(Ye.squashOnce("stomp"))
                    }
                }),
                jw = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 14689, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                closet: [0, 0, 932, 756],
                                door: [0, 756, 496, 756],
                                hiding: [0, 1510, 131, 209]
                            }
                        }
                    }
                }),
                Kw = jw.extend({
                    stepDuration: .75,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["closet", null, [122, 34]],
                            ["hiding", null, [427, 754]],
                            ["door", null, [122, 468]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.door", {
                            x: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.door", {
                            x: -400,
                            duration: 1,
                            ease: "bounce.out"
                        })
                    }
                }),
                Zw = jw.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["closet", null, [122, 34]],
                            ["door", null, [122, 468]],
                            ["hiding", null, [427, 754]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.door", {
                            x: -400
                        })
                    },
                    initializeTimeline() {
                        this.timeline.fillTime(1).to(".e.c", {
                            skewX: -3,
                            duration: .5,
                            ease: "power2.inOut"
                        }).to(".e.c", {
                            skewX: 3,
                            duration: .5,
                            ease: "power2.inOut"
                        }).to(".e.c", {
                            skewX: -3,
                            duration: .5,
                            ease: "power2.inOut"
                        }).to(".e.c", {
                            skewX: 0,
                            duration: .5,
                            ease: "power2.inOut"
                        }).add(Ye.squashOnce("c", .5)).set(".e.hiding", {
                            hidden: !0
                        }, 3.25)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                Jw = jw.extend({
                    stepDuration: .75,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["closet", null, [122, 34]],
                            ["door", null, [122, 468]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.door", {
                            x: -400
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.door", {
                            x: 0,
                            duration: 1,
                            ease: "bounce.out"
                        })
                    }
                }),
                _w = He.extend({
                    imageManifest: {
                        dirt: Promise.resolve().then(s.t.bind(s, 3690, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "dirt",
                            images: {
                                cousin: [492, 928, 415, 327, 249, 250],
                                tornBag: [10, 928, 472, 536, 112, 230],
                                bag: [10, 10, 472, 609, 112, 230],
                                vacuumBottomOff: [492, 309, 429, 279, 675, 220],
                                vacuumBottomOn: [917, 1107, 429, 279, 675, 220],
                                vacuumTop: [959, 309, 293, 788, 35, 151],
                                dirt: [492, 10, 895, 289, 711, 38],
                                rug: [10, 629, 939, 289, 711, 31]
                            }
                        }
                    }
                }),
                Qw = _w.extend({
                    stepDuration: .35,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["rug", "dirt", "vacuumTop", "vacuumBottomOff", "vacuumBottomOn"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.vacuumBottomOn", {
                            visibility: "hidden"
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.set(".e.vacuumBottomOn", {
                            visibility: "visible"
                        }), C.p8.set(".e.vacuumBottomOff", {
                            visibility: "hidden"
                        }), Ye.squashOnce("c", .35)
                    }
                }),
                eT = _w.extend({
                    elements: [...Ye.elementsFromSprite("sprite", ["rug", "dirt"]), {
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["vacuumTop", "vacuumBottomOn"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.vacuumTop", {
                            transformOrigin: "bottom center"
                        }), Ye.startShake("c", 3, 0, 2)
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.vacuumTop", {
                            rotate: -20,
                            duration: .75
                        }).to(".e.vacuumTop, .e.vacuumBottomOn", {
                            x: -100,
                            duration: 1
                        }, .5).to(".e.vacuumTop, .e.vacuumBottomOn", {
                            x: 400,
                            duration: 1
                        }).to(".e.vacuumTop, .e.vacuumBottomOn", {
                            x: -100,
                            duration: 1
                        }).to(".e.vacuumTop, .e.vacuumBottomOn", {
                            x: 400,
                            duration: 1
                        }).to(".e.vacuumTop, .e.vacuumBottomOn", {
                            x: -100,
                            duration: 1
                        }).to(".e.dirt", {
                            opacity: 0,
                            duration: 5
                        }, .5)
                    }
                }),
                tT = _w.extend({
                    stepDuration: .45,
                    elements: [...Ye.elementsFromSprite("sprite", ["rug"]), {
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["vacuumTop", "vacuumBottomOn"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.vacuumTop", {
                            x: -100,
                            rotate: -20,
                            transformOrigin: "bottom center"
                        }), C.p8.set(".e.vacuumBottomOn", {
                            x: -100
                        }), Ye.startShake("c", 3, 0, 2)
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.vacuumTop, .e.vacuumBottomOn", {
                            x: 0,
                            duration: 1
                        }).to(".e.vacuumTop, .e.vacuumBottomOn", {
                            x: -100,
                            duration: 1
                        }).to(".e.vacuumTop, .e.vacuumBottomOn", {
                            x: 0,
                            duration: 1
                        }).fillTime(1).to(".e.vacuumTop, .e.vacuumBottomOn", {
                            x: -100,
                            duration: 1
                        }).to(".e.vacuumTop, .e.vacuumBottomOn", {
                            x: 0,
                            duration: 1
                        }).to(".e.vacuumTop, .e.vacuumBottomOn", {
                            x: -100,
                            duration: 1
                        }).to(".e.vacuumTop, .e.vacuumBottomOn", {
                            x: 0,
                            duration: 1
                        })
                    }
                }),
                sT = _w.extend({
                    elements: Ye.elementsFromSprite("sprite", ["cousin", "bag", "tornBag"]),
                    onLoadComplete() {
                        C.p8.set(".e.tornBag", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("bag", "tornBag")).to(".e.cousin", {
                            y: 500
                        })
                    }
                }),
                iT = He.extend({
                    className: "news",
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 68029, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                tv: [10, 10, 831, 986, 9, 98],
                                show0: [471, 1006, 449, 399, 253, 172],
                                show1: [471, 1415, 448, 399, 253, 173],
                                show2: [10, 1006, 451, 399, 253, 170],
                                show3: [10, 1415, 451, 399, 253, 170]
                            }
                        }
                    }
                }),
                oT = iT.extend({
                    stepDuration: .3,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["show3", "show2", "show1", "show0", "tv"])
                    }],
                    initializeTimeline() {
                        this.timeline.set(".e.show0", {
                            hidden: !0
                        }, .15).set(".e.show1", {
                            hidden: !0
                        }, .45).set(".e.show2", {
                            hidden: !0
                        }, .75)
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("c", .3)
                    }
                }),
                nT = iT.extend({
                    elements: [...Ye.elementsFromSprite("sprite", ["show3"]), {
                        class: "text",
                        type: "div",
                        pos: [564, 198],
                        html: "<p>Breaking News!!! The gronking continues to plague the world's youth. No one understands anything.</p>"
                    }, ...Ye.elementsFromSprite("sprite", ["tv"])],
                    onLoadComplete() {
                        C.p8.set(".e.text", {
                            rotate: -4
                        }), C.p8.set(".e.text p", {
                            width: 5e3,
                            x: 400
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.text p", {
                            x: -550,
                            ease: "none"
                        })
                    }
                }),
                aT = iT.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: [...Ye.elementsFromSprite("sprite", ["show3"]), {
                            class: "text",
                            type: "div",
                            pos: [564, 198],
                            html: "<p>Breaking News!!! The gronking continues to plague the world's youth. No one understands anything.</p>"
                        }, ...Ye.elementsFromSprite("sprite", ["tv"])]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.text", {
                            rotate: -4
                        }), C.p8.set(".e.text p", {
                            width: 5e3,
                            x: -550
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.text p", {
                            x: -1500,
                            ease: "none"
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                rT = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 43362, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                phone: [479, 10, 585, 857, 16, 191],
                                text: [10, 10, 459, 1210, 42, 290],
                                door: [479, 877, 580, 967, 20, 218]
                            }
                        }
                    }
                }),
                lT = rT.extend({
                    elements: Ye.elementsFromSprite("sprite", ["text", "phone"]),
                    onLoadComplete() {
                        C.p8.set(".e.text", {
                            rotate: -9,
                            clipPath: "inset(0% 0% 40%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.fillTime(1).to(".e.text", {
                            x: -40,
                            y: -235,
                            clipPath: "inset(21% 0% 20%)",
                            ease: "power2.out"
                        }).fillTime(.5).to(".e.text", {
                            x: -80,
                            y: -470,
                            clipPath: "inset(42% 0% 0%)",
                            ease: "power2.out"
                        })
                    }
                }),
                dT = rT.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["door"]),
                    onDiscreteProgress() {
                        Ye.squashOnce("door", .35)
                    }
                }),
                pT = rT.extend({
                    elements: Ye.elementsFromSprite("sprite", ["door"]),
                    onLoadComplete() {
                        C.p8.set(".e.door", {
                            transformOrigin: "bottom center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.door", {
                            skewX: -10,
                            ease: "power2.inOut"
                        }).to(".e.door", {
                            skewX: 10,
                            ease: "power2.inOut"
                        }).to(".e.door", {
                            skewX: -10,
                            ease: "power2.inOut"
                        })
                    }
                }),
                cT = dT,
                mT = He.extend({
                    imageManifest: {
                        psa: Promise.resolve().then(s.t.bind(s, 33844, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "psa",
                            images: {
                                question: [851, 10, 384, 600, 200, 308],
                                tv: [10, 10, 831, 986, 9, 98],
                                paid: [1245, 549, 257, 61, 564, 265],
                                no: [469, 1006, 261, 261, 288, 262],
                                gronking: [1245, 419, 365, 120, 357, 214],
                                psa: [1245, 10, 449, 399, 253, 172],
                                show0: [10, 1006, 449, 399, 253, 172],
                                show1: [740, 1029, 448, 399, 253, 173],
                                show2: [851, 620, 451, 399, 253, 170]
                            }
                        }
                    }
                }),
                hT = mT.extend({
                    stepDuration: .3,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["psa", "show2", "show1", "show0", "tv"])
                    }],
                    initializeTimeline() {
                        this.timeline.set(".e.show0", {
                            hidden: !0
                        }, .15).set(".e.show1", {
                            hidden: !0
                        }, .45).set(".e.show2", {
                            hidden: !0
                        }, .75)
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("c", .3)
                    }
                }),
                uT = mT.extend({
                    elements: Ye.elementsFromSprite("sprite", ["psa", "paid", "gronking", "no", "tv"]),
                    onLoadComplete() {
                        C.p8.set(".e.paid", {
                            opacity: 0
                        }), C.p8.set(".e.gronking", {
                            opacity: 0,
                            scale: .6
                        }), C.p8.set(".e.no", {
                            opacity: 0,
                            scale: 1.1
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.gronking", {
                            opacity: 1,
                            duration: .2
                        }, 0).to(".e.gronking", {
                            scale: 1,
                            ease: "back.out(2)"
                        }, "<").fillTime(.25).to(".e.no", {
                            opacity: 1,
                            duration: .1
                        }).to(".e.no", {
                            scale: 1,
                            duration: .2
                        }, "<").to(".e.paid", {
                            opacity: 1,
                            duration: .2
                        }).fillTime(1.5)
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("c", .3)
                    }
                }),
                gT = mT.extend({
                    elements: Ye.elementsFromSprite("sprite", ["question"])
                }),
                yT = He.extend({
                    imageManifest: {
                        spy: Promise.resolve().then(s.t.bind(s, 48779, 17))
                    },
                    sprites: {
                        spy: {
                            key: "spy",
                            images: {
                                pupils: [277, 629, 79, 20, 479, 447],
                                eyes: [804, 629, 127, 67, 454, 423],
                                clothes: [277, 10, 740, 609, 213, 130],
                                exclamation: [10, 10, 257, 657, 165, 361],
                                crawl: [10, 677, 784, 326, 367, 104]
                            }
                        }
                    }
                }),
                bT = yT.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("spy", ["crawl"]),
                    onLoadComplete() {
                        C.p8.set(".e.crawl", {
                            x: -150
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.crawl", {
                            x: -50,
                            ease: "back.out(2)"
                        }).to(".e.crawl", {
                            x: 50,
                            ease: "back.out(2)"
                        }).to(".e.crawl", {
                            x: 150,
                            ease: "back.out(2)"
                        })
                    }
                }),
                xT = yT.extend({
                    elements: Ye.elementsFromSprite("spy", ["clothes", "eyes", "pupils"]),
                    onLoadComplete() {
                        C.p8.set(".e.eyes, .e.pupils", {
                            opacity: 0
                        }), C.p8.set(".e.clothes", {
                            transformOrigin: "bottom center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.clothes", {
                            skewX: 2,
                            scaleY: 1.1,
                            duration: .1
                        }).to(".e.clothes", {
                            skewX: 0,
                            scaleY: 1,
                            duration: .1
                        }).to(".e.clothes", {
                            skewX: 2,
                            scaleY: 1.1,
                            duration: .1
                        }).to(".e.clothes", {
                            skewX: 0,
                            scaleY: .9,
                            duration: .1
                        }).to(".e.clothes", {
                            skewX: -2,
                            scaleY: 1,
                            duration: .1
                        }).to(".e.clothes", {
                            skewX: 0,
                            scaleY: 1.1,
                            duration: .1
                        }).to(".e.clothes", {
                            skewX: 2,
                            scaleY: .9,
                            duration: .1
                        }).to(".e.clothes", {
                            skewX: 0,
                            scaleY: 1,
                            duration: .1
                        }).to(".e.clothes", {
                            skewX: -2,
                            scaleY: .9,
                            duration: .1
                        }).to(".e.clothes", {
                            skewX: 0,
                            scaleY: 1.1,
                            duration: .1
                        }).to(".e.clothes", {
                            skewX: -2,
                            scaleY: .9,
                            duration: .1
                        }).to(".e.clothes", {
                            skewX: 0,
                            scaleY: 1,
                            duration: .1
                        }).fillTime(.6).to(".e.eyes, .e.pupils", {
                            opacity: 1,
                            duration: .05
                        }).fillTime(1)
                    }
                }),
                fT = yT.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("spy", ["clothes", "eyes", "pupils"])
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.pupils", {
                            x: -5
                        }).fillTime(1).to(".e.pupils", {
                            x: 5
                        }).fillTime(1).to(".e.pupils", {
                            x: -5
                        }).fillTime(1).to(".e.pupils", {
                            x: 5
                        }).fillTime(1).to(".e.pupils", {
                            x: 0
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.startHoldShake("c")
                    }
                }),
                vT = yT.extend({
                    elements: Ye.elementsFromSprite("spy", ["exclamation"])
                }),
                kT = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 14689, 17)),
                        shoebox: Promise.resolve().then(s.t.bind(s, 1029, 17)),
                        laundry: Promise.resolve().then(s.t.bind(s, 91975, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                closet: [0, 0, 932, 756],
                                door: [0, 756, 496, 756]
                            }
                        }
                    }
                }),
                PT = kT.extend({
                    stepDuration: .65,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["closet", null, [122, 34]],
                            ["door", null, [122, 468]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.c", {
                            scaleX: -1
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.door", {
                            x: -400,
                            duration: 1,
                            ease: "bounce.out"
                        })
                    }
                }),
                wT = kT.extend({
                    elements: Ye.elementsFromImages("laundry"),
                    onLoadComplete() {
                        C.p8.set(".e.laundry", {
                            transformOrigin: "bottom center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.laundry", {
                            skewX: -10,
                            scaleY: 1.02,
                            ease: "circ.inOut"
                        }).to(".e.laundry", {
                            skewX: 10,
                            scaleY: 1.04,
                            ease: "circ.inOut"
                        }).to(".e.laundry", {
                            skewX: -10,
                            scaleY: 1.02,
                            ease: "circ.inOut"
                        }).to(".e.laundry", {
                            skewX: 10,
                            scaleY: 1,
                            ease: "circ.inOut"
                        }).to(".e.laundry", {
                            skewX: -10,
                            scaleY: .98,
                            ease: "circ.inOut"
                        })
                    }
                }),
                TT = kT.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("laundry", "shoebox"),
                    onLoadComplete() {
                        C.p8.to(".e.laundry", {
                            x: -100,
                            y: 50,
                            scale: .7,
                            duration: .5
                        }), C.p8.fromTo(".e.shoebox", {
                            opacity: 0
                        }, {
                            x: 100,
                            y: 150,
                            scale: .8,
                            rotate: 10,
                            opacity: 1,
                            duration: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.shoebox", {
                            x: 0,
                            y: 0,
                            scale: .4,
                            duration: 1
                        }, 0).to(".e.shoebox", {
                            opacity: 0,
                            duration: .2
                        }, .8).to(".e.laundry", {
                            x: 0,
                            y: 0,
                            scale: .9,
                            duration: 1
                        }, 0)
                    }
                }),
                ST = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 95700, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                bus: [10, 10, 903, 363, 335, 72],
                                bush: [10, 383, 781, 473, 280, 133],
                                lines: [801, 383, 55, 523, 508, 514],
                                street: [923, 10, 786, 542, 246, 131]
                            }
                        }
                    }
                }),
                MT = ST.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["bus"]),
                    onLoadComplete() {
                        C.p8.timeline().set(".e.bus", {
                            x: 200
                        }).to(".e.bus", {
                            x: -10,
                            skewX: 10,
                            duration: .2
                        }).to(".e.bus", {
                            x: 0,
                            skewX: 0,
                            duration: .05
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("bus"))
                    }
                }),
                CT = ST.extend({
                    elements: Ye.elementsFromSprite("sprite", ["bush"]),
                    onStartProgress() {
                        Ye.startHoldShake("bush")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("bush")
                    }
                }),
                DT = ST.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["street", "street vignette"], "lines"
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.lines", {
                            clipPath: "inset(0% 0% 46%)"
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            repeat: 3
                        }).to(".e.lines", {
                            y: -108,
                            scale: .8,
                            clipPath: "inset(11% 0% 19%)"
                        }).set(".e.lines", {
                            y: 0,
                            scale: 1,
                            clipPath: "inset(0% 0% 50%)"
                        }).to(".e.lines", {
                            y: -108,
                            scale: .8,
                            clipPath: "inset(11% 0% 19%)"
                        }).set(".e.lines", {
                            y: 0,
                            scale: 1,
                            clipPath: "inset(0% 0% 50%)"
                        });
                        this.timeline.add(e)
                    }
                }),
                FT = He.extend({
                    imageManifest: {
                        family: Promise.resolve().then(s.t.bind(s, 91985, 17)),
                        heart: Promise.resolve().then(s.t.bind(s, 45205, 17))
                    }
                }),
                zT = FT.extend({
                    elements: Ye.elementsFromImages("heart", "family"),
                    onLoadComplete() {
                        C.p8.set(".e.family", {
                            y: 150
                        }), C.p8.set(".e.heart", {
                            x: 0,
                            y: -400,
                            scale: .2,
                            opacity: 0,
                            transformOrigin: "bottom right"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.heart", {
                            scale: .5,
                            opacity: 1
                        }).fillTime(2).set(".e.heart", {
                            x: -490,
                            y: -440,
                            scale: .2,
                            opacity: 0
                        }).to(".e.heart", {
                            scale: .5,
                            opacity: 1
                        }).fillTime(2).set(".e.heart", {
                            x: -100,
                            y: -400,
                            scale: .2,
                            opacity: 0
                        }).to(".e.heart", {
                            scale: .5,
                            opacity: 1
                        }).fillTime(2).set(".e.heart", {
                            x: -290,
                            y: -440,
                            scale: .2,
                            opacity: 0
                        }).to(".e.heart", {
                            scale: .5,
                            opacity: 1
                        }).fillTime(2)
                    }
                }),
                LT = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 16741, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                stuff: [10, 1708, 388, 154, 744, 566],
                                ground: [10, 1872, 460, 116, 818, 494],
                                window: [10, 1238, 529, 460, 109, 70],
                                poster: [10, 10, 573, 727, 158, 234],
                                shower: [10, 747, 491, 481, 260, 266]
                            }
                        }
                    }
                }),
                RT = LT.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromSprite("sprite", ["window", "ground", "stuff"]),
                    onLoadComplete() {
                        C.p8.to(".e.stuff", {
                            x: 100,
                            y: -100,
                            rotate: -20,
                            duration: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.stuff", {
                            x: -400,
                            y: -430,
                            scale: .6,
                            rotate: -200,
                            duration: 1,
                            ease: "back.in(2)"
                        }, 0).to(".e.stuff", {
                            opacity: 0,
                            duration: .05
                        }, .95)
                    }
                }),
                IT = LT.extend({
                    elements: Ye.elementsFromSprite("sprite", ["shower"]),
                    initializeTimeline() {
                        this.timeline.to(".e.shower", {
                            rotate: 180
                        })
                    }
                }),
                OT = LT.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", ["poster"]),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("poster"))
                    }
                }),
                BT = He.extend({
                    imageManifest: {
                        pledge: Promise.resolve().then(s.t.bind(s, 84055, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "pledge",
                            images: {
                                signature: [656, 255, 390, 163, 689, 347],
                                token: [656, 10, 285, 235, 379, 358],
                                paper: [10, 10, 636, 905, 44, 186]
                            }
                        }
                    }
                }),
                YT = BT.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["paper", "signature"]),
                    onLoadComplete() {
                        C.p8.set(".e.signature", {
                            clipPath: "inset(0% 100% 0% 0%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.signature", {
                            clipPath: "inset(0% 0% 0% 0%)"
                        })
                    }
                }),
                AT = BT.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["token", "token2", [529, 238]],
                        ["token", "token1", [279, 358]],
                        ["token", "token0", [479, 558]]
                    ]),
                    initializeTimeline() {
                        this.timeline.to(".e.token0", {
                            x: -450,
                            y: -50,
                            rotate: -200
                        }).to(".e.token0", {
                            x: -900,
                            y: 150,
                            rotate: -400
                        }).to(".e.token1", {
                            x: -450,
                            y: -50,
                            rotate: -200
                        }).to(".e.token1", {
                            x: -900,
                            y: 150,
                            rotate: -400
                        }).to(".e.token2", {
                            x: -450,
                            y: -50,
                            rotate: -200
                        }).to(".e.token2", {
                            x: -900,
                            y: 150,
                            rotate: -400
                        })
                    }
                }),
                HT = He.extend({
                    imageManifest: {
                        close1: Promise.resolve().then(s.t.bind(s, 18331, 17)),
                        far: Promise.resolve().then(s.t.bind(s, 66222, 17)),
                        stand: Promise.resolve().then(s.t.bind(s, 45455, 17)),
                        telescope: Promise.resolve().then(s.t.bind(s, 81570, 17))
                    }
                }),
                GT = HT.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("stand", "telescope"),
                    initializeTimeline() {
                        C.p8.set(".e.telescope", {
                            y: -230
                        }), C.p8.set(".e.stand", {
                            y: 200
                        }), this.timeline.from(".e.telescope", {
                            rotate: 20
                        })
                    }
                }),
                VT = GT.extend({
                    initializeTimeline() {
                        C.p8.set(".e.telescope", {
                            y: -230
                        }), C.p8.set(".e.stand", {
                            y: 200
                        }), this.timeline.to(".e.telescope", {
                            rotateY: 180,
                            yoyo: !0,
                            repeat: 1
                        })
                    }
                }),
                ET = HT.extend({
                    elements: Ye.elementsFromImages("far"),
                    initializeTimeline() {
                        C.p8.to(".e.far", {
                            scaleY: 0,
                            delay: 2.8,
                            duration: .2
                        })
                    }
                }),
                qT = HT.extend({
                    elements: Ye.elementsFromImages("close1"),
                    initializeTimeline() {
                        C.p8.from(".e.close1", {
                            scaleY: 0,
                            duration: .2
                        }), this.timeline.fromTo(".e.close1", {
                            filter: "blur(15px)"
                        }, {
                            filter: "blur(10px)",
                            autoRound: !1
                        }).to(".e.close1", {
                            filter: "blur(14px)",
                            autoRound: !1
                        }).to(".e.close1", {
                            filter: "blur(10px)",
                            autoRound: !1
                        }).to(".e.close1", {
                            filter: "blur(20px)",
                            autoRound: !1
                        }).to(".e.close1", {
                            filter: "blur(0px)",
                            autoRound: !1
                        })
                    }
                }),
                NT = HT.extend({
                    elements: Ye.elementsFromImages("close1"),
                    initializeTimeline() {
                        this.timeline.to(".e.close1", {
                            scale: 4,
                            ease: "power2.in"
                        })
                    }
                }),
                XT = He.extend({
                    imageManifest: {
                        asteroid: Promise.resolve().then(s.t.bind(s, 51495, 17)),
                        curse: Promise.resolve().then(s.t.bind(s, 11073, 17)),
                        listen: Promise.resolve().then(s.t.bind(s, 722, 17)),
                        manycurses: Promise.resolve().then(s.t.bind(s, 85798, 17))
                    }
                }),
                WT = XT.extend({
                    elements: Ye.elementsFromImages("asteroid"),
                    initializeTimeline() {
                        C.p8.fromTo(".e.asteroid", {
                            scale: .1
                        }, {
                            scale: 1,
                            ease: "back.out(1.7)"
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("asteroid", 2, 1)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("asteroid", 2, 1)
                    }
                }),
                UT = XT.extend({
                    elements: Ye.elementsFromImages("listen"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.listen", {
                            scale: 2,
                            x: -350,
                            y: 100
                        }, {
                            x: 350,
                            y: 100,
                            yoyo: !0,
                            repeat: 1,
                            ease: "power3.inOut"
                        })
                    }
                }),
                $T = XT.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("curse"),
                    initializeTimeline() {
                        this.timeline.to(".e.curse", {
                            y: 100,
                            x: 200,
                            scale: .8
                        }), this.timeline.to(".e.curse", {
                            y: -100,
                            x: 100,
                            scale: .5
                        }), this.timeline.to(".e.curse", {
                            y: 150,
                            x: -200,
                            scale: .25
                        }), this.timeline.to(".e.curse", {
                            y: -150,
                            x: -100,
                            scale: .5
                        }), this.timeline.to(".e.curse", {
                            y: 100,
                            x: 0,
                            scale: 1
                        })
                    }
                }),
                jT = XT.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("manycurses"),
                    initializeTimeline() {
                        C.p8.to(".e.manycurses", {
                            opacity: .5,
                            repeat: -1,
                            rotate: 2,
                            yoyo: !0,
                            ease: "power2.inOut",
                            duration: .2
                        }), this.timeline.to(".e.manycurses", {
                            y: 100,
                            x: 200,
                            scale: .8
                        }), this.timeline.to(".e.manycurses", {
                            y: -100,
                            x: 100,
                            scale: .5
                        }), this.timeline.to(".e.manycurses", {
                            y: 150,
                            x: -200,
                            scale: .25
                        }), this.timeline.to(".e.manycurses", {
                            y: -150,
                            x: -100,
                            scale: .5
                        }), this.timeline.to(".e.manycurses", {
                            y: 100,
                            x: 0,
                            scale: 1
                        })
                    }
                }),
                KT = He.extend({
                    imageManifest: {
                        close: Promise.resolve().then(s.t.bind(s, 64653, 17)),
                        closer: Promise.resolve().then(s.t.bind(s, 65344, 17)),
                        far: Promise.resolve().then(s.t.bind(s, 65663, 17)),
                        sun: Promise.resolve().then(s.t.bind(s, 92209, 17))
                    }
                }),
                ZT = KT.extend({
                    elements: Ye.elementsFromImages("sun"),
                    initializeTimeline() {
                        C.p8.set(".e.sun", {
                            y: -500
                        }), C.p8.to(".e.sun", {
                            opacity: .8,
                            repeat: -1,
                            yoyo: !0,
                            ease: "power2.inOut"
                        })
                    }
                }),
                JT = KT.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromImages("sun", "far"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.sun", {
                            y: -500
                        }, {
                            y: 0
                        }), this.timeline.fromTo(".e.far", {
                            x: 500,
                            y: -900
                        }, {
                            x: 200,
                            y: -400
                        }, "<")
                    }
                }),
                _T = JT.extend({
                    initializeTimeline() {
                        this.timeline.fromTo(".e.far", {
                            scale: 1,
                            x: 200,
                            y: -400
                        }, {
                            scale: 1.5,
                            x: 0,
                            y: -300,
                            ease: "none"
                        })
                    }
                }),
                QT = _T.extend({
                    initializeTimeline() {
                        this.timeline.fromTo(".e.far", {
                            scale: 1.5,
                            x: 0,
                            y: -300
                        }, {
                            scale: 2.5,
                            x: -200,
                            y: -100,
                            ease: "none"
                        })
                    }
                }),
                eS = He.extend({
                    imageManifest: {
                        news: Promise.resolve().then(s.t.bind(s, 67129, 17))
                    }
                }),
                tS = eS.extend({
                    elements: Ye.elementsFromImages("news"),
                    initializeTimeline() {
                        C.p8.to(".e.news", {
                            scale: 1.5,
                            ease: "none",
                            duration: 3
                        })
                    }
                }),
                sS = He.extend({
                    imageManifest: {
                        laser: Promise.resolve().then(s.t.bind(s, 53848, 17)),
                        laserPress: Promise.resolve().then(s.t.bind(s, 44177, 17))
                    }
                }),
                iS = sS.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("laserPress", "laser"),
                    onDiscreteProgress() {
                        C.p8.set(".e.laser", {
                            opacity: 0
                        }), C.p8.set(".e.laser", {
                            opacity: 1,
                            delay: .15
                        })
                    }
                }),
                oS = He.extend({
                    imageManifest: {
                        burn: Promise.resolve().then(s.t.bind(s, 3475, 17)),
                        gift: Promise.resolve().then(s.t.bind(s, 72929, 17)),
                        note: Promise.resolve().then(s.t.bind(s, 24792, 17))
                    }
                }),
                nS = oS.extend({
                    stepDuration: .4,
                    elements: Ye.elementsFromImages("gift"),
                    onDiscreteProgress() {
                        Ye.squashOnce("gift", .4)
                    }
                }),
                aS = oS.extend({
                    stepDuration: .4,
                    elements: Ye.elementsFromImages("note"),
                    onDiscreteProgress() {
                        Ye.squashOnce("note", .4)
                    }
                }),
                rS = oS.extend({
                    elements: Ye.elementsFromImages("burn"),
                    onStartProgress() {
                        Ye.startHoldShake("burn")
                    },
                    onStopProgress() {
                        Ye.startHoldShake("burn")
                    }
                }),
                lS = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 68166, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                laugh: [10, 614, 758, 702, 150, 122],
                                empty: [238, 10, 526, 594, 207, 238],
                                drink: [774, 10, 526, 594, 208, 237],
                                question: [10, 10, 218, 377, 178, 405],
                                thoughCloud: [778, 614, 868, 826, 94, 66]
                            }
                        }
                    }
                }),
                dS = lS.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["thoughCloud", "question"])
                    }],
                    onLoadComplete() {
                        C.p8.fromTo(".e.question", {
                            scale: .8,
                            opaicty: 0
                        }, {
                            scale: 1,
                            opaicty: 1,
                            duration: 1
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                pS = lS.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["laugh"]),
                    onDiscreteProgress() {
                        Ye.squashOnce("laugh")
                    }
                }),
                cS = lS.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["drink"]),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("drink"))
                    }
                }),
                mS = lS.extend({
                    elements: Ye.elementsFromSprite("sprite", ["empty"])
                }),
                hS = He.extend({
                    imageManifest: {
                        bookcase: Promise.resolve().then(s.t.bind(s, 87937, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "bookcase",
                            images: {
                                peekHead: [1374, 10, 296, 623, 190, 385],
                                peekHands: [1680, 10, 101, 435, 378, 321],
                                neat: [707, 10, 657, 790, 133, 274],
                                lessNeat: [10, 807, 657, 790, 133, 274],
                                almostMessy: [677, 810, 657, 790, 133, 274],
                                messy: [10, 10, 687, 787, 133, 41],
                                thumb: [1344, 810, 486, 754, 124, 258]
                            }
                        }
                    }
                }),
                uS = hS.extend({
                    elements: Ye.elementsFromSprite("sprite", ["thumb"]),
                    initializeTimeline() {
                        this.timeline.to(".e.thumb", {
                            scale: 1.1
                        }).to(".e.thumb", {
                            scale: 1
                        }).to(".e.thumb", {
                            scale: 1.1
                        }).to(".e.thumb", {
                            scale: 1
                        })
                    }
                }),
                gS = hS.extend({
                    elements: Ye.elementsFromSprite("sprite", ["peekHead", "peekHands"]),
                    onLoadComplete() {
                        C.p8.set(".e.peekHead", {
                            x: -150,
                            clipPath: "inset(0% 0% 0% 52%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.peekHead", {
                            x: 0,
                            clipPath: "inset(0% 0% 0% 0%)"
                        })
                    }
                }),
                yS = hS.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["neat", "lessNeat", "almostMessy", "messy"]),
                    onLoadComplete() {
                        C.p8.set(".e.lessNeat, .e.almostMessy, .e.messy", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("neat", "lessNeat")).add(Ye.squashTransition("lessNeat", "almostMessy")).add(Ye.squashTransition("almostMessy", "messy"))
                    }
                }),
                bS = hS.extend({
                    elements: Ye.elementsFromSprite("sprite", ["messy"]),
                    onStartProgress() {
                        Ye.startHoldShake("messy")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("messy")
                    }
                }),
                xS = He.extend({
                    imageManifest: {
                        college: Promise.resolve().then(s.t.bind(s, 31331, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "college",
                            images: {
                                exclamation: [933, 10, 181, 557, 221, 410],
                                despair: [10, 10, 913, 418, 291, 44],
                                applicationWriting: [1124, 10, 559, 675, 163, 226],
                                application: [972, 695, 794, 956, 22, 104],
                                gpa: [10, 577, 952, 787, 106, 25]
                            }
                        }
                    }
                }),
                fS = xS.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["application", "applicationWriting"]),
                    onLoadComplete() {
                        C.p8.set(".e.applicationWriting", {
                            rotate: -10,
                            clipPath: "inset(0% 0% 100%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.applicationWriting", {
                            clipPath: "inset(0% 0% 90%)"
                        }).to(".e.applicationWriting", {
                            clipPath: "inset(0% 0% 60%)"
                        }).to(".e.applicationWriting", {
                            clipPath: "inset(0% 0% 30%)"
                        }).to(".e.applicationWriting", {
                            clipPath: "inset(0% 0% 10%)"
                        }).to(".e.applicationWriting", {
                            clipPath: "inset(0% 0% 0%)"
                        })
                    }
                }),
                vS = xS.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["gpa"]),
                    onLoadComplete() {
                        C.p8.set(".e.gpa", {
                            x: -500,
                            rotate: -160
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.gpa", {
                            x: 0,
                            rotate: 0,
                            ease: "back.out(2)"
                        })
                    }
                }),
                kS = xS.extend({
                    elements: Ye.elementsFromSprite("sprite", ["exclamation"]),
                    onStartProgress() {
                        Ye.startHoldShake("exclamation")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("exclamation")
                    }
                }),
                PS = xS.extend({
                    elements: Ye.elementsFromSprite("sprite", ["despair"])
                }),
                wS = He.extend({
                    imageManifest: {
                        drink: Promise.resolve().then(s.t.bind(s, 73075, 17)),
                        empty: Promise.resolve().then(s.t.bind(s, 24393, 17)),
                        sad: Promise.resolve().then(s.t.bind(s, 84962, 17)),
                        steps: Promise.resolve().then(s.t.bind(s, 74048, 17))
                    }
                }),
                TS = wS.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("steps"),
                    onDiscreteProgress() {
                        Ye.squashOnce("steps", .25)
                    }
                }),
                SS = wS.extend({
                    stepDuration: .4,
                    elements: Ye.elementsFromImages("steps", "sad"),
                    onLoadComplete() {
                        C.p8.set(".e.sad", {
                            scale: .8,
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("steps", "sad", 1)).to(".e.sad", {
                            scale: 1,
                            duration: 1,
                            ease: "back.out(3)"
                        }).to(".e.sad", {
                            scale: 1.15,
                            duration: 1,
                            ease: "back.out(3)"
                        }).to(".e.sad", {
                            scale: 1.3,
                            duration: 1,
                            ease: "back.out(3)"
                        })
                    }
                }),
                MS = wS.extend({
                    stepDuration: .3,
                    elements: Ye.elementsFromImages("drink"),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("drink"))
                    }
                }),
                CS = wS.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("drink", "empty")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.empty", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.fillTime(2).call((() => {
                            Ye.squashTransition("drink", "empty", .6)
                        })).fillTime(1)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                DS = wS.extend({
                    stepDuration: .4,
                    elements: Ye.elementsFromImages("sad"),
                    onLoadComplete() {
                        C.p8.set(".e.sad", {
                            scale: .8
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.sad", {
                            scale: 1,
                            duration: 1,
                            ease: "back.out(3)"
                        }).to(".e.sad", {
                            scale: 1.15,
                            duration: 1,
                            ease: "back.out(3)"
                        }).to(".e.sad", {
                            scale: 1.3,
                            duration: 1,
                            ease: "back.out(3)"
                        }).to(".e.sad", {
                            scale: 1.5,
                            duration: 1,
                            ease: "back.out(3)"
                        })
                    }
                }),
                FS = He.extend({
                    imageManifest: {
                        lizard: Promise.resolve().then(s.t.bind(s, 95813, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "lizard",
                            images: {
                                dead: [739, 963, 940, 581, 298, 37],
                                poof2: [1180, 650, 126, 131, 29, 688],
                                poof1: [1316, 650, 108, 107, 872, 639],
                                poof0: [1031, 650, 139, 134, 808, 97],
                                poof: [1031, 10, 797, 630, 188, 108],
                                search: [10, 927, 719, 861, 364, 214],
                                stick: [843, 10, 178, 943, 29, 471],
                                alive: [10, 10, 823, 907, 52, 230]
                            }
                        }
                    }
                }),
                zS = FS.extend({
                    stepDuration: .45,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["dead", ["dead", "zoom"]])
                    }, ...Ye.elementsFromSprite("sprite", ["search"])],
                    onLoadComplete() {
                        C.p8.set(".e.c", {
                            x: 300
                        }), C.p8.set(".e.dead", {
                            scale: .5
                        }), C.p8.set(".e.zoom", {
                            clipPath: "inset(27% 64% 16% -5%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            x: -300,
                            duration: 1,
                            ease: "back.in(2)"
                        }, 0).to(".e.zoom", {
                            clipPath: "inset(27% 4% 16% 57%)",
                            duration: 1,
                            ease: "back.in(2)"
                        }, 0).to(".e.c", {
                            x: 0,
                            duration: 1,
                            ease: "back.in(2)"
                        }, 1).to(".e.zoom", {
                            clipPath: "inset(27% 32% 16% 30%)",
                            duration: 1,
                            ease: "back.in(2)"
                        }, 1)
                    }
                }),
                LS = FS.extend({
                    stepDuration: .45,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["dead", ["dead", "zoom"]])
                    }, ...Ye.elementsFromSprite("sprite", ["search", "stick"])],
                    onLoadComplete() {
                        C.p8.fromTo(".e.dead", {
                            scale: .5
                        }, {
                            y: 50,
                            scale: .8,
                            transformOrigin: "bottom center"
                        }), C.p8.fromTo(".e.zoom", {
                            clipPath: "inset(27% 32% 16% 30%)"
                        }, {
                            clipPath: "inset(100% 0% -33% 67%)",
                            duration: .3
                        }), C.p8.to(".e.search", {
                            x: 400,
                            y: 400,
                            duration: .3,
                            onComplete() {
                                C.p8.to(".e.search", {
                                    hidden: !0
                                })
                            }
                        }), C.p8.fromTo(".e.stick", {
                            opacity: 0
                        }, {
                            x: -350,
                            y: -280,
                            rotate: -30,
                            opacity: 1,
                            duration: .3
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.stick", {
                            x: -320,
                            y: -180,
                            duration: 1
                        }, 0).to(".e.dead", {
                            scaleY: .5,
                            duration: 1
                        }, 0).to(".e.stick", {
                            x: -350,
                            y: -280,
                            duration: 1
                        }, 1).to(".e.dead", {
                            scaleY: .8,
                            duration: 1
                        }, 1).to(".e.stick", {
                            x: -320,
                            y: -180,
                            duration: 1
                        }, 2).to(".e.dead", {
                            scaleY: .5,
                            duration: 1
                        }, 2).to(".e.stick", {
                            x: -350,
                            y: -280,
                            duration: 1
                        }, 3).to(".e.dead", {
                            scaleY: .8,
                            duration: 1
                        }, 3)
                    }
                }),
                RS = FS.extend({
                    elements: Ye.elementsFromSprite("sprite", ["dead", "alive", "poof", "poof0", "poof1", "poof2"]),
                    onLoadComplete() {
                        C.p8.set(".e.dead", {
                            y: 50,
                            scale: .8,
                            transformOrigin: "bottom center"
                        }), C.p8.set(".e.alive", {
                            hidden: !0
                        }), C.p8.set(".e.poof", {
                            hidden: !0
                        }), C.p8.set(".e.poof0", {
                            hidden: !0
                        }), C.p8.set(".e.poof1", {
                            hidden: !0
                        }), C.p8.set(".e.poof2", {
                            hidden: !0
                        }), Ye.startShake("dead", 2, 2, 2)
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.dead", {
                            scale: .8,
                            duration: 1.4
                        }).to(".e.dead", {
                            scale: .5,
                            duration: .1
                        }).set(".e.dead", {
                            hidden: !0
                        }, 1.5).set(".e.poof", {
                            hidden: !1,
                            scale: .7
                        }, 1.5).set(".e.poof0", {
                            hidden: !1,
                            x: 100,
                            y: -100
                        }, 1.5).set(".e.poof1", {
                            hidden: !1,
                            x: -100,
                            y: -100
                        }, 1.5).set(".e.poof2", {
                            hidden: !1,
                            x: -100,
                            y: 100
                        }, 1.5).to(".e.poof", {
                            scale: 1,
                            duration: .2,
                            ease: "none"
                        }, 1.5).to(".e.poof0", {
                            x: 0,
                            y: 0,
                            duration: .2,
                            ease: "none"
                        }, 1.5).to(".e.poof1", {
                            x: 0,
                            y: 0,
                            duration: .2,
                            ease: "none"
                        }, 1.5).to(".e.poof2", {
                            x: 0,
                            y: 0,
                            duration: .2,
                            ease: "none"
                        }, 1.5).to(".e.poof", {
                            scale: 1.3,
                            opacity: 0,
                            duration: .2,
                            ease: "none"
                        }, 1.7).to(".e.poof0", {
                            x: -100,
                            y: 100,
                            opacity: 0,
                            duration: .2,
                            ease: "none"
                        }, 1.7).to(".e.poof1", {
                            x: 100,
                            y: 100,
                            opacity: 0,
                            duration: .2,
                            ease: "none"
                        }, 1.7).to(".e.poof2", {
                            x: 100,
                            y: -100,
                            opacity: 0,
                            duration: .2,
                            ease: "none"
                        }, 1.7).set(".e.alive", {
                            hidden: !1,
                            scale: .5
                        }, 1.5).to(".e.alive", {
                            scale: 1,
                            duration: .4
                        }, 1.5)
                    }
                }),
                IS = FS.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["alive", "stick"]),
                    onLoadComplete() {
                        C.p8.set(".e.alive", {
                            transformOrigin: "right center"
                        }), C.p8.fromTo(".e.stick", {
                            opacity: 0
                        }, {
                            x: -500,
                            y: -180,
                            rotate: -60,
                            opacity: 1,
                            duration: .3
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.stick", {
                            x: -400,
                            y: -140,
                            duration: 1
                        }, 0).to(".e.alive", {
                            scaleX: .9,
                            duration: 1
                        }, 0).to(".e.stick", {
                            x: -500,
                            y: -180,
                            duration: 1
                        }, 1).to(".e.alive", {
                            scaleX: 1,
                            duration: 1
                        }, 1).to(".e.stick", {
                            x: -400,
                            y: -140,
                            duration: 1
                        }, 2).to(".e.alive", {
                            scaleX: .9,
                            duration: 1
                        }, 2).to(".e.stick", {
                            x: -500,
                            y: -180,
                            duration: 1
                        }, 3).to(".e.alive", {
                            scaleX: 1,
                            duration: 1
                        }, 3)
                    }
                }),
                OS = He.extend({
                    imageManifest: {
                        doll: Promise.resolve().then(s.t.bind(s, 88125, 17)),
                        dream: Promise.resolve().then(s.t.bind(s, 79686, 17)),
                        gaze: Promise.resolve().then(s.t.bind(s, 97828, 17)),
                        inferiority: Promise.resolve().then(s.t.bind(s, 94217, 17))
                    }
                }),
                BS = OS.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("doll"),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("doll"))
                    }
                }),
                YS = OS.extend({
                    elements: Ye.elementsFromImages("dream"),
                    onStartProgress() {
                        Ye.startHoldShake("dream")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("dream")
                    }
                }),
                AS = OS.extend({
                    elements: Ye.elementsFromImages("gaze")
                }),
                HS = OS.extend({
                    elements: Ye.elementsFromImages("inferiority"),
                    onStartProgress() {
                        Ye.startHoldShake("inferiority")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("inferiority")
                    }
                }),
                GS = He.extend({
                    imageManifest: {
                        heart: Promise.resolve().then(s.t.bind(s, 73603, 17)),
                        script: Promise.resolve().then(s.t.bind(s, 60827, 17)),
                        trash: Promise.resolve().then(s.t.bind(s, 36772, 17)),
                        twirl: Promise.resolve().then(s.t.bind(s, 34329, 17))
                    }
                }),
                VS = GS.extend({
                    elements: Ye.elementsFromImages("script"),
                    onStartProgress() {
                        Ye.startHoldShake("script")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("script")
                    }
                }),
                ES = GS.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("trash", "script"),
                    onLoadComplete() {
                        C.p8.set(".e.trash", {
                            y: 150,
                            scale: .7
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.script", {
                            y: -300,
                            scale: .7,
                            rotate: 30,
                            ease: "none"
                        }).to(".e.script", {
                            y: -200,
                            scale: .4,
                            rotate: 60,
                            ease: "none"
                        }).to(".e.script", {
                            y: -100,
                            opacity: 0,
                            scale: .1,
                            rotate: 90,
                            ease: "none"
                        })
                    }
                }),
                qS = GS.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("heart"),
                    onDiscreteProgress() {
                        Ye.squashOnce("heart", .25)
                    }
                }),
                NS = GS.extend({
                    elements: Ye.elementsFromImages("twirl"),
                    initializeTimeline() {
                        this.timeline.to(".e.twirl", {
                            scaleX: -1,
                            ease: "none"
                        }).to(".e.twirl", {
                            scaleX: 1,
                            ease: "none"
                        }).to(".e.twirl", {
                            scaleX: -1,
                            ease: "none"
                        }).to(".e.twirl", {
                            scaleX: 1,
                            ease: "none"
                        })
                    }
                }),
                XS = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 73091, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                doorFront: [951, 912, 518, 865, 64, 241],
                                doorBack: [1330, 10, 518, 865, 64, 241],
                                doorJam: [799, 10, 521, 892, 52, 224],
                                splash: [1479, 885, 468, 492, 74, 182],
                                cup: [10, 1441, 475, 585, 388, 267],
                                sweat: [495, 1441, 302, 438, 244, 309],
                                hand: [10, 10, 779, 899, 101, 221],
                                shake: [10, 919, 931, 512, 244, 34]
                            }
                        }
                    }
                }),
                WS = XS.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", ["shake"]),
                    initializeTimeline() {
                        this.timeline.to(".e.shake", {
                            y: -100,
                            scaleY: .9
                        }).to(".e.shake", {
                            y: 0,
                            scaleY: 1
                        }).to(".e.shake", {
                            y: -100,
                            scaleY: .9
                        }).to(".e.shake", {
                            y: 0,
                            scaleY: 1
                        })
                    }
                }),
                US = XS.extend({
                    elements: Ye.elementsFromSprite("sprite", ["hand", "sweat"]),
                    initializeTimeline() {
                        this.timeline.to(".e.sweat", {
                            y: 100,
                            opacity: 0
                        })
                    }
                }),
                $S = XS.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["cup", "splash"]),
                    onLoadComplete() {
                        C.p8.set(".e.splash", {
                            hidden: !0,
                            scale: .5,
                            transformOrigin: "bottom center"
                        }), C.p8.set(".e.cup", {
                            transformOrigin: "bottom left"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.splash", {
                            hidden: !1
                        }, 0).to(".e.splash", {
                            x: -50,
                            y: -100,
                            scale: 1
                        }, 0).to(".e.cup", {
                            rotate: -50,
                            duration: .2
                        }, 0)
                    }
                }),
                jS = XS.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["doorJam", "doorFront", "doorBack"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.doorFront", {
                            hidden: !0,
                            scaleX: -.5,
                            transformOrigin: "left center"
                        }), C.p8.set(".e.doorBack", {
                            scaleX: -.5,
                            transformOrigin: "left center"
                        }), C.p8.timeline().to(".e.doorFront", {
                            scaleX: 1,
                            duration: .25
                        }, 0).to(".e.doorBack", {
                            scaleX: 1,
                            duration: .25
                        }, 0).set(".e.doorFront", {
                            hidden: !1
                        }, .1).set(".e.doorBack", {
                            hidden: !0
                        }, .1)
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            scale: .7
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                KS = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 34869, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                snacks: [10, 10, 953, 626, 158, 24],
                                jump: [10, 646, 919, 553, 322, 37],
                                billy: [939, 663, 540, 479, 237, 215],
                                trailer: [973, 10, 927, 643, 54, 41]
                            }
                        }
                    }
                }),
                ZS = KS.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["jump"]),
                    initializeTimeline() {
                        this.timeline.to(".e.jump", {
                            x: 100,
                            y: 300,
                            ease: "power1.in"
                        }).to(".e.jump", {
                            x: 200,
                            y: 350,
                            ease: "power1.out"
                        })
                    }
                }),
                JS = KS.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["snacks"]),
                    onLoadComplete() {
                        C.p8.set(".e.snacks", {
                            x: -300
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.snacks", {
                            x: -150
                        }).to(".e.snacks", {
                            x: 0
                        }).to(".e.snacks", {
                            x: 150
                        })
                    }
                }),
                _S = KS.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["trailer"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.c", {
                            scale: .7
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            scale: 1
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.startHoldShake("c")
                    }
                }),
                QS = KS.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["trailer", "billy"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.billy", {
                            x: -129,
                            y: -176,
                            scale: .4,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            x: 360,
                            y: 470,
                            scale: 2.5,
                            duration: 1
                        }, 0).to(".e.billy", {
                            opacity: 1,
                            duration: .5
                        }, 0).to(".e.trailer", {
                            opacity: 0,
                            duration: .5
                        }, .25)
                    }
                }),
                eM = He.extend({
                    imageManifest: {
                        arrested: Promise.resolve().then(s.t.bind(s, 60415, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "arrested",
                            images: {
                                angry: [10, 10, 573, 980, 0, 240],
                                frown: [593, 928, 292, 174, 384, 369],
                                devil: [593, 10, 573, 908, 72, 240]
                            }
                        }
                    }
                }),
                tM = eM.extend({
                    elements: Ye.elementsFromSprite("sprite", ["angry"])
                }),
                sM = eM.extend({
                    elements: Ye.elementsFromSprite("sprite", ["devil", "frown"]),
                    onLoadComplete() {
                        C.p8.set(".e.frown", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.fillTime(1).set(".e.frown", {
                            hidden: !1
                        }).fillTime(1)
                    }
                }),
                iM = He.extend({
                    stepDuration: .25,
                    items: ["selfieNone", "selfie0"],
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 42846, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                selfie4: [10, 10, 475, 722, 55, 274],
                                selfie3: [495, 10, 475, 722, 55, 274],
                                selfie1: [980, 10, 475, 722, 55, 274],
                                selfie0: [1465, 10, 475, 722, 55, 274],
                                selfie2: [10, 742, 475, 722, 55, 274],
                                selfieNone: [980, 742, 520, 909, 31, 252],
                                selfie5: [495, 742, 475, 722, 55, 274]
                            }
                        }
                    },
                    elements() {
                        return [{
                            class: "c0",
                            type: "container",
                            children: Ye.elementsFromSprite("sprite", ["selfieNone", this.items[0]])
                        }, {
                            class: "c1",
                            type: "container",
                            children: Ye.elementsFromSprite("sprite", ["selfieNone", this.items[1]])
                        }]
                    },
                    onLoadComplete() {
                        C.p8.set(".e.c1", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("c0", "c1", .25)
                    }
                }),
                oM = iM,
                nM = iM.extend({
                    items: ["selfie0", "selfie1"]
                }),
                aM = iM.extend({
                    items: ["selfie1", "selfie2"]
                }),
                rM = iM.extend({
                    items: ["selfie2", "selfie3"]
                }),
                lM = iM.extend({
                    items: ["selfie3", "selfie4"]
                }),
                dM = iM.extend({
                    items: ["selfie4", "selfie5"]
                }),
                pM = jv,
                cM = He.extend({
                    imageManifest: {
                        diary: Promise.resolve().then(s.t.bind(s, 82977, 17)),
                        diaryClosed: Promise.resolve().then(s.t.bind(s, 26565, 17))
                    }
                }),
                mM = cM.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("diaryClosed"),
                    initializeTimeline() {
                        this.timeline.to(".e.diaryClosed", {
                            x: 600
                        })
                    }
                }),
                hM = mM.extend({
                    initializeTimeline() {
                        this.timeline.fromTo(".e.diaryClosed", {
                            x: 600
                        }, {
                            x: -600
                        }), this.timeline.to(".e.diaryClosed", {
                            x: 0
                        })
                    }
                }),
                uM = cM.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("diary", "diaryClosed"),
                    initializeTimeline() {
                        C.p8.set(".e.diary", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("diaryClosed", "diary", .25)
                    }
                }),
                gM = cM.extend({
                    elements: Ye.elementsFromImages("diary")
                }),
                yM = He.extend({
                    imageManifest: {
                        photo1: Promise.resolve().then(s.t.bind(s, 33301, 17)),
                        photo2: Promise.resolve().then(s.t.bind(s, 1864, 17)),
                        photo3: Promise.resolve().then(s.t.bind(s, 86629, 17))
                    }
                }),
                bM = yM.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("photo1", "photo2", "photo3"),
                    initializeTimeline() {
                        C.p8.set(".e.photo1", {
                            zIndex: 3
                        }), C.p8.set(".e.photo2", {
                            x: 30,
                            y: 20,
                            zIndex: 4
                        }), C.p8.set(".e.photo3", {
                            x: -20,
                            y: -30,
                            zIndex: 5
                        }), this.timeline.to(".e.photo3", {
                            x: -700,
                            rotate: -3,
                            zIndex: 2,
                            duration: .5
                        }), this.timeline.to(".e.photo3", {
                            x: 0,
                            rotate: 0,
                            duration: .5
                        }), this.timeline.to(".e.photo2", {
                            x: -700,
                            rotate: -3,
                            zIndex: 1,
                            duration: .5
                        }), this.timeline.to(".e.photo2", {
                            x: 0,
                            rotate: 0,
                            duration: .5
                        }), this.timeline.to(".e.photo1", {
                            x: 1e3,
                            y: -1e3,
                            rotate: 180,
                            duration: 1
                        }), this.timeline.to(".e.photo3", {
                            x: -1e3,
                            y: -1e3,
                            rotate: 180,
                            duration: 1
                        }), this.timeline.to(".e.photo2", {
                            x: -1e3,
                            y: -1e3,
                            rotate: 180,
                            duration: 1
                        })
                    }
                }),
                xM = He.extend({
                    imageManifest: {
                        camera: Promise.resolve().then(s.t.bind(s, 96976, 17)),
                        bored: Promise.resolve().then(s.t.bind(s, 44610, 17)),
                        goofy: Promise.resolve().then(s.t.bind(s, 115, 17))
                    }
                }),
                fM = xM.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("camera"),
                    onDiscreteProgress() {
                        Ye.squashOnce("camera", .3, "y")
                    }
                }),
                vM = xM.extend({
                    elements: Ye.elementsFromImages("bored"),
                    onStartProgress() {
                        Ye.startHoldShake("bored")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("bored")
                    }
                }),
                kM = xM.extend({
                    elements: Ye.elementsFromImages("bored"),
                    initializeTimeline() {
                        this.timeline.fillTime(2).to(".e.bored", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.bored", {
                            filter: "blur(4px)",
                            autoRound: !1
                        }).to(".e.bored", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.bored", {
                            filter: "blur(10px)",
                            autoRound: !1
                        }).to(".e.bored", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.bored", {
                            filter: "blur(4px)",
                            autoRound: !1
                        }).to(".e.bored", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).fillTime(1)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("bored")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("bored")
                    }
                }),
                PM = xM.extend({
                    stepDuration: .45,
                    elements: [...Ye.elementsFromImages("goofy", "bored"), {
                        class: "flash",
                        type: "div",
                        pos: [-5e3, -5e3]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.flash", {
                            opacity: 0
                        }), C.p8.set(".e.bored", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.flash", {
                            opacity: 1,
                            duration: .05,
                            ease: "none"
                        }).set(".e.bored", {
                            hidden: !1
                        }).set(".e.goofy", {
                            hidden: !0
                        }).to(".e.flash", {
                            opacity: 0,
                            duration: .15
                        })
                    }
                }),
                wM = He.extend({
                    imageManifest: {
                        car: Promise.resolve().then(s.t.bind(s, 47346, 17)),
                        animated: Promise.resolve().then(s.t.bind(s, 20850, 17)),
                        run: Promise.resolve().then(s.t.bind(s, 56798, 17)),
                        shin: Promise.resolve().then(s.t.bind(s, 96709, 17))
                    }
                }),
                TM = wM.extend({
                    stepDuration: .25,
                    elements: [{
                        type: "container",
                        children: Ye.elementsFromImages("animated"),
                        class: "cam",
                        pos: [0, 0]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.cam", {
                            width: 1e3,
                            height: 1e3,
                            overflow: "hidden"
                        }), this.runTween = C.p8.to(".e.animated", {
                            x: -3e3,
                            repeat: -1,
                            ease: "steps(3)"
                        }), this.timeline.to(".e.cam", {
                            x: 0
                        }), this.timeline.to(".e.cam", {
                            x: 0
                        }), this.timeline.to(".e.cam", {
                            x: 0
                        }), this.timeline.to(".e.cam", {
                            x: -1e3,
                            ease: "none"
                        })
                    },
                    onDiscreteProgress() {
                        this.runTween.timeScale(1.5 * this.runTween.timeScale())
                    }
                }),
                SM = wM.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("car", "run"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.run", {
                            scale: .35,
                            opacity: 1,
                            x: 650,
                            y: 0
                        }, {
                            opacity: 0,
                            x: 0,
                            y: 10
                        }), this.timeline.fromTo(".e.run", {
                            y: 0
                        }, {
                            y: -30,
                            ease: "back.out(50)"
                        }, "<")
                    }
                }),
                MM = wM.extend({
                    elements: Ye.elementsFromImages("shin"),
                    onStartProgress() {
                        Ye.startShake("shin", 2, 3, .2)
                    },
                    onStopProgress() {
                        Ye.stopShake("shin")
                    }
                }),
                CM = He.extend({
                    imageManifest: {
                        wait: Promise.resolve().then(s.t.bind(s, 84235, 17))
                    }
                }),
                DM = CM.extend({
                    elements: Ye.elementsFromImages("wait"),
                    initializeTimeline() {
                        C.p8.fromTo(".e.wait", {
                            scale: .25
                        }, {
                            scale: 1,
                            ease: "back.out(3)",
                            duration: 2
                        })
                    }
                }),
                FM = He.extend({
                    imageManifest: {
                        car: Promise.resolve().then(s.t.bind(s, 3742, 17)),
                        door: Promise.resolve().then(s.t.bind(s, 46926, 17)),
                        kissLeft: Promise.resolve().then(s.t.bind(s, 36400, 17)),
                        kissRight: Promise.resolve().then(s.t.bind(s, 61714, 17))
                    }
                }),
                zM = FM.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("car"),
                    initializeTimeline() {
                        C.p8.from(".e.car", {
                            x: 600,
                            y: -200,
                            opacity: 0,
                            rotate: -2,
                            ease: "back.out(1)"
                        }), this.timeline.to(".e.car", {
                            scale: .8
                        }), this.timeline.to(".e.car", {
                            scale: 1
                        })
                    }
                }),
                LM = FM.extend({
                    elements: Ye.elementsFromImages("kissLeft", "kissRight"),
                    initializeTimeline() {
                        this.timeline.from(".e.kissLeft", {
                            x: -250,
                            duration: .5
                        }), this.timeline.to(".e.kissLeft", {
                            x: 0,
                            duration: .5
                        })
                    },
                    onProgress(e) {
                        e > 50 && Ye.startShake("kissLeft", 1, 1, .25)
                    }
                }),
                RM = FM.extend({
                    elements: Ye.elementsFromImages("kissLeft", "kissRight"),
                    initializeTimeline() {
                        this.timeline.to(".e.kissLeft", {
                            x: -500,
                            rotateY: 180
                        }), this.timeline.to(".e.kissLeft", {
                            x: -1250,
                            ease: "none"
                        })
                    }
                }),
                IM = FM.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("door"),
                    initializeTimeline() {
                        C.p8.set(".e.door", {
                            scale: .25
                        }), this.timeline.to(".e.door", {
                            x: -150,
                            scale: .5
                        }), this.timeline.to(".e.door", {
                            y: 150,
                            yoyo: !0,
                            repeat: 1,
                            duration: .5,
                            ease: "power2.inOut"
                        }, "<"), this.timeline.to(".e.door", {
                            x: 150,
                            scale: .75
                        }), this.timeline.to(".e.door", {
                            y: 150,
                            yoyo: !0,
                            repeat: 1,
                            duration: .5,
                            ease: "power2.inOut"
                        }, "<"), this.timeline.to(".e.door", {
                            x: 0,
                            scale: 1
                        }), this.timeline.to(".e.door", {
                            y: 150,
                            yoyo: !0,
                            repeat: 1,
                            duration: .5,
                            ease: "power2.inOut"
                        }, "<")
                    }
                }),
                OM = He.extend({
                    imageManifest: {
                        bow: Promise.resolve().then(s.t.bind(s, 58592, 17)),
                        box: Promise.resolve().then(s.t.bind(s, 22860, 17)),
                        fold: Promise.resolve().then(s.t.bind(s, 38509, 17)),
                        tape: Promise.resolve().then(s.t.bind(s, 14430, 17)),
                        taped: Promise.resolve().then(s.t.bind(s, 29485, 17)),
                        wrapped: Promise.resolve().then(s.t.bind(s, 39561, 17))
                    }
                }),
                BM = OM.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "box-container",
                        type: "container",
                        children: [{
                            class: "box",
                            type: "img",
                            key: "box"
                        }, {
                            class: "fold",
                            type: "img",
                            key: "fold"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.fold", {
                            opacity: 0
                        });
                        const e = C.p8.timeline().to(".e.fold", {
                            opacity: 1,
                            duration: .1
                        }, .3).to(".e.box", {
                            opacity: 0,
                            duration: .1
                        }, .3).to(".e.fold", {
                            scaleX: -1,
                            duration: .2
                        }, .5).to(".e.fold", {
                            scaleY: -1,
                            duration: .2
                        }, 1).to(".e.fold", {
                            scaleX: 1,
                            duration: .2
                        }, 1.5).to(".e.fold", {
                            scaleY: 1,
                            duration: .2
                        }, 2).to(".e.fold", {
                            scaleX: -1,
                            duration: .2
                        }, 2.5);
                        this.timeline.add(e)
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("box-container")
                    }
                }),
                YM = OM.extend({
                    elements: [{
                        class: "box-container",
                        type: "container",
                        children: [{
                            class: "fold",
                            type: "img",
                            key: "fold"
                        }, {
                            class: "taped",
                            type: "img",
                            key: "taped"
                        }]
                    }, {
                        class: "tape",
                        type: "img",
                        key: "tape"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.fold", {
                            scaleX: -1
                        }), C.p8.set(".e.tape", {
                            x: -180,
                            y: 20,
                            scale: .6,
                            rotate: 90
                        }), C.p8.set(".e.taped", {
                            opacity: 0,
                            scaleX: -1
                        })
                    },
                    latestProgress: 0,
                    onProgress(e, t) {
                        if (e > this.latestProgress) {
                            switch (e) {
                                case 5:
                                    C.p8.timeline().to(".e.tape", {
                                        x: -280,
                                        duration: .4,
                                        ease: "linear"
                                    });
                                    break;
                                case 15:
                                    C.p8.timeline().to(".e.tape", {
                                        x: 300,
                                        duration: .4,
                                        ease: "back.inOut"
                                    }), C.p8.timeline().to(".e.fold", {
                                        opacity: 0,
                                        duration: .2
                                    }, .1).to(".e.taped", {
                                        opacity: 1,
                                        duration: .2
                                    }, .1);
                                    break;
                                case 40:
                                    Ye.squashOnce("box-container"), C.p8.timeline().to(".e.taped", {
                                        opacity: 0,
                                        scaleX: 1,
                                        duration: .1
                                    }).to(".e.fold", {
                                        opacity: 1,
                                        scaleX: 1,
                                        duration: .1
                                    });
                                    break;
                                case 50:
                                    C.p8.timeline().to(".e.tape", {
                                        x: 380,
                                        duration: .4,
                                        ease: "linear"
                                    });
                                    break;
                                case 65:
                                    e > t && Ye.squashOnce("box-container"), C.p8.timeline().to(".e.tape", {
                                        x: -300,
                                        duration: .4,
                                        ease: "back.inOut"
                                    }), C.p8.timeline().to(".e.fold", {
                                        opacity: 0,
                                        duration: .2
                                    }, .3).to(".e.taped", {
                                        opacity: 1,
                                        duration: .2
                                    }, .3)
                            }
                            this.latestProgress = e
                        }
                    }
                }),
                AM = OM.extend({
                    elements: [{
                        class: "box-container",
                        type: "container",
                        children: [{
                            class: "taped",
                            type: "img",
                            key: "taped"
                        }]
                    }, {
                        class: "bow",
                        type: "img",
                        key: "bow"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.bow", {
                            scale: .6,
                            x: 50,
                            y: 180
                        });
                        const e = C.p8.timeline().to(".e.bow", {
                            repeat: 3,
                            rotateY: 180,
                            x: 180,
                            yoyo: !0
                        });
                        this.timeline.add(e)
                    }
                }),
                HM = OM.extend({
                    stepDuration: 1.5,
                    elements: [{
                        class: "box-container",
                        type: "container",
                        children: [{
                            class: "taped",
                            type: "img",
                            key: "taped"
                        }, {
                            class: "wrapped",
                            type: "img",
                            key: "wrapped"
                        }]
                    }, {
                        class: "bow",
                        type: "img",
                        key: "bow"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.bow", {
                            scale: .6,
                            x: 50,
                            y: 180
                        }), C.p8.set(".e.wrapped", {
                            opacity: 0,
                            y: -50
                        });
                        const e = C.p8.timeline().to(".e.wrapped", {
                            opacity: 1,
                            duration: .25
                        }, .15).to(".e.taped", {
                            opacity: 0,
                            duration: .25
                        }, .15).to(".e.bow", {
                            rotate: 360,
                            duration: .25
                        }, 0);
                        this.timeline.add(e)
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("box-container")
                    }
                }),
                GM = He.extend({
                    imageManifest: {
                        candles: Promise.resolve().then(s.t.bind(s, 60840, 17)),
                        candlesLit: Promise.resolve().then(s.t.bind(s, 20104, 17)),
                        candlesblow: Promise.resolve().then(s.t.bind(s, 21824, 17)),
                        candlessmoke: Promise.resolve().then(s.t.bind(s, 59276, 17))
                    }
                }),
                VM = GM.extend({
                    elements: [{
                        class: "candles-container",
                        type: "container",
                        children: [{
                            class: "candles",
                            type: "img",
                            key: "candles"
                        }, {
                            class: "candlesFlicker",
                            type: "img",
                            key: "candlesLit"
                        }, {
                            class: "candlesLit",
                            type: "img",
                            key: "candlesLit"
                        }, {
                            class: "candlesblow",
                            type: "img",
                            key: "candlesblow"
                        }, {
                            class: "candlessmoke",
                            type: "img",
                            key: "candlessmoke"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.candlesLit", {
                            opacity: 0
                        }), C.p8.set(".e.candlesblow", {
                            opacity: 0,
                            scaleX: -1
                        }), C.p8.set(".e.candlessmoke", {
                            opacity: 0
                        });
                        const e = C.p8.to(".e.candlesFlicker", {
                                repeat: -1,
                                yoyo: !0,
                                opacity: .5,
                                duration: .5
                            }),
                            t = C.p8.timeline().to(".e.candlesFlicker", {
                                onStart: () => e.kill(),
                                opacity: 0,
                                duration: .25
                            }, 0).to(".e.candlesLit", {
                                opacity: .5,
                                duration: .25
                            }, .25).to(".e.candlesLit", {
                                opacity: 1,
                                duration: .25
                            }, .5).to(".e.candlesLit", {
                                opacity: .5,
                                duration: .25
                            }, .75).to(".e.candlesLit", {
                                opacity: 1,
                                duration: .25
                            }, 1).to(".e.candlesLit", {
                                opacity: .5,
                                duration: .25
                            }, 1.25).to(".e.candlesLit", {
                                opacity: 1,
                                duration: .25
                            }, 1.5).to(".e.candlesLit", {
                                opacity: .5,
                                duration: .25
                            }, 1.75).to(".e.candlesLit", {
                                opacity: 1,
                                duration: .25
                            }, 2).to(".e.candlesLit", {
                                opacity: 0,
                                duration: .25
                            }, 2.25).to(".e.candlesblow", {
                                opacity: 1,
                                duration: .25
                            }, 2.25).to(".candles-container", {
                                scaleX: .9,
                                scaleY: 1.1,
                                duration: 2
                            }, .75).to(".candles-container", {
                                scaleX: 1.2,
                                scaleY: .8,
                                duration: .25
                            }, 2.5).to(".e.candlesblow", {
                                opacity: 1,
                                duration: .25,
                                scaleX: 1
                            }, 2.5).to(".candles-container", {
                                scaleX: 1,
                                scaleY: 1,
                                duration: .25
                            }, 2.75).to(".e.candlesblow", {
                                opacity: 0,
                                duration: .25
                            }, 2.75).to(".e.candlessmoke", {
                                opacity: 1,
                                duration: .5
                            }, 3).to(".e.candlessmoke", {
                                opacity: .6,
                                duration: .5
                            }, 3.5).to(".e.candlessmoke", {
                                opacity: 1,
                                duration: .5
                            }, 4).to(".e.candlessmoke", {
                                opacity: .6,
                                duration: .5
                            }, 4.5).to(".e.candlessmoke", {
                                opacity: 1,
                                duration: .5
                            }, 5);
                        this.timeline.add(t)
                    }
                }),
                EM = po.extend({
                    imageManifest: {
                        bag: Promise.resolve().then(s.t.bind(s, 880, 17))
                    }
                }),
                qM = He.extend({
                    imageManifest: {
                        chips: Promise.resolve().then(s.t.bind(s, 8423, 17))
                    },
                    elements: Ye.elementsFromImages("chips"),
                    initializeTimeline() {
                        this.timeline.to(".e.chips", {
                            scale: 1.2
                        })
                    }
                }),
                NM = po.extend({
                    imageManifest: {
                        vomit: Promise.resolve().then(s.t.bind(s, 22347, 17))
                    }
                }),
                XM = He.extend({
                    imageManifest: {
                        bat: Promise.resolve().then(s.t.bind(s, 20640, 17)),
                        vacuum: Promise.resolve().then(s.t.bind(s, 55495, 17))
                    }
                }),
                WM = XM.extend({
                    stepDuration: .2,
                    elements: Ye.elementsFromImages("vacuum"),
                    onDiscreteProgress() {
                        C.p8.to(".e.vacuum", {
                            scale: .95,
                            duration: .2
                        })
                    }
                }),
                UM = XM.extend({
                    stepDuration: .65,
                    elements: Ye.elementsFromImages("vacuum", ["bat", null, [0, 0]]),
                    onLoadComplete() {
                        Ye.startShake("vacuum", 10, 0), C.p8.set(".e.bat", {
                            x: 900,
                            y: 10,
                            scaleX: .5,
                            scaleY: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.bat", {
                            x: -650,
                            y: 280,
                            scaleX: 1,
                            scaleY: 1
                        }).set(".e.bat", {
                            x: -500,
                            y: 50,
                            scaleX: -.5,
                            scaleY: .5
                        }).to(".e.bat", {
                            x: 1100,
                            y: 200,
                            scaleX: -1,
                            scaleY: 1
                        }).set(".e.bat", {
                            x: 900,
                            y: 500,
                            scaleX: .5,
                            scaleY: .5
                        }).to(".e.bat", {
                            x: -650,
                            y: 0,
                            scaleX: 1,
                            scaleY: 1
                        }).set(".e.bat", {
                            x: -500,
                            y: 50,
                            scaleX: -.5,
                            scaleY: .5
                        }).to(".e.bat", {
                            x: 1100,
                            y: 400,
                            scaleX: -1,
                            scaleY: 1
                        }).set(".e.bat", {
                            x: 900,
                            y: 100,
                            scaleX: .5,
                            scaleY: .5
                        }).to(".e.bat", {
                            x: -650,
                            y: 580,
                            scaleX: 1,
                            scaleY: 1
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.vacuum", {
                            scale: .95,
                            duration: .2
                        }).to(".e.vacuum", {
                            scale: 1,
                            duration: .2
                        })
                    }
                }),
                $M = XM.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("vacuum"),
                    onLoadComplete() {
                        Ye.startShake("vacuum", 10, 0)
                    },
                    onDiscreteProgress() {
                        Ye.stopShake("vacuum")
                    }
                }),
                jM = He.extend({
                    imageManifest: {
                        bat: Promise.resolve().then(s.t.bind(s, 88169, 17)),
                        run: Promise.resolve().then(s.t.bind(s, 59214, 17)),
                        tiptoe: Promise.resolve().then(s.t.bind(s, 1982, 17)),
                        devil: Promise.resolve().then(s.t.bind(s, 87282, 17))
                    }
                }),
                KM = jM.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("tiptoe", ["devil", null, [440, 280]]),
                    onLoadComplete() {
                        C.p8.set(".e.devil", {
                            x: -300
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.devil", {
                            x: -200
                        }).to(".e.devil", {
                            x: -100
                        }).to(".e.devil", {
                            x: 0
                        }).to(".e.devil", {
                            x: 100
                        })
                    }
                }),
                ZM = jM.extend({
                    lastStepDuration: .3,
                    hasBat: !1,
                    elements: Ye.elementsFromImages("tiptoe", ["devil", null, [440, 280]], "bat"),
                    onLoadComplete() {
                        C.p8.set(".e.devil", {
                            x: 100
                        }), C.p8.set(".e.bat", {
                            x: 1e3,
                            y: 180,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.devil", {
                            scaleX: -1
                        })
                    },
                    onProgress(e) {
                        this.hasBat || e < 75 || (this.hasBat = !0, C.p8.timeline().set(".e.bat", {
                            opacity: 1
                        }).to(".e.bat", {
                            x: 700,
                            y: 227,
                            duration: .2
                        }))
                    }
                }),
                JM = jM.extend({
                    elements: Ye.elementsFromImages("tiptoe", ["devil", null, [440, 280]], "bat"),
                    onLoadComplete() {
                        C.p8.set(".e.devil", {
                            x: 100,
                            scaleX: -1
                        }), C.p8.set(".e.bat", {
                            x: 700,
                            y: 227
                        }), C.p8.to(".e.devil", {
                            x: 106,
                            duration: .1,
                            yoyo: !0,
                            repeat: -1
                        })
                    }
                }),
                _M = jM.extend({
                    stepDuration: .7,
                    elements: Ye.elementsFromImages("run", "bat"),
                    onLoadComplete() {
                        C.p8.set(".e.run", {
                            scaleX: -1
                        }), C.p8.set(".e.bat", {
                            scaleX: -1
                        }), C.p8.timeline().fromTo(".e.run", {
                            x: 780
                        }, {
                            x: -750,
                            duration: .4,
                            ease: "none"
                        }).fromTo(".e.bat", {
                            x: 1400,
                            y: 400
                        }, {
                            x: -200,
                            y: 400,
                            duration: .4,
                            ease: "none"
                        }, .1).set(".e.run", {
                            scaleX: 1
                        }).set(".e.bat", {
                            x: -500,
                            scaleX: 1
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.run", {
                                x: 780,
                                duration: .8,
                                ease: "none"
                            }).set(".e.run", {
                                scaleX: -1
                            }).to(".e.run", {
                                x: -750,
                                duration: .8,
                                ease: "none"
                            }, 1).set(".e.run", {
                                scaleX: 1
                            }).to(".e.run", {
                                x: 780,
                                duration: .8,
                                ease: "none"
                            }, 2).set(".e.run", {
                                scaleX: -1
                            }).to(".e.run", {
                                x: -750,
                                duration: .8,
                                ease: "none"
                            }, 3).set(".e.run", {
                                scaleX: 1
                            }).to(".e.run", {
                                x: 780,
                                duration: .8,
                                ease: "none"
                            }, 4),
                            t = C.p8.timeline().to(".e.bat", {
                                x: 1100,
                                duration: .8,
                                ease: "none"
                            }, .2).set(".e.bat", {
                                x: 1400,
                                scaleX: -1
                            }).to(".e.bat", {
                                x: -200,
                                duration: .8,
                                ease: "none"
                            }, 1.2).set(".e.bat", {
                                x: -500,
                                scaleX: 1
                            }).to(".e.bat", {
                                x: 1100,
                                duration: .8,
                                ease: "none"
                            }, 2.2).set(".e.bat", {
                                x: 1400,
                                scaleX: -1
                            }).to(".e.bat", {
                                x: -200,
                                duration: .8,
                                ease: "none"
                            }, 3.2).set(".e.bat", {
                                x: -500,
                                scaleX: 1
                            }).to(".e.bat", {
                                x: 1100,
                                duration: .8,
                                ease: "none"
                            }, 4.2);
                        this.timeline.add(e), this.timeline.add(t, 0)
                    }
                }),
                QM = He.extend({
                    imageManifest: {
                        bat: Promise.resolve().then(s.t.bind(s, 88169, 17)),
                        blanket: Promise.resolve().then(s.t.bind(s, 45629, 17)),
                        chips0: Promise.resolve().then(s.t.bind(s, 54447, 17)),
                        chips1: Promise.resolve().then(s.t.bind(s, 37269, 17)),
                        chips2: Promise.resolve().then(s.t.bind(s, 60786, 17)),
                        chips3: Promise.resolve().then(s.t.bind(s, 2822, 17))
                    }
                }),
                eC = QM.extend({
                    stepDuration: .25,
                    elements: [{
                        class: "chip-container",
                        type: "container",
                        children: Ye.elementsFromImages("chips0", "chips1", "chips2", "chips3")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.chips1, .e.chips2, .e.chips3", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.chips1", {
                            opacity: 1
                        }).to(".e.chips2", {
                            opacity: 1
                        }).to(".e.chips3", {
                            opacity: 1
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.chip-container", {
                            scale: .85,
                            yoyo: !0,
                            repeat: 1,
                            duration: .1
                        })
                    }
                }),
                tC = QM.extend({
                    elements: Ye.elementsFromImages("blanket"),
                    initializeTimeline() {
                        this.timeline.to(".e.blanket", {
                            y: -300,
                            scaleX: .8,
                            scaleY: .5,
                            ease: "back.out(2)"
                        })
                    }
                }),
                sC = QM.extend({
                    elements: [{
                        class: "chip-container",
                        type: "container",
                        children: Ye.elementsFromImages("chips0", "chips1", "chips2", "chips3", "bat")
                    }, {
                        class: "blanket",
                        type: "img",
                        pos: [0, 0],
                        key: "blanket"
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.blanket", {
                            y: -300,
                            scaleX: .8,
                            scaleY: .5
                        }), C.p8.set(".e.bat", {
                            x: -500,
                            y: 175
                        }), C.p8.to(".e.bat", {
                            x: 1500,
                            yoyo: !0,
                            repeat: -1,
                            repeatDelay: 1,
                            duration: .5
                        }), C.p8.fromTo(".e.chip-container", {
                            x: -300,
                            y: 200,
                            scale: .7,
                            opacity: 0
                        }, {
                            x: 0,
                            scale: .7,
                            opacity: 1,
                            duration: .3
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("blanket")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("blanket")
                    }
                }),
                iC = He.extend({
                    imageManifest: {
                        bat: Promise.resolve().then(s.t.bind(s, 88169, 17)),
                        batBlack: Promise.resolve().then(s.t.bind(s, 54221, 17)),
                        blanket: Promise.resolve().then(s.t.bind(s, 45629, 17)),
                        chips: Promise.resolve().then(s.t.bind(s, 36966, 17)),
                        cover: Promise.resolve().then(s.t.bind(s, 65331, 17)),
                        wing: Promise.resolve().then(s.t.bind(s, 87913, 17)),
                        fire: Promise.resolve().then(s.t.bind(s, 60348, 17)),
                        smoke: Promise.resolve().then(s.t.bind(s, 95791, 17))
                    }
                }),
                oC = iC.extend({
                    elements: Ye.elementsFromImages("chips", "bat", "blanket"),
                    onLoadComplete() {
                        C.p8.set(".e.chips", {
                            y: 200,
                            scale: .7
                        }), C.p8.set(".e.bat", {
                            x: 1200,
                            y: 200,
                            visibility: "hidden"
                        }), C.p8.set(".e.blanket", {
                            y: -300,
                            scaleX: .8,
                            scaleY: .5
                        }), Ye.startHoldShake("blanket")
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.bat", {
                            visibility: "visible"
                        }, .9).to(".e.bat", {
                            x: 440,
                            y: 540,
                            duration: .1
                        })
                    }
                }),
                nC = iC.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "bat-container",
                        type: "container",
                        children: Ye.elementsFromImages("chips", "bat", "blanket")
                    }, {
                        class: "cover",
                        type: "img",
                        key: "cover"
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.chips", {
                            y: 200,
                            scale: .7
                        }), C.p8.set(".e.bat", {
                            x: 440,
                            y: 540
                        }), C.p8.set(".e.blanket", {
                            y: -300,
                            scaleX: .8,
                            scaleY: .5
                        }), C.p8.set(".e.cover", {
                            y: 0,
                            scale: .8,
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.blanket", {
                            y: -325,
                            duration: .2,
                            ease: "power2.inOut"
                        }).to(".e.blanket", {
                            scaleX: 1,
                            y: 190,
                            duration: .8,
                            ease: "power2.inOut"
                        }).set(".e.bat-container", {
                            visibility: "hidden"
                        }, .7).set(".e.cover", {
                            visibility: "visible"
                        }, .7).to(".e.cover", {
                            y: 150,
                            duration: .1,
                            ease: "none"
                        }, .7)
                    }
                }),
                aC = iC.extend({
                    elements: Ye.elementsFromImages("wing", "cover"),
                    onLoadComplete() {
                        C.p8.set(".e.cover", {
                            y: 150,
                            scale: .8,
                            transformOrigin: "center 55%"
                        }), C.p8.set(".e.wing", {
                            x: 285,
                            y: 775,
                            transformOrigin: "top center"
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.cover", {
                                x: -20,
                                scaleY: 1,
                                skewX: 10,
                                duration: 1
                            }).to(".e.cover", {
                                x: 20,
                                scaleY: .9,
                                skewX: -10,
                                duration: 1
                            }).to(".e.cover", {
                                x: 0,
                                scaleY: 1.1,
                                skewX: 0,
                                duration: 1
                            }).to(".e.cover", {
                                x: 20,
                                scaleY: .8,
                                skewX: -10,
                                duration: 1
                            }).to(".e.cover", {
                                x: -10,
                                scaleY: 1,
                                skewX: 5,
                                duration: 1
                            }).to(".e.cover", {
                                x: 0,
                                scaleY: .9,
                                skewX: 0,
                                duration: 1
                            }).to(".e.cover", {
                                x: -40,
                                scaleY: 1.3,
                                skewX: 20,
                                duration: 1
                            }).to(".e.cover", {
                                x: 0,
                                scaleY: .9,
                                skewX: 0,
                                duration: 1
                            }).to(".e.cover", {
                                x: 20,
                                scaleY: 1,
                                skewX: -10,
                                duration: 1
                            }).to(".e.cover", {
                                x: 0,
                                scaleY: .9,
                                skewX: 0,
                                duration: 1
                            }),
                            t = C.p8.timeline().to(".e.wing", {
                                rotate: 0,
                                duration: 2
                            }).to(".e.wing", {
                                rotate: -10,
                                duration: .25
                            }).to(".e.wing", {
                                rotate: 0,
                                duration: 2
                            }).to(".e.wing", {
                                rotate: -15,
                                duration: .25
                            }).to(".e.wing", {
                                rotate: 0,
                                duration: .25
                            }).to(".e.wing", {
                                rotate: -10,
                                duration: .25
                            }).to(".e.wing", {
                                rotate: 0,
                                duration: 2
                            }).to(".e.wing", {
                                rotate: -15,
                                duration: .25
                            }).to(".e.wing", {
                                rotate: 0,
                                duration: 2.75
                            });
                        this.timeline.add(e), this.timeline.add(t, 0)
                    }
                }),
                rC = iC.extend({
                    elements: Ye.elementsFromImages(["fire", null, [100, 0]], "smoke", "batBlack"),
                    onLoadComplete() {
                        C.p8.set(".e.smoke", {
                            x: 420,
                            y: 280
                        }), C.p8.set(".e.batBlack", {
                            x: 400,
                            y: 400
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.smoke", {
                            y: 100,
                            opacity: 0,
                            duration: .4
                        }).to(".e.batBlack", {
                            opacity: 0,
                            duration: .3
                        }, .6).to(".e.batBlack", {
                            x: 0,
                            y: 50,
                            scale: .2,
                            rotate: -30,
                            duration: 1,
                            ease: "power2.out"
                        }, 0)
                    }
                }),
                lC = He.extend({
                    imageManifest: {
                        wait: Promise.resolve().then(s.t.bind(s, 26887, 17)),
                        empty: Promise.resolve().then(s.t.bind(s, 72894, 17)),
                        bat: Promise.resolve().then(s.t.bind(s, 88169, 17)),
                        batBlack: Promise.resolve().then(s.t.bind(s, 54221, 17)),
                        button: Promise.resolve().then(s.t.bind(s, 42697, 17)),
                        pressed: Promise.resolve().then(s.t.bind(s, 75870, 17)),
                        crush: Promise.resolve().then(s.t.bind(s, 39702, 17)),
                        mist: Promise.resolve().then(s.t.bind(s, 60481, 17)),
                        trap: Promise.resolve().then(s.t.bind(s, 6539, 17)),
                        dust: Promise.resolve().then(s.t.bind(s, 79819, 17))
                    }
                }),
                dC = lC.extend({
                    elements: Ye.elementsFromImages("wait", "bat"),
                    onLoadComplete() {
                        C.p8.set(".e.bat", {
                            x: 1200,
                            y: 200,
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.bat", {
                            visibility: "visible"
                        }, .9).to(".e.bat", {
                            x: 580,
                            y: 450,
                            duration: .1
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("wait")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("wait")
                    }
                }),
                pC = lC.extend({
                    stepDuration: .35,
                    elements: [{
                        class: "bat-container",
                        type: "container",
                        children: Ye.elementsFromImages(["button", "up"], ["pressed", "down"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.down", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("up", "down", .35)
                    }
                }),
                cC = lC.extend({
                    elements: [{
                        class: "bat-container",
                        type: "container",
                        children: Ye.elementsFromImages("empty", "batBlack", "mist", "trap", "dust")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.empty, .e.batBlack, .e.mist, .e.dust", {
                            visibility: "hidden"
                        }), C.p8.fromTo(".e.bat-container", {
                            scale: .75
                        }, {
                            scale: 1,
                            duration: .1,
                            ease: "power2.in"
                        }), C.p8.set(".e.batBlack", {
                            x: 400,
                            y: 300
                        })
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.dust, .e.mist, .e.empty, .e.batBlack", {
                            visibility: "visible"
                        }, .2).set(".e.trap", {
                            visibility: "hidden"
                        }, .2).to(".e.dust", {
                            scale: .8,
                            duration: .2,
                            ease: "back.out(3)"
                        }, .2).to(".e.dust", {
                            opacity: 0,
                            duration: .2,
                            ease: "power2.out"
                        }, .2).to(".e.mist", {
                            opacity: 0,
                            duration: .2,
                            ease: "power2.out"
                        }, .2).to(".e.batBlack", {
                            opacity: 0,
                            duration: .3
                        }, .2).to(".e.batBlack", {
                            x: 800,
                            y: 0,
                            scale: .2,
                            rotate: 30,
                            duration: .4,
                            ease: "power2.out"
                        }, .2)
                    }
                }),
                mC = lC.extend({
                    elements: Ye.elementsFromImages("crush"),
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            repeat: 8
                        }).to(".e.crush", {
                            scale: 1.1,
                            duration: .05
                        }).to(".e.crush", {
                            scale: 1,
                            duration: .3,
                            ease: "elastic.out(1, 0.2)"
                        });
                        this.timeline.add(e)
                    }
                }),
                hC = He.extend({
                    imageManifest: {
                        fire: Promise.resolve().then(s.t.bind(s, 57514, 17)),
                        shadows: Promise.resolve().then(s.t.bind(s, 32854, 17)),
                        family: Promise.resolve().then(s.t.bind(s, 91985, 17))
                    }
                }),
                uC = hC.extend({
                    elements: Ye.elementsFromImages("fire", "shadows", "family"),
                    onLoadComplete() {
                        C.p8.set(".e.fire", {
                            width: 1e3,
                            height: 1e3
                        }), C.p8.set(".e.chant", {
                            opacity: 0
                        }), C.p8.timeline({
                            yoyo: !0,
                            repeat: -1
                        }).to(".e.fire", {
                            scale: .9,
                            opacity: .8,
                            duration: .3
                        }).to(".e.fire", {
                            scale: 1,
                            opacity: 1,
                            duration: .3
                        }).to(".e.fire", {
                            scale: .8,
                            opacity: .7,
                            duration: .3
                        }).to(".e.fire", {
                            scale: 1.1,
                            opacity: 1,
                            duration: .3
                        }).to(".e.fire", {
                            scale: .9,
                            opacity: .8,
                            duration: .3
                        }).to(".e.fire", {
                            scale: 1,
                            opacity: .9,
                            duration: .3
                        }), C.p8.timeline({
                            yoyo: !0,
                            repeat: -1
                        }).to(".e.shadows", {
                            opacity: .98,
                            duration: .3
                        }).to(".e.shadows", {
                            opacity: 1,
                            duration: .3
                        }).to(".e.shadows", {
                            opacity: .96,
                            duration: .3
                        }).to(".e.shadows", {
                            opacity: 1,
                            duration: .3
                        }).to(".e.shadows", {
                            opacity: .98,
                            duration: .3
                        }).to(".e.shadows", {
                            opacity: 1,
                            duration: .3
                        })
                    }
                }),
                gC = He.extend({
                    imageManifest: {
                        sticks: Promise.resolve().then(s.t.bind(s, 82393, 17))
                    },
                    sprites: {
                        sticks: {
                            key: "sticks",
                            images: {
                                stick0: [0, 0, 180, 747],
                                stick1: [180, 0, 75, 747],
                                stick2: [255, 0, 140, 747],
                                stick3: [395, 0, 95, 747]
                            }
                        }
                    }
                }),
                yC = gC.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromSprite("sticks", [
                        ["stick0", null, [116, 410]],
                        ["stick1", null, [116, 462]],
                        ["stick2", null, [116, 430]],
                        ["stick3", null, [116, 452]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.stick0", {
                            x: -170,
                            y: -200,
                            rotate: -79
                        }), C.p8.set(".e.stick1", {
                            x: -200,
                            y: 10,
                            rotate: 19
                        }), C.p8.set(".e.stick2", {
                            x: 140,
                            y: 210,
                            rotate: 80
                        }), C.p8.set(".e.stick3", {
                            x: 210,
                            y: -110,
                            rotate: -50
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.stick0", {
                            x: 0,
                            y: 0,
                            rotate: 0
                        }).to(".e.stick1", {
                            x: 0,
                            y: 0,
                            rotate: 0
                        }).to(".e.stick2", {
                            x: 0,
                            y: 0,
                            rotate: 0
                        }).to(".e.stick3", {
                            x: 0,
                            y: 0,
                            rotate: 0
                        }).to(".e.stick0, .e.stick1, .e.stick2, .e.stick3", {
                            y: 300,
                            opacity: 0,
                            ease: "back.in(2)"
                        })
                    }
                }),
                bC = He.extend({
                    imageManifest: {
                        hedge: Promise.resolve().then(s.t.bind(s, 79556, 17)),
                        hedgeFull: Promise.resolve().then(s.t.bind(s, 27861, 17)),
                        leaf0: Promise.resolve().then(s.t.bind(s, 9046, 17)),
                        leaf1: Promise.resolve().then(s.t.bind(s, 95090, 17))
                    }
                }),
                xC = bC.extend({
                    stepDuration: .25,
                    emitters: [],
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("hedge", "hedgeFull")
                    }, {
                        class: "leaves leaves0",
                        type: "div",
                        html: ""
                    }, {
                        class: "leaves leave1",
                        type: "div",
                        html: ""
                    }, {
                        type: "img",
                        key: "leaf0",
                        class: "leaf0"
                    }, {
                        type: "img",
                        key: "leaf1",
                        class: "leaf1"
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.leaves", {
                            width: 1e3,
                            height: 1e3
                        }), C.p8.set(".e.leaf0, .e.leaf1", {
                            visibility: "hidden"
                        });
                        for (let e = 0; e < 2; e++) this.emitters.push(Ye.addParticleEmitter({
                            container: `leaves${e}`,
                            image: `leaf${e}`,
                            autoplay: !1,
                            numberOfParticles: 10,
                            restartOnProgress: !1,
                            zIndex: 1,
                            frequency: .005,
                            settings: {
                                randomAngleRange: 359,
                                minSize: 70,
                                maxSize: 100,
                                force: 3,
                                gravity: 2,
                                boundaries: {
                                    left: 500,
                                    right: 500,
                                    top: 300,
                                    bottom: 300
                                }
                            }
                        }, this))
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.hedgeFull", {
                            opacity: 0,
                            ease: "power4.inOut"
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("c", .2, Math.random() < .5 ? "x" : "y"), this.emitters.forEach((e => e.restart())), setTimeout((() => {
                            this.emitters.forEach((e => e.kill()))
                        }), 300)
                    }
                }),
                fC = He.extend({
                    imageManifest: {
                        dust: Promise.resolve().then(s.t.bind(s, 36270, 17)),
                        bench: Promise.resolve().then(s.t.bind(s, 8955, 17)),
                        sprite: Promise.resolve().then(s.t.bind(s, 59486, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                rough: [0, 0, 730, 356],
                                smooth: [0, 357, 730, 356],
                                painted: [0, 714, 730, 356],
                                nail: [732, 0, 92, 298],
                                hammer: [730, 298, 339, 427]
                            }
                        }
                    }
                }),
                vC = fC.extend({
                    elements: [...Ye.elementsFromSprite("sprite", [
                        ["rough", null, [322, 135]],
                        ["smooth", null, [322, 135]]
                    ]), ...Ye.elementsFromImages(["dust", "dust0", [425, 225]], ["dust", "dust1", [350, 300]], ["dust", "dust2", [275, 375]])],
                    onLoadComplete() {
                        C.p8.set(".e.smooth", {
                            opacity: 0
                        }), C.p8.set(".e.dust0", {
                            opacity: 0
                        }), C.p8.set(".e.dust1", {
                            opacity: 0
                        }), C.p8.set(".e.dust2", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.smooth", {
                                opacity: 1,
                                duration: 6
                            }),
                            t = C.p8.timeline().to(".e.dust0", {
                                x: 100,
                                y: -100,
                                ease: "none",
                                opacity: 1
                            }).to(".e.dust0", {
                                x: 200,
                                y: -200,
                                ease: "none",
                                opacity: 0
                            }).set(".e.dust0", {
                                x: 0,
                                y: 0
                            }).fillTime(1).to(".e.dust0", {
                                x: -50,
                                y: 50,
                                ease: "none",
                                opacity: 1
                            }).to(".e.dust0", {
                                x: -100,
                                y: 100,
                                ease: "none",
                                opacity: 0
                            }).set(".e.dust0", {
                                x: 0,
                                y: 0
                            }).fillTime(1),
                            s = C.p8.timeline().fillTime(1).to(".e.dust1", {
                                x: -100,
                                y: 100,
                                ease: "none",
                                opacity: 1
                            }).to(".e.dust1", {
                                x: -200,
                                y: 200,
                                ease: "none",
                                opacity: 0
                            }).set(".e.dust1", {
                                x: 0,
                                y: 0
                            }).fillTime(1).to(".e.dust1", {
                                x: 50,
                                y: -50,
                                ease: "none",
                                opacity: 1
                            }).to(".e.dust1", {
                                x: 100,
                                y: -100,
                                ease: "none",
                                opacity: 0
                            }).set(".e.dust1", {
                                x: 0,
                                y: 0
                            }),
                            i = C.p8.timeline().fillTime(.5).to(".e.dust2", {
                                x: 100,
                                y: -100,
                                ease: "none",
                                opacity: 1
                            }).to(".e.dust2", {
                                x: 200,
                                y: -200,
                                ease: "none",
                                opacity: 0
                            }).set(".e.dust2", {
                                x: 0,
                                y: 0
                            }).fillTime(1).to(".e.dust2", {
                                x: -50,
                                y: 50,
                                ease: "none",
                                opacity: 1
                            }).to(".e.dust2", {
                                x: -100,
                                y: 100,
                                ease: "none",
                                opacity: 0
                            }).set(".e.dust2", {
                                x: 0,
                                y: 0
                            }).fillTime(.5);
                        this.timeline.add(e), this.timeline.add(t, 0), this.timeline.add(s, 0), this.timeline.add(i, 0)
                    }
                }),
                kC = fC.extend({
                    stepDuration: .3,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["smooth", null, [322, 135]],
                            ["nail", "nail0", [276, 295]],
                            ["nail", "nail1", [182, 457]],
                            ["nail", "nail2", [88, 610]]
                        ])
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.nail0", {
                            y: 260,
                            clipPath: "inset(0 0 269px 0)"
                        }).to(".e.nail1", {
                            y: 260,
                            clipPath: "inset(0 0 269px 0)"
                        }).to(".e.nail2", {
                            y: 260,
                            clipPath: "inset(0 0 269px 0)"
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.c", {
                            scale: .85,
                            ease: "back.in(2)",
                            duration: .15
                        }).to(".e.c", {
                            scale: 1,
                            ease: "back.out(2)",
                            duration: .15
                        })
                    }
                }),
                PC = fC.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["smooth", null, [322, 135]],
                        ["painted", null, [322, 135]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.painted", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.painted", {
                            opacity: 1
                        })
                    }
                }),
                wC = fC.extend({
                    elements: Ye.elementsFromImages("bench")
                }),
                TC = He.extend({
                    imageManifest: {
                        lawn: Promise.resolve().then(s.t.bind(s, 60822, 17)),
                        puddle: Promise.resolve().then(s.t.bind(s, 59050, 17)),
                        sign: Promise.resolve().then(s.t.bind(s, 81222, 17))
                    }
                }),
                SC = TC.extend({
                    elements: [{
                        class: "lawn",
                        type: "img",
                        key: "lawn"
                    }, {
                        class: "particles",
                        type: "div"
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.particles", {
                            visibility: "hidden",
                            width: 1e3,
                            height: 1e3
                        }), C.p8.set(".e.lawn", {
                            scale: 1.15
                        }), Ye.addParticleEmitter({
                            container: "particles",
                            numberOfParticles: 15,
                            autoplay: !0,
                            restartOnProgress: !1,
                            zIndex: 1,
                            settings: {
                                frequency: .05,
                                boundaries: {
                                    left: 500,
                                    right: 500,
                                    top: 200,
                                    bottom: 200
                                },
                                from: {
                                    backgroundColor: "#0085FF",
                                    border: "3px solid black",
                                    opacity: 1,
                                    duration: .001
                                },
                                to: {
                                    duration: .36,
                                    opacity: 0,
                                    ease: "power2.in"
                                },
                                minSize: 15,
                                maxSize: 20,
                                angle: -90,
                                force: 2,
                                gravity: 2,
                                randomAngle: !0,
                                randomAngleRange: 120
                            }
                        }, this)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("lawn"), C.p8.set(".e.particles", {
                            visibility: "visible"
                        })
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("lawn"), C.p8.set(".e.particles", {
                            visibility: "hidden"
                        })
                    }
                }),
                MC = TC.extend({
                    elements: Ye.elementsFromImages("lawn", ["puddle", null, [60, 50]]),
                    onLoadComplete() {
                        C.p8.set(".e.lawn", {
                            scale: 1.15
                        }), C.p8.set(".e.puddle", {
                            opacity: 0,
                            scale: .2
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.puddle", {
                            opacity: 1,
                            duration: .2
                        }).to(".e.puddle", {
                            scale: .7
                        }, 0)
                    }
                }),
                CC = TC.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("lawn", ["puddle", null, [60, 50]], ["sign", null, [170, 270]]),
                    onLoadComplete() {
                        C.p8.set(".e.lawn", {
                            scale: 1.15
                        }), C.p8.set(".e.puddle", {
                            scale: .7
                        }), C.p8.set(".e.sign", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.sign", {
                            opacity: 1,
                            duration: 1
                        }).to(".e.sign", {
                            x: -120,
                            scale: .8,
                            duration: 1
                        }).to(".e.sign", {
                            y: 120,
                            duration: .5,
                            ease: "back.in(4)"
                        }).to(".e.lawn, .e.puddle", {
                            x: 10,
                            y: 10,
                            duration: .1
                        }).to(".e.lawn, .e.puddle", {
                            x: -8,
                            y: 0,
                            duration: .1
                        }).to(".e.lawn, .e.puddle", {
                            x: 6,
                            y: -6,
                            duration: .1
                        }).to(".e.lawn, .e.puddle", {
                            x: -4,
                            y: -4,
                            duration: .1
                        }).to(".e.lawn, .e.puddle", {
                            x: 0,
                            y: 2,
                            duration: .1
                        })
                    }
                }),
                DC = He.extend({
                    imageManifest: {
                        arm: Promise.resolve().then(s.t.bind(s, 17066, 17)),
                        grass: Promise.resolve().then(s.t.bind(s, 10198, 17)),
                        sun: Promise.resolve().then(s.t.bind(s, 66781, 17)),
                        sunBack: Promise.resolve().then(s.t.bind(s, 93284, 17))
                    },
                    sprites: {
                        arm: {
                            key: "arm",
                            images: {
                                arm: [0, 0, 490, 440],
                                bump: [490, 0, 100, 80]
                            }
                        }
                    }
                }),
                FC = DC.extend({
                    elements: Ye.elementsFromImages("grass")
                }),
                zC = DC.extend({
                    elements: Ye.elementsFromImages(["sunBack", "sun0"], ["sunBack", "sun1"], "sun"),
                    onLoadComplete() {
                        C.p8.set(".e.sun0", {
                            opacity: .6,
                            rotate: 73,
                            scale: .9
                        }), C.p8.set(".e.sun1", {
                            opacity: .6,
                            rotate: 53,
                            scale: .7
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.sun0", {
                            scale: .8,
                            ease: "none"
                        }).to(".e.sun1", {
                            scale: .8,
                            ease: "none"
                        }, "<").to(".e.sun0", {
                            scale: .7,
                            ease: "none"
                        }).to(".e.sun1", {
                            scale: .6,
                            ease: "none"
                        }, "<").to(".e.sun0", {
                            scale: .6,
                            ease: "none"
                        }).to(".e.sun1", {
                            scale: .7,
                            ease: "none"
                        }, "<").to(".e.sun0", {
                            scale: .7,
                            ease: "none"
                        }).to(".e.sun1", {
                            scale: .8,
                            ease: "none"
                        }, "<").to(".e.sun0", {
                            scale: .8,
                            ease: "none"
                        }).to(".e.sun1", {
                            scale: .8,
                            ease: "none"
                        }, "<").to(".e.sun0", {
                            scale: .7,
                            ease: "none"
                        }).to(".e.sun1", {
                            scale: .6,
                            ease: "none"
                        }, "<").to(".e.sun0", {
                            scale: .6,
                            ease: "none"
                        }).to(".e.sun1", {
                            scale: .7,
                            ease: "none"
                        }, "<").to(".e.sun0", {
                            scale: .7,
                            ease: "none"
                        }).to(".e.sun1", {
                            scale: .8,
                            ease: "none"
                        }, "<")
                    }
                }),
                LC = DC.extend({
                    elements: Ye.elementsFromSprite("arm", [
                        ["arm", null, [280, 225]],
                        ["bump", null, [480, 360]]
                    ]),
                    initializeTimeline() {
                        this.timeline.to(".e.bump", {
                            scale: 1.1
                        }).to(".e.bump", {
                            scale: .9
                        }).to(".e.bump", {
                            scale: 1.1
                        }).to(".e.bump", {
                            scale: .9
                        }).to(".e.bump", {
                            scale: 1.1
                        }).to(".e.bump", {
                            scale: .9
                        }).to(".e.bump", {
                            scale: 1.1
                        }).to(".e.bump", {
                            scale: .9
                        })
                    }
                }),
                RC = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 24225, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                stem: [0, 0, 200, 580],
                                leaf0: [0, 580, 244, 145],
                                leaf1: [0, 725, 244, 145],
                                leaf2: [0, 870, 122, 80],
                                leaf3: [122, 870, 122, 80],
                                pedal0: [244, 750, 208, 210],
                                pedal1: [852, 785, 235, 190],
                                pedal2: [1086, 785, 232, 208],
                                pedal3: [1320, 628, 269, 178],
                                pedal4: [244, 504, 208, 246],
                                bud0: [200, 252, 252, 252],
                                bud1: [200, 0, 252, 252],
                                tent0: [1301, 260, 291, 368],
                                tent1: [1298, 0, 353, 260],
                                tent2: [890, 0, 375, 280],
                                tent3: [892, 278, 366, 313],
                                tent4: [858, 591, 432, 194],
                                tooth0: [452, 0, 200, 200],
                                tooth1: [452, 200, 200, 200],
                                tooth2: [452, 400, 200, 200],
                                tooth3: [452, 600, 200, 200],
                                tooth4: [452, 800, 200, 200],
                                tooth5: [652, 0, 200, 200],
                                tooth6: [652, 200, 200, 200],
                                tooth7: [652, 400, 200, 200],
                                tooth8: [652, 600, 200, 200],
                                tooth9: [652, 800, 200, 200]
                            }
                        }
                    }
                }),
                IC = RC.extend({
                    stepDuration: .25,
                    shouldWiggle: !1,
                    attachedLeaves: [!0, !0, !0, !0],
                    elements: [{
                        class: "c-stem",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["leaf0", null, [651, 522]],
                            ["leaf1", null, [675, 270]],
                            ["leaf2", null, [762, 533]],
                            ["leaf3", null, [789, 347]],
                            ["stem", null, [430, 428]]
                        ])
                    }, {
                        class: "c-tenticles",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["tent0", null, [13, 420]],
                            ["tent1", null, [518, 110]],
                            ["tent2", null, [160, 40]],
                            ["tent3", null, [488, 530]],
                            ["tent4", null, [250, 551]]
                        ])
                    }, {
                        class: "c-pedals",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["pedal0", "pedal pedal0", [205, 307]],
                            ["pedal1", "pedal pedal1", [385, 219]],
                            ["pedal2", "pedal pedal2", [200, 488]],
                            ["pedal3", "pedal pedal3", [379, 509]],
                            ["pedal4", "pedal pedal4", [463, 392]]
                        ])
                    }, {
                        class: "c-bud",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["bud0", null, [294, 374]],
                            ["tooth0", "tooth tooth0", [320, 400]],
                            ["tooth1", "tooth tooth1", [320, 400]],
                            ["tooth2", "tooth tooth2", [320, 400]],
                            ["tooth3", "tooth tooth3", [320, 400]],
                            ["tooth4", "tooth tooth4", [320, 400]],
                            ["tooth5", "tooth tooth5", [320, 400]],
                            ["tooth6", "tooth tooth6", [320, 400]],
                            ["tooth7", "tooth tooth7", [320, 400]],
                            ["tooth8", "tooth tooth8", [320, 400]],
                            ["tooth9", "tooth tooth9", [320, 400]],
                            ["bud1", null, [294, 374]]
                        ])
                    }],
                    initializeTimeline() {
                        this.initBud(), this.initPedals(), this.initTenticles(), this.initStem(), C.p8.timeline({
                            repeat: -1
                        }).to(".e.c-tenticles, .e.c-pedals, .e.c-bud", {
                            x: 15,
                            ease: "none"
                        }).to(".e.c-tenticles, .e.c-pedals, .e.c-bud", {
                            x: 0,
                            ease: "none"
                        }).to(".e.c-tenticles, .e.c-pedals, .e.c-bud", {
                            x: -15,
                            ease: "none"
                        }).to(".e.c-tenticles, .e.c-pedals, .e.c-bud", {
                            x: 0,
                            ease: "none"
                        })
                    },
                    initBud() {
                        const e = C.p8.timeline().fillTime(.5).to(".e.tooth0", {
                            opacity: 0,
                            duration: .05
                        }).to(".e.tooth4", {
                            opacity: 0,
                            duration: .05
                        }).to(".e.tooth7", {
                            opacity: 0,
                            duration: .05
                        }).to(".e.tooth2", {
                            opacity: 0,
                            duration: .05
                        }).to(".e.tooth9", {
                            opacity: 0,
                            duration: .05
                        }).to(".e.tooth5", {
                            opacity: 0,
                            duration: .05
                        }).to(".e.tooth1", {
                            opacity: 0,
                            duration: .05
                        }).to(".e.tooth6", {
                            opacity: 0,
                            duration: .05
                        }).to(".e.tooth3", {
                            opacity: 0,
                            duration: .05
                        }).to(".e.tooth8", {
                            opacity: 0,
                            duration: .05
                        });
                        this.timeline.add(e, 0), C.p8.set(".e.c-bud", {
                            transformOrigin: "500px 419px"
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0,
                            ease: "power2.inOut"
                        }).to(".e.tooth", {
                            rotate: 60,
                            duration: 6
                        }).to(".e.tooth", {
                            rotate: -60,
                            duration: 6
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0,
                            ease: "power1.inOut"
                        }).to(".e.tooth", {
                            scale: 1.15,
                            duration: .4
                        }).to(".e.tooth", {
                            scale: .95,
                            duration: .3
                        }).to(".e.tooth", {
                            scale: 1.1,
                            duration: .6
                        }).to(".e.tooth", {
                            scale: .97,
                            duration: .2
                        })
                    },
                    initPedals() {
                        C.p8.set(".e.c-pedals", {
                            transformOrigin: "500px 419px"
                        });
                        const e = C.p8.timeline().to(".e.c-pedals", {
                            scale: .8
                        });
                        this.timeline.add(e, 0), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.c-pedals", {
                            rotate: 10,
                            duration: 2,
                            ease: "power2.inOut"
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.pedal", {
                            scale: 1.05,
                            duration: .7,
                            ease: "power3.inOut"
                        })
                    },
                    initTenticles() {
                        C.p8.set(".e.c-tenticles", {
                            transformOrigin: "506px 442px"
                        });
                        const e = C.p8.timeline().to(".e.c-tenticles", {
                            scale: .6,
                            ease: "none"
                        });
                        this.timeline.add(e, 0), C.p8.set(".e.tent0", {
                            transformOrigin: "84px 328px"
                        }), C.p8.set(".e.tent1", {
                            transformOrigin: "310px 55px"
                        }), C.p8.set(".e.tent2", {
                            transformOrigin: "365px 223px"
                        }), C.p8.set(".e.tent3", {
                            transformOrigin: "110px 98px"
                        }), C.p8.set(".e.tent4", {
                            transformOrigin: "77px 158px"
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.tent0", {
                            scaleY: 1.2,
                            skewX: 0,
                            duration: 3,
                            ease: "power2.inOut"
                        }).to(".e.tent0", {
                            scaleY: 1,
                            skewX: 10,
                            duration: 1,
                            ease: "power1.inOut"
                        }).to(".e.tent0", {
                            scaleY: 1.1,
                            skewX: 0,
                            duration: 2,
                            ease: "power2.inOut"
                        }).to(".e.tent0", {
                            scaleY: 1,
                            skewX: -7,
                            duration: 1,
                            ease: "power1.inOut"
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.tent1", {
                            scaleX: 1.1,
                            skewY: 5,
                            duration: 2,
                            ease: "power2.inOut"
                        }).to(".e.tent1", {
                            scaleX: 1,
                            skewY: -6,
                            duration: 2,
                            ease: "power3.inOut"
                        }).to(".e.tent1", {
                            scaleX: 1.2,
                            skewY: 0,
                            duration: 1,
                            ease: "power1.inOut"
                        }).to(".e.tent1", {
                            scaleX: 1,
                            skewY: 0,
                            duration: 1,
                            ease: "power1.inOut"
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.tent2", {
                            scaleX: 1,
                            skewY: 0,
                            duration: 1,
                            ease: "power2.inOut"
                        }).to(".e.tent2", {
                            scaleX: 1.2,
                            skewY: -10,
                            duration: 3,
                            ease: "power2.inOut"
                        }).to(".e.tent2", {
                            scaleX: 1.2,
                            skewY: 2,
                            duration: 1,
                            ease: "power1.inOut"
                        }).to(".e.tent2", {
                            scaleX: .95,
                            skewY: 0,
                            duration: 2,
                            ease: "power2.inOut"
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.tent3", {
                            scaleX: 1.1,
                            skewY: 0,
                            duration: 2,
                            ease: "power2.inOut"
                        }).to(".e.tent3", {
                            scaleX: .95,
                            skewY: 5,
                            duration: 1,
                            ease: "power2.inOut"
                        }).to(".e.tent3", {
                            scaleX: 1,
                            skewY: 1,
                            duration: 1,
                            ease: "power1.inOut"
                        }).to(".e.tent3", {
                            scaleX: 1,
                            skewY: -5,
                            duration: 4,
                            ease: "power3.inOut"
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.tent4", {
                            scaleX: 1,
                            skewY: 2,
                            duration: 3,
                            ease: "power2.inOut"
                        }).to(".e.tent4", {
                            scaleX: 1.1,
                            skewY: 0,
                            duration: 3,
                            ease: "power2.inOut"
                        }).to(".e.tent4", {
                            scaleX: 1,
                            skewY: 10,
                            duration: 2,
                            ease: "power1.inOut"
                        }).to(".e.tent4", {
                            scaleX: 1,
                            skewY: -10,
                            duration: 2,
                            ease: "power2.inOut"
                        })
                    },
                    initStem() {
                        C.p8.set(".e.c-stem", {
                            transformOrigin: "bottom center"
                        }), C.p8.set(".e.leaf0", {
                            transformOrigin: "48px 63px"
                        }), C.p8.set(".e.leaf1", {
                            transformOrigin: "200px 75px"
                        }), C.p8.set(".e.leaf2", {
                            transformOrigin: "31px 34px"
                        }), C.p8.set(".e.leaf3", {
                            transformOrigin: "94px 21px"
                        }), C.p8.timeline({
                            repeat: -1
                        }).to(".e.c-stem", {
                            skewX: -4,
                            ease: "none"
                        }).to(".e.c-stem", {
                            skewX: 0,
                            ease: "none"
                        }).to(".e.c-stem", {
                            skewX: 4,
                            ease: "none"
                        }).to(".e.c-stem", {
                            skewX: 0,
                            ease: "none"
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.leaf0", {
                            rotate: 6,
                            duration: .3
                        }).to(".e.leaf0", {
                            rotate: 0,
                            duration: .3
                        }).to(".e.leaf0", {
                            rotate: 4,
                            duration: .3
                        }).to(".e.leaf0", {
                            rotate: 0,
                            duration: .3
                        }).to(".e.leaf0", {
                            rotate: 6,
                            duration: .3
                        }).to(".e.leaf0", {
                            rotate: 0,
                            duration: .3
                        }).to(".e.leaf0", {
                            rotate: 8,
                            duration: .3
                        }).to(".e.leaf0", {
                            rotate: 0,
                            duration: .3
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.leaf1", {
                            rotate: -4,
                            duration: .3
                        }).to(".e.leaf1", {
                            rotate: 0,
                            duration: .3
                        }).to(".e.leaf1", {
                            rotate: 7,
                            duration: .3
                        }).to(".e.leaf1", {
                            rotate: 0,
                            duration: .3
                        }).to(".e.leaf1", {
                            rotate: 8,
                            duration: .3
                        }).to(".e.leaf1", {
                            rotate: 0,
                            duration: .3
                        }).to(".e.leaf1", {
                            rotate: -5,
                            duration: .3
                        }).to(".e.leaf1", {
                            rotate: 0,
                            duration: .3
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.leaf2", {
                            rotate: 4,
                            duration: .2
                        }).to(".e.leaf2", {
                            rotate: 0,
                            duration: .2
                        }).to(".e.leaf2", {
                            rotate: -2,
                            duration: .2
                        }).to(".e.leaf2", {
                            rotate: 0,
                            duration: .2
                        }).to(".e.leaf2", {
                            rotate: 4,
                            duration: .2
                        }).to(".e.leaf2", {
                            rotate: 0,
                            duration: .2
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.leaf3", {
                            rotate: 3,
                            duration: .2
                        }).to(".e.leaf3", {
                            rotate: 0,
                            duration: .2
                        }).to(".e.leaf3", {
                            rotate: -3,
                            duration: .2
                        }).to(".e.leaf3", {
                            rotate: 0,
                            duration: .2
                        }).to(".e.leaf3", {
                            rotate: -3,
                            duration: .2
                        })
                    },
                    onDiscreteProgress(e) {
                        C.p8.globalTimeline.timeScale(1 + e / 50), e > 20 && this.attachedLeaves[2] && (this.attachedLeaves[2] = !1, C.p8.to(".e.leaf2", {
                            x: 30,
                            y: 200,
                            onComplete() {
                                C.p8.killTweensOf(".e.leaf2")
                            }
                        })), e > 40 && this.attachedLeaves[1] && (this.attachedLeaves[1] = !1, C.p8.to(".e.leaf1", {
                            x: -30,
                            y: 280,
                            onComplete() {
                                C.p8.killTweensOf(".e.leaf1")
                            }
                        })), e > 60 && this.attachedLeaves[3] && (this.attachedLeaves[3] = !1, C.p8.to(".e.leaf3", {
                            x: -50,
                            y: 200,
                            onComplete() {
                                C.p8.killTweensOf(".e.leaf3")
                            }
                        })), e > 80 && this.attachedLeaves[0] && (this.attachedLeaves[0] = !1, C.p8.to(".e.leaf0", {
                            x: 50,
                            y: 300,
                            onComplete() {
                                C.p8.killTweensOf(".e.leaf0")
                            }
                        }))
                    }
                }),
                OC = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 60881, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                search0: [1267, 1215, 209, 83, 295, 469],
                                search1: [1030, 1215, 227, 89, 294, 469],
                                search2: [1253, 760, 279, 104, 292, 469],
                                search3: [954, 760, 289, 105, 293, 469],
                                search4: [1464, 653, 273, 96, 298, 468],
                                pop0: [1030, 875, 452, 330, 153, 433],
                                pop1: [1464, 10, 433, 328, 180, 376],
                                pop2: [1464, 348, 403, 295, 247, 477],
                                squirrel0: [10, 903, 500, 365, 147, 377],
                                squirrel1: [520, 903, 500, 365, 147, 377],
                                squirrel2: [954, 10, 500, 365, 147, 377],
                                squirrel3: [954, 385, 500, 365, 147, 377],
                                computer: [10, 10, 934, 883, 41, 30]
                            }
                        }
                    }
                }),
                BC = OC.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["computer", "search0", "search1", "search2", "search3", "search4"]),
                    onLoadComplete() {
                        C.p8.set(".e.search0, .e.search1, .e.search2, .e.search3, .e.search4", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("search4", "search0")).add(Ye.squashTransition("search0", "search1")).add(Ye.squashTransition("search1", "search2")).add(Ye.squashTransition("search2", "search3")).add(Ye.squashTransition("search3", "search4"))
                    }
                }),
                YC = OC.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["computer", "search4", "squirrel0", "pop2", "pop1", "pop0"]),
                    onLoadComplete() {
                        C.p8.set(".e.squirrel0, .e.pop2, .e.pop1, .e.pop0", {
                            scale: .7,
                            hidden: !0
                        }), C.p8.timeline().set(".e.squirrel0", {
                            hidden: !1
                        }).to(".e.squirrel0", {
                            scale: 1,
                            duration: .15,
                            ease: "back.out(2)"
                        }).set(".e.pop2", {
                            hidden: !1
                        }).to(".e.pop2", {
                            scale: 1,
                            duration: .15,
                            ease: "back.out(2)"
                        }, .1).set(".e.pop1", {
                            hidden: !1
                        }).to(".e.pop1", {
                            scale: 1,
                            duration: .15,
                            ease: "back.out(2)"
                        }, .2).set(".e.pop0", {
                            hidden: !1
                        }).to(".e.pop0", {
                            scale: 1,
                            duration: .15,
                            ease: "back.out(2)"
                        }, .3)
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.pop0", {
                            scale: .6,
                            duration: 1,
                            ease: "back.in(2)"
                        }, 0).set(".e.pop0", {
                            hidden: !0
                        }, .99).to(".e.pop1", {
                            scale: .6,
                            duration: 1,
                            ease: "back.in(2)"
                        }, 1).set(".e.pop1", {
                            hidden: !0
                        }, 1.99).to(".e.pop2", {
                            scale: .6,
                            duration: 1,
                            ease: "back.in(2)"
                        }, 2).set(".e.pop2", {
                            hidden: !0
                        }, 2.99)
                    }
                }),
                AC = OC.extend({
                    elements: Ye.elementsFromSprite("sprite", ["computer", "squirrel0"]),
                    onLoadComplete() {
                        Ye.startShake("squirrel0", 0, 3, 1)
                    }
                }),
                HC = OC.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["computer", "squirrel0", "squirrel1", "squirrel2", "squirrel3"]),
                    onLoadComplete() {
                        C.p8.set(".e.squirrel1, .e.squirrel2, .e.squirrel3", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("squirrel0", "squirrel1")).add(Ye.squashTransition("squirrel1", "squirrel2")).add(Ye.squashTransition("squirrel2", "squirrel3"))
                    }
                }),
                GC = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 41389, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                sign: [415, 10, 841, 290, 23, 72],
                                stand: [683, 311, 810, 850, 94, 77],
                                front: [190, 10, 215, 262, 662, 195],
                                pour: [10, 310, 663, 845, 46, 271],
                                liquid: [10, 10, 170, 212, 706, 216],
                                back: [1266, 10, 215, 291, 633, 195]
                            }
                        }
                    }
                }),
                VC = kC,
                EC = GC.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", ["stand", "sign"]),
                    onLoadComplete() {
                        C.p8.set(".e.sign", {
                            opacity: 0,
                            rotate: 80,
                            transformOrigin: "top left"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.sign", {
                            x: 110,
                            y: 40,
                            opacity: 1
                        }).to(".e.sign", {
                            x: 0,
                            y: 0,
                            rotate: 0
                        })
                    }
                }),
                qC = GC.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["back", "liquid", "pour", "front"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.liquid", {
                            y: 135,
                            scale: .9,
                            clipPath: "inset(0% 0% 70% 0%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.liquid", {
                            y: 0,
                            scale: 1,
                            clipPath: "inset(0% 0% 0% 0%)"
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                NC = GC.extend({
                    elements: Ye.elementsFromSprite("sprite", ["stand", "sign"])
                }),
                XC = He.extend({
                    imageManifest: {
                        lemonade: Promise.resolve().then(s.t.bind(s, 16045, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "lemonade",
                            images: {
                                shine: [799, 911, 311, 311, 421, 19],
                                coin: [10, 766, 779, 660, 234, 144],
                                hand: [10, 10, 896, 746, 96, 70],
                                friendly: [916, 10, 563, 891, 44, 188]
                            }
                        }
                    }
                }),
                WC = XC.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", ["friendly"]),
                    onDiscreteProgress() {
                        Ye.squashOnce("friendly", .25)
                    }
                }),
                UC = qC,
                $C = XC.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["hand"]),
                    onLoadComplete() {
                        C.p8.set(".e.hand", {
                            x: 150,
                            y: 50,
                            scale: .8,
                            rotate: -45
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.hand", {
                            x: 0,
                            y: 0,
                            scale: 1,
                            rotate: 0,
                            ease: "back.in(2)"
                        })
                    }
                }),
                jC = XC.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["coin"])
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.coin", {
                            scaleY: .9,
                            rotate: 10
                        }).to(".e.coin", {
                            scaleY: 1,
                            rotate: -10
                        }).to(".e.coin", {
                            scaleY: .9,
                            rotate: 10
                        }).to(".e.coin", {
                            scaleY: 1.1,
                            rotate: -10
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                KC = XC.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["coin", "shine"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.shine", {
                            opacity: 0
                        }), C.p8.fromTo(".e.c", {
                            scaleY: 1.1,
                            rotate: -10
                        }, {
                            scaleY: 1,
                            rotate: 0,
                            duration: .25
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.shine", {
                            rotate: -200,
                            duration: 3
                        }, 0).to(".e.shine", {
                            opacity: 1,
                            duration: .75
                        }, 0).to(".e.shine", {
                            x: 0,
                            y: -30,
                            duration: .5
                        }, 0).to(".e.shine", {
                            x: -20,
                            y: -20,
                            duration: .5
                        }, .5).to(".e.shine", {
                            x: -10,
                            y: -10,
                            duration: .5
                        }, 1).to(".e.shine", {
                            x: 0,
                            y: 0,
                            duration: .5
                        }, 1.5).to(".e.shine", {
                            x: 10,
                            y: 10,
                            duration: .5
                        }, 2).to(".e.shine", {
                            x: 20,
                            y: 20,
                            duration: .5
                        }, 2.5).to(".e.shine", {
                            opacity: 0,
                            duration: .75
                        }, 2.25).fillTime(5)
                    }
                }),
                ZC = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 51719, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                footLeft: [0, 0, 202, 336],
                                footRight: [202, 0, 211, 336],
                                cloud1: [413, 0, 395, 336],
                                cloud0: [552, 1134, 102, 96],
                                ghost: [552, 1230, 219, 200],
                                devil: [0, 336, 434, 651],
                                glass: [434, 336, 461, 798],
                                fossil: [0, 1036, 552, 655]
                            }
                        }
                    },
                    printElements: [{
                        class: "prints",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["footLeft", null, [700, 249]],
                            ["footRight", null, [500, 545]],
                            ["footLeft", null, [250, 249]],
                            ["footRight", null, [150, 545]]
                        ])
                    }, {
                        class: "zoomed",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["footLeft", null, [700, 249]],
                            ["footRight", null, [500, 545]],
                            ["footLeft", null, [250, 249]],
                            ["footRight", null, [150, 545]]
                        ])
                    }, ...Ye.elementsFromSprite("sprite", [
                        ["glass", null, [101, 270]]
                    ])]
                }),
                JC = ZC.extend({
                    stepDuration: .3,
                    elements() {
                        return this.printElements
                    },
                    onLoadComplete() {
                        C.p8.set(".e.glass", {
                            rotate: -60,
                            scale: .8
                        }), C.p8.set(".e.prints, .e.zoomed", {
                            opacity: 0,
                            rotate: 20
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.glass", {
                            rotate: 0,
                            scale: 1
                        }).to(".e.prints", {
                            opacity: 1
                        }, 0)
                    }
                }),
                _C = ZC.extend({
                    elements() {
                        return this.printElements
                    },
                    onLoadComplete() {
                        C.p8.set(".e.prints, .e.zoomed", {
                            rotate: 20
                        }), C.p8.set(".e.zoomed", {
                            rotate: 20,
                            backgroundColor: "#FFC6BC",
                            clipPath: "inset(19% 41% 52% 29%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.glass", {
                            rotate: 10,
                            scale: 1.3
                        }).to(".e.zoomed", {
                            scale: 1.4,
                            clipPath: "inset(20% 39% 54% 33%)"
                        }, "<").to(".e.glass", {
                            x: -220,
                            y: 20,
                            rotate: -10
                        }).to(".e.zoomed", {
                            clipPath: "inset(28% 59% 45% 15%)"
                        }, "<").to(".e.glass", {
                            x: -310,
                            y: 460
                        }).to(".e.zoomed", {
                            clipPath: "inset(61% 54% 12% 16%)"
                        }, "<").to(".e.glass", {
                            x: 110,
                            y: 180,
                            rotate: 10
                        }).to(".e.zoomed", {
                            clipPath: "inset(30% 28% 44% 45%)"
                        }, "<")
                    }
                }),
                QC = ZC.extend({
                    elements() {
                        return [...this.printElements, ...Ye.elementsFromSprite("sprite", [
                            ["fossil", null, [137, 216]]
                        ])]
                    },
                    onLoadComplete() {
                        C.p8.set(".e.glass", {
                            x: 110,
                            y: 180,
                            rotate: 10,
                            scale: 1.3
                        }), C.p8.set(".e.prints", {
                            rotate: 20
                        }), C.p8.set(".e.zoomed", {
                            opacity: 0
                        }), C.p8.set(".e.fossil", {
                            opacity: 0,
                            rotate: 13
                        }), C.p8.fromTo(".e.glass", {
                            x: 110,
                            y: 180,
                            rotate: 10,
                            scale: 1.3
                        }, {
                            x: 500,
                            y: -100,
                            opacity: 0,
                            rotate: 200,
                            duration: .3
                        }), C.p8.fromTo(".e.prints", {
                            rotate: 20
                        }, {
                            x: 200,
                            y: 100,
                            rotate: 0,
                            scale: 1.3
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.fossil", {
                            opacity: 1
                        })
                    }
                }),
                eD = ZC.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["devil", null, [300, 425]],
                        ["cloud0", null, [395, 440]],
                        ["cloud1", null, [95, 130]],
                        ["ghost", null, [155, 225]]
                    ]),
                    onLoadComplete() {
                        C.p8.fromTo(".e.ghost", {
                            opacity: 0
                        }, {
                            opacity: 1,
                            delay: .35,
                            duration: .5
                        }), C.p8.fromTo(".e.cloud0", {
                            x: 50,
                            y: 50,
                            opacity: 0
                        }, {
                            x: 0,
                            y: 0,
                            opacity: 1,
                            duration: .35
                        }), C.p8.fromTo(".e.cloud1", {
                            x: 75,
                            y: 75,
                            opacity: 0
                        }, {
                            x: 0,
                            y: 0,
                            opacity: 1,
                            delay: .15,
                            duration: .35
                        })
                    }
                }),
                tD = He.extend({
                    imageManifest: {
                        ghost: Promise.resolve().then(s.t.bind(s, 28255, 17))
                    }
                }),
                sD = tD.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("ghost"),
                    onLoadComplete() {
                        C.p8.set(".e.ghost", {
                            scale: .4
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.ghost", {
                            scale: 1.1,
                            ease: "power2.in"
                        })
                    }
                }),
                iD = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 94335, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                paper0: [0, 0, 674, 698],
                                paper1: [674, 0, 673, 698],
                                paper2: [0, 698, 674, 698],
                                paperSig: [674, 698, 673, 698],
                                hat: [0, 1396, 765, 604]
                            }
                        }
                    }
                }),
                oD = iD.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["paperSig", null, [151, 163]],
                        ["paper0", null, [151, 163]],
                        ["paper1", null, [151, 163]],
                        ["paper2", null, [151, 163]],
                        ["paper0", "paper3", [151, 163]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.paperSig", {
                            y: -80,
                            x: -100,
                            rotate: 5
                        }), C.p8.set(".e.paper0", {
                            y: -40,
                            x: -50,
                            rotate: 5
                        }), C.p8.set(".e.paper1", {
                            y: 0,
                            x: 0,
                            rotate: 5
                        }), C.p8.set(".e.paper2", {
                            y: 40,
                            x: 50,
                            rotate: 5
                        }), C.p8.set(".e.paper3", {
                            y: 80,
                            x: 100,
                            rotate: 5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.paperSig", {
                            y: -40,
                            x: -50,
                            duration: 1
                        }, 0).to(".e.paper0", {
                            y: 0,
                            x: 0,
                            duration: 1
                        }, 0).to(".e.paper1", {
                            y: 40,
                            x: 50,
                            duration: 1
                        }, 0).to(".e.paper2", {
                            y: 80,
                            x: 100,
                            duration: 1
                        }, 0).to(".e.paper3", {
                            x: 350,
                            duration: .5
                        }, 0).set(".e.paper3", {
                            zIndex: -1
                        }, .5).to(".e.paper3", {
                            y: -80,
                            x: -100,
                            duration: .5
                        }, .5).to(".e.paperSig", {
                            y: 0,
                            x: 0,
                            duration: 1
                        }, 1).to(".e.paper0", {
                            y: 40,
                            x: 50,
                            duration: 1
                        }, 1).to(".e.paper1", {
                            y: 80,
                            x: 100,
                            duration: 1
                        }, 1).to(".e.paper2", {
                            x: 350,
                            duration: .5
                        }, 1).set(".e.paper2", {
                            zIndex: -1
                        }, 1.5).to(".e.paper2", {
                            y: -80,
                            x: -100,
                            duration: .5
                        }, 1.5).to(".e.paper3", {
                            y: -40,
                            x: -50,
                            duration: 1
                        }, 1).to(".e.paperSig", {
                            y: 40,
                            x: 50,
                            duration: 1
                        }, 2).to(".e.paper0", {
                            y: 80,
                            x: 100,
                            duration: 1
                        }, 2).to(".e.paper1", {
                            x: 350,
                            duration: .5
                        }, 2).set(".e.paper1", {
                            zIndex: -1
                        }, 2.5).to(".e.paper1", {
                            y: -80,
                            x: -100,
                            duration: .5
                        }, 2.5).to(".e.paper2", {
                            y: -40,
                            x: -50,
                            duration: 1
                        }, 2).to(".e.paper3", {
                            y: 0,
                            x: 0,
                            duration: 1
                        }, 2).to(".e.paperSig", {
                            y: 80,
                            x: 100,
                            duration: 1
                        }, 3).to(".e.paper0", {
                            x: 350,
                            duration: .5
                        }, 3).set(".e.paper0", {
                            zIndex: -1
                        }, 3.5).to(".e.paper0", {
                            y: -80,
                            x: -100,
                            duration: .5
                        }, 3.5).to(".e.paper1", {
                            y: -40,
                            x: -50,
                            duration: 1
                        }, 3).to(".e.paper2", {
                            y: 0,
                            x: 0,
                            duration: 1
                        }, 3).to(".e.paper3", {
                            y: 40,
                            x: 50,
                            duration: 1
                        }, 3)
                    }
                }),
                nD = iD.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["paper0", null, [151, 163]],
                        ["paper1", null, [151, 163]],
                        ["paper2", null, [151, 163]],
                        ["paper0", "paper3", [151, 163]],
                        ["paperSig", null, [151, 163]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.paper0", {
                            y: -80,
                            x: -100,
                            rotate: 5
                        }), C.p8.set(".e.paper1", {
                            y: -40,
                            x: -50,
                            rotate: 5
                        }), C.p8.set(".e.paper2", {
                            y: 0,
                            x: 0,
                            rotate: 5
                        }), C.p8.set(".e.paper3", {
                            y: 40,
                            x: 50,
                            rotate: 5
                        }), C.p8.set(".e.paperSig", {
                            y: 80,
                            x: 100,
                            rotate: 5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.paper0, .e.paper1, .e.paper2, .e.paper3", {
                            opacity: 0
                        }).to(".e.paperSig", {
                            x: 0,
                            y: 0,
                            scale: 1.2
                        }, 0)
                    }
                }),
                aD = iD.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["hat", null, [198, 117]]
                    ])
                }),
                rD = He.extend({
                    imageManifest: {
                        shh: Promise.resolve().then(s.t.bind(s, 20580, 17))
                    }
                }),
                lD = rD.extend({
                    elements: Ye.elementsFromImages("shh")
                }),
                dD = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 85492, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                mask: [0, 0, 610, 912],
                                string: [610, 701, 390, 264],
                                man: [610, 0, 930, 701],
                                face: [1e3, 701, 271, 264]
                            }
                        }
                    }
                }),
                pD = dD.extend({
                    stepDuration: .65,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["man", null, [127, 35]],
                        ["string", null, [220, 295]],
                        ["mask", null, [-85, 55]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.mask", {
                            x: 100,
                            y: -100,
                            scale: .5
                        }), C.p8.set(".e.string", {
                            x: 100,
                            y: -100,
                            scale: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.mask", {
                            x: 0,
                            y: -75,
                            ease: "power2."
                        }).to(".e.mask", {
                            x: 100,
                            y: -100,
                            duration: .25
                        }).to(".e.mask", {
                            x: -75,
                            y: -100,
                            ease: "power2."
                        }).to(".e.mask", {
                            x: 100,
                            y: -100,
                            duration: .25
                        }).to(".e.mask", {
                            x: -100,
                            y: -50,
                            ease: "power2."
                        }).to(".e.mask", {
                            x: 100,
                            y: -100,
                            duration: .25
                        }).to(".e.mask", {
                            x: 0,
                            y: -75,
                            ease: "power2."
                        }).to(".e.mask", {
                            x: 100,
                            y: -100,
                            duration: .25
                        }).to(".e.mask", {
                            x: -75,
                            y: -50,
                            ease: "power2."
                        }).to(".e.mask", {
                            x: 100,
                            y: -100,
                            duration: .25
                        })
                    }
                }),
                cD = dD.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["man", null, [127, 35]],
                            ["face", null, [368, 364.5]],
                            ["string", null, [220, 295]],
                            ["mask", null, [-85, 55]]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.mask", {
                            x: 100,
                            y: -100,
                            scale: .5
                        }), C.p8.set(".e.string", {
                            x: 50,
                            y: -100,
                            scale: .5,
                            transformOrigin: "288px 122px"
                        }), C.p8.set(".e.face", {
                            x: 0,
                            y: -240,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.mask", {
                            x: -150,
                            duration: 1,
                            ease: "power2.out"
                        }).to(".e.mask", {
                            rotate: -3,
                            duration: .05
                        }, .5).to(".e.mask", {
                            rotate: 3,
                            duration: .05
                        }, .55).to(".e.mask", {
                            rotate: -3,
                            duration: .05
                        }, .6).to(".e.mask", {
                            rotate: 3,
                            duration: .05
                        }, .65).to(".e.mask", {
                            rotate: -3,
                            duration: .05
                        }, .7).to(".e.mask", {
                            rotate: 3,
                            duration: .05
                        }, .75).to(".e.mask", {
                            rotate: -3,
                            duration: .05
                        }, .8).to(".e.mask", {
                            rotate: 3,
                            duration: .05
                        }, .85).to(".e.mask", {
                            rotate: -3,
                            duration: .05
                        }, .9).to(".e.mask", {
                            rotate: 3,
                            duration: .05
                        }, .95).to(".e.mask", {
                            x: -175,
                            y: -150,
                            rotate: 220,
                            duration: .2,
                            ease: "power1.out"
                        }, 1).to(".e.mask", {
                            x: -200,
                            y: 600,
                            rotate: 440,
                            duration: .6,
                            ease: "power1.inOut"
                        }, 1.2).to(".e.string", {
                            scaleX: 1.3,
                            duration: 1,
                            ease: "power2.out"
                        }, 0).to(".e.string", {
                            y: -150,
                            rotate: 300,
                            scaleX: .5,
                            duration: .1,
                            ease: "power1.out"
                        }, 1).to(".e.string", {
                            x: 100,
                            y: 600,
                            rotate: 700,
                            duration: .5,
                            ease: "power1.inOut"
                        }, 1.1).to(".e.face", {
                            opacity: 1,
                            duration: .3
                        }, 1.8).to(".e.c", {
                            y: 100,
                            scale: 1.5,
                            duration: 1.25
                        }, 1.8)
                    }
                }),
                mD = He.extend({
                    imageManifest: {
                        car: Promise.resolve().then(s.t.bind(s, 13968, 17)),
                        scribble: Promise.resolve().then(s.t.bind(s, 22771, 17))
                    }
                }),
                hD = mD.extend({
                    elements: Ye.elementsFromImages("car", "scribble"),
                    onLoadComplete() {
                        C.p8.set(".e.scribble", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.scribble", {
                            opacity: 1
                        })
                    }
                }),
                uD = mD.extend({
                    elements: Ye.elementsFromImages("car", "scribble"),
                    initializeTimeline() {
                        this.timeline.to([".e.car", ".e.scribble"], {
                            scale: 1.5
                        })
                    }
                }),
                gD = He.extend({
                    imageManifest: {
                        car: Promise.resolve().then(s.t.bind(s, 13968, 17)),
                        family: Promise.resolve().then(s.t.bind(s, 31174, 17))
                    }
                }),
                yD = gD.extend({
                    elements: [{
                        class: "family-container",
                        type: "container",
                        children: Ye.elementsFromImages("car", "family")
                    }, {
                        class: "flash",
                        type: "div",
                        pos: [-5e3, -5e3],
                        html: ""
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.flash", {
                            opacity: 0
                        }), C.p8.set(".e.car", {
                            x: -60,
                            y: 0
                        }), C.p8.set(".e.family", {
                            x: 90,
                            y: 80,
                            scale: .8
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.family-container", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.family-container", {
                            filter: "blur(4px)",
                            autoRound: !1
                        }).to(".e.family-container", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.family-container", {
                            filter: "blur(10px)",
                            autoRound: !1
                        }).to(".e.family-container", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.family-container", {
                            filter: "blur(4px)",
                            autoRound: !1
                        }).to(".e.family-container", {
                            filter: "blur(0px)",
                            autoRound: !1
                        });
                        this.timeline.to(".e.flash", {
                            opacity: 1,
                            duration: .05,
                            ease: "none"
                        }, 5).to(".e.flash", {
                            opacity: 0,
                            duration: .15
                        }, "+=0.15").to(".e.flash", {
                            opacity: 0,
                            duration: 1
                        }), this.timeline.add(e, 0)
                    }
                }),
                bD = He.extend({
                    imageManifest: {
                        ants: Promise.resolve().then(s.t.bind(s, 66568, 17)),
                        bag: Promise.resolve().then(s.t.bind(s, 21153, 17)),
                        bagEmpty: Promise.resolve().then(s.t.bind(s, 60823, 17)),
                        bugs: Promise.resolve().then(s.t.bind(s, 982, 17)),
                        rolypoly: Promise.resolve().then(s.t.bind(s, 44429, 17)),
                        search: Promise.resolve().then(s.t.bind(s, 91795, 17)),
                        worm: Promise.resolve().then(s.t.bind(s, 61261, 17))
                    }
                }),
                xD = bD.extend({
                    elements: [{
                        class: "bug-container",
                        type: "container",
                        children: [{
                            class: "bugs",
                            type: "img",
                            key: "bugs"
                        }]
                    }, {
                        class: "glass-container",
                        type: "container",
                        children: [{
                            class: "search",
                            type: "img",
                            key: "search"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".bug-container", {
                            overflow: "hidden",
                            width: 400,
                            height: 400,
                            x: 260,
                            y: 70,
                            borderRadius: "100%"
                        }), this.timeline.fromTo(".e.bugs", {
                            x: -200,
                            y: 0,
                            scale: 1.4
                        }, {
                            x: -320,
                            y: -219,
                            scale: 1.8,
                            ease: "back.in"
                        }).to(".e.bugs", {
                            x: 40,
                            y: -269,
                            scale: 1.8,
                            ease: "back.in"
                        }).to(".e.bugs", {
                            x: 60,
                            y: -519,
                            scale: 1.6,
                            ease: "back.in"
                        }).to(".e.bugs", {
                            x: -300,
                            y: -632,
                            scale: 1.6,
                            ease: "back.in"
                        }).to(".e.bugs", {
                            x: -690,
                            y: 88,
                            scale: 2.5,
                            ease: "power3.inOut"
                        }).to(".scene-container", {
                            opacity: 0,
                            scale: 3,
                            y: -50,
                            ease: "back.in"
                        })
                    }
                }),
                fD = bD.extend({
                    stepDuration: .4,
                    elements: [{
                        class: "bug-container",
                        type: "container",
                        children: [{
                            class: "bug",
                            type: "img",
                            key: "worm"
                        }]
                    }],
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.bug", {
                            y: -2e3,
                            delay: .1,
                            duration: .25,
                            rotate: -180,
                            ease: "back.in"
                        }), Ye.squashOnce("bug-container", .3)
                    }
                }),
                vD = bD.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "bug-container",
                        type: "container",
                        children: [{
                            class: "bug",
                            type: "img",
                            key: "ants"
                        }, {
                            class: "bug",
                            type: "img",
                            key: "ants"
                        }, {
                            class: "bug",
                            type: "img",
                            key: "ants"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.bug:nth-child(1)", {
                            scaleX: -.6,
                            scaleY: .6,
                            x: -200,
                            y: -250
                        }), C.p8.set(".e.bug:nth-child(2)", {
                            x: 200,
                            y: -50,
                            scale: .8
                        }), C.p8.set(".e.bug:nth-child(3)", {
                            y: 150
                        })
                    },
                    onDiscreteProgress(e) {
                        const t = Math.floor(e);
                        33 === t ? C.p8.timeline().to(".e.bug:nth-child(3)", {
                            y: -2e3,
                            delay: .1,
                            duration: .5,
                            rotate: -180,
                            ease: "power3.out"
                        }) : 66 === t ? C.p8.timeline().to(".e.bug:nth-child(2)", {
                            y: -2e3,
                            delay: .1,
                            duration: .5,
                            rotate: 180,
                            ease: "power3.out"
                        }) : t >= 99 && C.p8.timeline().to(".e.bug:nth-child(1)", {
                            y: -2e3,
                            delay: .1,
                            duration: .5,
                            rotate: -180,
                            ease: "power3.out"
                        })
                    }
                }),
                kD = bD.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "bug-container",
                        type: "container",
                        children: [{
                            class: "bug",
                            type: "img",
                            key: "rolypoly"
                        }]
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.bug", {
                            x: 200
                        }).to(".e.bug", {
                            scaleX: -1,
                            x: -50
                        }).to(".e.bug", {
                            x: 0,
                            rotate: 180
                        }).to(".e.bug", {
                            y: -1e3
                        })
                    }
                }),
                PD = bD.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "bag-container",
                        type: "container",
                        children: [{
                            class: "bagEmpty",
                            type: "img",
                            key: "bagEmpty"
                        }, {
                            class: "bag",
                            type: "img",
                            key: "bag"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.bag", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("bagEmpty", "bag", .5)
                    }
                }),
                wD = He.extend({
                    imageManifest: {
                        apple: Promise.resolve().then(s.t.bind(s, 15411, 17)),
                        bag: Promise.resolve().then(s.t.bind(s, 83954, 17)),
                        ick: Promise.resolve().then(s.t.bind(s, 54965, 17)),
                        nose: Promise.resolve().then(s.t.bind(s, 92553, 17)),
                        shirt: Promise.resolve().then(s.t.bind(s, 17946, 17))
                    }
                }),
                TD = wD.extend({
                    elements: [{
                        class: "teacher-container",
                        type: "container",
                        children: [{
                            class: "apple",
                            type: "img",
                            key: "apple"
                        }, {
                            class: "bag",
                            type: "img",
                            key: "bag"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.apple", {
                            scale: .2,
                            rotate: 180
                        }), this.timeline.to(".e.bag", {
                            rotate: 180,
                            y: -50
                        }).to(".e.apple", {
                            y: 500,
                            rotate: -90,
                            ease: "bounce.out",
                            duration: .3
                        })
                    }
                }),
                SD = wD.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "teacher-container",
                        type: "container",
                        children: [{
                            class: "apple",
                            type: "img",
                            key: "apple"
                        }, {
                            class: "bag",
                            type: "img",
                            key: "bag"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.fromTo(".e.bag", {
                            rotate: 180,
                            y: -50
                        }, {
                            y: -250,
                            opacity: 0,
                            duration: .25
                        }), C.p8.fromTo(".e.apple", {
                            scale: .2,
                            y: 500,
                            rotate: -90
                        }, {
                            scale: .8,
                            y: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.apple", {
                            y: -2e3,
                            delay: .1,
                            duration: .5,
                            rotate: 0,
                            ease: "back.in"
                        }), Ye.squashOnce("teacher-container", .3)
                    }
                }),
                MD = wD.extend({
                    elements: [{
                        class: "teacher-container",
                        type: "container",
                        children: [{
                            class: "shirt",
                            type: "img",
                            key: "shirt"
                        }, {
                            class: "apple",
                            type: "img",
                            key: "apple"
                        }]
                    }],
                    initializeTimeline() {
                        this.timeline.fromTo(".e.apple", {
                            scale: .3,
                            x: -100,
                            y: 200
                        }, {
                            rotate: 40,
                            ease: "power2.inOut"
                        }).to(".e.apple", {
                            rotate: -40,
                            ease: "power2.inOut"
                        }).to(".e.apple", {
                            rotate: 40,
                            ease: "power2.inOut"
                        }).to(".e.apple", {
                            rotate: -40,
                            ease: "power2.inOut"
                        }).to(".e.apple", {
                            rotate: 40,
                            ease: "power2.inOut"
                        }).to(".e.apple", {
                            rotate: -40,
                            ease: "power2.inOut"
                        }).to(".e.apple", {
                            rotate: 40,
                            ease: "power2.inOut"
                        }).to(".e.apple", {
                            rotate: -40,
                            ease: "power2.inOut"
                        }).to(".e.apple", {
                            rotate: 40,
                            ease: "power2.inOut"
                        }).to(".e.apple", {
                            rotate: 0,
                            ease: "power2.inOut"
                        }).to(".e.shirt", {
                            opacity: 0,
                            ease: "power2.inOut"
                        })
                    }
                }),
                CD = wD.extend({
                    stepDuration: 1,
                    lastStepDuration: 1.25,
                    elements: [{
                        class: "teacher-container",
                        type: "container",
                        children: [{
                            class: "nose",
                            type: "img",
                            key: "nose"
                        }, {
                            class: "apple",
                            type: "img",
                            key: "apple"
                        }, {
                            class: "ick",
                            type: "img",
                            key: "ick"
                        }]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.ick", {
                            hidden: !0
                        }), C.p8.to(".teacher-container", {
                            scale: .6,
                            y: 150
                        }), C.p8.fromTo(".e.nose", {
                            opacity: 0
                        }, {
                            opacity: 1,
                            y: -650
                        }), C.p8.fromTo(".e.apple", {
                            scale: .4,
                            x: -100,
                            y: 200
                        }, {
                            scale: 1,
                            x: 0,
                            y: 0
                        })
                    },
                    onDiscreteProgress(e) {
                        50 === Math.floor(e) ? C.p8.timeline().to(".e.nose", {
                            scaleX: 1.2,
                            scaleY: .9,
                            y: -750
                        }) : (Ye.squashOnce("nose", .5), Ye.squashTransition("apple", "ick", .25))
                    }
                }),
                DD = wD.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "teacher-container",
                        type: "container",
                        children: [{
                            class: "nose",
                            type: "img",
                            key: "nose"
                        }, {
                            class: "ick",
                            type: "img",
                            key: "ick"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.fromTo(".teacher-container", {
                            scale: .6,
                            y: 150
                        }, {
                            scale: 1,
                            y: 0
                        }), C.p8.fromTo(".e.nose", {
                            scaleX: 1.2,
                            scaleY: .9,
                            y: -750
                        }, {
                            opacity: 0,
                            y: -800
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.ick", {
                            x: 1e3,
                            delay: .1,
                            duration: .5,
                            ease: "back.in"
                        }), Ye.squashOnce("teacher-container", .3)
                    }
                }),
                FD = He.extend({
                    imageManifest: {
                        bask: Promise.resolve().then(s.t.bind(s, 37330, 17)),
                        handstand: Promise.resolve().then(s.t.bind(s, 43632, 17)),
                        devil: Promise.resolve().then(s.t.bind(s, 67307, 17)),
                        nervous: Promise.resolve().then(s.t.bind(s, 71765, 17)),
                        noJumper: Promise.resolve().then(s.t.bind(s, 10550, 17)),
                        rope0: Promise.resolve().then(s.t.bind(s, 45724, 17)),
                        rope1: Promise.resolve().then(s.t.bind(s, 73263, 17)),
                        rope2: Promise.resolve().then(s.t.bind(s, 5539, 17)),
                        rope3: Promise.resolve().then(s.t.bind(s, 90753, 17))
                    }
                }),
                zD = FD.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "devil",
                        type: "img",
                        pos: [0, 0],
                        key: "devil"
                    }, {
                        class: "rope0",
                        type: "img",
                        pos: [0, 0],
                        key: "rope0"
                    }, {
                        class: "rope1",
                        type: "img",
                        pos: [0, 0],
                        key: "rope1"
                    }, {
                        class: "rope2",
                        type: "img",
                        pos: [0, 0],
                        key: "rope2"
                    }, {
                        class: "rope3",
                        type: "img",
                        pos: [0, 0],
                        key: "rope3"
                    }],
                    initializeTimeline() {
                        C.p8.timeline().to(".e.rope2", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .5,
                            ease: "power2.out"
                        }).to(".e.rope3", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .2
                        }).to(".e.rope1", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .5
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.devil", {
                            repeat: 1,
                            yoyo: !0,
                            y: -200,
                            ease: "power2.out",
                            duration: .3
                        })
                    }
                }),
                LD = FD.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "nervous",
                        type: "img",
                        pos: [0, 0],
                        key: "nervous"
                    }, {
                        class: "rope0",
                        type: "img",
                        pos: [0, 0],
                        key: "rope0"
                    }, {
                        class: "rope1",
                        type: "img",
                        pos: [0, 0],
                        key: "rope1"
                    }, {
                        class: "rope2",
                        type: "img",
                        pos: [0, 0],
                        key: "rope2"
                    }, {
                        class: "rope3",
                        type: "img",
                        pos: [0, 0],
                        key: "rope3"
                    }],
                    initializeTimeline() {
                        C.p8.timeline().to(".e.rope2", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .25,
                            ease: "power2.out"
                        }).to(".e.rope3", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .1
                        }).to(".e.rope1", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .25
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.nervous", {
                            repeat: 1,
                            yoyo: !0,
                            y: -200,
                            ease: "power2.out",
                            duration: .15
                        })
                    }
                }),
                RD = FD.extend({
                    lastStepDuration: .75,
                    elements: [{
                        class: "devil",
                        type: "img",
                        pos: [0, 0],
                        key: "devil"
                    }, {
                        class: "handstand",
                        type: "img",
                        pos: [0, 0],
                        key: "handstand"
                    }, {
                        class: "rope0",
                        type: "img",
                        pos: [0, 0],
                        key: "rope0"
                    }, {
                        class: "rope1",
                        type: "img",
                        pos: [0, 0],
                        key: "rope1"
                    }, {
                        class: "rope2",
                        type: "img",
                        pos: [0, 0],
                        key: "rope2"
                    }, {
                        class: "rope3",
                        type: "img",
                        pos: [0, 0],
                        key: "rope3"
                    }],
                    initializeTimeline() {
                        C.p8.timeline().to(".e.rope2", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .25,
                            ease: "power2.out"
                        }).to(".e.rope3", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .1
                        }).to(".e.rope1", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .25
                        }), C.p8.set(".e.handstand", {
                            hidden: !0
                        }), this.timeline.to(".e.devil", {
                            rotate: 180,
                            onComplete: () => {
                                Ye.squashTransition("devil", "handstand", .15)
                            }
                        })
                    }
                }),
                ID = FD.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "handstand",
                        type: "img",
                        pos: [0, 0],
                        key: "handstand"
                    }, {
                        class: "rope0",
                        type: "img",
                        pos: [0, 0],
                        key: "rope0"
                    }, {
                        class: "rope1",
                        type: "img",
                        pos: [0, 0],
                        key: "rope1"
                    }, {
                        class: "rope2",
                        type: "img",
                        pos: [0, 0],
                        key: "rope2"
                    }, {
                        class: "rope3",
                        type: "img",
                        pos: [0, 0],
                        key: "rope3"
                    }],
                    initializeTimeline() {
                        C.p8.timeline().to(".e.rope2", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .25,
                            ease: "power2.out"
                        }).to(".e.rope3", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .1
                        }).to(".e.rope1", {
                            repeat: -1,
                            yoyo: !0,
                            opacity: 0,
                            duration: .25
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.handstand", {
                            repeat: 1,
                            yoyo: !0,
                            y: -200,
                            ease: "power2.out",
                            duration: .15
                        })
                    }
                }),
                OD = FD.extend({
                    elements: [{
                        class: "noJumper",
                        type: "img",
                        pos: [65, 0],
                        key: "noJumper"
                    }, {
                        class: "bask",
                        type: "img",
                        pos: [0, 0],
                        key: "bask"
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.bask", {
                            scale: 1.8,
                            x: 25,
                            ease: "power3.inOut"
                        })
                    }
                }),
                BD = He.extend({
                    imageManifest: {
                        burn: Promise.resolve().then(s.t.bind(s, 85867, 17)),
                        rope: Promise.resolve().then(s.t.bind(s, 3072, 17)),
                        run: Promise.resolve().then(s.t.bind(s, 72664, 17)),
                        shorts: Promise.resolve().then(s.t.bind(s, 62997, 17)),
                        towel: Promise.resolve().then(s.t.bind(s, 90268, 17)),
                        pants1: Promise.resolve().then(s.t.bind(s, 67921, 17)),
                        pants2: Promise.resolve().then(s.t.bind(s, 9710, 17))
                    }
                }),
                YD = BD.extend({
                    elements: [{
                        class: "gym-container",
                        type: "container",
                        children: [{
                            class: "pants1",
                            type: "img",
                            key: "pants1"
                        }, {
                            class: "pants2",
                            type: "img",
                            key: "pants2"
                        }, {
                            class: "shorts",
                            type: "img",
                            key: "shorts"
                        }, {
                            class: "towel",
                            type: "img",
                            key: "towel"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.pants1", {
                            opacity: 0
                        }), C.p8.set(".e.shorts", {
                            hidden: !0,
                            scale: .8,
                            y: -200
                        }), C.p8.set(".e.towel", {
                            scale: 1.5
                        }), this.timeline.to(".e.towel", {
                            rotate: -90,
                            onComplete: () => {
                                Ye.squashOnce("gym-container", .25), Ye.squashTransition("pants2", "shorts", .25), C.p8.timeline().to(".e.pants1", {
                                    opacity: 1,
                                    y: 500,
                                    x: -50,
                                    ease: "bounce.out",
                                    duration: .5,
                                    delay: .25
                                })
                            }
                        }).to(".e.towel", {
                            rotate: -180,
                            x: -1500,
                            duration: .25
                        })
                    }
                }),
                AD = BD.extend({
                    elements: [{
                        class: "gym-container",
                        type: "container",
                        children: [{
                            class: "leftLeg",
                            type: "img",
                            key: "run"
                        }, {
                            class: "rightLeg",
                            type: "img",
                            key: "run"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.leftLeg", {
                            rotate: 65,
                            y: -45,
                            x: 45
                        });
                        const e = C.p8.timeline({
                            repeat: 8,
                            yoyo: !0
                        }).to(".e.leftLeg", {
                            rotate: -15
                        }, 0).to(".e.rightLeg", {
                            rotate: 65
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                HD = BD.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "gym-container",
                        type: "container",
                        children: [{
                            class: "rope",
                            type: "img",
                            key: "rope"
                        }]
                    }],
                    onLoadComplete() {
                        Ye.startShake("gym-container", 1, 1, 1)
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("rope", .5)
                    }
                }),
                GD = BD.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "gym-container",
                        type: "container",
                        children: [{
                            class: "rope",
                            type: "img",
                            key: "rope"
                        }]
                    }],
                    onLoadComplete() {
                        Ye.startShake("gym-container", 2, 2, 2)
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("rope", .75)
                    }
                }),
                VD = BD.extend({
                    stepDuration: 2,
                    elements: [{
                        class: "gym-container",
                        type: "container",
                        children: [{
                            class: "rope",
                            type: "img",
                            key: "rope"
                        }, {
                            class: "burn",
                            type: "img",
                            key: "burn"
                        }]
                    }],
                    initializeTimeline() {
                        Ye.startShake("gym-container", 4, 3, 3), C.p8.set(".e.burn", {
                            y: 500,
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.rope", {
                            y: -800,
                            opacity: 0,
                            duration: .4,
                            ease: "back.inOut"
                        }, 0).to(".e.burn", {
                            y: 0,
                            opacity: 1,
                            duration: .4,
                            ease: "back.inOut",
                            delay: .15
                        }, 0)
                    }
                }),
                ED = He.extend({
                    imageManifest: {
                        eyes: Promise.resolve().then(s.t.bind(s, 50070, 17)),
                        open: Promise.resolve().then(s.t.bind(s, 16628, 17)),
                        school: Promise.resolve().then(s.t.bind(s, 37043, 17)),
                        yearbook: Promise.resolve().then(s.t.bind(s, 77504, 17))
                    }
                }),
                qD = ED.extend({
                    lastStepDuration: .25,
                    elements: [{
                        class: "band-container",
                        type: "container",
                        children: [{
                            class: "school",
                            type: "img",
                            key: "school"
                        }]
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.school", {
                            scale: 3,
                            filter: "blur(50px)",
                            onComplete: () => {
                                C.p8.to(".e.school", {
                                    opacity: 0,
                                    duration: .25
                                })
                            }
                        })
                    }
                }),
                ND = ED.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "band-container",
                        type: "container",
                        children: [{
                            class: "yearbook",
                            type: "img",
                            key: "yearbook"
                        }, {
                            class: "open",
                            type: "img",
                            key: "open"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.open", {
                            hidden: !0
                        }), C.p8.fromTo(".e.yearbook", {
                            opacity: 0,
                            y: 100
                        }, {
                            opacity: 1,
                            y: 0,
                            ease: "back.out",
                            duration: .25,
                            delay: .1
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("yearbook", "open", .35)
                    }
                }),
                XD = ED.extend({
                    stepDuration: .5,
                    lastStepDuration: 1,
                    elements: [{
                        class: "band-container",
                        type: "container",
                        children: [{
                            class: "open",
                            type: "img",
                            key: "open"
                        }]
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.open", {
                            y: -10,
                            scale: 1.2,
                            rotate: -5,
                            ease: "back.out",
                            duration: .25
                        }).to(".e.open", {
                            y: -40,
                            x: -50,
                            scale: 2,
                            rotate: -10,
                            ease: "back.out",
                            duration: .25
                        }).to(".e.open", {
                            y: -80,
                            x: -120,
                            scale: 3,
                            rotate: -15,
                            ease: "back.out",
                            duration: .25
                        })
                    }
                }),
                WD = ED.extend({
                    elements: [{
                        class: "band-container",
                        type: "container",
                        children: [{
                            class: "eyes",
                            type: "img",
                            key: "eyes"
                        }]
                    }],
                    initializeTimeline() {
                        this.timeline.to(".eyes", {
                            scale: 4,
                            duration: 3,
                            ease: "power1.in"
                        }, 0).to(".eyes", {
                            filter: "blur(10px)",
                            duration: 1.5
                        }, 1.5).to(".eyes", {
                            opacity: 0,
                            duration: .25
                        }, 2.75)
                    }
                }),
                UD = He.extend({
                    imageManifest: {
                        phone: Promise.resolve().then(s.t.bind(s, 32415, 17)),
                        phonePush: Promise.resolve().then(s.t.bind(s, 80792, 17)),
                        devil: Promise.resolve().then(s.t.bind(s, 10757, 17)),
                        sweat: Promise.resolve().then(s.t.bind(s, 61215, 17))
                    }
                }),
                $D = UD.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "phone",
                        type: "img",
                        key: "phone"
                    }, {
                        class: "phonePush",
                        type: "img",
                        key: "phonePush"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.phonePush", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.set(".e.phone", {
                            hidden: !0
                        }), C.p8.set(".e.phonePush", {
                            hidden: !1
                        }), Ye.scaleBounce("phonePush", .95, .1)
                    }
                }),
                jD = UD.extend({
                    stepDuration: 1.25,
                    elements: [{
                        class: "sweat-container",
                        type: "container",
                        children: [{
                            class: "devil",
                            type: "img",
                            key: "devil"
                        }, {
                            class: "sweat",
                            type: "img",
                            key: "sweat"
                        }]
                    }],
                    sweatPE: null,
                    initializeTimeline() {
                        this.sweatPE = Ye.addParticleEmitter({
                            container: "sweat-container",
                            image: "sweat",
                            settings: {
                                frequency: .4,
                                minSize: 75,
                                maxSize: 150,
                                angle: 180,
                                randomAngle: !1,
                                boundaries: {
                                    left: 300,
                                    right: 330
                                },
                                duration: .1
                            }
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("sweat-container"), C.p8.timeline().to(".particle-emitter", {
                            x: 200,
                            duration: .35,
                            opacity: 0
                        })
                    }
                }),
                KD = He.extend({
                    imageManifest: {
                        bonnet: Promise.resolve().then(s.t.bind(s, 23385, 17)),
                        closet: Promise.resolve().then(s.t.bind(s, 33056, 17)),
                        door: Promise.resolve().then(s.t.bind(s, 45457, 17)),
                        jacketYellow: Promise.resolve().then(s.t.bind(s, 20647, 17)),
                        jacketWhite: Promise.resolve().then(s.t.bind(s, 23743, 17)),
                        jacketGray: Promise.resolve().then(s.t.bind(s, 14302, 17)),
                        jacketBrown: Promise.resolve().then(s.t.bind(s, 48404, 17)),
                        tie: Promise.resolve().then(s.t.bind(s, 11884, 17))
                    }
                }),
                ZD = KD.extend({
                    stepDuration: 1.25,
                    elements: [{
                        class: "closet-container",
                        type: "container",
                        children: [{
                            class: "closet",
                            type: "img",
                            key: "closet"
                        }, {
                            class: "door",
                            type: "img",
                            key: "door"
                        }]
                    }],
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.door", {
                            x: -250,
                            ease: "back.out",
                            duration: .5
                        }).to(".closet-container", {
                            scale: 3,
                            opacity: 0,
                            ease: "powerq.inOut",
                            duration: .5,
                            x: -200
                        }, .55)
                    }
                }),
                JD = KD.extend({
                    stepDuration: 1.75,
                    elements: [{
                        class: "closet-container",
                        type: "container",
                        children: [{
                            class: "jacketGray",
                            type: "img",
                            pos: [0, -500],
                            key: "jacketGray"
                        }, {
                            class: "jacketYellow",
                            type: "img",
                            key: "jacketYellow"
                        }, {
                            class: "jacketWhite",
                            type: "img",
                            pos: [0, 500],
                            key: "jacketWhite"
                        }, {
                            class: "jacketBrown",
                            type: "img",
                            pos: [0, 1e3],
                            key: "jacketBrown"
                        }]
                    }],
                    closet: null,
                    initializeTimeline() {
                        Ye.addInfiniteWiggle("jacketYellow"), this.closet = C.p8.timeline().set(".closet-container", {
                            opacity: 0,
                            scale: .8
                        }).to(".closet-container", {
                            x: -750,
                            scale: 1,
                            opacity: 1,
                            ease: "backOut"
                        }).to(".closet-container", {
                            x: 250,
                            repeat: -1,
                            yoyo: !0,
                            ease: "power1.inOut",
                            duration: 5
                        })
                    },
                    onDiscreteProgress() {
                        this.closet.kill(), C.p8.timeline().to(".closet-container", {
                            x: 0
                        }).to(".e.jacketGray", {
                            x: -100,
                            opacity: 0,
                            ease: "power2.out"
                        }, .25).to(".e.jacketBrown", {
                            x: 100,
                            opacity: 0,
                            ease: "power2.out"
                        }, .15).to(".e.jacketWhite", {
                            x: 100,
                            opacity: 0,
                            ease: "power2.out"
                        }, .35).to(".e.jacketYellow", {
                            scale: 1.25,
                            ease: "back.out",
                            duration: .75
                        }, .5)
                    }
                }),
                _D = KD.extend({
                    elements: [{
                        class: "closet-container",
                        type: "container",
                        children: [{
                            class: "jacketYellow",
                            type: "img",
                            key: "jacketYellow"
                        }, {
                            class: "tie",
                            type: "img",
                            key: "tie"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.jacketYellow", {
                            scale: 1.25
                        }), C.p8.timeline().set(".e.tie", {
                            scale: 1,
                            x: 200,
                            y: 200,
                            rotate: -180,
                            opacity: 0
                        }).to(".e.tie", {
                            opacity: 1,
                            y: 100,
                            ease: "back.out"
                        }, .2);
                        const e = C.p8.timeline().to(".e.tie", {
                            x: -10,
                            y: -25,
                            rotate: 0,
                            scale: .6
                        }, 0);
                        this.timeline.add(e)
                    }
                }),
                QD = KD.extend({
                    stepDuration: 1.5,
                    elements: [{
                        class: "closet-container",
                        type: "container",
                        children: [{
                            class: "jacketYellow",
                            type: "img",
                            key: "jacketYellow"
                        }, {
                            class: "tie",
                            type: "img",
                            key: "tie"
                        }, {
                            class: "bonnet",
                            type: "img",
                            key: "bonnet"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.jacketYellow", {
                            scale: 1.25
                        }), C.p8.set(".e.tie", {
                            scale: .6,
                            x: -10,
                            y: -25
                        }), C.p8.timeline().set(".e.bonnet", {
                            scale: .65,
                            x: -125,
                            y: -400,
                            rotate: -45,
                            opacity: 0
                        }).to(".e.bonnet", {
                            opacity: 1,
                            y: -300,
                            ease: "back.out"
                        }, .2), C.p8.timeline().to(".e.jacketYellow", {
                            y: "+=200",
                            ease: "back.inOut"
                        }, 0).to(".e.tie", {
                            y: "+=200",
                            ease: "back.inOut"
                        }, .1)
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.bonnet", {
                            scale: .55,
                            x: 0,
                            y: -325,
                            rotate: 0
                        }).to(".e.tie", {
                            y: 25,
                            ease: "back.inOut",
                            onComplete: () => {
                                Ye.squashOnce("closet-container")
                            }
                        }, 0).to(".e.jacketYellow", {
                            y: 50,
                            ease: "back.inOut"
                        }, .1)
                    }
                }),
                eF = He.extend({
                    imageManifest: {
                        cheer: Promise.resolve().then(s.t.bind(s, 95327, 17))
                    }
                }),
                tF = eF.extend({
                    elements: [{
                        class: "protest-container",
                        type: "container",
                        children: [{
                            class: "cheer",
                            type: "img",
                            key: "cheer"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.timeline({
                            repeat: -1
                        }).to(".e.cheer", {
                            scale: 1.2,
                            duration: .75,
                            ease: "power3.out"
                        }).to(".e.cheer", {
                            scale: 1,
                            duration: .75,
                            ease: "power3.in"
                        })
                    }
                }),
                sF = eF.extend({
                    elements: [{
                        class: "protest-container",
                        type: "container",
                        children: [{
                            class: "cheer",
                            type: "img",
                            key: "cheer"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.timeline({
                            repeat: -1
                        }).to(".e.cheer", {
                            scale: 1.4,
                            duration: .5,
                            ease: "power3.out"
                        }).to(".e.cheer", {
                            scale: 1,
                            duration: .5,
                            ease: "power3.in"
                        })
                    }
                }),
                iF = eF.extend({
                    elements: [{
                        class: "protest-container",
                        type: "container",
                        children: [{
                            class: "cheer",
                            type: "img",
                            key: "cheer"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.timeline({
                            repeat: -1
                        }).to(".e.cheer", {
                            scale: 1.6,
                            duration: .25,
                            ease: "power3.out"
                        }).to(".e.cheer", {
                            scale: 1,
                            duration: .25,
                            ease: "power3.in"
                        })
                    }
                }),
                oF = He.extend({
                    imageManifest: {
                        churn: Promise.resolve().then(s.t.bind(s, 62150, 17)),
                        handle: Promise.resolve().then(s.t.bind(s, 60030, 17))
                    }
                }),
                nF = oF.extend({
                    elements: [{
                        class: "protest-container",
                        type: "container",
                        children: [{
                            class: "churn",
                            type: "img",
                            key: "churn"
                        }, {
                            class: "handle",
                            type: "img",
                            key: "handle"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.handle", {
                            x: 12,
                            y: -67
                        });
                        const e = C.p8.timeline().to(".e.handle", {
                            repeat: 4,
                            rotate: 360,
                            ease: "linear"
                        });
                        this.timeline.add(e)
                    }
                }),
                aF = He.extend({
                    imageManifest: {
                        mustache: Promise.resolve().then(s.t.bind(s, 74742, 17)),
                        sign: Promise.resolve().then(s.t.bind(s, 12136, 17)),
                        parent: Promise.resolve().then(s.t.bind(s, 10555, 17)),
                        sword: Promise.resolve().then(s.t.bind(s, 50940, 17)),
                        wingsfire: Promise.resolve().then(s.t.bind(s, 69627, 17))
                    }
                }),
                rF = aF.extend({
                    elements: [{
                        class: "sign-container",
                        type: "container",
                        children: [{
                            class: "sign",
                            type: "img",
                            key: "sign"
                        }, {
                            class: "parent",
                            type: "img",
                            key: "parent"
                        }]
                    }],
                    initializeTimeline() {
                        this.timeline.fromTo(".e.parent", {
                            clipPath: "inset(750px 0px 0px 0px)"
                        }, {
                            clipPath: "inset(350px 0px 0px 0px)"
                        })
                    }
                }),
                lF = aF.extend({
                    elements: [{
                        class: "sign-container",
                        type: "container",
                        children: [{
                            class: "sign",
                            type: "img",
                            key: "sign"
                        }, {
                            class: "parent",
                            type: "img",
                            key: "parent"
                        }, {
                            class: "mustache",
                            type: "img",
                            key: "mustache"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.timeline().to(".sign-container", {
                            scale: 2,
                            y: 200,
                            ease: "back.out",
                            duration: .5
                        }, .2), this.timeline.fromTo(".e.mustache", {
                            clipPath: "inset(0px 600px 0px 0px)"
                        }, {
                            clipPath: "inset(0px 420px 0px 0px)"
                        })
                    }
                }),
                dF = aF.extend({
                    elements: [{
                        class: "sign-container",
                        type: "container",
                        children: [{
                            class: "sign",
                            type: "img",
                            key: "sign"
                        }, {
                            class: "parent",
                            type: "img",
                            key: "parent"
                        }, {
                            class: "mustache",
                            type: "img",
                            key: "mustache"
                        }, {
                            class: "sword",
                            type: "img",
                            key: "sword"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.timeline().fromTo(".sign-container", {
                            scale: 2,
                            y: 200
                        }, {
                            scale: 1.5,
                            y: 125,
                            x: 25,
                            ease: "back.out",
                            duration: .5,
                            rotate: -15
                        }, .2), this.timeline.fromTo(".e.sword", {
                            clipPath: "inset(0px 0px 840px 0px)"
                        }, {
                            clipPath: "inset(0px 0px 420px 0px)"
                        })
                    }
                }),
                pF = aF.extend({
                    elements: [{
                        class: "sign-container",
                        type: "container",
                        children: [{
                            class: "sign",
                            type: "img",
                            key: "sign"
                        }, {
                            class: "parent",
                            type: "img",
                            key: "parent"
                        }, {
                            class: "mustache",
                            type: "img",
                            key: "mustache"
                        }, {
                            class: "sword",
                            type: "img",
                            key: "sword"
                        }, {
                            class: "wingsfire",
                            type: "img",
                            key: "wingsfire"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.timeline().fromTo(".sign-container", {
                            scale: 1.5,
                            y: 125,
                            x: 25,
                            rotate: -15
                        }, {
                            scale: 1.2,
                            y: 0,
                            x: 0,
                            ease: "back.out",
                            duration: .5,
                            rotate: 0
                        }), C.p8.timeline({
                            repeat: -1,
                            duration: .1,
                            yoyo: !0
                        }).fromTo(".e.wingsfire", {
                            opacity: .3
                        }, {
                            opacity: 1
                        })
                    }
                }),
                cF = He.extend({
                    imageManifest: {
                        lawn1: Promise.resolve().then(s.t.bind(s, 60822, 17)),
                        lawn2: Promise.resolve().then(s.t.bind(s, 16178, 17)),
                        lawn3: Promise.resolve().then(s.t.bind(s, 24107, 17)),
                        sign: Promise.resolve().then(s.t.bind(s, 44339, 17)),
                        workitin: Promise.resolve().then(s.t.bind(s, 36639, 17))
                    }
                }),
                mF = cF.extend({
                    stepDuration: .3,
                    elements: [{
                        class: "lawn-container",
                        type: "container",
                        children: [{
                            class: "lawn1",
                            type: "img",
                            key: "lawn1"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".lawn1", {
                            scale: .4
                        })
                    },
                    onDiscreteProgress(e) {
                        C.p8.timeline().to(".lawn-container", {
                            y: -100,
                            ease: "power2.out",
                            duration: .15
                        }).to(".lawn-container", {
                            y: 0,
                            ease: "power2.inOut",
                            duration: .15
                        }), 25 === e ? C.p8.timeline().to(".lawn1", {
                            scale: .55,
                            duration: .25
                        }) : 50 === e ? C.p8.timeline().to(".lawn1", {
                            scale: .7,
                            duration: .25
                        }) : 75 === e ? C.p8.timeline().to(".lawn1", {
                            scale: .85,
                            duration: .25
                        }) : 100 === e && C.p8.timeline().to(".lawn1", {
                            scale: 1,
                            duration: .25
                        })
                    }
                }),
                hF = cF.extend({
                    stepDuration: .75,
                    elements: [{
                        class: "lawn-container",
                        type: "container",
                        children: [{
                            class: "lawn1",
                            type: "img",
                            key: "lawn1"
                        }, {
                            class: "lawn2",
                            type: "img",
                            key: "lawn2"
                        }, {
                            class: "sign",
                            type: "img",
                            key: "sign"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.lawn2", {
                            hidden: !0
                        }), C.p8.set(".e.sign", {
                            y: -300,
                            x: -20,
                            rotate: -25
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.sign", {
                            y: 0,
                            ease: "back.in",
                            duration: .2,
                            x: 0,
                            rotate: 0,
                            onStart: () => {
                                Ye.squashTransition("lawn1", "lawn2", .25)
                            }
                        })
                    }
                }),
                uF = cF.extend({
                    elements: [{
                        class: "lawn-container",
                        type: "container",
                        children: [{
                            class: "lawn2",
                            type: "img",
                            key: "lawn2"
                        }, {
                            class: "lawn3",
                            type: "img",
                            key: "lawn3"
                        }, {
                            class: "sign",
                            type: "img",
                            key: "sign"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".lawn3", {
                            hidden: !0
                        }), C.p8.timeline().to(".lawn-container", {
                            scale: 1.8,
                            x: 275,
                            y: -100,
                            ease: "back.out",
                            duration: .2
                        }, .2)
                    },
                    onProgress(e) {
                        const t = Math.floor(e);
                        10 === t || 20 === t || 30 === t ? C.p8.timeline().to(".e.sign", {
                            y: -50,
                            ease: "power2.out",
                            duration: .5
                        }).to(".e.sign", {
                            y: 0,
                            ease: "bounce.out",
                            duration: .5
                        }) : 40 === t || 50 === t || 60 === t || 70 === t ? C.p8.timeline().to(".e.sign", {
                            y: -150,
                            ease: "power3.out",
                            duration: .5
                        }).to(".e.sign", {
                            y: 0,
                            ease: "bounce.out",
                            duration: .25
                        }) : 80 === t && C.p8.timeline().to(".e.sign", {
                            y: -200,
                            ease: "power4.out",
                            duration: .75
                        }).to(".e.sign", {
                            y: 26,
                            ease: "linear",
                            duration: .1,
                            onComplete: () => {
                                Ye.squashTransition("lawn2", "lawn3", .1)
                            }
                        })
                    }
                }),
                gF = He.extend({
                    imageManifest: {
                        brain: Promise.resolve().then(s.t.bind(s, 78963, 17)),
                        cool: Promise.resolve().then(s.t.bind(s, 92158, 17)),
                        crawl: Promise.resolve().then(s.t.bind(s, 41719, 17)),
                        floorboards: Promise.resolve().then(s.t.bind(s, 4833, 17)),
                        floorboardsDown: Promise.resolve().then(s.t.bind(s, 1309, 17)),
                        icecream: Promise.resolve().then(s.t.bind(s, 58455, 17)),
                        scoop: Promise.resolve().then(s.t.bind(s, 27175, 17))
                    }
                }),
                yF = gF.extend({
                    stepDuration: .25,
                    elements: [{
                        class: "sneak-container",
                        type: "container",
                        children: [{
                            class: "crawl",
                            type: "img",
                            key: "crawl"
                        }]
                    }],
                    onDiscreteProgress(e) {
                        Ye.squashOnce("sneak-container", .4, "x");
                        let t = -1;
                        t = 66 === Math.floor(e) ? 1 : -1, C.p8.timeline().to(".crawl", {
                            scaleX: t,
                            duration: .25
                        })
                    }
                }),
                bF = gF.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "sneak-container",
                        type: "container",
                        children: [{
                            class: "floorboardsDown",
                            type: "img",
                            key: "floorboardsDown"
                        }, {
                            class: "floorboards",
                            type: "img",
                            key: "floorboards"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.floorboards", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("floorboardsDown", "floorboards", .35)
                    }
                }),
                xF = gF.extend({
                    stepDuration: 2,
                    elements: [{
                        class: "sneak-container",
                        type: "container",
                        children: [{
                            class: "icecream",
                            type: "img",
                            key: "icecream"
                        }, {
                            class: "scoop",
                            type: "img",
                            key: "scoop"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.scoop", {
                            x: -200,
                            y: -300
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.scoop", {
                            rotate: 25,
                            y: -145,
                            x: -250,
                            ease: "power2.inOut",
                            duration: 1.2
                        }).to(".e.scoop", {
                            y: -300,
                            x: 150,
                            rotate: -20,
                            duration: .3,
                            ease: "power3.out",
                            onStart: () => {
                                Ye.squashOnce("sneak-container")
                            }
                        })
                    }
                }),
                fF = gF.extend({
                    elements: [{
                        class: "sneak-container",
                        type: "container",
                        children: [{
                            class: "brain",
                            type: "img",
                            key: "brain"
                        }]
                    }],
                    initializeTimeline() {
                        Ye.startShake("brain", 20, 20)
                    },
                    onProgress(e, t) {
                        const s = Math.floor(e);
                        s > t && 25 === s ? Ye.startShake("brain", 15, 15) : s > t && 50 === s ? Ye.startShake("brain", 10, 10) : s > t && 75 === s && Ye.startShake("brain", 5, 5)
                    }
                }),
                vF = gF.extend({
                    elements: [{
                        class: "sneak-container",
                        type: "container",
                        children: [{
                            class: "cool",
                            type: "img",
                            key: "cool"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.timeline({
                            repeat: -1
                        }).fromTo(".cool", {
                            rotate: -10
                        }, {
                            rotate: 10,
                            ease: "power1.inOut",
                            duration: .5
                        }).to(".cool", {
                            rotate: -10,
                            ease: "power1.inOut",
                            duration: .5
                        })
                    }
                }),
                kF = He.extend({
                    imageManifest: {
                        cheer: Promise.resolve().then(s.t.bind(s, 18418, 17)),
                        loveicecream: Promise.resolve().then(s.t.bind(s, 6093, 17)),
                        praiseicecream: Promise.resolve().then(s.t.bind(s, 36034, 17))
                    }
                }),
                PF = kF.extend({
                    elements: [{
                        class: "closet-container",
                        type: "container",
                        children: [{
                            class: "loveicecream",
                            type: "img",
                            key: "loveicecream"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.timeline({
                            repeat: -1
                        }).to(".e.loveicecream", {
                            scale: 1.2,
                            duration: .6,
                            ease: "power3.out"
                        }).to(".e.loveicecream", {
                            scale: 1,
                            duration: .6,
                            ease: "power3.in"
                        })
                    }
                }),
                wF = kF.extend({
                    elements: [{
                        class: "closet-container",
                        type: "container",
                        children: [{
                            class: "praiseicecream",
                            type: "img",
                            key: "praiseicecream"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.timeline({
                            repeat: -1
                        }).to(".e.praiseicecream", {
                            scale: 1.2,
                            duration: .4,
                            ease: "power3.out"
                        }).to(".e.praiseicecream", {
                            scale: 1,
                            duration: .4,
                            ease: "power3.in"
                        })
                    }
                }),
                TF = kF.extend({
                    elements: [{
                        class: "closet-container",
                        type: "container",
                        children: [{
                            class: "praiseicecream",
                            type: "img",
                            key: "praiseicecream"
                        }, {
                            class: "cheer",
                            type: "img",
                            key: "cheer"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.cheer", {
                            y: 150
                        }), C.p8.timeline({
                            repeat: -1
                        }).set(".e.praiseicecream", {
                            clipPath: "inset(0px 0px 220px 0px)"
                        }).to(".e.praiseicecream", {
                            scale: 1.2,
                            duration: .4,
                            ease: "power3.out"
                        }).to(".e.praiseicecream", {
                            scale: 1,
                            duration: .4,
                            ease: "power3.in"
                        }), C.p8.timeline({
                            repeat: -1
                        }).to(".e.cheer", {
                            scale: 1.4,
                            duration: .8,
                            ease: "power3.out"
                        }).to(".e.cheer", {
                            scale: 1,
                            duration: .8,
                            ease: "power3.in"
                        })
                    }
                }),
                SF = He.extend({
                    imageManifest: {
                        balloons: Promise.resolve().then(s.t.bind(s, 92449, 17)),
                        banner: Promise.resolve().then(s.t.bind(s, 17704, 17)),
                        congrats: Promise.resolve().then(s.t.bind(s, 58189, 17)),
                        sparkles: Promise.resolve().then(s.t.bind(s, 16733, 17))
                    }
                }),
                MF = SF.extend({
                    stepDuration: 2.5,
                    elements: [{
                        class: "decorate-container",
                        type: "container",
                        children: [{
                            class: "banner",
                            type: "img",
                            key: "banner"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.banner", {
                            scaleY: .2,
                            y: 200
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.banner", {
                            scaleY: .8,
                            duration: .5,
                            ease: "back.in"
                        }).to(".e.banner", {
                            scaleY: 1,
                            rotate: 25,
                            y: 100,
                            duration: .5,
                            ease: "back.in"
                        }).to(".e.banner", {
                            rotate: 0,
                            y: 0,
                            duration: .5,
                            ease: "back.in"
                        }).to(".e.banner", {
                            y: -100,
                            duration: .5,
                            ease: "back.in"
                        })
                    }
                }),
                CF = SF.extend({
                    elements: [{
                        class: "decorate-container",
                        type: "container",
                        children: [{
                            class: "banner",
                            type: "img",
                            key: "banner"
                        }, {
                            class: "balloons",
                            type: "img",
                            key: "balloons"
                        }]
                    }],
                    balloonPE: null,
                    initializeTimeline() {
                        C.p8.set(".e.banner", {
                            y: -100
                        }), this.balloonPE = Ye.addParticleEmitter({
                            container: "decorate-container",
                            image: "balloons",
                            autoplay: !1,
                            settings: {
                                gravity: -3,
                                randomAngle: !1,
                                angle: 0,
                                minSize: 800,
                                maxSize: 1e3,
                                frequency: .4,
                                to: {
                                    opacity: 1,
                                    duration: 1
                                },
                                boundaries: {
                                    top: 700,
                                    bottom: 700,
                                    left: -500,
                                    right: 500
                                }
                            }
                        })
                    },
                    onProgress(e, t) {
                        e > t ? this.balloonPE.play() : this.balloonPE.pause()
                    }
                }),
                DF = SF.extend({
                    elements: [{
                        class: "decorate-container",
                        type: "container",
                        children: [{
                            class: "banner",
                            type: "img",
                            key: "banner"
                        }, {
                            class: "congrats",
                            type: "img",
                            key: "congrats"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.timeline().fromTo(".e.banner", {
                            y: -100
                        }, {
                            y: -250,
                            scale: .8,
                            ease: "back.inOut",
                            duration: .8
                        }, .2), this.timeline.fromTo(".e.congrats", {
                            y: 200,
                            clipPath: "inset(0px 1000px 0px 0px)"
                        }, {
                            clipPath: "inset(0px 0px 0px 0px)"
                        })
                    }
                }),
                FF = SF.extend({
                    elements: [{
                        class: "decorate-container",
                        type: "container",
                        children: [{
                            class: "banner",
                            type: "img",
                            key: "banner"
                        }, {
                            class: "congrats",
                            type: "img",
                            key: "congrats"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.banner", {
                            y: -250,
                            scale: .8
                        }), C.p8.set(".e.congrats", {
                            y: 200
                        }), this.timeline.fromTo(".e.congrats", {
                            filter: "blur(0px)",
                            opacity: 1
                        }, {
                            filter: "blur(20px)",
                            opacity: .8
                        })
                    }
                }),
                zF = He.extend({
                    imageManifest: {
                        swim: Promise.resolve().then(s.t.bind(s, 42626, 17))
                    },
                    sprites: {
                        swim: {
                            key: "swim",
                            images: {
                                kickRight: [552, 0, 474, 444],
                                kickLeft: [0, 509, 535, 443],
                                flat: [535, 509, 518, 444],
                                arm: [0, 0, 552, 509]
                            }
                        }
                    }
                }),
                LF = zF.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("swim", [
                        ["flat", null, [278, 241]]
                    ]),
                    onDiscreteProgress() {
                        Ye.squashOnce("flat")
                    }
                }),
                RF = zF.extend({
                    elements: Ye.elementsFromSprite("swim", [
                        ["flat", null, [278, 241]],
                        ["arm", null, [278, 207]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.arm", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("flat", "arm")), this.timeline.add(Ye.squashTransition("arm", "flat")), this.timeline.add(Ye.squashTransition("flat", "arm")), this.timeline.add(Ye.squashTransition("arm", "flat")), this.timeline.add(Ye.squashTransition("flat", "arm")), this.timeline.add(Ye.squashTransition("arm", "flat")), this.timeline.add(Ye.squashTransition("flat", "arm"))
                    }
                }),
                IF = zF.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("swim", [
                        ["kickRight", null, [278, 241]],
                        ["kickLeft", null, [279, 241]],
                        ["flat", null, [278, 241]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.kickRight, .e.kickLeft", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("flat", "kickRight")), this.timeline.add(Ye.squashTransition("kickRight", "flat")), this.timeline.add(Ye.squashTransition("flat", "kickLeft")), this.timeline.add(Ye.squashTransition("kickLeft", "flat")), this.timeline.add(Ye.squashTransition("flat", "kickRight"))
                    }
                }),
                OF = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 58163, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                emoji: [0, 0, 693, 583],
                                pools: [0, 583, 348, 103],
                                invited: [348, 583, 339, 105],
                                why: [318, 688, 239, 88],
                                hey: [0, 686, 318, 103],
                                phone: [693, 0, 585, 857]
                            }
                        }
                    }
                }),
                BF = OF.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["phone", null, [91, 227]],
                        ["pools", null, [184, 312]],
                        ["invited", null, [184, 309]],
                        ["why", null, [190, 359]],
                        ["hey", null, [183, 323]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.hey, .e.pools, .e.invited, .e.why", {
                            scale: .5,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.hey", {
                            scale: 1,
                            opacity: 1,
                            duration: 1,
                            ease: "back.out(2)"
                        }, 0).to(".e.hey", {
                            y: -50,
                            x: -50,
                            opacity: 0,
                            duration: .25
                        }, 1).to(".e.why", {
                            scale: 1,
                            opacity: 1,
                            duration: 1,
                            ease: "back.out(2)"
                        }, 1).to(".e.why", {
                            y: -50,
                            x: -50,
                            opacity: 0,
                            duration: .25
                        }, 2).to(".e.invited", {
                            scale: 1,
                            opacity: 1,
                            duration: 1,
                            ease: "back.out(2)"
                        }, 2).to(".e.invited", {
                            y: -50,
                            x: -50,
                            opacity: 0,
                            duration: .25
                        }, 3).to(".e.pools", {
                            scale: 1,
                            opacity: 1,
                            duration: 1,
                            ease: "back.out(2)"
                        }, 3)
                    }
                }),
                YF = OF.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["emoji", null, [206, 159]]
                    ]),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("emoji", .35))
                    }
                }),
                AF = He.extend({
                    imageManifest: {
                        badPool: Promise.resolve().then(s.t.bind(s, 70566, 17)),
                        hammer: Promise.resolve().then(s.t.bind(s, 58228, 17)),
                        screwDriver: Promise.resolve().then(s.t.bind(s, 48242, 17)),
                        wrench: Promise.resolve().then(s.t.bind(s, 63810, 17))
                    }
                }),
                HF = AF.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("hammer", "screwDriver", "wrench"),
                    onLoadComplete() {
                        C.p8.set(".e.hammer, .e.wrench", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("screwDriver", "hammer")), this.timeline.add(Ye.squashTransition("hammer", "wrench")), this.timeline.add(Ye.squashTransition("wrench", "screwDriver")), this.timeline.add(Ye.squashTransition("screwDriver", "hammer")), this.timeline.add(Ye.squashTransition("hammer", "wrench")), this.timeline.add(Ye.squashTransition("wrench", "screwDriver")), this.timeline.add(Ye.squashTransition("screwDriver", "hammer")), this.timeline.add(Ye.squashTransition("hammer", "wrench")), this.timeline.add(Ye.squashTransition("wrench", "screwDriver")), this.timeline.add(Ye.squashTransition("screwDriver", "hammer")), this.timeline.add(Ye.squashTransition("hammer", "wrench")), this.timeline.add(Ye.squashTransition("wrench", "screwDriver")), this.timeline.add(Ye.squashTransition("screwDriver", "hammer")), this.timeline.add(Ye.squashTransition("hammer", "wrench")), this.timeline.add(Ye.squashTransition("wrench", "screwDriver")), this.timeline.add(Ye.squashTransition("screwDriver", "hammer")), this.timeline.add(Ye.squashTransition("hammer", "wrench")), this.timeline.add(Ye.squashTransition("wrench", "screwDriver")), this.timeline.add(Ye.squashTransition("screwDriver", "hammer")), this.timeline.add(Ye.squashTransition("hammer", "wrench"))
                    }
                }),
                GF = AF.extend({
                    elements: Ye.elementsFromImages("badPool")
                }),
                VF = He.extend({
                    imageManifest: {
                        help: Promise.resolve().then(s.t.bind(s, 89455, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "help",
                            images: {
                                thumbsUp: [10, 638, 523, 709, 181, 239],
                                signature: [1394, 462, 613, 132, 520, 171],
                                question: [1394, 10, 282, 442, 158, 354],
                                hardHat: [1297, 832, 642, 525, 223, 220],
                                hammer: [980, 10, 404, 812, 126, 462],
                                drillAnimated: [543, 638, 335, 8, 436, 50],
                                drill: [543, 832, 744, 515, 350, 28],
                                card: [10, 10, 960, 618, 120, 16]
                            }
                        }
                    }
                }),
                EF = VF.extend({
                    elements: Ye.elementsFromSprite("sprite", ["question"]),
                    onStartProgress() {
                        Ye.startHoldShake("question")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("question")
                    }
                }),
                qF = VF.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", ["hardHat"]),
                    onDiscreteProgress() {
                        Ye.squashOnce("hardHat", .25)
                    }
                }),
                NF = VF.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["hammer"]),
                    onLoadComplete() {
                        C.p8.set(".e.hammer", {
                            transformOrigin: "center bottom"
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".progress, .pie, .info", {
                                x: -5,
                                y: 5,
                                duration: .1
                            }).to(".progress, .pie, .info", {
                                x: 5,
                                y: -5,
                                duration: .1
                            }).to(".progress, .pie, .info", {
                                x: 3,
                                y: 3,
                                duration: .1
                            }).to(".progress, .pie, .info", {
                                x: 2,
                                y: -2,
                                duration: .1
                            }).to(".progress, .pie, .info", {
                                x: 1,
                                y: 1,
                                duration: .1
                            }).to(".progress, .pie, .info", {
                                x: 0,
                                y: 0,
                                duration: .1
                            }),
                            t = C.p8.timeline({
                                repeat: 4
                            }).to(".e.hammer", {
                                rotate: 15,
                                ease: "power2.in"
                            }).to(".e.hammer", {
                                rotate: -45,
                                duration: .1,
                                ease: "none"
                            }).add(e).to(".e.hammer", {
                                rotate: 0
                            });
                        this.timeline.add(t)
                    }
                }),
                XF = VF.extend({
                    elements: Ye.elementsFromSprite("sprite", ["drill", "drillAnimated"]),
                    onLoadComplete() {
                        C.p8.set(".e.drillAnimated", {
                            clipPath: "inset(0% 50% 0% 0%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.drillAnimated", {
                            x: -140,
                            clipPath: "inset(0% 0% 0% 40%)"
                        })
                    }
                }),
                WF = VF.extend({
                    elements: Ye.elementsFromSprite("sprite", ["thumbsUp"]),
                    onLoadComplete() {
                        C.p8.fromTo(".e.thumbsUp", {
                            scale: .7
                        }, {
                            scale: 1.1,
                            duration: .75,
                            ease: "back.out(3)"
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.thumbsUp", {
                            rotate: -10,
                            ease: "none"
                        }).to(".e.thumbsUp", {
                            rotate: 0,
                            ease: "none"
                        }).to(".e.thumbsUp", {
                            rotate: 10,
                            ease: "none"
                        }).to(".e.thumbsUp", {
                            rotate: 0,
                            ease: "none"
                        });
                        this.timeline.add(e)
                    }
                }),
                UF = VF.extend({
                    elements: Ye.elementsFromSprite("sprite", ["card", "signature"]),
                    onLoadComplete() {
                        C.p8.set(".e.signature", {
                            clipPath: "inset(0% 100% 0% 0%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.signature", {
                            clipPath: "inset(0% 0% 0% 0%)"
                        })
                    }
                }),
                $F = He.extend({
                    imageManifest: {
                        pool: Promise.resolve().then(s.t.bind(s, 8684, 17))
                    },
                    sprites: {
                        pool: {
                            key: "pool",
                            images: {
                                front: [10, 636, 853, 527, 251, 64],
                                hose: [650, 1173, 28, 90, 277, 728],
                                water: [10, 1173, 630, 65, 300, 197],
                                back: [10, 10, 853, 616, 162, 64]
                            }
                        }
                    }
                }),
                jF = $F.extend({
                    elements: Ye.elementsFromSprite("pool", ["back", "water", "hose", "front"]),
                    onLoadComplete() {
                        C.p8.set(".e.water", {
                            y: 150
                        }), C.p8.set(".e.hose", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.hose", {
                            hidden: !1
                        }, .1).to(".e.water", {
                            y: 0
                        }, .3).set(".e.hose", {
                            hidden: !0
                        })
                    }
                }),
                KF = He.extend({
                    imageManifest: {
                        flex: Promise.resolve().then(s.t.bind(s, 18472, 17)),
                        lotion: Promise.resolve().then(s.t.bind(s, 95028, 17)),
                        unflex: Promise.resolve().then(s.t.bind(s, 32068, 17))
                    }
                }),
                ZF = KF.extend({
                    elements: Ye.elementsFromImages("lotion"),
                    initializeTimeline() {
                        this.timeline.to(".e.lotion", {
                            rotate: 180,
                            scale: .9,
                            duration: 1
                        }).fillTime(.5).to(".e.lotion", {
                            scaleX: .6,
                            scaleY: 1,
                            duration: .3
                        }).to(".e.lotion", {
                            scaleX: .9,
                            scaleY: .9,
                            duration: 1
                        }).fillTime(.2).to(".e.lotion", {
                            scaleX: .6,
                            scaleY: 1,
                            duration: .3
                        }).to(".e.lotion", {
                            scaleX: .9,
                            scaleY: .9,
                            duration: 1
                        }).fillTime(.2).to(".e.lotion", {
                            scaleX: .6,
                            scaleY: 1,
                            duration: .3
                        }).to(".e.lotion", {
                            scaleX: .9,
                            scaleY: .9,
                            duration: 1
                        })
                    }
                }),
                JF = KF.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages(["unflex", null, [-270, 0]], ["flex", null, [115, 338]])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.flex", {
                            hidden: !0
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c", 10, 0), Ye.squashTransition("unflex", "flex", .25)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c"), Ye.squashTransition("flex", "unflex", .25)
                    }
                }),
                _F = KF.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages(["unflex", null, [-270, 0]], ["flex", null, [115, 338]])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.unflex", {
                            hidden: !0
                        }), Ye.squashTransition("flex", "unflex", .25)
                    }
                }),
                QF = JF,
                ez = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 87495, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                yell: [910, 163, 454, 559, 190, 265],
                                front: [10, 10, 746, 502, 407, 190],
                                splash: [10, 522, 890, 417, 75, 15],
                                pool: [766, 10, 708, 143, 365, 221]
                            }
                        }
                    }
                }),
                tz = ez.extend({
                    elements: Ye.elementsFromSprite("sprite", [
                        ["yell", null, [190, 265]]
                    ]),
                    onStartProgress() {
                        Ye.startHoldShake("yell", 5, 5)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("yell")
                    }
                }),
                sz = ez.extend({
                    stepDuration: .4,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["yell", null, [190, 265]]
                    ]),
                    onDiscreteProgress() {
                        C.p8.to(".e.yell", {
                            x: 300,
                            opacity: 0,
                            ease: "back.in(2)"
                        })
                    }
                }),
                iz = ez.extend({
                    stepDuration: .6,
                    elements: Ye.elementsFromSprite("sprite", [
                        ["pool", null, [365, 221]],
                        ["splash", null, [75, 15]],
                        ["front", null, [407, 190]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.splash", {
                            x: 10,
                            y: 310,
                            scaleX: .6,
                            scaleY: .4,
                            transformOrigin: "bottom right"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.splash", {
                            x: 0,
                            y: 0,
                            scale: 1
                        }, 0)
                    }
                }),
                oz = He.extend({
                    imageManifest: {
                        capacity: Promise.resolve().then(s.t.bind(s, 72952, 17)),
                        tv: Promise.resolve().then(s.t.bind(s, 77355, 17)),
                        tv1: Promise.resolve().then(s.t.bind(s, 31669, 17))
                    }
                }),
                nz = oz.extend({
                    elements: Ye.elementsFromImages("capacity"),
                    onLoadComplete() {
                        C.p8.fromTo(".e.capacity", {
                            scale: .6
                        }, {
                            scale: 1,
                            duration: .5,
                            ease: "back.out(2)"
                        })
                    }
                }),
                az = oz.extend({
                    elements: Ye.elementsFromImages("tv1", "tv")
                }),
                rz = He.extend({
                    imageManifest: {
                        break: Promise.resolve().then(s.t.bind(s, 43370, 17)),
                        dip: Promise.resolve().then(s.t.bind(s, 85666, 17)),
                        temp: Promise.resolve().then(s.t.bind(s, 90635, 17)),
                        thermometer: Promise.resolve().then(s.t.bind(s, 46514, 17)),
                        thermometerBroken: Promise.resolve().then(s.t.bind(s, 5109, 17))
                    }
                }),
                lz = rz.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("dip", "thermometer"),
                    initializeTimeline() {
                        this.timeline.to(".e.thermometer", {
                            x: -50,
                            y: 0,
                            scale: .8
                        })
                    }
                }),
                dz = rz.extend({
                    elements: Ye.elementsFromImages("temp"),
                    onStartProgress() {
                        Ye.startHoldShake("temp", 2, 1)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("temp", 2, 1)
                    }
                }),
                pz = rz.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("break", "thermometerBroken"),
                    initializeTimeline() {
                        C.p8.to(".e.thermometerBroken", {
                            scale: 1.5,
                            opacity: 0,
                            delay: .15
                        })
                    }
                }),
                cz = He.extend({
                    imageManifest: {
                        blow: Promise.resolve().then(s.t.bind(s, 23239, 17)),
                        ick: Promise.resolve().then(s.t.bind(s, 21130, 17)),
                        box: Promise.resolve().then(s.t.bind(s, 74434, 17)),
                        tissue1: Promise.resolve().then(s.t.bind(s, 3418, 17)),
                        tissue2: Promise.resolve().then(s.t.bind(s, 93358, 17)),
                        tissue3: Promise.resolve().then(s.t.bind(s, 81465, 17)),
                        wipe: Promise.resolve().then(s.t.bind(s, 40727, 17))
                    }
                }),
                mz = cz.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("box", "tissue1", "tissue2"),
                    initializeTimeline() {
                        C.p8.set(".e.tissue2", {
                            scaleY: .6,
                            scaleX: .8,
                            y: 35
                        }), C.p8.set(".e.tissue1", {
                            opacity: 0,
                            scale: .5
                        }), this.timeline.to(".e.tissue2", {
                            scaleY: 1,
                            scaleX: 1,
                            y: 0
                        }), this.timeline.to(".e.tissue1", {
                            scale: 1,
                            y: -200,
                            opacity: 1,
                            ease: "none"
                        }, "<"), this.timeline.to(".e.tissue1", {
                            opacity: 0,
                            y: -300
                        })
                    }
                }),
                hz = cz.extend({
                    elements: Ye.elementsFromImages("blow"),
                    onStartProgress() {
                        Ye.startHoldShake("blow", 2, 1)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("blow", 2, 1)
                    }
                }),
                uz = cz.extend({
                    elements: Ye.elementsFromImages("wipe", "tissue3"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.tissue3", {
                            x: 20
                        }, {
                            x: -20,
                            yoyo: !0,
                            repeat: 10
                        })
                    }
                }),
                gz = cz.extend({
                    elements: Ye.elementsFromImages("ick")
                }),
                yz = He.extend({
                    imageManifest: {
                        doctor: Promise.resolve().then(s.t.bind(s, 47493, 17)),
                        advice: Promise.resolve().then(s.t.bind(s, 59140, 17)),
                        ick: Promise.resolve().then(s.t.bind(s, 86883, 17)),
                        soup: Promise.resolve().then(s.t.bind(s, 34119, 17)),
                        spoon: Promise.resolve().then(s.t.bind(s, 11839, 17)),
                        violin: Promise.resolve().then(s.t.bind(s, 93248, 17)),
                        note: Promise.resolve().then(s.t.bind(s, 59186, 17))
                    }
                }),
                bz = yz.extend({
                    elements: Ye.elementsFromImages("violin", "note", "note", "note", "note"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.note", {
                            display: "none",
                            opacity: 1,
                            x: 500,
                            y: 500
                        }, {
                            display: "block",
                            x: "random(300, 700)",
                            y: 0,
                            rotate: "random(-50, 50)",
                            opacity: 0,
                            stagger: .25,
                            duration: .5
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("violin", 2, 1)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("violin", 2, 1)
                    }
                }),
                xz = yz.extend({
                    elements: Ye.elementsFromImages("doctor", "advice"),
                    initializeTimeline() {
                        this.timeline.set(".e.advice", {
                            opacity: 0,
                            delay: .1
                        }), this.timeline.set(".e.advice", {
                            opacity: 1,
                            delay: .2
                        }), this.timeline.set(".e.advice", {
                            opacity: 0,
                            delay: .2
                        }), this.timeline.set(".e.advice", {
                            opacity: 1,
                            delay: .1
                        }), this.timeline.set(".e.advice", {
                            opacity: 0,
                            delay: .1
                        }), this.timeline.set(".e.advice", {
                            opacity: 1,
                            delay: .05
                        }), this.timeline.set(".e.advice", {
                            opacity: 0,
                            delay: .1
                        }), this.timeline.set(".e.advice", {
                            opacity: 1,
                            delay: .05
                        }), this.timeline.set(".e.advice", {
                            opacity: 0,
                            delay: .1
                        }), this.timeline.set(".e.advice", {
                            opacity: 1,
                            delay: .2
                        }), this.timeline.set(".e.advice", {
                            opacity: 0,
                            delay: .05
                        }), this.timeline.set(".e.advice", {
                            opacity: 1,
                            delay: .1
                        }), this.timeline.set(".e.advice", {
                            opacity: 0,
                            delay: .1
                        }), this.timeline.set(".e.advice", {
                            opacity: 1,
                            delay: .2
                        }), this.timeline.set(".e.advice", {
                            opacity: 0,
                            delay: .2
                        }), this.timeline.set(".e.advice", {
                            opacity: 1,
                            delay: .1
                        })
                    }
                }),
                fz = yz.extend({
                    elements: Ye.elementsFromImages("soup", "spoon"),
                    initializeTimeline() {
                        this.timeline.to(".e.spoon", {
                            rotate: -10,
                            x: -160,
                            y: 20,
                            yoyo: !0,
                            repeat: 3
                        })
                    }
                }),
                vz = yz.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("ick", "soup", "spoon"),
                    initializeTimeline() {
                        C.p8.set(".e.ick", {
                            opacity: 0,
                            y: 110
                        }), this.timeline.to(".e.soup,.e.spoon", {
                            opacity: 0,
                            y: 30
                        }), this.timeline.to(".e.ick", {
                            opacity: 1,
                            y: 80
                        }, "<")
                    }
                }),
                kz = He.extend({
                    imageManifest: {
                        pillow: Promise.resolve().then(s.t.bind(s, 88681, 17))
                    }
                }),
                Pz = kz.extend({
                    elements: Ye.elementsFromImages("pillow")
                }),
                wz = He.extend({
                    imageManifest: {
                        dentist: Promise.resolve().then(s.t.bind(s, 91482, 17)),
                        route666: Promise.resolve().then(s.t.bind(s, 88118, 17)),
                        teen: Promise.resolve().then(s.t.bind(s, 36687, 17))
                    }
                }),
                Tz = wz.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "fridge-container",
                        type: "container",
                        children: [{
                            class: "teen",
                            type: "img",
                            key: "teen"
                        }]
                    }],
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.teen", {
                            rotate: 180,
                            scale: .7,
                            y: 1e3,
                            duration: .75,
                            ease: "power3.out"
                        }, 0).to(".e.teen", {
                            opacity: 0
                        }, .5)
                    }
                }),
                Sz = wz.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "fridge-container",
                        type: "container",
                        children: [{
                            class: "dentist",
                            type: "img",
                            key: "dentist"
                        }]
                    }],
                    initializeTimeline() {
                        this.timeline.fromTo(".e.dentist", {
                            rotate: -65,
                            y: 500,
                            scale: 1.5
                        }, {
                            y: 0,
                            scale: 1,
                            rotate: 0,
                            duration: .75,
                            ease: "back.inOut"
                        })
                    }
                }),
                Mz = wz.extend({
                    stepDuration: 1.15,
                    elements: [{
                        class: "fridge-container",
                        type: "container",
                        children: [{
                            class: "dentist",
                            type: "img",
                            key: "dentist"
                        }, {
                            class: "route666",
                            type: "img",
                            key: "route666"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.route666", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("dentist", "route666", .25)
                    }
                }),
                Cz = He.extend({
                    imageManifest: {
                        improved: Promise.resolve().then(s.t.bind(s, 54288, 17)),
                        mailbox: Promise.resolve().then(s.t.bind(s, 94713, 17)),
                        report: Promise.resolve().then(s.t.bind(s, 76792, 17))
                    }
                }),
                Dz = Cz.extend({
                    stepDuration: .3,
                    elements: [{
                        class: "mailbox-container",
                        type: "container",
                        children: [{
                            class: "mailbox",
                            type: "img",
                            key: "mailbox"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".mailbox", {
                            scale: .4
                        })
                    },
                    onDiscreteProgress(e) {
                        C.p8.timeline().to(".mailbox-container", {
                            y: -100,
                            ease: "power2.out",
                            duration: .15
                        }).to(".mailbox-container", {
                            y: 0,
                            ease: "power2.inOut",
                            duration: .15
                        }), 25 === e ? C.p8.timeline().to(".mailbox", {
                            scale: .55,
                            duration: .25
                        }) : 50 === e ? C.p8.timeline().to(".mailbox", {
                            scale: .7,
                            duration: .25
                        }) : 75 === e ? C.p8.timeline().to(".mailbox", {
                            scale: .85,
                            duration: .25
                        }) : 100 === e && C.p8.timeline().to(".mailbox", {
                            scale: 1,
                            duration: .25
                        })
                    }
                }),
                Fz = Cz.extend({
                    elements: [{
                        class: "mailbox-container",
                        type: "container",
                        children: [{
                            class: "report",
                            type: "img",
                            key: "report"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.report", {
                            y: -250,
                            scale: .6
                        }), this.timeline.to(".e.report", {
                            y: 500,
                            scale: .9,
                            ease: "back.in"
                        })
                    }
                }),
                zz = Cz.extend({
                    elements: [{
                        class: "mailbox-container",
                        type: "container",
                        children: [{
                            class: "improved",
                            type: "img",
                            key: "improved"
                        }, {
                            class: "report",
                            type: "img",
                            key: "report"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.report", {
                            y: 500,
                            scale: .9
                        }), C.p8.set(".e.improved", {
                            y: 500,
                            scale: .9
                        }), this.timeline.to(".e.improved", {
                            y: -250,
                            scale: .6,
                            ease: "power3.out"
                        }).to(".e.report", {
                            y: 700,
                            opacity: 0
                        })
                    }
                }),
                Lz = Cz.extend({
                    stepDuration: .3,
                    elements: [{
                        class: "mailbox-container",
                        type: "container",
                        children: [{
                            class: "mailbox",
                            type: "img",
                            key: "mailbox"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".mailbox", {
                            scale: 1
                        })
                    },
                    onDiscreteProgress(e) {
                        C.p8.timeline().to(".mailbox-container", {
                            y: -100,
                            ease: "power2.out",
                            duration: .15
                        }).to(".mailbox-container", {
                            y: 0,
                            ease: "power2.inOut",
                            duration: .15
                        }), 25 === e ? C.p8.timeline().to(".mailbox", {
                            scale: .95,
                            duration: .25
                        }) : 50 === e ? C.p8.timeline().to(".mailbox", {
                            scale: .85,
                            duration: .25
                        }) : 75 === e ? C.p8.timeline().to(".mailbox", {
                            scale: .7,
                            duration: .25
                        }) : 100 === e && C.p8.timeline().to(".mailbox", {
                            scale: .55,
                            duration: .25
                        })
                    }
                }),
                Rz = He.extend({
                    imageManifest: {
                        eyes: Promise.resolve().then(s.t.bind(s, 58037, 17)),
                        hand: Promise.resolve().then(s.t.bind(s, 53934, 17)),
                        finger1: Promise.resolve().then(s.t.bind(s, 53762, 17)),
                        finger: Promise.resolve().then(s.t.bind(s, 28094, 17)),
                        phone: Promise.resolve().then(s.t.bind(s, 98077, 17))
                    }
                }),
                Iz = Rz.extend({
                    elements: [{
                        class: "teen-container",
                        type: "container",
                        children: [{
                            class: "eyes",
                            type: "img",
                            key: "eyes"
                        }]
                    }],
                    initializeTimeline() {
                        Ye.startShake("eyes", 2, 2, 2), this.timeline.fromTo(".teen-container", {
                            scale: .8
                        }, {
                            scale: 1.8
                        })
                    }
                }),
                Oz = Rz.extend({
                    stepDuration: .4,
                    lastStepDuration: 1.15,
                    elements: [{
                        class: "teen-container",
                        type: "container",
                        children: [{
                            class: "hand",
                            type: "img",
                            key: "hand"
                        }]
                    }],
                    initializeTimeline() {
                        this.timeline.fromTo(".e.hand", {
                            y: -500,
                            x: 150,
                            scale: .6
                        }, {
                            y: 0,
                            x: -250,
                            scale: .8,
                            ease: "back.inOut"
                        })
                    },
                    onDiscreteProgress() {}
                }),
                Bz = Rz.extend({
                    stepDuration: 2,
                    elements: [{
                        class: "teen-container",
                        type: "container",
                        children: [{
                            class: "finger",
                            type: "img",
                            key: "finger"
                        }, {
                            class: "finger1",
                            type: "img",
                            key: "finger1"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.finger", {
                            transformOrigin: "center 80%",
                            hidden: !0
                        }), C.p8.set(".e.finger1", {
                            transformOrigin: "center 80%",
                            rotate: 15
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.set(".e.finger", {
                            hidden: !1
                        }), C.p8.set(".e.finger1", {
                            hidden: !0
                        }), Ye.startShake("finger", 0, 20, 0)
                    }
                }),
                Yz = Rz.extend({
                    stepDuration: .5,
                    lastStepDuration: 1.25,
                    elements: [{
                        class: "teen-container",
                        type: "container",
                        children: [{
                            class: "phone",
                            type: "img",
                            key: "phone"
                        }]
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.phone", {
                            y: 1e3,
                            rotate: 25,
                            ease: "back.in"
                        }, 0).to(".e.phone", {
                            opacity: 0
                        }, .5)
                    }
                }),
                Az = He.extend({
                    imageManifest: {
                        crawl: Promise.resolve().then(s.t.bind(s, 26312, 17)),
                        drawer: Promise.resolve().then(s.t.bind(s, 79175, 17)),
                        open: Promise.resolve().then(s.t.bind(s, 12728, 17)),
                        phone: Promise.resolve().then(s.t.bind(s, 76444, 17))
                    }
                }),
                Hz = Az.extend({
                    stepDuration: .25,
                    elements: [{
                        class: "sneak-container",
                        type: "container",
                        children: [{
                            class: "crawl",
                            type: "img",
                            key: "crawl"
                        }]
                    }],
                    onDiscreteProgress(e) {
                        Ye.squashOnce("sneak-container", .4, "x");
                        let t = -1;
                        t = 66 === Math.floor(e) ? 1 : -1, C.p8.timeline().to(".crawl", {
                            scaleX: t,
                            duration: .25
                        })
                    }
                }),
                Gz = Az.extend({
                    stepDuration: 1.25,
                    elements: [{
                        class: "sneak-container",
                        type: "container",
                        children: [{
                            class: "drawer",
                            type: "img",
                            key: "drawer"
                        }, {
                            class: "open",
                            type: "img",
                            key: "open"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.open", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("drawer", "open", .25)
                    }
                }),
                Vz = Az.extend({
                    stepDuration: .5,
                    elements: [{
                        class: "sneak-container",
                        type: "container",
                        children: [{
                            class: "phone",
                            type: "img",
                            key: "phone"
                        }]
                    }],
                    onDiscreteProgress() {
                        Ye.squashOnce("phone", .15)
                    }
                }),
                Ez = Az.extend({
                    stepDuration: 1.25,
                    elements: [{
                        class: "sneak-container",
                        type: "container",
                        children: [{
                            class: "drawer",
                            type: "img",
                            key: "drawer"
                        }, {
                            class: "open",
                            type: "img",
                            key: "open"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.drawer", {
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("open", "drawer", .25)
                    }
                }),
                qz = He.extend({
                    imageManifest: {
                        ladder: Promise.resolve().then(s.t.bind(s, 93293, 17)),
                        report: Promise.resolve().then(s.t.bind(s, 28904, 17)),
                        shoebox: Promise.resolve().then(s.t.bind(s, 19888, 17)),
                        lid: Promise.resolve().then(s.t.bind(s, 72053, 17))
                    }
                }),
                Nz = qz.extend({
                    stepDuration: .3,
                    elements: [{
                        class: "attic-container",
                        type: "container",
                        children: [{
                            class: "ladder",
                            type: "img",
                            key: "ladder"
                        }]
                    }],
                    onDiscreteProgress() {
                        Ye.squashOnce("ladder", .25), C.p8.timeline().to(".attic-container", {
                            y: -100,
                            ease: "power2.out",
                            duration: .15
                        }).to(".attic-container", {
                            y: 0,
                            ease: "power2.inOut",
                            duration: .15
                        })
                    }
                }),
                Xz = qz.extend({
                    stepDuration: 1.25,
                    elements: [{
                        class: "attic-container",
                        type: "container",
                        children: [{
                            class: "shoebox",
                            type: "img",
                            key: "shoebox"
                        }, {
                            class: "lid",
                            type: "img",
                            key: "lid"
                        }]
                    }],
                    onDiscreteProgress(e) {
                        e > 25 && e < 75 ? C.p8.timeline().set(".e.lid", {
                            transformOrigin: "95% 76%"
                        }).to(".e.lid", {
                            rotate: 15,
                            ease: "power3.out",
                            duration: .2
                        }).to(".e.lid", {
                            rotate: 0,
                            ease: "bounce.out",
                            duration: .2
                        }) : e > 75 && C.p8.timeline().set(".e.lid", {
                            transformOrigin: "95% 76%"
                        }).to(".e.lid", {
                            rotate: 270,
                            x: 500,
                            y: -1250,
                            duration: .5
                        })
                    }
                }),
                Wz = qz.extend({
                    elements: [{
                        class: "attic-container",
                        type: "container",
                        children: [{
                            class: "report",
                            type: "img",
                            key: "report"
                        }]
                    }],
                    initializeTimeline() {
                        Ye.startShake("report", 2, 5, 2)
                    }
                }),
                Uz = qz.extend({
                    stepDuration: .25,
                    lastStepDuration: 1,
                    elements: [{
                        class: "attic-container",
                        type: "container",
                        children: [{
                            class: "shoebox",
                            type: "img",
                            key: "shoebox"
                        }, {
                            class: "lid",
                            type: "img",
                            key: "lid"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.lid", {
                            rotate: 25,
                            x: 250,
                            y: -150
                        }), this.timeline.to(".e.lid", {
                            rotate: 0,
                            x: 0,
                            y: 0,
                            duration: .15,
                            ease: "back.out"
                        })
                    }
                }),
                $z = He.extend({
                    imageManifest: {
                        dice1: Promise.resolve().then(s.t.bind(s, 75770, 17)),
                        dice2: Promise.resolve().then(s.t.bind(s, 58211, 17))
                    }
                }),
                jz = $z.extend({
                    elements: [{
                        class: "game-container",
                        type: "container",
                        children: [{
                            class: "dice1",
                            type: "img",
                            key: "dice1",
                            pos: [-50, -200]
                        }, {
                            class: "dice2",
                            type: "img",
                            key: "dice2",
                            pos: [50, 200]
                        }]
                    }],
                    initializeTimeline() {
                        Ye.startShake("dice1", 2, 3, 0), Ye.startShake("dice2", 4, 2, 0)
                    }
                }),
                Kz = He.extend({
                    imageManifest: {
                        coolKids: Promise.resolve().then(s.t.bind(s, 92659, 17)),
                        devilSig: Promise.resolve().then(s.t.bind(s, 23224, 17)),
                        hand: Promise.resolve().then(s.t.bind(s, 99771, 17)),
                        autographs: Promise.resolve().then(s.t.bind(s, 45925, 17)),
                        forgetHead: Promise.resolve().then(s.t.bind(s, 34737, 17)),
                        forgetBubble: Promise.resolve().then(s.t.bind(s, 53865, 17)),
                        headSet: Promise.resolve().then(s.t.bind(s, 58880, 17))
                    }
                }),
                Zz = Kz.extend({
                    elements: Ye.elementsFromImages("forgetHead", "forgetBubble"),
                    onLoadComplete() {
                        C.p8.set(".e.forgetBubble", {
                            scale: .7,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.forgetBubble", {
                            opacity: 1,
                            duration: .1
                        }, .3).to(".e.forgetBubble", {
                            scale: 1,
                            duration: .3,
                            ease: "back.out(2)"
                        }, .3).set(".e.forgetBubble", {
                            visibility: !0
                        }, 2)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("forgetHead")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("forgetHead")
                    }
                }),
                Jz = Kz.extend({
                    elements: Ye.elementsFromImages("coolKids", "autographs"),
                    onLoadComplete() {
                        C.p8.set(".e.autographs", {
                            clipPath: "inset(0% 80% 0% 0%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.autographs", {
                            clipPath: "inset(0% 46% 0% 0%)"
                        })
                    }
                }),
                _z = Kz.extend({
                    elements: Ye.elementsFromImages("coolKids", "autographs", "devilSig", "hand"),
                    onLoadComplete() {
                        C.p8.set(".e.hand", {
                            x: -140,
                            y: -220
                        }), C.p8.set(".e.devilSig", {
                            x: 190,
                            y: 60,
                            rotate: 27,
                            clipPath: "inset(0% 77% 0% 0%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.devilSig", {
                            clipPath: "inset(0% 43% 0% 0%)"
                        }, 0).to(".e.hand", {
                            x: 80,
                            y: -120
                        }, 0).to(".e.hand", {
                            x: -100,
                            y: 200
                        })
                    }
                }),
                Qz = Kz.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("headSet"),
                    onLoadComplete() {
                        C.p8.set(".e.headSet", {
                            y: -100
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.headSet", {
                            y: -200,
                            scaleY: .7,
                            duration: .2,
                            ease: "power1.out"
                        }).to(".e.headSet", {
                            y: 0,
                            scaleY: 1,
                            duration: .15,
                            ease: "power1.in"
                        }, .25)
                    }
                }),
                eL = He.extend({
                    imageManifest: {
                        board: Promise.resolve().then(s.t.bind(s, 28109, 17)),
                        run: Promise.resolve().then(s.t.bind(s, 8121, 17)),
                        sweat: Promise.resolve().then(s.t.bind(s, 92705, 17))
                    },
                    sprites: {
                        run: {
                            size: [1200, 400],
                            grid: [3, 1],
                            key: "run",
                            images: {
                                run: [0, 0],
                                down: [1, 0],
                                lines: [2, 0]
                            }
                        }
                    }
                }),
                tL = eL.extend({
                    elements: Ye.elementsFromImages("board"),
                    onLoadComplete() {
                        C.p8.set(".e.board", {
                            scale: .6
                        })
                    }
                }),
                sL = eL.extend({
                    elements: Ye.elementsFromImages("board"),
                    onLoadComplete() {
                        C.p8.set(".e.board", {
                            scale: .6
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.board", {
                            scale: 1
                        })
                    }
                }),
                iL = eL.extend({
                    elements: Ye.elementsFromImages("sweat"),
                    onStartProgress() {
                        Ye.startHoldShake("sweat", 5)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("sweat")
                    }
                }),
                oL = eL.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromSprite("run", [
                        ["run", null, [330, -300]],
                        ["down", null, [570, -200]],
                        ["lines", null, [480, 260]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.lines", {
                            opacity: 0
                        }), C.p8.set(".e.down", {
                            opacity: 0,
                            y: -150,
                            rotate: -80
                        }), C.p8.timeline().to(".e.run", {
                            x: 1350,
                            duration: this.stepDuration,
                            ease: "power2.in"
                        }).set(".e.run", {
                            x: 0
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline({
                                repeat: 2
                            }).to(".e.run", {
                                x: 1350,
                                duration: 1,
                                ease: "power2.in"
                            }).set(".e.run", {
                                x: 0
                            }),
                            t = C.p8.timeline({
                                repeat: 2
                            }).to(".e.lines", {
                                x: 80,
                                duration: .5,
                                ease: "power2.in"
                            }, .5).to(".e.lines", {
                                opacity: 1,
                                duration: .15,
                                ease: "none"
                            }, .7).to(".e.lines", {
                                opacity: 0,
                                duration: .15,
                                ease: "none"
                            }, .85),
                            s = C.p8.timeline().set(".e.down", {
                                opacity: 1
                            }).to(".e.down", {
                                y: 0,
                                x: 180,
                                rotate: 0,
                                duration: .35,
                                ease: "power2.in"
                            }, .15).to(".e.down", {
                                x: 350,
                                duration: .6,
                                ease: "power2.out"
                            });
                        this.timeline.add(e), this.timeline.add(t, 0), this.timeline.add(s, 2)
                    }
                }),
                nL = He.extend({
                    imageManifest: {
                        photo: Promise.resolve().then(s.t.bind(s, 66584, 17)),
                        photoClean: Promise.resolve().then(s.t.bind(s, 43405, 17)),
                        dust: Promise.resolve().then(s.t.bind(s, 36270, 17)),
                        playbill: Promise.resolve().then(s.t.bind(s, 87850, 17)),
                        shame: Promise.resolve().then(s.t.bind(s, 76894, 17)),
                        think: Promise.resolve().then(s.t.bind(s, 45943, 17)),
                        thought: Promise.resolve().then(s.t.bind(s, 24362, 17)),
                        fuss: Promise.resolve().then(s.t.bind(s, 9519, 17))
                    },
                    sprites: {
                        thought: {
                            size: [388, 1232],
                            grid: [1, 4],
                            key: "thought",
                            images: {
                                thought0: [0, 0],
                                thought1: [0, 1],
                                thought2: [0, 2],
                                thought3: [0, 3]
                            }
                        }
                    }
                }),
                aL = nL.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("photo", "photoClean", ["dust", "dust0", [300, 350]], ["dust", "dust1", [300, 350]], ["dust", "dust2", [300, 350]])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.photoClean, .e.dust0, .e.dust1, .e.dust2", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.dust0", {
                            x: 200,
                            y: -300,
                            duration: .15
                        }).to(".e.dust0", {
                            opacity: 1,
                            duration: .075,
                            ease: "none"
                        }, 0).to(".e.dust0", {
                            opacity: 0,
                            duration: .075,
                            ease: "none"
                        }, .075).to(".e.dust1", {
                            x: -150,
                            y: -350,
                            duration: .15
                        }, 0).to(".e.dust1", {
                            opacity: 1,
                            duration: .075,
                            ease: "none"
                        }, 0).to(".e.dust1", {
                            opacity: 0,
                            duration: .075,
                            ease: "none"
                        }, .075).to(".e.dust2", {
                            x: 25,
                            y: -370,
                            duration: .15
                        }, 0).to(".e.dust2", {
                            opacity: 1,
                            duration: .075,
                            ease: "none"
                        }, 0).to(".e.dust2", {
                            opacity: 0,
                            duration: .075,
                            ease: "none"
                        }, .075).to(".e.photoClean", {
                            opacity: 1,
                            ease: "power1.out"
                        }, 0)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                rL = nL.extend({
                    stepDuration: .6,
                    elements: Ye.elementsFromImages(["playbill", "playbill2", [164, 285]], ["playbill", "playbill1", [164, 285]], ["playbill", "playbill0", [164, 285]]),
                    onLoadComplete() {
                        C.p8.set(".e.playbill1", {
                            x: -30,
                            rotate: -10
                        }), C.p8.set(".e.playbill2", {
                            x: -60,
                            rotate: -20
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.playbill0", {
                            x: -600,
                            rotate: -20
                        }).to(".e.playbill1", {
                            x: 0,
                            rotate: 0
                        }, "<").to(".e.playbill2", {
                            x: -30,
                            rotate: -10
                        }, "<").set(".e.playbill0", {
                            zIndex: -1
                        }).to(".e.playbill0", {
                            x: -60,
                            rotate: -20
                        }).to(".e.playbill1", {
                            x: -600,
                            rotate: -20
                        }).to(".e.playbill2", {
                            x: 0,
                            rotate: 0
                        }, "<").to(".e.playbill0", {
                            x: -30,
                            rotate: -10
                        }, "<").set(".e.playbill1", {
                            zIndex: -1
                        }).to(".e.playbill1", {
                            x: -60,
                            rotate: -20
                        }).to(".e.playbill2", {
                            x: -600,
                            rotate: -20
                        }).to(".e.playbill0", {
                            x: 0,
                            rotate: 0
                        }, "<").to(".e.playbill1", {
                            x: -30,
                            rotate: -10
                        }, "<").set(".e.playbill2", {
                            zIndex: -1
                        }).to(".e.playbill2", {
                            x: -60,
                            rotate: -20
                        })
                    }
                }),
                lL = nL.extend({
                    elements: [...Ye.elementsFromImages("think"), ...Ye.elementsFromSprite("thought", ["thought0", "thought1", "thought2", "thought3"])],
                    onLoadComplete() {
                        C.p8.set(".e.thought0", {
                            x: 480,
                            y: 176,
                            opacity: 0
                        }), C.p8.set(".e.thought1", {
                            x: 610,
                            y: 480,
                            opacity: 0
                        }), C.p8.set(".e.thought2", {
                            x: 550,
                            y: 590,
                            opacity: 0
                        }), C.p8.set(".e.thought3", {
                            x: 608,
                            y: 210,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.thought2", {
                            opacity: 1,
                            duration: 1
                        }).to(".e.thought1", {
                            opacity: 1,
                            duration: 1
                        }, .25).to(".e.thought0", {
                            opacity: 1,
                            duration: 1
                        }, .5).to(".e.thought3", {
                            opacity: 1
                        }, .75).fillTime(1.5)
                    }
                }),
                dL = nL.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("shame", ["fuss", null, [290, 475]]),
                    onLoadComplete() {
                        C.p8.set(".e.fuss", {
                            rotate: 120,
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.fuss", {
                            x: 40,
                            duration: .2
                        }).to(".e.fuss", {
                            opacity: 1,
                            duration: .1
                        }, 0).to(".e.fuss", {
                            opacity: 0,
                            duration: .1
                        }).set(".e.fuss", {
                            x: 0
                        })
                    }
                }),
                pL = He.extend({
                    imageManifest: {
                        cutBack: Promise.resolve().then(s.t.bind(s, 85670, 17)),
                        cutFront: Promise.resolve().then(s.t.bind(s, 91981, 17)),
                        scissors: Promise.resolve().then(s.t.bind(s, 77684, 17)),
                        hat: Promise.resolve().then(s.t.bind(s, 23734, 17)),
                        blouse: Promise.resolve().then(s.t.bind(s, 53273, 17)),
                        leaf: Promise.resolve().then(s.t.bind(s, 14264, 17)),
                        window: Promise.resolve().then(s.t.bind(s, 28344, 17))
                    }
                }),
                cL = pL.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("cutBack", "scissors", "cutFront"),
                    onLoadComplete() {
                        C.p8.set(".e.scissors", {
                            x: 460,
                            y: 162
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.scissors", {
                            x: 250,
                            y: 250
                        })
                    }
                }),
                mL = pL.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("blouse", ["leaf", "leaf-0"], ["leaf", "leaf-1"], ["leaf", "leaf-2"], ["leaf", "leaf-3"], ["leaf", "leaf-4"]),
                    onLoadComplete() {
                        C.p8.set(".e.leaf-0", {
                            x: 220,
                            y: 100,
                            opacity: 0
                        }), C.p8.set(".e.leaf-1", {
                            x: 550,
                            y: 500,
                            opacity: 0,
                            rotate: 30,
                            scaleX: -1
                        }), C.p8.set(".e.leaf-2", {
                            x: 630,
                            y: 190,
                            opacity: 0,
                            rotate: 20
                        }), C.p8.set(".e.leaf-3", {
                            x: 140,
                            y: 230,
                            opacity: 0,
                            rotate: -20,
                            scaleX: -1
                        }), C.p8.set(".e.leaf-4", {
                            x: 260,
                            y: 460,
                            opacity: 0,
                            rotate: -30
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.leaf-0", {
                            opacity: 1,
                            scale: .5
                        }).to(".e.leaf-1", {
                            opacity: 1,
                            scaleX: -.5,
                            scaleY: .5
                        }).to(".e.leaf-2", {
                            opacity: 1,
                            scale: .5
                        }).to(".e.leaf-3", {
                            opacity: 1,
                            scaleX: -.5,
                            scaleY: .5
                        }).to(".e.leaf-4", {
                            opacity: 1,
                            scale: .5
                        })
                    }
                }),
                hL = pL.extend({
                    elements: Ye.elementsFromImages("window")
                }),
                uL = pL.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("blouse", ["leaf", "leaf-0"], ["leaf", "leaf-1"], ["leaf", "leaf-2"], ["leaf", "leaf-3"], ["leaf", "leaf-4"])
                    }, {
                        class: "hat",
                        type: "img",
                        key: "hat"
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.hat", {
                            y: -550,
                            scale: .4,
                            opacity: 0
                        }), C.p8.set(".e.leaf-0", {
                            x: 220,
                            y: 100,
                            scale: .5
                        }), C.p8.set(".e.leaf-1", {
                            x: 550,
                            y: 500,
                            rotate: 30,
                            scaleX: -.5,
                            scaleY: .5
                        }), C.p8.set(".e.leaf-2", {
                            x: 630,
                            y: 190,
                            rotate: 20,
                            scale: .5
                        }), C.p8.set(".e.leaf-3", {
                            x: 140,
                            y: 230,
                            rotate: -20,
                            scaleX: -.5,
                            scaleY: .5
                        }), C.p8.set(".e.leaf-4", {
                            x: 260,
                            y: 460,
                            rotate: -30,
                            scale: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            y: 130,
                            ease: "back.in(2)"
                        }).fillTime(.5).to(".e.hat", {
                            opacity: 1
                        }).to(".e.hat", {
                            y: -400,
                            ease: "back.out(2)"
                        }).fillTime(.5)
                    }
                }),
                gL = He.extend({
                    imageManifest: {
                        finish: Promise.resolve().then(s.t.bind(s, 1803, 17)),
                        sew: Promise.resolve().then(s.t.bind(s, 85942, 17))
                    }
                }),
                yL = gL.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("sew"),
                    onDiscreteProgress() {
                        Ye.squashOnce("sew")
                    }
                }),
                bL = yL,
                xL = gL.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("finish"),
                    onDiscreteProgress() {
                        Ye.squashOnce("finish")
                    }
                }),
                fL = He.extend({
                    imageManifest: {
                        headSet: Promise.resolve().then(s.t.bind(s, 58880, 17)),
                        nyc: Promise.resolve().then(s.t.bind(s, 69282, 17)),
                        set: Promise.resolve().then(s.t.bind(s, 12298, 17))
                    },
                    sprites: {
                        nyc: {
                            size: [580, 1060],
                            grid: [1, 2],
                            key: "nyc",
                            images: {
                                nyc: [0, 0],
                                devil: [0, 1]
                            }
                        },
                        set: {
                            key: "set",
                            images: {
                                tower: [0, 0, 193, 531],
                                devil: [193, 0, 181, 278],
                                front: [374, 0, 429, 350]
                            }
                        }
                    }
                }),
                vL = fL.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromSprite("nyc", ["nyc", "devil"]),
                    onLoadComplete() {
                        C.p8.set(".e.nyc", {
                            x: 120,
                            y: 100,
                            opacity: 0,
                            scale: .7
                        }), C.p8.set(".e.devil", {
                            x: 520,
                            y: 500
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.to(".e.nyc", {
                            opacity: 1,
                            scale: 1,
                            duration: .4,
                            ease: "back.out(2)"
                        })
                    }
                }),
                kL = fL.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("headSet"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.headSet", {
                            y: 100
                        }, {
                            y: -100,
                            ease: "back.in(2)"
                        })
                    }
                }),
                PL = fL.extend({
                    elements: Ye.elementsFromSprite("set", [
                        ["front", null, [440, 217]],
                        ["tower", "left", [265, 250]],
                        ["tower", "right", [265, 608]],
                        ["devil", null, [513, 792]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.left", {
                            scaleX: -1,
                            transformOrigin: "bottom left"
                        }), C.p8.set(".e.right", {
                            transformOrigin: "bottom left"
                        }), C.p8.set(".e.front", {
                            transformOrigin: "bottom center"
                        }), C.p8.set(".e.devil", {
                            skewX: -5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.devil", {
                            x: -25,
                            skewX: 0
                        }).to(".e.right", {
                            x: -16,
                            duration: .75
                        }, .2)
                    }
                }),
                wL = fL.extend({
                    elements: Ye.elementsFromSprite("set", [
                        ["front", null, [440, 217]],
                        ["tower", "right", [265, 592]],
                        ["tower", "left", [265, 250]],
                        ["devil", null, [513, 767]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.left", {
                            scaleX: -1,
                            transformOrigin: "bottom left"
                        }), C.p8.set(".e.right", {
                            transformOrigin: "bottom left"
                        }), C.p8.set(".e.front", {
                            transformOrigin: "bottom center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.front", {
                            scaleY: .25,
                            duration: 1,
                            ease: "power2.in"
                        }, 0).to(".e.right", {
                            rotate: -70,
                            duration: 1,
                            ease: "power3.in"
                        }, .2).to(".e.right", {
                            x: -15,
                            rotate: -65,
                            duration: .05,
                            ease: "power3.out"
                        }, 1.2).to(".e.right", {
                            x: -30,
                            rotate: -70,
                            duration: .05,
                            ease: "none"
                        }, 1.3).to(".e.left", {
                            rotate: 90,
                            duration: 1,
                            ease: "power3.in"
                        }, .2).to(".e.left", {
                            x: 15,
                            rotate: 85,
                            duration: .05,
                            ease: "power3.out"
                        }, 1.2).to(".e.left", {
                            x: 30,
                            rotate: 90,
                            duration: .05,
                            ease: "none"
                        }, 1.3).fillTime(.5)
                    }
                }),
                TL = He.extend({
                    imageManifest: {
                        heckler: Promise.resolve().then(s.t.bind(s, 13348, 17)),
                        exclaim: Promise.resolve().then(s.t.bind(s, 24959, 17)),
                        flee: Promise.resolve().then(s.t.bind(s, 41364, 17)),
                        spotlight: Promise.resolve().then(s.t.bind(s, 65112, 17)),
                        squint: Promise.resolve().then(s.t.bind(s, 38968, 17))
                    },
                    sprites: {
                        flee: {
                            key: "flee",
                            images: {
                                devil: [0, 0, 400, 511],
                                tomato: [400, 0, 139, 118],
                                lines: [400, 118, 139, 256]
                            }
                        },
                        squint: {
                            key: "squint",
                            images: {
                                devil: [0, 0, 730, 456],
                                eye: [730, 0, 134, 65]
                            }
                        }
                    }
                }),
                SL = TL.extend({
                    elements: Ye.elementsFromImages("spotlight", ["exclaim", null, [165, 320]]),
                    onLoadComplete() {
                        C.p8.set(".e.exclaim", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.exclaim", {
                            opacity: 1
                        }).to(".e.exclaim", {
                            opacity: 0
                        }).to(".e.exclaim", {
                            opacity: 1
                        }).to(".e.exclaim", {
                            opacity: 0
                        }).to(".e.exclaim", {
                            opacity: 1
                        }, 3).to(".e.exclaim", {
                            opacity: 0
                        }).to(".e.exclaim", {
                            opacity: 1
                        }).to(".e.exclaim", {
                            opacity: 0
                        })
                    }
                }),
                ML = TL.extend({
                    stepDuration: .65,
                    elements: Ye.elementsFromSprite("flee", [
                        ["devil", null, [180, 160]],
                        ["tomato", null, [300, 320]],
                        ["lines", null, [340, 290]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.tomato, .e.lines", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.devil", {
                            x: 400
                        }).to(".e.tomato, .e.lines", {
                            opacity: 1,
                            duration: .2
                        }, 0).to(".e.tomato", {
                            x: 100,
                            y: -100
                        }, 0)
                    }
                }),
                CL = TL.extend({
                    elements: Ye.elementsFromSprite("squint", [
                        ["devil", null, [272, 135]],
                        ["eye", "left", [545, 290]],
                        ["eye", "right", [538, 570]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.right", {
                            scaleX: -1
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.left, .e.right", {
                            x: -70,
                            duration: .5
                        }).fillTime(1).to(".e.left, .e.right", {
                            x: 70
                        }).fillTime(1).to(".e.left, .e.right", {
                            x: -70
                        }).fillTime(1).to(".e.left, .e.right", {
                            x: 70
                        }).fillTime(1)
                    }
                }),
                DL = TL.extend({
                    elements: Ye.elementsFromImages("heckler")
                }),
                FL = He.extend({
                    imageManifest: {
                        clock: Promise.resolve().then(s.t.bind(s, 10462, 17))
                    },
                    sprites: {
                        clock: {
                            key: "clock",
                            images: {
                                face: [0, 0, 681, 681],
                                hours: [681, 0, 125, 202],
                                minutes: [681, 202, 125, 242]
                            }
                        }
                    }
                }),
                zL = FL.extend({
                    elements: Ye.elementsFromSprite("clock", [
                        ["face", null, [160, 160]],
                        ["hours", null, [470, 438]],
                        ["minutes", null, [470, 438]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.hours", {
                            rotate: 10,
                            transformOrigin: "center 25px"
                        }), C.p8.set(".e.minutes", {
                            transformOrigin: "center 25px"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.minutes", {
                            rotate: 560,
                            ease: "none"
                        }).to(".e.hours", {
                            rotate: 70,
                            ease: "none"
                        }, 0)
                    }
                }),
                LL = He.extend({
                    imageManifest: {
                        run: Promise.resolve().then(s.t.bind(s, 46495, 17)),
                        spotlight: Promise.resolve().then(s.t.bind(s, 51242, 17)),
                        window: Promise.resolve().then(s.t.bind(s, 81102, 17)),
                        worry: Promise.resolve().then(s.t.bind(s, 45238, 17))
                    }
                }),
                RL = LL.extend({
                    elements: Ye.elementsFromImages("worry"),
                    onStartProgress() {
                        Ye.startHoldShake("worry")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("worry")
                    }
                }),
                IL = LL.extend({
                    elements: Ye.elementsFromImages("window")
                }),
                OL = LL.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("run"),
                    onLoadComplete() {
                        C.p8.set(".e.run", {
                            x: -300
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.run", {
                            x: -150
                        }).to(".e.run", {
                            x: 0
                        }).to(".e.run", {
                            x: 150
                        }).to(".e.run", {
                            x: 300
                        }).to(".e.run", {
                            x: 450
                        })
                    }
                }),
                BL = LL.extend({
                    className: "save-show",
                    stepDuration: .45,
                    elements: [{
                        class: "light",
                        type: "div",
                        pos: [0, 600],
                        html: ""
                    }, ...Ye.elementsFromImages(["spotlight", null, [390, 261]])],
                    onLoadComplete() {
                        C.p8.set(".e.light", {
                            transformOrigin: "top center",
                            rotateX: 45,
                            skewX: -10,
                            transformPerspective: 490
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.spotlight", {
                            scaleX: .8
                        }).fillTime(.2).to(".e.spotlight", {
                            scaleX: 1.1
                        }).set(".e.spotlight", {
                            scaleX: -1.1
                        }).to(".e.spotlight", {
                            scaleX: -1
                        }).to(".e.spotlight", {
                            scaleX: -.8
                        }).fillTime(.2).to(".e.spotlight", {
                            scaleX: -1.1
                        }).set(".e.spotlight", {
                            scaleX: 1.1
                        }).to(".e.spotlight", {
                            scaleX: 1
                        })
                    }
                }),
                YL = He.extend({
                    imageManifest: {
                        ball: Promise.resolve().then(s.t.bind(s, 44074, 17)),
                        dummy: Promise.resolve().then(s.t.bind(s, 23554, 17)),
                        football: Promise.resolve().then(s.t.bind(s, 62422, 17)),
                        pants: Promise.resolve().then(s.t.bind(s, 4772, 17)),
                        scissors: Promise.resolve().then(s.t.bind(s, 70355, 17)),
                        soccer: Promise.resolve().then(s.t.bind(s, 53803, 17)),
                        tape: Promise.resolve().then(s.t.bind(s, 25123, 17))
                    }
                }),
                AL = YL.extend({
                    stepDuration: .5,
                    lastStepDuration: 1,
                    elements: [{
                        class: "dummy-container",
                        type: "container",
                        children: [{
                            class: "ball",
                            type: "img",
                            key: "ball"
                        }, {
                            class: "football",
                            type: "img",
                            key: "football"
                        }, {
                            class: "soccer",
                            type: "img",
                            key: "soccer"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.ball", {
                            scale: .6,
                            opacity: .5,
                            x: -100,
                            y: -100
                        }), C.p8.set(".e.football", {
                            scale: .8,
                            opacity: .75,
                            x: 100,
                            y: -50
                        }), this.timeline.to(".e.soccer", {
                            duration: .5,
                            ease: "back.in",
                            scale: .8,
                            opacity: 0,
                            x: -500,
                            y: -500,
                            rotate: 360
                        }, 0).to(".e.football", {
                            duration: .5,
                            ease: "back.in",
                            scale: 1,
                            opacity: 1,
                            x: 0,
                            y: 0
                        }, 0).to(".e.ball", {
                            duration: .5,
                            ease: "back.in",
                            scale: .8,
                            opacity: .75,
                            x: 100,
                            y: -50
                        }, 0).to(".e.football", {
                            duration: .5,
                            ease: "back.in",
                            scale: .8,
                            opacity: 0,
                            x: 500,
                            y: -500,
                            rotate: -360
                        }, .5).to(".e.ball", {
                            duration: .5,
                            ease: "back.in",
                            scale: 1,
                            opacity: 1,
                            x: 0,
                            y: 0
                        }, .5).to(".e.ball", {
                            duration: .5,
                            ease: "back.in",
                            scale: 2
                        }, 1).to(".e.ball", {
                            duration: .5,
                            ease: "back.in",
                            rotate: 360,
                            opacity: 0,
                            scale: 3
                        }, 1.5)
                    }
                }),
                HL = YL.extend({
                    stepDuration: 1.5,
                    elements: [{
                        class: "dummy-container",
                        type: "container",
                        children: [{
                            class: "pants",
                            type: "img",
                            key: "pants"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.pants", {
                            scaleX: .6,
                            scaleY: .6
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.pants", {
                            scaleX: .75,
                            scaleY: .5,
                            rotate: 0,
                            ease: "power4.out",
                            duration: .5
                        }).to(".e.pants", {
                            scaleX: 1,
                            scaleY: 1,
                            rotate: 0,
                            ease: "elastic.out",
                            duration: .5
                        })
                    }
                }),
                GL = YL.extend({
                    stepDuration: 2,
                    elements: [{
                        class: "dummy-container",
                        type: "container",
                        children: [{
                            class: "tape",
                            type: "img",
                            key: "tape"
                        }, {
                            class: "scissors",
                            type: "img",
                            key: "scissors"
                        }]
                    }],
                    tapePE: null,
                    initializeTimeline() {
                        this.tapePE = Ye.addParticleEmitter({
                            container: "dummy-container",
                            image: "tape",
                            autoplay: !1,
                            zIndex: -1,
                            settings: {
                                particleLimit: 25,
                                randomAngleRange: 35,
                                force: -10,
                                minSize: 100,
                                maxSize: 400,
                                boundaries: {
                                    top: 250,
                                    bottom: 500,
                                    left: 0,
                                    right: 600
                                }
                            }
                        }, this)
                    },
                    onDiscreteProgress() {
                        Ye.startShake("scissors", 25, 45, 1), this.tapePE.play()
                    }
                }),
                VL = YL.extend({
                    lastStepDuration: .5,
                    elements: [{
                        class: "dummy-container",
                        type: "container",
                        children: [{
                            class: "dummy",
                            type: "img",
                            key: "dummy"
                        }]
                    }],
                    initializeTimeline() {
                        this.timeline.fromTo(".e.dummy", {
                            scale: .5
                        }, {
                            rotate: 360,
                            scale: 1.5,
                            ease: "back.inOut"
                        })
                    }
                }),
                EL = He.extend({
                    imageManifest: {
                        box: Promise.resolve().then(s.t.bind(s, 58883, 17)),
                        chair: Promise.resolve().then(s.t.bind(s, 64400, 17)),
                        marble1: Promise.resolve().then(s.t.bind(s, 62067, 17)),
                        marble2: Promise.resolve().then(s.t.bind(s, 73649, 17)),
                        marble3: Promise.resolve().then(s.t.bind(s, 40464, 17)),
                        mug: Promise.resolve().then(s.t.bind(s, 52439, 17))
                    }
                }),
                qL = EL.extend({
                    stepDuration: 1,
                    elements: [{
                        class: "dummy-container",
                        type: "container",
                        children: [{
                            class: "chair",
                            type: "img",
                            key: "chair"
                        }]
                    }],
                    onDiscreteProgress() {
                        Ye.squashOnce("chair", .5)
                    }
                }),
                NL = EL.extend({
                    elements: [{
                        class: "chair-container",
                        type: "container",
                        children: [{
                            class: "chair",
                            type: "img",
                            key: "chair"
                        }, {
                            class: "mug",
                            type: "img",
                            key: "mug"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.fromTo(".e.mug", {
                            scale: 1.5,
                            x: 500,
                            y: 1e3,
                            filter: "blur(10px)",
                            opacity: 0
                        }, {
                            y: 500,
                            opacity: 1,
                            ease: "power4.out",
                            duration: .5,
                            delay: .25
                        }), this.timeline.to(".e.mug", {
                            filter: "blur(0px)",
                            scale: .25,
                            x: -250,
                            y: -150,
                            ease: "back.inOut"
                        }).to(".e.mug", {
                            rotate: 25
                        }).to(".e.mug", {
                            rotate: 0
                        })
                    }
                }),
                XL = EL.extend({
                    stepDuration: 1.25,
                    elements: [{
                        class: "chair-container",
                        type: "container",
                        children: [{
                            class: "chair",
                            type: "img",
                            key: "chair"
                        }, {
                            class: "mug",
                            type: "img",
                            key: "mug"
                        }, {
                            class: "box",
                            type: "img",
                            key: "box"
                        }]
                    }, {
                        class: "marble-container",
                        type: "container",
                        children: [{
                            class: "marble1",
                            type: "img",
                            key: "marble1"
                        }, {
                            class: "marble2",
                            type: "img",
                            key: "marble2"
                        }, {
                            class: "marble3",
                            type: "img",
                            key: "marble3"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.mug", {
                            scale: .25,
                            x: -250,
                            y: -150
                        }), C.p8.set(".marble-container", {
                            hidden: !0
                        }), C.p8.fromTo(".e.box", {
                            scale: .5,
                            y: 500,
                            opacity: 0
                        }, {
                            y: 25,
                            opacity: 1,
                            ease: "back.out",
                            duration: .5,
                            delay: .25
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("chair-container", "marble-container", .25), C.p8.timeline().to(".e.marble1", {
                            x: 300,
                            y: 100,
                            rotate: 360
                        }, 0).to(".e.marble2", {
                            x: -250,
                            y: -50,
                            rotate: -360
                        }, .1).to(".e.marble3", {
                            x: 50,
                            y: 350,
                            rotate: 360
                        }, .2)
                    }
                }),
                WL = EL.extend({
                    stepDuration: .5,
                    lastStepDuration: 1,
                    elements: [{
                        class: "marble-container",
                        type: "container",
                        children: [{
                            class: "marble1",
                            type: "img",
                            key: "marble1"
                        }, {
                            class: "marble2",
                            type: "img",
                            key: "marble2"
                        }, {
                            class: "marble3",
                            type: "img",
                            key: "marble3"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.marble1", {
                            x: 300,
                            y: 100
                        }), C.p8.set(".e.marble2", {
                            x: -250,
                            y: -50
                        }), C.p8.set(".e.marble3", {
                            x: 50,
                            y: 350
                        })
                    },
                    onDiscreteProgress(e) {
                        C.p8.timeline().to(".e.marble1", {
                            ease: "power3.out",
                            duration: .5,
                            x: (0, i.random)(-200, 200),
                            y: (0, i.random)(-400, 400),
                            rotate: (0, i.random)(720, 1920)
                        }, 0).to(".e.marble2", {
                            ease: "power3.out",
                            duration: .5,
                            x: (0, i.random)(-200, 200),
                            y: (0, i.random)(-400, 400),
                            rotate: (0, i.random)(720, 1920)
                        }, 0).to(".e.marble3", {
                            ease: "power3.out",
                            duration: .5,
                            x: (0, i.random)(-200, 200),
                            y: (0, i.random)(-400, 400),
                            rotate: (0, i.random)(720, 1920)
                        }, 0), e >= 90 && Ye.squashOnce("marble-container", .5)
                    }
                }),
                UL = He.extend({
                    imageManifest: {
                        bleach: Promise.resolve().then(s.t.bind(s, 20063, 17)),
                        box: Promise.resolve().then(s.t.bind(s, 79845, 17)),
                        fridge: Promise.resolve().then(s.t.bind(s, 65919, 17)),
                        milksoda: Promise.resolve().then(s.t.bind(s, 88973, 17)),
                        milk: Promise.resolve().then(s.t.bind(s, 75062, 17)),
                        soda: Promise.resolve().then(s.t.bind(s, 31650, 17))
                    }
                }),
                $L = UL.extend({
                    stepDuration: 1.5,
                    elements: [{
                        class: "collider-container",
                        type: "container",
                        children: [{
                            class: "fridge",
                            type: "img",
                            key: "fridge"
                        }, {
                            class: "milk",
                            type: "img",
                            key: "milk"
                        }, {
                            class: "soda",
                            type: "img",
                            key: "soda"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.fridge", {
                            scale: 1.5
                        }), C.p8.set(".e.milk", {
                            scale: .5,
                            hidden: !0
                        }), C.p8.set(".e.soda", {
                            scale: .5,
                            hidden: !0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("collider-container", .5), C.p8.timeline({
                            delay: .25
                        }).set(".e.milk", {
                            hidden: !1
                        }).to(".e.milk", {
                            x: 200,
                            y: -200,
                            ease: "power3.out",
                            rotate: -360,
                            duration: .25
                        }).to(".e.milk", {
                            x: 200,
                            y: 380,
                            ease: "power3.in",
                            rotate: -450,
                            duration: .25
                        }), C.p8.timeline({
                            delay: .25
                        }).set(".e.soda", {
                            hidden: !1
                        }).to(".e.soda", {
                            x: -200,
                            y: -250,
                            ease: "power3.out",
                            rotate: 360,
                            duration: .25
                        }).to(".e.soda", {
                            x: -200,
                            y: 420,
                            ease: "power3.in",
                            rotate: 440,
                            duration: .25
                        })
                    }
                }),
                jL = UL.extend({
                    elements: [{
                        class: "collider-container",
                        type: "container",
                        children: [{
                            class: "fridge",
                            type: "img",
                            key: "fridge"
                        }, {
                            class: "milk",
                            type: "img",
                            key: "milk"
                        }, {
                            class: "soda",
                            type: "img",
                            key: "soda"
                        }]
                    }, {
                        class: "milksoda-container",
                        type: "container",
                        children: [{
                            class: "milksoda",
                            type: "img",
                            key: "milksoda"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.fromTo(".e.fridge", {
                            scale: 1.5
                        }, {
                            scale: 1,
                            opacity: 0,
                            duration: .5,
                            ease: "back.in",
                            delay: .2
                        }), C.p8.set(".e.milk", {
                            scale: .5,
                            x: 200,
                            y: 380,
                            rotate: -450
                        }), C.p8.set(".e.soda", {
                            scale: .5,
                            x: -200,
                            y: 420,
                            rotate: 440
                        }), C.p8.set(".milksoda-container", {
                            hidden: !0
                        }), this.timeline.to(".e.milk", {
                            scale: .6,
                            x: 162,
                            y: -220,
                            rotate: -438
                        }).to(".e.soda", {
                            scale: .6,
                            x: -240,
                            y: -240,
                            rotate: 412
                        })
                    },
                    canPour: !0,
                    onProgress(e) {
                        e >= 40 && !0 === this.canPour ? (this.canPour = !1, Ye.squashTransition("collider-container", "milksoda-container", .75)) : e < 40 && (C.p8.set(".milksoda-container", {
                            hidden: !0,
                            scale: 1
                        }), C.p8.set(".collider-container", {
                            hidden: !1,
                            scale: 1
                        }), this.canPour = !0)
                    }
                }),
                KL = UL.extend({
                    stepDuration: 1.25,
                    elements: [{
                        class: "pour-container",
                        type: "container",
                        children: [{
                            class: "milksoda",
                            type: "img",
                            key: "milksoda"
                        }, {
                            class: "bleach",
                            type: "img",
                            key: "bleach"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.bleach", {
                            hidden: !0,
                            x: -20,
                            y: -90
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("milksoda", "bleach", .25)
                    }
                }),
                ZL = UL.extend({
                    stepDuration: .25,
                    elements: [{
                        class: "pour-container",
                        type: "container",
                        children: [{
                            class: "bleach",
                            type: "img",
                            key: "bleach"
                        }, {
                            class: "box",
                            type: "img",
                            key: "box"
                        }]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.bleach", {
                            hidden: !1,
                            x: -20,
                            y: -90
                        }), C.p8.set(".e.box", {
                            hidden: !0
                        }), Ye.squashTransition("bleach", "box", .25);
                        const e = C.p8.timeline({
                            repeat: 4
                        }).to(".e.box", {
                            y: -50,
                            ease: "power3.out",
                            duration: .5
                        }).to(".e.box", {
                            y: 50,
                            ease: "power3.out",
                            duration: .5
                        });
                        this.timeline.add(e)
                    }
                }),
                JL = He.extend({
                    imageManifest: {
                        barf: Promise.resolve().then(s.t.bind(s, 36163, 17)),
                        food: Promise.resolve().then(s.t.bind(s, 34747, 17)),
                        hold: Promise.resolve().then(s.t.bind(s, 22426, 17)),
                        proud: Promise.resolve().then(s.t.bind(s, 61198, 17))
                    }
                }),
                _L = JL.extend({
                    stepDuration: .25,
                    lastStepDuration: 1.5,
                    elements: [{
                        class: "food-container",
                        type: "container",
                        children: [{
                            class: "food",
                            type: "img",
                            key: "food"
                        }]
                    }],
                    pe: null,
                    initializeTimeline() {
                        this.pe = Ye.addParticleEmitter({
                            container: "food-container",
                            autoplay: !1,
                            frequency: .01,
                            restartOnProgress: !0,
                            settings: {
                                particleLimit: 5,
                                randomAngleRange: 35,
                                force: -5,
                                minSize: 60,
                                maxSize: 200,
                                boundaries: {
                                    top: 50,
                                    bottom: 50,
                                    left: 250,
                                    right: 750
                                },
                                from: {
                                    backgroundColor: "#599DE1",
                                    border: "12px solid black",
                                    borderRadius: "90px",
                                    width: 100
                                }
                            }
                        }, this)
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("food", .25)
                    }
                }),
                QL = JL.extend({
                    stepDuration: .25,
                    lastStepDuration: 1.5,
                    elements: [{
                        class: "food-container",
                        type: "container",
                        children: [{
                            class: "food",
                            type: "img",
                            key: "food"
                        }]
                    }],
                    pe: null,
                    initializeTimeline() {
                        this.pe = Ye.addParticleEmitter({
                            container: "food-container",
                            autoplay: !1,
                            frequency: .001,
                            restartOnProgress: !0,
                            settings: {
                                particleLimit: 20,
                                randomAngleRange: 35,
                                force: -10,
                                minSize: 60,
                                maxSize: 200,
                                boundaries: {
                                    top: 50,
                                    bottom: 50,
                                    left: 250,
                                    right: 750
                                },
                                from: {
                                    backgroundColor: "#599DE1",
                                    border: "12px solid black",
                                    borderRadius: "90px",
                                    width: 100
                                }
                            }
                        }, this)
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("food", .25)
                    }
                }),
                eR = JL.extend({
                    elements: [{
                        class: "food-container",
                        type: "container",
                        children: [{
                            class: "proud",
                            type: "img",
                            key: "proud"
                        }]
                    }]
                }),
                tR = JL.extend({
                    elements: [{
                        class: "food-container",
                        type: "container",
                        children: [{
                            class: "hold",
                            type: "img",
                            key: "hold"
                        }, {
                            class: "barf",
                            type: "img",
                            key: "barf"
                        }]
                    }],
                    pe: null,
                    canPuke: !0,
                    canShake: !0,
                    initializeTimeline() {
                        C.p8.set(".e.barf", {
                            hidden: !0
                        }), this.pe = Ye.addParticleEmitter({
                            container: "food-container",
                            autoplay: !1,
                            frequency: .01,
                            settings: {
                                randomAngleRange: 35,
                                force: -15,
                                minSize: 60,
                                maxSize: 200,
                                boundaries: {
                                    top: 400,
                                    bottom: 400
                                },
                                from: {
                                    backgroundColor: "black",
                                    border: "12px solid white",
                                    borderRadius: "90px",
                                    width: 75
                                }
                            }
                        }, this)
                    },
                    onProgress(e) {
                        e >= 15 && this.canPuke ? (this.canPuke = !1, Ye.squashTransition("hold", "barf", .5), Ye.startShake("barf", 10, 10, 2)) : e < 15 && (Ye.stopShake("barf"), C.p8.set(".e.barf", {
                            hidden: !0,
                            scale: 1
                        }), C.p8.set(".e.hold", {
                            hidden: !1,
                            scale: 1
                        }), this.canPuke = !0), e > 25 ? this.pe.play() : this.pe.pause()
                    }
                }),
                sR = He.extend({
                    imageManifest: {
                        tv: Promise.resolve().then(s.t.bind(s, 48501, 17)),
                        anime: Promise.resolve().then(s.t.bind(s, 44621, 17)),
                        billy: Promise.resolve().then(s.t.bind(s, 71275, 17)),
                        cat: Promise.resolve().then(s.t.bind(s, 2514, 17)),
                        horror: Promise.resolve().then(s.t.bind(s, 27152, 17)),
                        chainsaw: Promise.resolve().then(s.t.bind(s, 16539, 17)),
                        pillow: Promise.resolve().then(s.t.bind(s, 260, 17)),
                        static: Promise.resolve().then(s.t.bind(s, 28756, 17)),
                        hide: Promise.resolve().then(s.t.bind(s, 71903, 17))
                    }
                }),
                iR = sR.extend({
                    stepDuration: .25,
                    lastStepDuration: .5,
                    elements: Ye.elementsFromImages("static", "anime", "cat", "billy", "chainsaw", "tv"),
                    onLoadComplete() {
                        C.p8.set(".e.anime, .e.cat, .e.billy, .e.chainsaw", {
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.anime", {
                            visibility: "visible"
                        }, 0).set(".e.anime", {
                            visibility: "hidden"
                        }, 1).set(".e.cat", {
                            visibility: "visible"
                        }, 1).set(".e.cat", {
                            visibility: "hidden"
                        }, 2).set(".e.billy", {
                            visibility: "visible"
                        }, 2).set(".e.billy", {
                            visibility: "hidden"
                        }, 3).set(".e.anime", {
                            visibility: "visible"
                        }, 3).set(".e.anime", {
                            visibility: "hidden"
                        }, 4).set(".e.chainsaw", {
                            visibility: "visible"
                        }, 4)
                    }
                }),
                oR = sR.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("chainsaw", "tv")
                    }],
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                nR = sR.extend({
                    elements: Ye.elementsFromImages("pillow"),
                    initializeTimeline() {
                        this.timeline.to(".e.pillow", {
                            scaleX: .85,
                            ease: "bounce.in"
                        }).to(".e.pillow", {
                            scaleX: .7,
                            ease: "bounce.in"
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("pillow")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("pillow")
                    }
                }),
                aR = sR.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("horror", "tv", ["hide", "handL"], ["hide", "handR"]),
                    onLoadComplete() {
                        C.p8.set(".e.handL", {
                            x: -800,
                            y: 500,
                            scaleX: -1
                        }), C.p8.set(".e.handR", {
                            x: 800,
                            y: 500
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.handL", {
                            x: -100,
                            y: 0
                        }, 0).to(".e.handR", {
                            x: 100,
                            y: 0
                        }, 0)
                    }
                }),
                rR = He.extend({
                    imageManifest: {
                        clock: Promise.resolve().then(s.t.bind(s, 10462, 17)),
                        lips: Promise.resolve().then(s.t.bind(s, 77336, 17)),
                        mug: Promise.resolve().then(s.t.bind(s, 63205, 17))
                    },
                    sprites: {
                        clock: {
                            key: "clock",
                            images: {
                                face: [0, 0, 681, 681],
                                hours: [681, 0, 125, 202],
                                minutes: [681, 202, 125, 242]
                            }
                        }
                    }
                }),
                lR = rR.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("lips", "mug"),
                    onLoadComplete() {
                        C.p8.set(".e.lips", {
                            opacity: 0
                        }), C.p8.set(".e.mug", {
                            transformOrigin: "top center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.lips", {
                            y: -200,
                            opacity: 1
                        }).to(".e.mug", {
                            x: 60,
                            y: 300,
                            scale: .5
                        }, 0)
                    }
                }),
                dR = rR.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("lips", "mug")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.lips", {
                            y: -200
                        }), C.p8.set(".e.mug", {
                            x: 60,
                            y: 300,
                            scale: .5,
                            transformOrigin: "top center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.mug", {
                            scaleY: .45
                        }).fillTime(3)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                pR = rR.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("clock", [
                        ["face", null, [160, 160]],
                        ["hours", null, [470, 438]],
                        ["minutes", null, [470, 438]]
                    ]),
                    onLoadComplete() {
                        Ye.startShake(".instructions", 2, 2, 2), C.p8.fromTo(".e.hours", {
                            transformOrigin: "center 25px"
                        }, {
                            rotate: 360,
                            duration: 12,
                            repeat: -1,
                            ease: "none"
                        }), C.p8.fromTo(".e.minutes", {
                            transformOrigin: "center 25px"
                        }, {
                            rotate: 360,
                            duration: 1,
                            repeat: -1,
                            ease: "none"
                        })
                    }
                }),
                cR = rR.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("lips", "mug")
                    }],
                    onLoadComplete() {
                        Ye.startShake(".instructions", 3, 3, 3), C.p8.set(".e.lips", {
                            y: -200
                        }), C.p8.set(".e.mug", {
                            x: 60,
                            y: 300,
                            scaleX: .5,
                            scaleY: .45,
                            transformOrigin: "top center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.mug", {
                            scaleY: .4
                        }).fillTime(3)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                mR = He.extend({
                    imageManifest: {
                        house: Promise.resolve().then(s.t.bind(s, 38972, 17)),
                        pillow: Promise.resolve().then(s.t.bind(s, 76432, 17)),
                        cousin: Promise.resolve().then(s.t.bind(s, 6359, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "cousin",
                            images: {
                                doorClosed: [10, 1339, 338, 466, 98, 414],
                                doorOpen: [10, 863, 373, 466, 101, 57]
                            }
                        }
                    }
                }),
                hR = mR.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("pillow"),
                    onDiscreteProgress() {
                        Ye.squashOnce("pillow", .35)
                    }
                }),
                uR = mR.extend({
                    stepDuration: .25,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["doorClosed"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.c", {
                            scaleX: -1
                        }), C.p8.set(".e.doorClosed", {
                            x: -100,
                            y: 200,
                            scaleX: 1,
                            transformOrigin: "left center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.doorClosed", {
                            x: -200,
                            scale: 1.5,
                            ease: "none"
                        })
                    }
                }),
                gR = mR.extend({
                    stepDuration: .35,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["doorClosed", "doorOpen"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.c", {
                            scaleX: -1
                        }), C.p8.set(".e.doorClosed", {
                            x: -200,
                            y: 200,
                            scale: 1.5,
                            transformOrigin: "left center"
                        }), C.p8.set(".e.doorOpen", {
                            x: -200,
                            y: 200,
                            scaleX: 0,
                            scaleY: 1.5,
                            transformOrigin: "right center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.doorClosed", {
                            scaleX: 0,
                            ease: "none"
                        }).to(".e.doorOpen", {
                            scaleX: 1.5,
                            ease: "none"
                        })
                    }
                }),
                yR = mR.extend({
                    elements: Ye.elementsFromImages(["house", null, [200, 0]]),
                    initializeTimeline() {
                        this.timeline.to(".e.house", {
                            scale: .9
                        })
                    }
                }),
                bR = He.extend({
                    imageManifest: {
                        clock: Promise.resolve().then(s.t.bind(s, 10462, 17)),
                        scratch: Promise.resolve().then(s.t.bind(s, 51517, 17)),
                        closet: Promise.resolve().then(s.t.bind(s, 14689, 17))
                    },
                    sprites: {
                        closet: {
                            key: "closet",
                            images: {
                                closet: [0, 0, 932, 756],
                                door: [0, 756, 496, 756],
                                hiding: [0, 1510, 131, 209]
                            }
                        },
                        scratch: {
                            key: "scratch",
                            images: {
                                exclaim: [10, 10, 203, 884, 58, 399],
                                hand: [223, 10, 258, 638, 361, 384],
                                scratch: [223, 658, 217, 299, 86, 445]
                            }
                        },
                        clock: {
                            key: "clock",
                            images: {
                                face: [0, 0, 681, 681],
                                hours: [681, 0, 125, 202],
                                minutes: [681, 202, 125, 242]
                            }
                        }
                    }
                }),
                xR = bR.extend({
                    stepDuration: .75,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("closet", [
                            ["closet", null, [122, 34]],
                            ["hiding", null, [427, 754]],
                            ["door", null, [122, 468]]
                        ])
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.door", {
                            x: -400,
                            duration: 1,
                            ease: "bounce.out"
                        }).to(".e.door", {
                            x: 0,
                            duration: 1,
                            ease: "bounce.out"
                        })
                    }
                }),
                fR = bR.extend({
                    elements: Ye.elementsFromSprite("scratch", ["scratch", "hand"]),
                    onLoadComplete() {
                        C.p8.set(".e.hand", {
                            x: 4,
                            y: -270
                        }), C.p8.set(".e.scratch", {
                            clipPath: "inset(0% 0% 100%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.hand", {
                            x: -14,
                            y: -218,
                            duration: 1
                        }, 0).to(".e.scratch", {
                            clipPath: "inset(0% 0% 72%)",
                            duration: 1
                        }, 0).to(".e.hand", {
                            x: 10,
                            y: -185,
                            duration: 1
                        }, 1).to(".e.scratch", {
                            clipPath: "inset(0% 0% 61%)",
                            duration: 1
                        }, 1).to(".e.hand", {
                            x: -10,
                            y: -135,
                            duration: 1
                        }, 2).to(".e.scratch", {
                            clipPath: "inset(0% 0% 47%)",
                            duration: 1
                        }, 2).to(".e.hand", {
                            x: 15,
                            y: -105,
                            duration: 1
                        }, 3).to(".e.scratch", {
                            clipPath: "inset(0% 0% 35%)",
                            duration: 1
                        }, 3).to(".e.hand", {
                            x: -10,
                            y: -65,
                            duration: 1
                        }, 4).to(".e.scratch", {
                            clipPath: "inset(0% 0% 24%)",
                            duration: 1
                        }, 4).to(".e.hand", {
                            x: 12,
                            y: -35,
                            duration: 1
                        }, 5).to(".e.scratch", {
                            clipPath: "inset(0% 0% 13%)",
                            duration: 1
                        }, 5).to(".e.hand", {
                            x: 0,
                            y: 0,
                            duration: 1
                        }, 6).to(".e.scratch", {
                            clipPath: "inset(0% 0% 0%)",
                            duration: 1
                        }, 6)
                    }
                }),
                vR = bR.extend({
                    elements: Ye.elementsFromSprite("clock", [
                        ["face", null, [160, 160]],
                        ["hours", null, [470, 438]],
                        ["minutes", null, [470, 438]]
                    ]),
                    onLoadComplete() {
                        C.p8.fromTo(".e.hours", {
                            transformOrigin: "center 25px"
                        }, {
                            rotate: 360,
                            duration: 12,
                            repeat: -1,
                            ease: "none"
                        }), C.p8.fromTo(".e.minutes", {
                            transformOrigin: "center 25px"
                        }, {
                            rotate: 360,
                            duration: 1,
                            repeat: -1,
                            ease: "none"
                        })
                    }
                }),
                kR = bR.extend({
                    stepDuration: .7,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("closet", [
                            ["closet", null, [122, 34]],
                            ["hiding", null, [427, 754]],
                            ["door", null, [122, 468]]
                        ])
                    }, {
                        class: "scare",
                        type: "div",
                        pos: [-5e3, -5e3]
                    }, ...Ye.elementsFromSprite("scratch", ["exclaim"])],
                    onLoadComplete() {
                        C.p8.set(".e.scare", {
                            hidden: !0,
                            width: 11e3,
                            height: 11e3,
                            backgroundColor: "#AE1D1D"
                        }), C.p8.set(".e.exclaim", {
                            hidden: !0,
                            scale: .5
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.door", {
                            x: -400,
                            duration: 1,
                            ease: "bounce.out"
                        }).to(".e.c", {
                            scale: .5,
                            duration: .5
                        }, .25).set(".e.exclaim", {
                            hidden: !1
                        }, .25).to(".e.exclaim", {
                            scale: 1,
                            duration: .25
                        }, .25).set(".e.scare", {
                            hidden: !0
                        }, .25).to(".e.exclaim", {
                            rotate: 3,
                            duration: .1
                        }, .25).set(".e.scare", {
                            hidden: !1
                        }).to(".e.exclaim", {
                            rotate: -3,
                            duration: .1
                        }).set(".e.scare", {
                            hidden: !0
                        }).to(".e.exclaim", {
                            rotate: 3,
                            duration: .1
                        }).set(".e.scare", {
                            hidden: !1
                        }).to(".e.exclaim", {
                            rotate: -3,
                            duration: .1
                        }).set(".e.scare", {
                            hidden: !0
                        }).to(".e.exclaim", {
                            rotate: 3,
                            duration: .1
                        }).set(".e.scare", {
                            hidden: !1
                        }).to(".e.exclaim", {
                            rotate: -3,
                            duration: .1
                        })
                    }
                }),
                PR = He.extend({
                    imageManifest: {
                        scare: Promise.resolve().then(s.t.bind(s, 74341, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "scare",
                            images: {
                                face: [10, 10, 270, 243, 244, 455],
                                shadow: [10, 765, 697, 954, 28, 149],
                                question: [290, 10, 476, 745, 128, 259],
                                run: [717, 767, 819, 964, 18, 88],
                                stairs: [776, 10, 956, 747, 166, 19]
                            }
                        }
                    }
                }),
                wR = PR.extend({
                    stepDuration: .6,
                    shouldWiggle: !1,
                    elements: Ye.elementsFromSprite("sprite", ["stairs"]),
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.stairs", {
                            scale: .98,
                            duration: .3
                        }).to(".e.stairs", {
                            scale: 1,
                            duration: .3
                        })
                    }
                }),
                TR = PR.extend({
                    elements: Ye.elementsFromSprite("sprite", ["shadow", "face"]),
                    onLoadComplete() {
                        C.p8.set(".e.face", {
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.face", {
                            visibility: "hidden"
                        }, 0).set(".e.face", {
                            visibility: "visible"
                        }, .05).set(".e.face", {
                            visibility: "hidden"
                        }, .1).set(".e.face", {
                            visibility: "visible"
                        }, .15).set(".e.face", {
                            visibility: "hidden"
                        }, .2).set(".e.face", {
                            visibility: "visible"
                        }, .25).set(".e.face", {
                            visibility: "hidden"
                        }, .35).set(".e.face", {
                            visibility: "visible"
                        }, .65).set(".e.face", {
                            visibility: "hidden"
                        }, .7).fillTime(2)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("shadow")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("shadow")
                    }
                }),
                SR = PR.extend({
                    elements: Ye.elementsFromSprite("sprite", ["question"])
                }),
                MR = PR.extend({
                    stepDuration: .3,
                    elements: Ye.elementsFromSprite("sprite", ["run"]),
                    onDiscreteProgress() {
                        Ye.squashOnce("run", .3)
                    }
                }),
                CR = He.extend({
                    imageManifest: {
                        bed: Promise.resolve().then(s.t.bind(s, 69197, 17))
                    }
                }).extend({
                    elements: Ye.elementsFromImages("bed")
                }),
                DR = He.extend({
                    imageManifest: {
                        door: Promise.resolve().then(s.t.bind(s, 90700, 17)),
                        garage: Promise.resolve().then(s.t.bind(s, 5215, 17)),
                        light: Promise.resolve().then(s.t.bind(s, 30630, 17))
                    }
                }),
                FR = DR.extend({
                    elements: Ye.elementsFromImages("garage")
                }),
                zR = DR.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("light"),
                    onDiscreteProgress() {
                        Ye.squashOnce("light", .35)
                    }
                }),
                LR = DR.extend({
                    elements: Ye.elementsFromImages("door")
                }),
                RR = He.extend({
                    imageManifest: {
                        door: Promise.resolve().then(s.t.bind(s, 87954, 17)),
                        sh: Promise.resolve().then(s.t.bind(s, 11239, 17)),
                        sshh: Promise.resolve().then(s.t.bind(s, 41950, 17))
                    }
                }),
                IR = RR.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("door"),
                    onDiscreteProgress() {
                        Ye.squashOnce("door", .45)
                    }
                }),
                OR = RR.extend({
                    elements: Ye.elementsFromImages("sh"),
                    onLoadComplete() {
                        C.p8.set(".e.sh", {
                            scale: .7,
                            opacity: 0
                        })
                    },
                    onStartProgress() {
                        C.p8.to(".e.sh", {
                            scale: 1,
                            duration: .4,
                            ease: "back.out(2)"
                        }), C.p8.to(".e.sh", {
                            opacity: 1,
                            duration: .05
                        })
                    },
                    onStopProgress() {
                        C.p8.to(".e.sh", {
                            scale: .7,
                            opacity: 0,
                            duration: .2
                        })
                    }
                }),
                BR = RR.extend({
                    elements: Ye.elementsFromImages("sshh"),
                    onLoadComplete() {
                        C.p8.set(".e.sshh", {
                            scale: .7,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.sshh", {
                            x: -4e3,
                            ease: "none"
                        })
                    },
                    onStartProgress() {
                        C.p8.to(".e.sshh", {
                            scale: 1,
                            duration: .4,
                            ease: "back.out(2)"
                        }), C.p8.to(".e.sshh", {
                            opacity: 1,
                            duration: .05
                        })
                    },
                    onStopProgress() {
                        C.p8.to(".e.sshh", {
                            scale: .7,
                            opacity: 0,
                            duration: .2
                        })
                    }
                }),
                YR = He.extend({
                    imageManifest: {
                        one: Promise.resolve().then(s.t.bind(s, 91702, 17)),
                        three: Promise.resolve().then(s.t.bind(s, 262, 17)),
                        two: Promise.resolve().then(s.t.bind(s, 8673, 17))
                    }
                }),
                AR = YR.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("one"),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("one"))
                    }
                }),
                HR = YR.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromImages("one", "two", "three"),
                    onLoadComplete() {
                        C.p8.set(".e.two, .e.three", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("one", "two")), this.timeline.add(Ye.squashTransition("two", "three"))
                    }
                }),
                GR = YR.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages(["three", "three0"], ["three", "three1"], ["three", "three2"], ["three", "three3"], ["three", "three4"], ["three", "three5"], ["three", "three6"], ["three", "three7"], ["three", "three8"], ["three", "three9"], ["three", "three10"], ["three", "three11"], ["three", "three12"], ["three", "three13"], ["three", "three14"])
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.c", {
                            scale: 1.5,
                            duration: 1
                        }, 0).to(".e.three14", {
                            scale: .93,
                            rotate: 2,
                            duration: .5,
                            ease: "power1.in"
                        }, 0).to(".e.three13", {
                            scale: .87,
                            rotate: 4,
                            duration: .5,
                            ease: "power1.in"
                        }, 0).to(".e.three12", {
                            scale: .81,
                            rotate: 6,
                            duration: .5,
                            ease: "power1.in"
                        }, 0).to(".e.three11", {
                            scale: .75,
                            rotate: 8,
                            duration: .5,
                            ease: "power1.in"
                        }, 0).to(".e.three10", {
                            scale: .68,
                            rotate: 10,
                            duration: .5,
                            ease: "power1.in"
                        }, 0).to(".e.three9", {
                            scale: .62,
                            rotate: 12,
                            duration: .5,
                            ease: "power1.in"
                        }, 0).to(".e.three8", {
                            scale: .56,
                            rotate: 14,
                            duration: .5,
                            ease: "power1.in"
                        }, 0).to(".e.three7", {
                            scale: .5,
                            rotate: 16,
                            duration: .5,
                            ease: "power1.in"
                        }, 0).to(".e.three6", {
                            scale: .43,
                            rotate: 18,
                            duration: .5,
                            ease: "power1.in"
                        }, 0).to(".e.three5", {
                            scale: .37,
                            rotate: 20,
                            duration: .5,
                            ease: "power1.in"
                        }, 0).to(".e.three4", {
                            scale: .31,
                            rotate: 22,
                            duration: .5,
                            ease: "power1.in"
                        }, 0).to(".e.three3", {
                            scale: .25,
                            rotate: 24,
                            duration: .5,
                            ease: "power1.in"
                        }, 0).to(".e.three2", {
                            scale: .18,
                            rotate: 26,
                            duration: .5,
                            ease: "power1.in"
                        }, 0).to(".e.three1", {
                            scale: .12,
                            rotate: 28,
                            duration: .5,
                            ease: "power1.in"
                        }, 0).to(".e.three0", {
                            scale: .06,
                            rotate: 30,
                            duration: .5,
                            ease: "power1.in"
                        }, 0)
                    }
                }),
                VR = He.extend({
                    imageManifest: {
                        bed: Promise.resolve().then(s.t.bind(s, 69197, 17))
                    }
                }).extend({
                    elements: Ye.elementsFromImages("bed")
                }),
                ER = He.extend({
                    imageManifest: {
                        base: Promise.resolve().then(s.t.bind(s, 59754, 17)),
                        spin: Promise.resolve().then(s.t.bind(s, 97899, 17))
                    }
                }).extend({
                    elements: Ye.elementsFromImages("base", ["spin", null, [-37, 410]]),
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.spin", {
                            rotate: 2070,
                            ease: "none"
                        });
                        this.timeline.add(e)
                    }
                }),
                qR = He.extend({
                    imageManifest: {
                        helmetPlayer: Promise.resolve().then(s.t.bind(s, 49136, 17)),
                        helmet: Promise.resolve().then(s.t.bind(s, 79887, 17)),
                        pool: Promise.resolve().then(s.t.bind(s, 97431, 17)),
                        poolShim: Promise.resolve().then(s.t.bind(s, 64830, 17)),
                        gun: Promise.resolve().then(s.t.bind(s, 42300, 17)),
                        bear: Promise.resolve().then(s.t.bind(s, 95119, 17)),
                        football: Promise.resolve().then(s.t.bind(s, 70803, 17)),
                        frame: Promise.resolve().then(s.t.bind(s, 84321, 17)),
                        Adult0: Promise.resolve().then(s.t.bind(s, 36055, 17)),
                        Adult0v2: Promise.resolve().then(s.t.bind(s, 9703, 17)),
                        Adult1: Promise.resolve().then(s.t.bind(s, 11746, 17)),
                        Adult1v2: Promise.resolve().then(s.t.bind(s, 19630, 17)),
                        Child0: Promise.resolve().then(s.t.bind(s, 74584, 17)),
                        Child0v2: Promise.resolve().then(s.t.bind(s, 29207, 17)),
                        Child0v3: Promise.resolve().then(s.t.bind(s, 38283, 17)),
                        Child1: Promise.resolve().then(s.t.bind(s, 71661, 17)),
                        Child1v2: Promise.resolve().then(s.t.bind(s, 57352, 17)),
                        Child1v3: Promise.resolve().then(s.t.bind(s, 80644, 17)),
                        Child2: Promise.resolve().then(s.t.bind(s, 69011, 17)),
                        Child2v2: Promise.resolve().then(s.t.bind(s, 1035, 17)),
                        Child2v3: Promise.resolve().then(s.t.bind(s, 56041, 17)),
                        Teen0: Promise.resolve().then(s.t.bind(s, 61638, 17)),
                        Teen0v2: Promise.resolve().then(s.t.bind(s, 24655, 17)),
                        Teen0v3: Promise.resolve().then(s.t.bind(s, 3637, 17)),
                        Teen1: Promise.resolve().then(s.t.bind(s, 30749, 17)),
                        Teen1v2: Promise.resolve().then(s.t.bind(s, 13656, 17)),
                        Teen1v3: Promise.resolve().then(s.t.bind(s, 68792, 17)),
                        Teen2: Promise.resolve().then(s.t.bind(s, 74928, 17)),
                        Teen2v2: Promise.resolve().then(s.t.bind(s, 38212, 17)),
                        Teen2v3: Promise.resolve().then(s.t.bind(s, 80824, 17))
                    }
                }),
                NR = qR.extend({
                    stepDuration: 1,
                    elements() {
                        const e = this.model.get("playerInfo");
                        return [{
                            class: "bg",
                            type: "div",
                            pos: [100, 300]
                        }, ...Ye.elementsFromImages([e.avatar, "player", [80, 0]], ["helmetPlayer", null, [-300, 0]])]
                    },
                    onLoadComplete() {
                        C.p8.set(".e.player", {
                            clipPath: "inset(0% 0% 0%)"
                        }), C.p8.set(".e.bg", {
                            width: 400,
                            height: 400,
                            backgroundColor: "#001B20",
                            transformOrigin: "top center"
                        }), C.p8.set(".e.helmetPlayer", {
                            transformOrigin: "top center"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.helmetPlayer", {
                            scaleY: .8,
                            y: -50,
                            duration: 1
                        }, 0).to(".e.bg", {
                            scaleY: .8,
                            y: -130,
                            duration: 1
                        }, 0).to(".e.player", {
                            y: -50,
                            clipPath: "inset(40% 0% 0%)",
                            duration: 1
                        }, 1).to(".e.helmetPlayer, .e.bg", {
                            scaleY: 1,
                            y: 340,
                            duration: 1
                        }, 1).fillTime(1)
                    }
                }),
                XR = qR.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages(["poolShim", null, [50, 0]], ["helmet", null, [-170, 47]], ["pool", null, [50, 0]]),
                    onLoadComplete() {
                        C.p8.set(".e.helmet", {
                            scale: .25
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.helmet", {
                            y: 153
                        })
                    }
                }),
                WR = qR.extend({
                    className: "scene-container under-water",
                    elements: [{
                        class: "c",
                        type: "container",
                        pos: [200, 90],
                        children: [{
                            class: "water-back",
                            type: "div",
                            html: ""
                        }, {
                            class: "caustic-1",
                            type: "div",
                            pos: [0, 400],
                            html: ""
                        }, {
                            class: "caustic-2",
                            type: "div",
                            pos: [0, 200],
                            html: ""
                        }, {
                            class: "water-front",
                            type: "div",
                            html: ""
                        }]
                    }, {
                        class: "frame",
                        type: "img",
                        key: "frame"
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.water", {
                            backgroundColor: "#000"
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.caustic-1", {
                            opacity: .7
                        }).to(".e.caustic-1", {
                            opacity: .9
                        }).to(".e.caustic-1", {
                            opacity: .5
                        }).to(".e.caustic-1", {
                            opacity: 1
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.caustic-1", {
                            x: -30,
                            scaleX: 1.3,
                            duration: 3
                        }).to(".e.caustic-1", {
                            x: 20,
                            scaleX: 1,
                            duration: 3
                        }).to(".e.caustic-1", {
                            x: -10,
                            scaleX: 1.1,
                            duration: 3
                        }).to(".e.caustic-1", {
                            x: 30,
                            scaleX: 1,
                            duration: 3
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.caustic-2", {
                            opacity: .8
                        }).to(".e.caustic-2", {
                            opacity: 1
                        }).to(".e.caustic-2", {
                            opacity: .7
                        }).to(".e.caustic-2", {
                            opacity: .9
                        }).to(".e.caustic-2", {
                            opacity: .8
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.caustic-2", {
                            x: -10,
                            scaleX: 1.2,
                            duration: 3
                        }).to(".e.caustic-2", {
                            x: -20,
                            scaleX: 1,
                            duration: 3
                        }).to(".e.caustic-2", {
                            x: 10,
                            scaleX: 1,
                            duration: 3
                        })
                    },
                    initializeTimeline() {}
                }),
                UR = qR.extend({
                    stepDuration: .5,
                    className: "scene-container under-water",
                    elements: [{
                        class: "c",
                        type: "container",
                        pos: [200, 90],
                        children: [{
                            class: "water-back",
                            type: "div",
                            html: ""
                        }, {
                            class: "caustic-1",
                            type: "div",
                            pos: [0, 400],
                            html: ""
                        }, {
                            class: "caustic-2",
                            type: "div",
                            pos: [0, 200],
                            html: ""
                        }, {
                            class: "football",
                            type: "img",
                            pos: [650, 75],
                            key: "football"
                        }, {
                            class: "gun",
                            type: "img",
                            pos: [750, 275],
                            key: "gun"
                        }, {
                            class: "bear",
                            type: "img",
                            pos: [600, 525],
                            key: "bear"
                        }, {
                            class: "water-front",
                            type: "div",
                            html: ""
                        }]
                    }, {
                        class: "frame",
                        type: "img",
                        key: "frame"
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.water", {
                            backgroundColor: "#000"
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.caustic-1", {
                            opacity: .7
                        }).to(".e.caustic-1", {
                            opacity: .9
                        }).to(".e.caustic-1", {
                            opacity: .5
                        }).to(".e.caustic-1", {
                            opacity: 1
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.caustic-1", {
                            x: -30,
                            scaleX: 1.3,
                            duration: 3
                        }).to(".e.caustic-1", {
                            x: 20,
                            scaleX: 1,
                            duration: 3
                        }).to(".e.caustic-1", {
                            x: -10,
                            scaleX: 1.1,
                            duration: 3
                        }).to(".e.caustic-1", {
                            x: 30,
                            scaleX: 1,
                            duration: 3
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.caustic-2", {
                            opacity: .8
                        }).to(".e.caustic-2", {
                            opacity: 1
                        }).to(".e.caustic-2", {
                            opacity: .7
                        }).to(".e.caustic-2", {
                            opacity: .9
                        }).to(".e.caustic-2", {
                            opacity: .8
                        }), C.p8.timeline({
                            repeat: -1,
                            yoyo: !0
                        }).to(".e.caustic-2", {
                            x: -10,
                            scaleX: 1.2,
                            duration: 3
                        }).to(".e.caustic-2", {
                            x: -20,
                            scaleX: 1,
                            duration: 3
                        }).to(".e.caustic-2", {
                            x: 10,
                            scaleX: 1,
                            duration: 3
                        }), C.p8.to(".e.bear, .e.football, .e.gun", {
                            y: "-=450",
                            stagger: .2,
                            duration: 1.75,
                            ease: "back.out(2)",
                            onComplete() {
                                C.p8.to(".e.bear", {
                                    y: "-=30",
                                    duration: 2,
                                    ease: "none",
                                    yoyo: !0,
                                    repeat: -1
                                }), C.p8.to(".e.football", {
                                    y: "-=30",
                                    duration: 2.3,
                                    ease: "none",
                                    yoyo: !0,
                                    repeat: -1
                                }), C.p8.to(".e.gun", {
                                    y: "-=30",
                                    duration: 1.7,
                                    ease: "none",
                                    yoyo: !0,
                                    repeat: -1
                                })
                            }
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.football", {
                            scale: .5,
                            opacity: 0,
                            ease: "back.in(2)"
                        }).to(".e.bear", {
                            scale: .5,
                            opacity: 0,
                            ease: "back.in(2)"
                        }).to(".e.gun", {
                            scale: .5,
                            opacity: 0,
                            ease: "back.in(2)"
                        })
                    }
                }),
                $R = He.extend({
                    imageManifest: {
                        poocho: Promise.resolve().then(s.t.bind(s, 3566, 17))
                    }
                }).extend({
                    elements: Ye.elementsFromImages("poocho")
                }),
                jR = Gc,
                KR = He.extend({
                    imageManifest: {
                        button: Promise.resolve().then(s.t.bind(s, 91268, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "button",
                            images: {
                                hand: [771, 10, 404, 601, 6, 339],
                                buttonFront: [10, 399, 751, 325, 655, 120],
                                red: [771, 621, 555, 303, 553, 216],
                                buttonBack: [10, 10, 751, 379, 601, 120]
                            }
                        }
                    }
                }).extend({
                    stepDuration: .3,
                    elements: Ye.elementsFromSprite("sprite", ["buttonBack", "red", "buttonFront", "hand"]),
                    onLoadComplete() {
                        C.p8.to(".e.hand", {
                            y: 20,
                            duration: .2
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.hand", {
                            y: 40,
                            duration: .1
                        }).to(".e.red", {
                            y: 25,
                            duration: .07
                        }, .03).to(".e.hand", {
                            y: 0,
                            duration: .1
                        }, .1).to(".e.red", {
                            y: 0,
                            duration: .1
                        }, .1)
                    }
                }),
                ZR = He.extend({
                    imageManifest: {
                        comic1: Promise.resolve().then(s.t.bind(s, 41818, 17)),
                        comic2: Promise.resolve().then(s.t.bind(s, 23048, 17)),
                        comic3: Promise.resolve().then(s.t.bind(s, 92993, 17)),
                        comic4: Promise.resolve().then(s.t.bind(s, 90517, 17)),
                        question: Promise.resolve().then(s.t.bind(s, 98846, 17))
                    }
                }),
                JR = ZR.extend({
                    elements: Ye.elementsFromImages("comic3"),
                    onStartProgress() {
                        Ye.startHoldShake("comic3", 2, 1)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("comic3", 2, 1)
                    }
                }),
                _R = ZR.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("comic2"),
                    initializeTimeline() {
                        this.timeline.to(".e.comic2", {
                            x: 800,
                            opacity: 0
                        })
                    }
                }),
                QR = ZR.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("comic1"),
                    initializeTimeline() {
                        this.timeline.to(".e.comic1", {
                            x: -800,
                            opacity: 0
                        })
                    }
                }),
                eI = ZR.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("question"),
                    initializeTimeline() {
                        this.timeline.to(".e.question", {
                            rotate: 360,
                            scale: 1
                        }), this.timeline.to(".e.question", {
                            rotate: 720,
                            scale: 2
                        }), this.timeline.to(".e.question", {
                            rotate: 1080,
                            scale: 3
                        })
                    }
                }),
                tI = ZR.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("comic4"),
                    initializeTimeline() {
                        this.timeline.to(".e.comic4", {
                            y: 800,
                            opacity: 0
                        })
                    }
                }),
                sI = He.extend({
                    imageManifest: {
                        capsule: Promise.resolve().then(s.t.bind(s, 75359, 17)),
                        dirt: Promise.resolve().then(s.t.bind(s, 3534, 17)),
                        document: Promise.resolve().then(s.t.bind(s, 94862, 17))
                    }
                }),
                iI = sI.extend({
                    elements: Ye.elementsFromImages("document"),
                    initializeTimeline() {
                        C.p8.set(".e.document", {
                            scale: .5
                        }), this.timeline.to(".e.document", {
                            y: 500,
                            scale: 1.8
                        }), this.timeline.to(".e.document", {
                            y: -500
                        })
                    }
                }),
                oI = sI.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("dirt"),
                    onLoadComplete() {
                        this.particles = this.addParticleEmitter({
                            numberOfParticles: 20,
                            autoplay: !0,
                            restartOnProgress: !0,
                            zIndex: 1,
                            settings: {
                                frequency: .0025,
                                from: {
                                    backgroundColor: "#685447",
                                    border: "2px solid black"
                                },
                                to: {
                                    ease: "power2.in",
                                    duration: .3
                                },
                                boundaries: {
                                    left: 0,
                                    right: 0,
                                    top: 50,
                                    bottom: 100
                                },
                                minSize: 53,
                                maxSize: 65,
                                angle: -75,
                                force: 5,
                                randomAngle: !1,
                                particleLimit: 30
                            }
                        })
                    }
                }),
                nI = sI.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("capsule", "document", "document"),
                    initializeTimeline() {
                        C.p8.set(".e.document", {
                            scale: .6,
                            y: -200
                        }), C.p8.set(".e.document:last-child", {
                            x: 40,
                            y: -180
                        }), C.p8.set(".e.capsule", {
                            y: 300,
                            scale: .8
                        }), this.timeline.to(".e.document:last-child", {
                            y: 300,
                            scale: .3,
                            opacity: 0
                        })
                    }
                }),
                aI = sI.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("capsule", "document"),
                    initializeTimeline() {
                        C.p8.set(".e.document", {
                            scale: .6,
                            y: -200
                        }), C.p8.set(".e.capsule", {
                            y: 300,
                            scale: .8
                        }), this.timeline.to(".e.document", {
                            y: 300,
                            scale: .3,
                            opacity: 0
                        })
                    }
                }),
                rI = He.extend({
                    imageManifest: {
                        capsule: Promise.resolve().then(s.t.bind(s, 98714, 17)),
                        frown: Promise.resolve().then(s.t.bind(s, 24023, 17)),
                        hole: Promise.resolve().then(s.t.bind(s, 72046, 17)),
                        stomp: Promise.resolve().then(s.t.bind(s, 22041, 17)),
                        fx: Promise.resolve().then(s.t.bind(s, 68715, 17))
                    }
                }),
                lI = rI.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("hole"),
                    initializeTimeline() {
                        this.timeline.to(".e.hole", {
                            scale: 2.8,
                            x: -500,
                            y: 500
                        }), this.timeline.to(".e.hole", {
                            scale: 2.2,
                            x: -200,
                            y: -300
                        }), this.timeline.to(".e.hole", {
                            scale: 2.8,
                            x: -500,
                            y: 500
                        }), this.timeline.to(".e.hole", {
                            scale: 1,
                            x: 0,
                            y: 0
                        })
                    }
                }),
                dI = rI.extend({
                    elements: Ye.elementsFromImages("frown"),
                    initializeTimeline() {
                        Ye.startShake("frown", 5, 3)
                    }
                }),
                pI = rI.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("stomp", "fx"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.stomp", {
                            rotate: 15
                        }, {
                            rotate: 0,
                            ease: "back.in(3)"
                        }), this.timeline.fromTo(".e.fx", {
                            opacity: 1,
                            display: "none"
                        }, {
                            display: "block",
                            opacity: 0
                        })
                    }
                }),
                cI = rI.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("frown"),
                    initializeTimeline() {
                        this.timeline.to(".e.frown", {
                            x: -500,
                            opacity: 0,
                            scale: 2,
                            duration: 1
                        }), this.timeline.to(".e.frown", {
                            y: 90,
                            yoyo: !0,
                            duration: .25,
                            repeat: 3
                        }, "<")
                    }
                }),
                mI = He.extend({
                    imageManifest: {
                        capsule: Promise.resolve().then(s.t.bind(s, 18539, 17)),
                        crayon: Promise.resolve().then(s.t.bind(s, 30401, 17)),
                        crayonSingle: Promise.resolve().then(s.t.bind(s, 95971, 17)),
                        exclamation: Promise.resolve().then(s.t.bind(s, 73519, 17)),
                        paper: Promise.resolve().then(s.t.bind(s, 97760, 17))
                    }
                }),
                hI = mI.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("paper"),
                    initializeTimeline() {
                        this.timeline.from(".e.paper", {
                            scale: 2,
                            y: 1e3
                        })
                    }
                }),
                uI = mI.extend({
                    elements: Ye.elementsFromImages("crayonSingle", "crayon"),
                    initializeTimeline() {
                        this.timeline.from(".e.crayonSingle", {
                            y: 150
                        })
                    }
                }),
                gI = mI.extend({
                    elements: Ye.elementsFromImages("paper", "exclamation"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.exclamation", {
                            clipPath: "inset(0px 0px 800px 0px)"
                        }, {
                            clipPath: "inset(0px 0px 210px 0px)"
                        })
                    }
                }),
                yI = mI.extend({
                    stepDuration: .5,
                    elements: [{
                        type: "img",
                        key: "capsule",
                        pos: [400, 0],
                        class: "capsule"
                    }, {
                        type: "container",
                        children: Ye.elementsFromImages("paper", "exclamation"),
                        class: "paper-container"
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.capsule", {
                            scale: .5
                        }), C.p8.from(".e.capsule", {
                            opacity: 0,
                            scale: 1,
                            y: 1e3
                        }), this.timeline.to(".e.paper-container", {
                            y: 200,
                            opacity: 0,
                            scale: .25
                        })
                    }
                }),
                bI = He.extend({
                    imageManifest: {
                        capsule: Promise.resolve().then(s.t.bind(s, 55738, 17)),
                        censor: Promise.resolve().then(s.t.bind(s, 65944, 17)),
                        paper: Promise.resolve().then(s.t.bind(s, 48349, 17)),
                        pen: Promise.resolve().then(s.t.bind(s, 37663, 17)),
                        cap: Promise.resolve().then(s.t.bind(s, 85704, 17))
                    }
                }),
                xI = bI.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("paper"),
                    initializeTimeline() {
                        this.timeline.from(".e.paper", {
                            scale: 2,
                            y: 1e3
                        })
                    }
                }),
                fI = bI.extend({
                    elements: Ye.elementsFromImages("pen", "cap"),
                    initializeTimeline() {
                        this.timeline.to(".e.cap", {
                            x: -200,
                            y: -200,
                            opacity: 0
                        })
                    }
                }),
                vI = bI.extend({
                    elements: Ye.elementsFromImages("paper", "censor"),
                    initializeTimeline() {
                        C.p8.set(".e.censor", {
                            scale: .7
                        }), this.timeline.fromTo(".e.censor", {
                            clipPath: "inset(0px 0px 730px 0px)"
                        }, {
                            clipPath: "inset(0px 0px 300px 0px)"
                        })
                    }
                }),
                kI = He.extend({
                    imageManifest: {
                        capsule: Promise.resolve().then(s.t.bind(s, 3989, 17)),
                        cloud: Promise.resolve().then(s.t.bind(s, 21248, 17)),
                        paper: Promise.resolve().then(s.t.bind(s, 54334, 17)),
                        pen: Promise.resolve().then(s.t.bind(s, 37663, 17)),
                        cap: Promise.resolve().then(s.t.bind(s, 85704, 17)),
                        scribble: Promise.resolve().then(s.t.bind(s, 16383, 17))
                    }
                }),
                PI = kI.extend({
                    elements: Ye.elementsFromImages("paper", "scribble"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.scribble", {
                            clipPath: "inset(0px 0px 820px 0px)"
                        }, {
                            clipPath: "inset(0px 0px 300px 0px)"
                        })
                    }
                }),
                wI = kI.extend({
                    elements: Ye.elementsFromImages("cloud"),
                    onStartProgress() {
                        Ye.startHoldShake("cloud", 5, 1)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("cloud", 5, 1)
                    }
                }),
                TI = kI.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("pen", "cap"),
                    initializeTimeline() {
                        this.timeline.to(".e.cap", {
                            x: -200,
                            y: -200,
                            opacity: 0,
                            duration: 1
                        }), this.timeline.to(".e.pen", {
                            rotate: -90,
                            duration: 1
                        }), this.timeline.to(".e.pen", {
                            rotate: -95,
                            yoyo: !0,
                            repeat: 7,
                            duration: .5
                        })
                    }
                }),
                SI = kI.extend({
                    elements: Ye.elementsFromImages("cloud"),
                    onStartProgress() {
                        Ye.startHoldShake("cloud", 5, 1)
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("cloud", 5, 1)
                    }
                }),
                MI = He.extend({
                    imageManifest: {
                        capsule: Promise.resolve().then(s.t.bind(s, 11464, 17)),
                        sunglasses: Promise.resolve().then(s.t.bind(s, 95020, 17))
                    }
                }),
                CI = MI.extend({
                    elements: Ye.elementsFromImages("capsule"),
                    initializeTimeline() {
                        C.p8.fromTo(".e.capsule", {
                            scale: .5
                        }, {
                            scale: 1,
                            ease: "back.inOut(3)",
                            duration: 1
                        })
                    }
                }),
                DI = MI.extend({
                    elements: Ye.elementsFromImages("sunglasses"),
                    initializeTimeline() {
                        this.timeline.to(".e.sunglasses", {
                            rotate: -70,
                            yoyo: !0,
                            repeat: 1
                        })
                    }
                }),
                FI = He.extend({
                    imageManifest: {
                        bracelet: Promise.resolve().then(s.t.bind(s, 21108, 17)),
                        slap: Promise.resolve().then(s.t.bind(s, 41577, 17))
                    }
                }),
                zI = FI.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("bracelet"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.bracelet", {
                            y: 200,
                            x: 0
                        }, {
                            rotate: -50,
                            y: 50,
                            x: -100
                        })
                    }
                }),
                LI = FI.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("bracelet"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.bracelet", {
                            rotate: -50,
                            y: 50,
                            x: -100
                        }, {
                            rotate: 20,
                            y: 400,
                            x: 0,
                            opacity: 0
                        })
                    }
                }),
                RI = FI.extend({
                    elements: Ye.elementsFromImages("slap"),
                    initializeTimeline() {
                        C.p8.from(".e.slap", {
                            y: 600,
                            opacity: 0
                        }), this.timeline.to(".e.slap", {
                            rotateZ: -20,
                            rotateY: -10
                        }), this.timeline.to(".e.slap", {
                            rotateZ: 20,
                            rotateY: 10
                        })
                    }
                }),
                II = He.extend({
                    imageManifest: {
                        jacket: Promise.resolve().then(s.t.bind(s, 97922, 17)),
                        mirror: Promise.resolve().then(s.t.bind(s, 43064, 17))
                    }
                }),
                OI = II.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("jacket"),
                    initializeTimeline() {
                        this.timeline.to(".e.jacket", {
                            scale: 3,
                            opacity: 0,
                            rotateY: 20
                        })
                    }
                }),
                BI = II.extend({
                    elements: [{
                        type: "container",
                        children: Ye.elementsFromImages("mirror", "jacket"),
                        class: "pose",
                        pos: [0, 0]
                    }],
                    initializeTimeline() {
                        C.p8.set(".e.jacket", {
                            opacity: .5,
                            scale: .7,
                            clipPath: "inset(0 160px 0 170px)"
                        }), this.timeline.to(".e.pose", {
                            scale: 2
                        })
                    }
                }),
                YI = II.extend({
                    elements: Ye.elementsFromImages("jacket"),
                    initializeTimeline() {
                        this.timeline.to(".e.jacket", {
                            rotateY: 180,
                            ease: "power2.inOut",
                            duration: 1
                        }), this.timeline.to(".e.jacket", {
                            scale: 1.5,
                            ease: "power2.inOut",
                            yoyo: !0,
                            repeat: 1,
                            duration: .5
                        }, "<")
                    }
                }),
                AI = He.extend({
                    imageManifest: {
                        bite: Promise.resolve().then(s.t.bind(s, 24764, 17)),
                        bubbles: Promise.resolve().then(s.t.bind(s, 6656, 17)),
                        chew: Promise.resolve().then(s.t.bind(s, 71147, 17)),
                        gum: Promise.resolve().then(s.t.bind(s, 33247, 17)),
                        teeth: Promise.resolve().then(s.t.bind(s, 79564, 17)),
                        biteNoGum: Promise.resolve().then(s.t.bind(s, 31269, 17)),
                        wrap: Promise.resolve().then(s.t.bind(s, 31804, 17))
                    }
                }),
                HI = AI.extend({
                    elements: Ye.elementsFromImages("wrap"),
                    initializeTimeline() {
                        this.timeline.to(".e.wrap", {
                            rotateX: 720,
                            ease: "none"
                        })
                    }
                }),
                GI = AI.extend({
                    stepDuration: .6,
                    elements: Ye.elementsFromImages("teeth", "bite"),
                    initializeTimeline() {},
                    onDiscreteProgress() {
                        Ye.squashTransition("bite", "teeth", .5)
                    }
                }),
                VI = AI.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("chew"),
                    onDiscreteProgress() {
                        Ye.squashOnce("chew")
                    }
                }),
                EI = AI.extend({
                    stepDuration: 1,
                    elements: Ye.elementsFromImages("chew"),
                    initializeTimeline() {
                        this.timeline.to(".e.chew", {
                            scaleY: 1.1,
                            y: 50
                        }), this.timeline.to(".e.chew", {
                            scaleY: 1,
                            scaleX: 1.1,
                            y: -50
                        })
                    }
                }),
                qI = AI.extend({
                    elements: Ye.elementsFromImages("biteNoGum", "chew", "bubbles"),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("chew", "biteNoGum", .5)), this.timeline.from(".e.bubbles", {
                            opacity: 0,
                            scale: .25
                        })
                    }
                }),
                NI = He.extend({
                    imageManifest: {
                        comic: Promise.resolve().then(s.t.bind(s, 14521, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "comic",
                            images: {
                                spill: [934, 984, 296, 283, 288, 300],
                                comic: [10, 10, 823, 858, 84, 89],
                                money: [10, 878, 914, 472, 264, 43],
                                armRight: [1240, 984, 146, 239, 274, 743],
                                armLeft: [1338, 683, 150, 197, 534, 119],
                                body: [843, 10, 683, 663, 299, 119],
                                head: [934, 683, 394, 291, 47, 238]
                            }
                        }
                    }
                }),
                XI = NI.extend({
                    stepDuration: .4,
                    elements: Ye.elementsFromSprite("sprite", ["comic"]),
                    onLoadComplete() {
                        C.p8.set(".e.comic", {
                            x: 200,
                            y: 100,
                            rotate: 75
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.comic", {
                            x: 0,
                            y: 0,
                            rotate: 0
                        })
                    }
                }),
                WI = NI.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("sprite", ["head", "body", "armLeft", "armRight"]),
                    onLoadComplete() {
                        C.p8.set(".e.armLeft", {
                            transformOrigin: "30px 30px"
                        }), C.p8.set(".e.armRight", {
                            transformOrigin: "27px 218px"
                        }), C.p8.set(".e.head", {
                            x: 20,
                            y: 70
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.head", {
                            x: 0,
                            y: 0,
                            duration: 1
                        }).to(".e.armLeft", {
                            rotate: -30,
                            duration: .5
                        }).to(".e.armLeft", {
                            rotate: 30,
                            duration: .5
                        }).to(".e.head", {
                            x: 20,
                            y: 70,
                            duration: .5
                        }).to(".e.head", {
                            x: 0,
                            y: 0,
                            duration: .5
                        }).to(".e.armRight", {
                            rotate: 30,
                            duration: 1
                        }).to(".e.armLeft", {
                            rotate: -30,
                            duration: .5
                        }).to(".e.armLeft", {
                            rotate: 30,
                            duration: .5
                        })
                    }
                }),
                UI = NI.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", ["comic", "spill"]),
                    onLoadComplete() {
                        C.p8.set(".e.spill", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.spill", {
                            opacity: 1
                        })
                    }
                }),
                $I = NI.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["comic", "spill", ["money", "money0"],
                            ["money", "money1"],
                            ["money", "money2"],
                            ["money", "money3"],
                            ["money", "money4"]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.to(".e.comic, .e.spill", {
                            scale: .5,
                            opacity: 0,
                            duration: .6
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c"), C.p8.to(".e.money0", {
                            rotate: -10,
                            duration: .2
                        }), C.p8.to(".e.money1", {
                            rotate: -5,
                            duration: .2
                        }), C.p8.to(".e.money2", {
                            rotate: 0,
                            duration: .2
                        }), C.p8.to(".e.money3", {
                            rotate: 5,
                            duration: .2
                        }), C.p8.to(".e.money4", {
                            rotate: 10,
                            duration: .2
                        })
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                jI = He.extend({
                    imageManifest: {
                        branch: Promise.resolve().then(s.t.bind(s, 9605, 17)),
                        ladder: Promise.resolve().then(s.t.bind(s, 29984, 17)),
                        tree: Promise.resolve().then(s.t.bind(s, 84454, 17))
                    }
                }),
                KI = jI.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("ladder"),
                    onDiscreteProgress() {
                        Ye.squashOnce("ladder", .25)
                    }
                }),
                ZI = jI.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("tree", ["branch", "branch0", [150, 120]], ["branch", "branch1", [190, -170]], ["branch", "branch2", [40, 110]], ["branch", "branch3", [10, -160]]),
                    onLoadComplete() {
                        C.p8.set(".e.branch1, .e.branch3", {
                            scaleX: -1
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.branch1", {
                            x: -30,
                            y: 290,
                            rotate: 160
                        }).to(".e.branch0", {
                            x: 80,
                            y: 220,
                            rotate: 54
                        }).to(".e.branch3", {
                            x: -40,
                            y: 340,
                            rotate: 20
                        }).to(".e.branch2", {
                            x: 60,
                            y: 330,
                            rotate: -10
                        })
                    }
                }),
                JI = jI.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("ladder")
                    }],
                    onLoadComplete() {
                        Ye.startShake("ladder", 0, 3, .5)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                _I = He.extend({
                    imageManifest: {
                        panel: Promise.resolve().then(s.t.bind(s, 18908, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "panel",
                            images: {
                                ropeBL: [651, 10, 68, 1477, -330, 234],
                                ropeBR: [651, 10, 68, 1477, -330, 614],
                                wall: [10, 10, 631, 535, 618, 189],
                                ropeFL: [651, 10, 68, 1477, -300, 284],
                                ropeFR: [651, 10, 68, 1477, -300, 664]
                            }
                        }
                    }
                }).extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", ["ropeBL", "ropeBR", "wall", "ropeFL", "ropeFR"]),
                    initializeTimeline() {
                        const e = {
                                y: "-=23",
                                duration: 1,
                                ease: "none"
                            },
                            t = {
                                y: "-=47",
                                duration: 1,
                                ease: "none"
                            };
                        this.timeline.to(".e.wall", {
                            rotate: -3,
                            duration: 1
                        }, 0).to(".e.ropeBL, .e.ropeFL", {
                            y: -27,
                            duration: 1,
                            ease: "power1.out"
                        }, 0).to(".e.ropeBR, .e.ropeFR", {
                            y: -46,
                            duration: 1,
                            ease: "power1.out"
                        }, 0).to(".e.wall", {
                            rotate: 3,
                            duration: 1
                        }, 1).to(".e.ropeBL, .e.ropeFL", {
                            y: -80,
                            duration: 1,
                            ease: "power1.out"
                        }, 1).to(".e.ropeBR, .e.ropeFR", {
                            y: -63,
                            duration: 1,
                            ease: "power1.out"
                        }, 1).to(".e.wall", {
                            rotate: -3,
                            duration: 1
                        }, 2).to(".e.ropeBL, .e.ropeFL", {
                            y: -97,
                            duration: 1,
                            ease: "power1.out"
                        }, 2).to(".e.ropeBR, .e.ropeFR", {
                            y: -114,
                            duration: 1,
                            ease: "power1.out"
                        }, 2).to(".e.wall", {
                            rotate: 3,
                            duration: 1
                        }, 3).to(".e.ropeBL, .e.ropeFL", {
                            y: -150,
                            duration: 1,
                            ease: "power1.out"
                        }, 3).to(".e.ropeBR, .e.ropeFR", e, 3).to(".e.wall", {
                            rotate: -3,
                            duration: 1
                        }, 4).to(".e.ropeBL, .e.ropeFL", e, 4).to(".e.ropeBR, .e.ropeFR", t, 4).to(".e.wall", {
                            rotate: 3,
                            duration: 1
                        }, 5).to(".e.ropeBL, .e.ropeFL", t, 5).to(".e.ropeBR, .e.ropeFR", e, 5).to(".e.wall", {
                            rotate: -3,
                            duration: 1
                        }, 6).to(".e.ropeBL, .e.ropeFL", e, 6).to(".e.ropeBR, .e.ropeFR", t, 6).to(".e.wall", {
                            rotate: 3,
                            duration: 1
                        }, 7).to(".e.ropeBL, .e.ropeFL", t, 7).to(".e.ropeBR, .e.ropeFR", e, 7).to(".e.wall", {
                            rotate: -3,
                            duration: 1
                        }, 8).to(".e.ropeBL, .e.ropeFL", e, 8).to(".e.ropeBR, .e.ropeFR", t, 8).to(".e.wall", {
                            rotate: 3,
                            duration: 1
                        }, 9).to(".e.ropeBL, .e.ropeFL", t, 9).to(".e.ropeBR, .e.ropeFR", e, 9).to(".e.wall", {
                            rotate: -3,
                            duration: 1
                        }, 10).to(".e.ropeBL, .e.ropeFL", e, 10).to(".e.ropeBR, .e.ropeFR", t, 10).to(".e.wall", {
                            rotate: 3,
                            duration: 1
                        }, 11).to(".e.ropeBL, .e.ropeFL", t, 11).to(".e.ropeBR, .e.ropeFR", e, 11).to(".e.wall", {
                            rotate: -3,
                            duration: 1
                        }, 12).to(".e.ropeBL, .e.ropeFL", e, 12).to(".e.ropeBR, .e.ropeFR", t, 12).to(".e.wall", {
                            rotate: 3,
                            duration: 1
                        }, 13).to(".e.ropeBL, .e.ropeFL", t, 13).to(".e.ropeBR, .e.ropeFR", e, 13).to(".e.wall", {
                            rotate: -3,
                            duration: 1
                        }, 14).to(".e.ropeBL, .e.ropeFL", e, 14).to(".e.ropeBR, .e.ropeFR", t, 14).to(".e.wall", {
                            rotate: 3,
                            duration: 1
                        }, 15).to(".e.ropeBL, .e.ropeFL", t, 15).to(".e.ropeBR, .e.ropeFR", e, 15).to(".e.wall", {
                            rotate: -3,
                            duration: 1
                        }, 16).to(".e.ropeBL, .e.ropeFL", e, 16).to(".e.ropeBR, .e.ropeFR", t, 16).to(".e.wall", {
                            rotate: 3,
                            duration: 1
                        }, 17).to(".e.ropeBL, .e.ropeFL", t, 17).to(".e.ropeBR, .e.ropeFR", e, 17).to(".e.wall", {
                            rotate: -3,
                            duration: 1
                        }, 18).to(".e.ropeBL, .e.ropeFL", e, 18).to(".e.ropeBR, .e.ropeFR", t, 18).to(".e.wall", {
                            rotate: 3,
                            duration: 1
                        }, 19).to(".e.ropeBL, .e.ropeFL", t, 19).to(".e.ropeBR, .e.ropeFR", e, 19).to(".e.wall", {
                            y: -700,
                            duration: 20,
                            ease: "none"
                        }, 0)
                    }
                }),
                QI = He.extend({
                    imageManifest: {
                        dust: Promise.resolve().then(s.t.bind(s, 36270, 17)),
                        bench: Promise.resolve().then(s.t.bind(s, 8955, 17)),
                        sprite: Promise.resolve().then(s.t.bind(s, 59486, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                rough: [0, 0, 730, 356],
                                smooth: [0, 357, 730, 356],
                                painted: [0, 714, 730, 356],
                                nail: [732, 0, 92, 298],
                                hammer: [730, 298, 339, 427]
                            }
                        }
                    }
                }),
                eO = QI.extend({
                    stepDuration: .3,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["smooth", null, [322, 135]],
                            ["nail", "nail0", [276, 295]],
                            ["nail", "nail1", [88, 610]]
                        ])
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.nail0", {
                            y: 260,
                            clipPath: "inset(0 0 269px 0)"
                        }).to(".e.nail1", {
                            y: 260,
                            clipPath: "inset(0 0 269px 0)"
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.c", {
                            scale: .85,
                            ease: "back.in(2)",
                            duration: .15
                        }).to(".e.c", {
                            scale: 1,
                            ease: "back.out(2)",
                            duration: .15
                        })
                    }
                }),
                tO = QI.extend({
                    stepDuration: .2,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["smooth", null, [322, 135]],
                            ["nail", "nail0", [276, 295]],
                            ["nail", "nail1", [182, 457]],
                            ["nail", "nail2", [88, 610]]
                        ])
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.nail0", {
                            y: 260,
                            clipPath: "inset(0 0 269px 0)"
                        }).to(".e.nail1", {
                            y: 260,
                            clipPath: "inset(0 0 269px 0)"
                        }).to(".e.nail2", {
                            y: 260,
                            clipPath: "inset(0 0 269px 0)"
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.c", {
                            scale: .85,
                            ease: "back.in(2)",
                            duration: .1
                        }).to(".e.c", {
                            scale: 1,
                            ease: "back.out(2)",
                            duration: .1
                        })
                    }
                }),
                sO = QI.extend({
                    stepDuration: .3,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", [
                            ["smooth", null, [322, 135]],
                            ["nail", "nail0", [182, 457]]
                        ])
                    }],
                    initializeTimeline() {
                        this.timeline.to(".e.nail0", {
                            y: 260,
                            clipPath: "inset(0 0 269px 0)"
                        })
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.c", {
                            scale: .85,
                            ease: "back.in(2)",
                            duration: .15
                        }).to(".e.c", {
                            scale: 1,
                            ease: "back.out(2)",
                            duration: .15
                        })
                    }
                }),
                iO = He.extend({
                    imageManifest: {
                        blue: Promise.resolve().then(s.t.bind(s, 64776, 17)),
                        green: Promise.resolve().then(s.t.bind(s, 81759, 17)),
                        red: Promise.resolve().then(s.t.bind(s, 96574, 17)),
                        yellow: Promise.resolve().then(s.t.bind(s, 4381, 17)),
                        paint: Promise.resolve().then(s.t.bind(s, 49947, 17)),
                        splats: Promise.resolve().then(s.t.bind(s, 86280, 17))
                    },
                    sprites: {
                        cans: {
                            key: "paint",
                            images: {
                                canY: [438, 984, 322, 338, 461, 56],
                                canR: [474, 486, 322, 338, 372, 246],
                                canG: [513, 10, 322, 338, 283, 436],
                                canB: [477, 1332, 322, 338, 194, 626]
                            }
                        },
                        hands: {
                            key: "paint",
                            images: {
                                handY: [10, 1465, 457, 467, 0, 501],
                                handR: [10, 486, 454, 488, 558, -39],
                                handG: [10, 10, 493, 466, 580, 591],
                                handB: [10, 984, 418, 471, 0, -39]
                            }
                        },
                        splats: {
                            key: "splats",
                            images: {
                                splatY: [10, 792, 855, 699, -84, -79],
                                splatR: [10, 10, 717, 772, 53, 418],
                                splatG: [737, 10, 852, 701, 266, -186],
                                splatB: [875, 721, 773, 713, 395, 132]
                            }
                        }
                    }
                }),
                oO = iO.extend({
                    stepDuration: .45,
                    elements: Ye.elementsFromSprite("cans", ["canB", "canG", "canR", "canY"]),
                    onLoadComplete() {
                        C.p8.set(".e.canG, .e.canR, .e.canY", {
                            hidden: !0,
                            y: -300,
                            scaleY: 1.1,
                            transformOrigin: "bottom center"
                        }), C.p8.timeline().set(".e.canB", {
                            y: -300,
                            scaleY: 1.1,
                            transformOrigin: "bottom center"
                        }, 0).to(".e.canB", {
                            y: 0,
                            duration: .25,
                            ease: "none"
                        }, 0).to(".e.canB", {
                            scaleY: .7,
                            duration: .13,
                            ease: "power2.out"
                        }).to(".e.canB", {
                            scaleY: 1,
                            duration: .1
                        })
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.canG", {
                            hidden: !1
                        }, 0).to(".e.canG", {
                            y: 0,
                            duration: 1,
                            ease: "none"
                        }, 0).to(".e.canG", {
                            scaleY: .7,
                            duration: .25,
                            ease: "power2.out"
                        }, 1).to(".e.canG", {
                            scaleY: 1,
                            duration: .15
                        }, 1.25).set(".e.canR", {
                            hidden: !1
                        }, 2.01).to(".e.canR", {
                            y: 0,
                            duration: 1,
                            ease: "none"
                        }, 2).to(".e.canR", {
                            scaleY: .7,
                            duration: .25,
                            ease: "power2.out"
                        }, 3).to(".e.canR", {
                            scaleY: 1,
                            duration: .15
                        }, 3.25).set(".e.canY", {
                            hidden: !1
                        }, 4.01).to(".e.canY", {
                            y: 0,
                            duration: 1,
                            ease: "none"
                        }, 4).to(".e.canY", {
                            scaleY: .7,
                            duration: .25,
                            ease: "power2.out"
                        }, 5).to(".e.canY", {
                            scaleY: 1,
                            duration: .15
                        }, 5.25).fillTime(.6)
                    }
                }),
                nO = iO.extend({
                    stepDuration: .75,
                    elements: Ye.elementsFromSprite("splats", ["splatB", "splatY", "splatG", "splatR"]),
                    onLoadComplete() {
                        C.p8.set(".e.splatB, .e.splatG, .e.splatR, .e.splatY", {
                            scale: .7,
                            opacity: .9,
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.splatB", {
                            hidden: !1
                        }).to(".e.splatB", {
                            scale: 1,
                            duration: 1
                        }).set(".e.splatY", {
                            hidden: !1
                        }, .5).to(".e.splatY", {
                            scale: 1,
                            duration: 1
                        }, .5).set(".e.splatG", {
                            hidden: !1
                        }, 1).to(".e.splatG", {
                            scale: 1,
                            duration: 1
                        }, 1).set(".e.splatR", {
                            hidden: !1
                        }, 1.5).to(".e.splatR", {
                            scale: 1,
                            duration: 1
                        }, 1.5).fillTime(.5)
                    }
                }),
                aO = iO.extend({
                    elements: [...Ye.elementsFromImages(["blue", null, [-500, -475]], ["yellow", null, [-500, 380]], ["green", null, [470, 430]], ["red", null, [480, -480]]), ...Ye.elementsFromSprite("hands", ["handB", "handY", "handG", "handR"])],
                    onLoadComplete() {
                        C.p8.fromTo(".e.handB, .e.handG, .e.handR, .e.handY", {
                            scale: .7,
                            opacity: .9
                        }, {
                            scale: 1,
                            duration: .5
                        }), C.p8.set(".e.blue, .e.yellow, .e.green, .e.red", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.handY", {
                            rotate: 20,
                            duration: .75
                        }, 0).to(".e.handY", {
                            rotate: -40,
                            duration: 1
                        }, .75).to(".e.handY", {
                            rotate: 20,
                            duration: 1
                        }, 1.75).to(".e.handY", {
                            rotate: -40,
                            duration: 1
                        }, 2.75).to(".e.handY", {
                            rotate: 20,
                            duration: .25
                        }, 3.75).to(".e.handY", {
                            opacity: 0,
                            duration: 2
                        }, 2).to(".e.yellow", {
                            opacity: .9,
                            duration: 3
                        }, 1), this.timeline.to(".e.handR", {
                            rotate: 10,
                            duration: .25
                        }, 0).to(".e.handR", {
                            rotate: -50,
                            duration: 1
                        }, .25).to(".e.handR", {
                            rotate: 10,
                            duration: 1
                        }, 1.25).to(".e.handR", {
                            rotate: -50,
                            duration: 1
                        }, 2.25).to(".e.handR", {
                            rotate: 10,
                            duration: .75
                        }, 3.25).to(".e.handR", {
                            opacity: 0,
                            duration: 2
                        }, 1.25).to(".e.red", {
                            opacity: .9,
                            duration: 3
                        }, .25), this.timeline.to(".e.handG", {
                            rotate: -30,
                            duration: 1
                        }, 0).to(".e.handG", {
                            rotate: 30,
                            duration: 1
                        }, 1).to(".e.handG", {
                            rotate: -30,
                            duration: 1
                        }, 2).to(".e.handG", {
                            rotate: 30,
                            duration: 1
                        }, 3).to(".e.handG", {
                            opacity: 0,
                            duration: 2
                        }, 1.5).to(".e.green", {
                            opacity: .9,
                            duration: 3
                        }, .5), this.timeline.to(".e.handB", {
                            rotate: -30,
                            duration: 1
                        }, 0).to(".e.handB", {
                            rotate: 30,
                            duration: 1
                        }, 1).to(".e.handB", {
                            rotate: -30,
                            duration: 1
                        }, 2).to(".e.handB", {
                            rotate: 30,
                            duration: 1
                        }, 3).to(".e.handB", {
                            opacity: 0,
                            duration: 2
                        }, 1.75).to(".e.blue", {
                            opacity: .9,
                            duration: 3
                        }, .75)
                    }
                }),
                rO = He.extend({
                    imageManifest: {
                        neighbor: Promise.resolve().then(s.t.bind(s, 82799, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "neighbor",
                            images: {
                                neighbor: [10, 10, 218, 248, 376, 391],
                                whole: [581, 10, 139, 262, 371, 394],
                                quarter: [730, 10, 213, 263, 370, 394],
                                eighth: [238, 10, 333, 261, 370, 333],
                                binocks: [10, 283, 831, 601, 221, 84]
                            }
                        }
                    }
                }),
                lO = rO.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", ["binocks"]),
                    onLoadComplete() {
                        C.p8.set(".e.binocks", {
                            rotate: -70,
                            scale: .75
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.binocks", {
                            rotate: 0,
                            scale: 1
                        })
                    }
                }),
                dO = rO.extend({
                    elements: Ye.elementsFromSprite("sprite", ["neighbor"]),
                    onLoadComplete() {
                        C.p8.set(".e.neighbor", {
                            scaleY: .8,
                            transformOrigin: "bottom center"
                        }), C.p8.timeline({
                            repeat: -1
                        }).to(".e.neighbor", {
                            scaleY: 1.1,
                            skewX: -5
                        }).to(".e.neighbor", {
                            scaleY: .8,
                            skewX: 0
                        }).to(".e.neighbor", {
                            scaleY: 1.1,
                            skewX: 5
                        }).to(".e.neighbor", {
                            scaleY: .8,
                            skewX: 0
                        })
                    }
                }),
                pO = rO.extend({
                    elements: Ye.elementsFromSprite("sprite", ["whole", "quarter", "eighth"]),
                    onLoadComplete() {
                        C.p8.set(".e.whole, .e.quarter, .e.eighth", {
                            x: -400,
                            opacity: 0,
                            rotate: -20
                        }), C.p8.to(".e.whole, .e.quarter, .e.eighth", {
                            rotate: 20,
                            repeat: -1
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline({
                                repeat: 1
                            }).to(".e.whole", {
                                x: 400,
                                duration: 1,
                                ease: "none"
                            }).to(".e.whole", {
                                opacity: 1,
                                duration: .2
                            }, 0).to(".e.whole", {
                                opacity: 0,
                                duration: .2
                            }, .8),
                            t = C.p8.timeline({
                                delay: .33
                            }).to(".e.quarter", {
                                x: 400,
                                duration: 1,
                                ease: "none"
                            }).to(".e.quarter", {
                                opacity: 1,
                                duration: .2
                            }, 0).to(".e.quarter", {
                                opacity: 0,
                                duration: .2
                            }, .8),
                            s = C.p8.timeline({
                                delay: .66
                            }).to(".e.eighth", {
                                x: 400,
                                duration: 1,
                                ease: "none"
                            }).to(".e.eighth", {
                                opacity: 1,
                                duration: .2
                            }, 0).to(".e.eighth", {
                                opacity: 0,
                                duration: .2
                            }, .8);
                        this.timeline.add(e, 0).add(t, 0).add(s, 0)
                    }
                }),
                cO = He.extend({
                    imageManifest: {
                        hand: Promise.resolve().then(s.t.bind(s, 66130, 17)),
                        ladder: Promise.resolve().then(s.t.bind(s, 29984, 17)),
                        smooch: Promise.resolve().then(s.t.bind(s, 77336, 17))
                    }
                }),
                mO = cO.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromImages("ladder"),
                    onDiscreteProgress() {
                        Ye.squashOnce("ladder", .35)
                    }
                }),
                hO = cO.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromImages("hand")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.hand", {
                            scale: .8,
                            rotate: 30
                        })
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c"), C.p8.to(".e.hand", {
                            scale: 1.1,
                            rotate: 0,
                            duration: .4,
                            ease: "back.out(2)"
                        })
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c"), C.p8.to(".e.hand", {
                            scale: .8,
                            rotate: 30,
                            duration: .2
                        })
                    }
                }),
                uO = cO.extend({
                    elements: Ye.elementsFromImages("smooch"),
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("smooch")).add(Ye.squashOnce("smooch", "y")).add(Ye.squashOnce("smooch")).add(Ye.squashOnce("smooch", "y")).add(Ye.squashOnce("smooch"))
                    }
                }),
                gO = mO,
                yO = hO,
                bO = He.extend({
                    imageManifest: {
                        eyes: Promise.resolve().then(s.t.bind(s, 37421, 17))
                    }
                }).extend({
                    elements: Ye.elementsFromImages("eyes")
                }),
                xO = He.extend({
                    imageManifest: {
                        crack: Promise.resolve().then(s.t.bind(s, 5620, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "crack",
                            images: {
                                crack: [10, 10, 352, 169, 429, 315],
                                floor: [10, 189, 939, 672, 161, 31]
                            }
                        }
                    },
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["floor", "crack"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.crack", {
                            opacity: 0
                        })
                    }
                }),
                fO = xO.extend({
                    onStartProgress() {
                        Ye.startHoldShake("floor")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("floor")
                    }
                }),
                vO = xO.extend({
                    stepDuration: .3,
                    onDiscreteProgress() {
                        C.p8.to(".e.crack", {
                            opacity: 1,
                            duration: .15,
                            repeat: 1,
                            yoyo: !0
                        })
                    }
                }),
                kO = xO,
                PO = He.extend({
                    imageManifest: {
                        floor: Promise.resolve().then(s.t.bind(s, 6688, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "floor",
                            images: {
                                roll: [10, 522, 383, 383, 309, 610],
                                tape: [10, 445, 756, 67, 309, 219],
                                tape4: [776, 445, 115, 220, 360, 603],
                                tape3: [403, 760, 395, 67, 428, 310],
                                tape2: [901, 445, 99, 219, 360, 310],
                                tape1: [403, 522, 349, 59, 374, 310],
                                tape0: [403, 675, 441, 75, 489, 277],
                                floor: [10, 10, 974, 425, 248, 10]
                            }
                        }
                    }
                }),
                wO = PO.extend({
                    elements: Ye.elementsFromSprite("sprite", ["tape", "roll"]),
                    onLoadComplete() {
                        C.p8.set(".e.tape", {
                            clipPath: "inset(0% 0% 0% 79%)"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.roll", {
                            x: -600
                        }, 0).to(".e.tape", {
                            clipPath: "inset(0% 0% 0% 0%)"
                        }, 0)
                    }
                }),
                TO = PO.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["floor", "tape0", "tape1", "tape2", "tape3", "tape4"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.tape0, .e.tape1, .e.tape2, .e.tape3, .e.tape4", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.tape0", {
                            hidden: !1
                        }, 1).set(".e.tape1", {
                            hidden: !1
                        }, 2).set(".e.tape2", {
                            hidden: !1
                        }, 3).set(".e.tape3", {
                            hidden: !1
                        }, 4).set(".e.tape4", {
                            hidden: !1
                        }, 5).fillTime(1)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("c")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("c")
                    }
                }),
                SO = PO.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["floor", "tape0", "tape1", "tape2", "tape3", "tape4"])
                    }],
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("c")).fillTime(.3).add(Ye.squashOnce("c")).fillTime(.3).add(Ye.squashOnce("c"))
                    }
                }),
                MO = PO.extend({
                    stepDuration: .35,
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["floor", "tape0", "tape1", "tape2", "tape3", "tape4"])
                    }],
                    initializeTimeline() {
                        this.timeline.add(Ye.squashOnce("c", 1, "y")).add(Ye.squashOnce("c", 1, "y"))
                    }
                }),
                CO = He.extend({
                    imageManifest: {
                        blanket: Promise.resolve().then(s.t.bind(s, 4321, 17)),
                        dresser: Promise.resolve().then(s.t.bind(s, 40815, 17)),
                        pillow: Promise.resolve().then(s.t.bind(s, 46109, 17)),
                        pine1: Promise.resolve().then(s.t.bind(s, 19381, 17)),
                        pine2: Promise.resolve().then(s.t.bind(s, 21174, 17))
                    }
                }),
                DO = CO.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("blanket", "pillow"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.pillow", {
                            y: -200,
                            scale: .75
                        }, {
                            x: 600,
                            rotate: 60,
                            opacity: 0
                        })
                    }
                }),
                FO = CO.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("blanket"),
                    initializeTimeline() {
                        this.timeline.to(".e.blanket", {
                            x: -600,
                            rotate: -40,
                            opacity: 0
                        })
                    }
                }),
                zO = CO.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("dresser"),
                    initializeTimeline() {
                        this.timeline.to(".e.dresser", {
                            scale: 1.75,
                            y: 200,
                            duration: 1
                        }), this.timeline.to(".e.dresser", {
                            y: -500,
                            duration: 2
                        }), this.timeline.to(".e.dresser", {
                            y: 500,
                            scale: 1,
                            duration: 1
                        })
                    }
                }),
                LO = CO.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("dresser", "pine1"),
                    initializeTimeline() {
                        C.p8.set(".e.dresser", {
                            y: 500,
                            scale: 1,
                            duration: 1
                        }), this.timeline.fromTo(".e.pine1", {
                            y: -200,
                            opacity: 0
                        }, {
                            scale: .75,
                            y: -300,
                            opacity: 1
                        })
                    }
                }),
                RO = CO.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("dresser", "pine1", "pine2"),
                    initializeTimeline() {
                        C.p8.set(".e.dresser", {
                            y: 500,
                            scale: 1,
                            duration: 1
                        }), C.p8.set(".e.pine1", {
                            scale: .5,
                            y: -200,
                            opacity: 1
                        }), C.p8.set(".e.pine2", {
                            hidden: !0
                        }), C.p8.to(".e.dresser", {
                            y: 1200,
                            scale: 1.5,
                            opacity: 0
                        }), C.p8.to(".e.pine1", {
                            scale: 1,
                            y: 0
                        })
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("pine1", "pine2", .25)
                    }
                }),
                IO = He.extend({
                    imageManifest: {
                        foot: Promise.resolve().then(s.t.bind(s, 28698, 17)),
                        pants: Promise.resolve().then(s.t.bind(s, 99205, 17)),
                        socks: Promise.resolve().then(s.t.bind(s, 8126, 17)),
                        yawn: Promise.resolve().then(s.t.bind(s, 33273, 17)),
                        zzz: Promise.resolve().then(s.t.bind(s, 8593, 17))
                    }
                }),
                OO = IO.extend({
                    elements: Ye.elementsFromImages("foot")
                }),
                BO = IO.extend({
                    elements: Ye.elementsFromImages("socks")
                }),
                YO = IO.extend({
                    elements: Ye.elementsFromImages("pants")
                }),
                AO = IO.extend({
                    elements: Ye.elementsFromImages("yawn"),
                    initializeTimeline() {
                        this.timeline.to(".e.yawn", {
                            opacity: 0,
                            scale: .75
                        })
                    }
                }),
                HO = IO.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("zzz"),
                    onDiscreteProgress() {
                        C.p8.to(".e.zzz", {
                            opacity: 0,
                            y: 300,
                            scale: .75
                        })
                    }
                }),
                GO = He.extend({
                    imageManifest: {
                        antacids: Promise.resolve().then(s.t.bind(s, 78605, 17)),
                        show2: Promise.resolve().then(s.t.bind(s, 29433, 17)),
                        funshow: Promise.resolve().then(s.t.bind(s, 16697, 17))
                    }
                }),
                VO = GO.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("show2", "funshow"),
                    onProgress(e) {
                        e > 98 && Ye.squashTransition("funshow", "show2", .25)
                    }
                }),
                EO = GO.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("antacids", "show2"),
                    onProgress(e) {
                        e > 98 && Ye.squashTransition("show2", "antacids", .25)
                    }
                }),
                qO = GO.extend({
                    elements: Ye.elementsFromImages("antacids"),
                    initializeTimeline() {
                        this.timeline.to(".e.antacids", {
                            scale: 2,
                            duration: 2,
                            x: 120,
                            ease: "none"
                        })
                    }
                }),
                NO = He.extend({
                    imageManifest: {
                        sleep1: Promise.resolve().then(s.t.bind(s, 66403, 17)),
                        sleep2: Promise.resolve().then(s.t.bind(s, 95961, 17)),
                        sleep3: Promise.resolve().then(s.t.bind(s, 80935, 17)),
                        z1: Promise.resolve().then(s.t.bind(s, 31234, 17)),
                        z2: Promise.resolve().then(s.t.bind(s, 81826, 17)),
                        sleep4: Promise.resolve().then(s.t.bind(s, 53492, 17))
                    }
                }),
                XO = NO.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("sleep2", "sleep1"),
                    onDiscreteProgress() {
                        Ye.squashTransition("sleep1", "sleep2", .25)
                    }
                }),
                WO = NO.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("sleep3", "sleep2"),
                    onDiscreteProgress() {
                        Ye.squashTransition("sleep2", "sleep3", .25)
                    }
                }),
                UO = NO.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("sleep2", "sleep3"),
                    onDiscreteProgress() {
                        Ye.squashTransition("sleep3", "sleep2", .25)
                    }
                }),
                $O = NO.extend({
                    stepDuration: .5,
                    elements: Ye.elementsFromImages("sleep1", "sleep2", "z1", "z2"),
                    initializeTimeline() {
                        C.p8.set(".e.z2, .e.z1", {
                            hidden: !1
                        }), this.z1Tween = C.p8.to(".e.z1", {
                            opacity: 0,
                            x: 50,
                            y: -50,
                            repeat: -1,
                            duration: 1.5
                        }), this.z2Tween = C.p8.to(".e.z2", {
                            opacity: 0,
                            x: 50,
                            y: -50,
                            repeat: -1,
                            duration: 1.5,
                            delay: .5
                        })
                    },
                    onStartProgress() {
                        Ye.startShake("sleep2", 1, 2, 3)
                    },
                    onProgress(e) {
                        e > 98 && (Ye.stopShake("sleep2"), Ye.squashTransition("sleep2", "sleep1", .25), C.p8.set(".e.z2, .e.z1", {
                            hidden: !0
                        }))
                    },
                    onStopProgress() {
                        Ye.stopShake("sleep2")
                    }
                }),
                jO = He.extend({
                    imageManifest: {
                        bucket: Promise.resolve().then(s.t.bind(s, 68185, 17)),
                        bucketFront: Promise.resolve().then(s.t.bind(s, 52477, 17)),
                        mop: Promise.resolve().then(s.t.bind(s, 67684, 17)),
                        slime: Promise.resolve().then(s.t.bind(s, 24327, 17))
                    }
                }),
                KO = jO.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("mop"),
                    initializeTimeline() {
                        this.timeline.to(".e.mop", {
                            y: -100,
                            ease: "back(3)"
                        })
                    }
                }),
                ZO = jO.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromImages("bucket", "mop", "bucketFront"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.mop", {
                            y: -100
                        }, {
                            y: 0,
                            ease: "back(3)"
                        })
                    }
                }),
                JO = jO.extend({
                    elements: Ye.elementsFromImages("slime", "mop"),
                    initializeTimeline() {
                        this.timeline.fromTo(".e.mop", {
                            rotate: -20
                        }, {
                            rotate: 20,
                            repeat: 7,
                            yoyo: !0,
                            ease: "power2.inOut"
                        }), this.timeline.to(".e.slime", {
                            opacity: 0,
                            duration: 5
                        }, "<")
                    }
                }),
                _O = He.extend({
                    imageManifest: {
                        Adult0Passport: Promise.resolve().then(s.t.bind(s, 85725, 17)),
                        Adult0: Promise.resolve().then(s.t.bind(s, 45779, 17)),
                        Adult0v2: Promise.resolve().then(s.t.bind(s, 20832, 17)),
                        Adult1Passport: Promise.resolve().then(s.t.bind(s, 27875, 17)),
                        Adult1: Promise.resolve().then(s.t.bind(s, 45835, 17)),
                        Adult1v2: Promise.resolve().then(s.t.bind(s, 84745, 17)),
                        Child0Passport: Promise.resolve().then(s.t.bind(s, 30977, 17)),
                        Child0: Promise.resolve().then(s.t.bind(s, 90200, 17)),
                        Child0v2: Promise.resolve().then(s.t.bind(s, 75446, 17)),
                        Child0v3: Promise.resolve().then(s.t.bind(s, 22477, 17)),
                        Child1Passport: Promise.resolve().then(s.t.bind(s, 72164, 17)),
                        Child1: Promise.resolve().then(s.t.bind(s, 13855, 17)),
                        Child1v2: Promise.resolve().then(s.t.bind(s, 65038, 17)),
                        Child1v3: Promise.resolve().then(s.t.bind(s, 21622, 17)),
                        Child2Passport: Promise.resolve().then(s.t.bind(s, 34443, 17)),
                        Child2: Promise.resolve().then(s.t.bind(s, 60597, 17)),
                        Child2v2: Promise.resolve().then(s.t.bind(s, 73556, 17)),
                        Child2v3: Promise.resolve().then(s.t.bind(s, 2071, 17)),
                        Teen0Passport: Promise.resolve().then(s.t.bind(s, 82582, 17)),
                        Teen0: Promise.resolve().then(s.t.bind(s, 76849, 17)),
                        Teen0v2: Promise.resolve().then(s.t.bind(s, 11934, 17)),
                        Teen0v3: Promise.resolve().then(s.t.bind(s, 97317, 17)),
                        Teen1Passport: Promise.resolve().then(s.t.bind(s, 90582, 17)),
                        Teen1: Promise.resolve().then(s.t.bind(s, 42746, 17)),
                        Teen1v2: Promise.resolve().then(s.t.bind(s, 15526, 17)),
                        Teen1v3: Promise.resolve().then(s.t.bind(s, 8872, 17)),
                        Teen2Passport: Promise.resolve().then(s.t.bind(s, 62351, 17)),
                        Teen2: Promise.resolve().then(s.t.bind(s, 7961, 17)),
                        Teen2v2: Promise.resolve().then(s.t.bind(s, 6426, 17)),
                        Teen2v3: Promise.resolve().then(s.t.bind(s, 12102, 17))
                    }
                }).extend({
                    className: "passport",
                    elements() {
                        const e = this.model.get("playerInfo"),
                            t = this.model.get("playerInfo").avatar.replace("v2", "").replace("v3", ""),
                            s = new Date,
                            i = new Date((new Date).setFullYear((new Date).getFullYear() + 10)),
                            o = s.toLocaleString("en-gb", {
                                day: "numeric",
                                month: "short",
                                year: "numeric"
                            }).toUpperCase().replace(",", ""),
                            n = i.toLocaleString("en-gb", {
                                day: "numeric",
                                month: "short",
                                year: "numeric"
                            }).toUpperCase().replace(",", "");
                        return [{
                            class: "devil",
                            type: "img",
                            key: e.avatar
                        }, {
                            class: "passport-container",
                            type: "container",
                            children: [{
                                class: "passport",
                                type: "img",
                                pos: [0, -400],
                                key: `${t}Passport`
                            }, {
                                class: "data",
                                type: "div",
                                pos: [100, 758],
                                html: `\n                    <p>DEVIL</p>\n                    <p>${e.name}</p>\n                    <p>DEVILLE, UNDERWORLD</p>\n                    <p>${o}</p>\n                    <p>${n}</p>\n                `
                            }]
                        }, {
                            class: "flash",
                            type: "div",
                            pos: [-5e3, -5e3],
                            html: ""
                        }]
                    },
                    onLoadComplete() {
                        C.p8.set(".e.flash", {
                            opacity: 0
                        }), C.p8.set(".e.passport-container", {
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.devil", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.devil", {
                            filter: "blur(4px)",
                            autoRound: !1
                        }).to(".e.devil", {
                            filter: "blur(0px)",
                            autoRound: !1
                        }).to(".e.devil", {
                            filter: "blur(10px)",
                            autoRound: !1
                        }).to(".e.devil", {
                            filter: "blur(0px)",
                            autoRound: !1
                        });
                        this.timeline.to(".e.flash", {
                            opacity: 1,
                            duration: .05,
                            ease: "none"
                        }, 5).set(".e.passport-container", {
                            visibility: "visible"
                        }).set(".e.devil", {
                            visibility: "hidden"
                        }).to(".e.flash", {
                            opacity: 0,
                            duration: .15
                        }, "+=0.15").to(".e.passport-container", {
                            x: -180,
                            y: 50,
                            rotation: -6
                        }).set(".e.devil", {
                            visibility: "hidden"
                        }, "+=3"), this.timeline.add(e, 0)
                    }
                }),
                QO = He.extend({
                    className: "instructions",
                    holdTL: null,
                    elementsFromImageKeys: e => [{
                        class: "elements-container",
                        type: "container",
                        children: e.map(((e, t) => ({
                            class: `step step-${t}`,
                            type: "img",
                            pos: [0, 0],
                            key: e
                        })))
                    }],
                    onLoadComplete() {
                        this.resetToStep(this.model.get("currentStepIndex"))
                    },
                    resetToStep() {
                        C.p8.set(".e.step", {
                            rotation: 0,
                            x: 0,
                            y: 0,
                            opacity: 0
                        }), C.p8.set(`.e.step-${this.model.get("currentStepIndex")}`, {
                            opacity: 1
                        })
                    },
                    onTapDown() {
                        const e = `.e.step-${this.model.get("currentStepIndex")}`;
                        C.p8.timeline().to(e, {
                            scaleX: 1.2,
                            scaleY: 1,
                            duration: .1
                        }).to(e, {
                            scaleX: .9,
                            scaleY: 1.1,
                            duration: .1
                        }), this.holdTL = C.p8.timeline({
                            ease: pt.bJ.easeNone,
                            repeat: -1
                        }).to(e, {
                            x: 2,
                            y: 2,
                            duration: .1
                        }).to(e, {
                            x: -2,
                            y: -2,
                            duration: .1
                        }).to(e, {
                            x: -2,
                            y: 0,
                            duration: .1
                        }).to(e, {
                            x: 2,
                            y: 2,
                            duration: .1
                        }).to(e, {
                            x: 2,
                            y: -2,
                            duration: .1
                        }).to(e, {
                            x: -2,
                            y: 2,
                            duration: .1
                        }).to(e, {
                            x: -2,
                            y: 2,
                            duration: .1
                        }).to(e, {
                            x: 2,
                            y: 2,
                            duration: .1
                        }).to(e, {
                            x: 2,
                            y: -2,
                            duration: .1
                        }).to(e, {
                            x: 2,
                            y: 2,
                            duration: .1
                        }).to(e, {
                            x: 2,
                            y: -2,
                            duration: .1
                        })
                    },
                    onTapUp() {
                        C.p8.to(`.e.step-${this.model.get("currentStepIndex")}`, {
                            duration: .15,
                            scale: 1,
                            ease: pt.bJ.easeNone
                        }), this.holdTL && (this.holdTL.pause(), this.holdTL = null)
                    },
                    onRotation(e) {
                        C.p8.set(`.e.step-${this.model.get("currentStepIndex")}`, {
                            rotation: e
                        })
                    },
                    onSwipe(e) {
                        C.p8.to(`.e.step-${this.model.get("currentStepIndex")}`, {
                            duration: .15,
                            opacity: 0,
                            x: 50 * Math.cos(e),
                            y: 50 * Math.sin(e),
                            ease: pt.bJ.easeNone
                        })
                    }
                }),
                eB = QO.extend({
                    imageManifest: {
                        bike: Promise.resolve().then(s.t.bind(s, 31314, 17)),
                        nut: Promise.resolve().then(s.t.bind(s, 40649, 17)),
                        pedal: Promise.resolve().then(s.t.bind(s, 18856, 17)),
                        wheel: Promise.resolve().then(s.t.bind(s, 78314, 17)),
                        wheelTire: Promise.resolve().then(s.t.bind(s, 58923, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["pedal", "wheel", "nut", "wheel", "nut", "wheelTire", "bike"])
                    }
                }),
                tB = QO.extend({
                    imageManifest: {
                        cheap: Promise.resolve().then(s.t.bind(s, 30260, 17)),
                        expensive: Promise.resolve().then(s.t.bind(s, 12030, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["expensive", "expensive", "expensive", "cheap"])
                    }
                }),
                sB = QO.extend({
                    imageManifest: {
                        plane0: Promise.resolve().then(s.t.bind(s, 51638, 17)),
                        plane1: Promise.resolve().then(s.t.bind(s, 99081, 17)),
                        plane2: Promise.resolve().then(s.t.bind(s, 98675, 17)),
                        plane3: Promise.resolve().then(s.t.bind(s, 89996, 17)),
                        plane4: Promise.resolve().then(s.t.bind(s, 80383, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["plane0", "plane1", "plane2", "plane3", "plane4"])
                    }
                }),
                iB = QO.extend({
                    imageManifest: {
                        card0: Promise.resolve().then(s.t.bind(s, 10014, 17)),
                        card1: Promise.resolve().then(s.t.bind(s, 95290, 17)),
                        card2: Promise.resolve().then(s.t.bind(s, 44591, 17)),
                        card3: Promise.resolve().then(s.t.bind(s, 93205, 17)),
                        card4: Promise.resolve().then(s.t.bind(s, 87840, 17)),
                        card5: Promise.resolve().then(s.t.bind(s, 83612, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["card0", "card1", "card2", "card3", "card4", "card5"])
                    }
                }),
                oB = QO.extend({
                    imageManifest: {
                        tie0: Promise.resolve().then(s.t.bind(s, 44266, 17)),
                        tie1: Promise.resolve().then(s.t.bind(s, 74409, 17)),
                        tie2: Promise.resolve().then(s.t.bind(s, 54621, 17)),
                        tie3: Promise.resolve().then(s.t.bind(s, 25230, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["tie0", "tie1", "tie2", "tie3"])
                    }
                }),
                nB = QO.extend({
                    imageManifest: {
                        brimstone0: Promise.resolve().then(s.t.bind(s, 65633, 17)),
                        brimstone1: Promise.resolve().then(s.t.bind(s, 88128, 17)),
                        brimstone2: Promise.resolve().then(s.t.bind(s, 90093, 17)),
                        brimstone3: Promise.resolve().then(s.t.bind(s, 62487, 17)),
                        brimstone4: Promise.resolve().then(s.t.bind(s, 63646, 17)),
                        brimstone5: Promise.resolve().then(s.t.bind(s, 59380, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["brimstone0", "brimstone1", "brimstone2", "brimstone3", "brimstone4", "brimstone5"])
                    }
                }),
                aB = QO.extend({
                    imageManifest: {
                        dim: Promise.resolve().then(s.t.bind(s, 39284, 17)),
                        bright: Promise.resolve().then(s.t.bind(s, 50500, 17)),
                        brighter: Promise.resolve().then(s.t.bind(s, 58987, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["dim", "bright", "brighter"])
                    }
                }),
                rB = QO.extend({
                    imageManifest: {
                        bike: Promise.resolve().then(s.t.bind(s, 31314, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["bike", "bike", "bike", "bike", "bike"])
                    }
                }),
                lB = QO.extend({
                    imageManifest: {
                        post: Promise.resolve().then(s.t.bind(s, 66094, 17)),
                        empty: Promise.resolve().then(s.t.bind(s, 4852, 17)),
                        seeds: Promise.resolve().then(s.t.bind(s, 16135, 17)),
                        full: Promise.resolve().then(s.t.bind(s, 56958, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["post", "empty", "seeds", "full"])
                    }
                }),
                dB = QO.extend({
                    imageManifest: {
                        arm: Promise.resolve().then(s.t.bind(s, 59824, 17)),
                        seat: Promise.resolve().then(s.t.bind(s, 54499, 17)),
                        screws: Promise.resolve().then(s.t.bind(s, 22366, 17)),
                        wrench: Promise.resolve().then(s.t.bind(s, 27301, 17)),
                        chair: Promise.resolve().then(s.t.bind(s, 69162, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["arm", "seat", "screws", "wrench", "chair"])
                    }
                }),
                pB = QO.extend({
                    imageManifest: {
                        bear: Promise.resolve().then(s.t.bind(s, 47803, 17)),
                        party: Promise.resolve().then(s.t.bind(s, 79641, 17)),
                        tea: Promise.resolve().then(s.t.bind(s, 66669, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["party", "tea", "bear", "party"])
                    }
                }),
                cB = QO.extend({
                    imageManifest: {
                        couch: Promise.resolve().then(s.t.bind(s, 9155, 17)),
                        dance0: Promise.resolve().then(s.t.bind(s, 71883, 17)),
                        dance1: Promise.resolve().then(s.t.bind(s, 5341, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["dance0", "dance1", "couch"])
                    }
                }),
                mB = QO.extend({
                    imageManifest: {
                        wallet: Promise.resolve().then(s.t.bind(s, 73426, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["wallet", "wallet", "wallet", "wallet"])
                    }
                }),
                hB = QO.extend({
                    imageManifest: {
                        box0: Promise.resolve().then(s.t.bind(s, 63513, 17)),
                        box1: Promise.resolve().then(s.t.bind(s, 72026, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["box0", "box1"])
                    }
                }),
                uB = QO.extend({
                    imageManifest: {
                        boogy: Promise.resolve().then(s.t.bind(s, 74070, 17)),
                        dropIt: Promise.resolve().then(s.t.bind(s, 50972, 17)),
                        spin: Promise.resolve().then(s.t.bind(s, 25163, 17)),
                        watch: Promise.resolve().then(s.t.bind(s, 10310, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["boogy", "dropIt", "spin", "watch"])
                    }
                }),
                gB = QO.extend({
                    imageManifest: {
                        stepRight: Promise.resolve().then(s.t.bind(s, 59130, 17)),
                        stepLeft: Promise.resolve().then(s.t.bind(s, 43197, 17)),
                        handsOut: Promise.resolve().then(s.t.bind(s, 75316, 17)),
                        handsSassy: Promise.resolve().then(s.t.bind(s, 13626, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["stepLeft", "stepRight", "handsOut", "handsSassy"])
                    }
                }),
                yB = QO.extend({
                    imageManifest: {
                        button: Promise.resolve().then(s.t.bind(s, 24341, 17)),
                        hole: Promise.resolve().then(s.t.bind(s, 36351, 17)),
                        handIn: Promise.resolve().then(s.t.bind(s, 83881, 17)),
                        handOut: Promise.resolve().then(s.t.bind(s, 33415, 17)),
                        trash: Promise.resolve().then(s.t.bind(s, 37755, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["button", "hole", "handIn", "handOut", "trash"])
                    }
                }),
                bB = QO.extend({
                    imageManifest: {
                        fire: Promise.resolve().then(s.t.bind(s, 33205, 17)),
                        iron: Promise.resolve().then(s.t.bind(s, 60113, 17)),
                        ironing: Promise.resolve().then(s.t.bind(s, 67395, 17)),
                        smoke: Promise.resolve().then(s.t.bind(s, 8687, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["iron", "ironing", "ironing", "smoke", "fire"])
                    }
                }),
                xB = QO.extend({
                    imageManifest: {
                        pose0: Promise.resolve().then(s.t.bind(s, 12363, 17)),
                        pose1: Promise.resolve().then(s.t.bind(s, 32191, 17)),
                        pose2: Promise.resolve().then(s.t.bind(s, 41005, 17)),
                        hold: Promise.resolve().then(s.t.bind(s, 19605, 17)),
                        painting: Promise.resolve().then(s.t.bind(s, 60188, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["pose0", "pose1", "pose2", "hold", "painting"])
                    }
                }),
                fB = QO.extend({
                    imageManifest: {
                        mix: Promise.resolve().then(s.t.bind(s, 75301, 17)),
                        explosion: Promise.resolve().then(s.t.bind(s, 62366, 17)),
                        mess: Promise.resolve().then(s.t.bind(s, 75301, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["mix", "explosion", "mess"])
                    }
                }),
                vB = QO.extend({
                    imageManifest: {
                        pantsOn: Promise.resolve().then(s.t.bind(s, 4041, 17)),
                        PantsOff: Promise.resolve().then(s.t.bind(s, 88898, 17)),
                        montage: Promise.resolve().then(s.t.bind(s, 65296, 17)),
                        bow: Promise.resolve().then(s.t.bind(s, 60933, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["pantsOn", "PantsOff", "montage", "bow"])
                    }
                }),
                kB = QO.extend({
                    imageManifest: {
                        arms: Promise.resolve().then(s.t.bind(s, 19258, 17)),
                        bigFinish: Promise.resolve().then(s.t.bind(s, 96924, 17)),
                        handstand: Promise.resolve().then(s.t.bind(s, 47155, 17)),
                        legs: Promise.resolve().then(s.t.bind(s, 68244, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["arms", "handstand", "legs", "bigFinish"])
                    }
                }),
                PB = QO.extend({
                    imageManifest: {
                        mic: Promise.resolve().then(s.t.bind(s, 41039, 17)),
                        harmony: Promise.resolve().then(s.t.bind(s, 20695, 17)),
                        cowbell: Promise.resolve().then(s.t.bind(s, 78373, 17)),
                        stand: Promise.resolve().then(s.t.bind(s, 36409, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["mic", "harmony", "cowbell", "stand"])
                    }
                }),
                wB = QO.extend({
                    imageManifest: {
                        food: Promise.resolve().then(s.t.bind(s, 87624, 17)),
                        souvenirs: Promise.resolve().then(s.t.bind(s, 90202, 17)),
                        cheese: Promise.resolve().then(s.t.bind(s, 13807, 17)),
                        scribble: Promise.resolve().then(s.t.bind(s, 84780, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["food", "souvenirs", "cheese", "scribble"])
                    }
                }),
                TB = QO.extend({
                    imageManifest: {
                        undies: Promise.resolve().then(s.t.bind(s, 6916, 17)),
                        shirt: Promise.resolve().then(s.t.bind(s, 65659, 17)),
                        socks: Promise.resolve().then(s.t.bind(s, 41589, 17)),
                        suitcase: Promise.resolve().then(s.t.bind(s, 82092, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["undies", "shirt", "socks", "suitcase"])
                    }
                }),
                SB = QO.extend({
                    imageManifest: {
                        bus: Promise.resolve().then(s.t.bind(s, 39873, 17)),
                        ticket: Promise.resolve().then(s.t.bind(s, 62167, 17)),
                        question: Promise.resolve().then(s.t.bind(s, 21338, 17)),
                        shirt: Promise.resolve().then(s.t.bind(s, 85348, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["bus", "ticket", "question", "shirt"])
                    }
                }),
                MB = QO.extend({
                    imageManifest: {
                        neutral: Promise.resolve().then(s.t.bind(s, 8922, 17)),
                        pool: Promise.resolve().then(s.t.bind(s, 62927, 17)),
                        card: Promise.resolve().then(s.t.bind(s, 42867, 17)),
                        wrench: Promise.resolve().then(s.t.bind(s, 23220, 17)),
                        purchase: Promise.resolve().then(s.t.bind(s, 30402, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["neutral", "pool", "card", "wrench", "purchase"])
                    }
                }),
                CB = QO.extend({
                    imageManifest: {
                        plain: Promise.resolve().then(s.t.bind(s, 69583, 17)),
                        xs: Promise.resolve().then(s.t.bind(s, 49854, 17)),
                        arrows: Promise.resolve().then(s.t.bind(s, 58302, 17)),
                        corrected: Promise.resolve().then(s.t.bind(s, 97239, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["plain", "xs", "arrows", "corrected"])
                    }
                }),
                DB = QO.extend({
                    imageManifest: {
                        board: Promise.resolve().then(s.t.bind(s, 29709, 17)),
                        saw: Promise.resolve().then(s.t.bind(s, 71618, 17)),
                        stuck: Promise.resolve().then(s.t.bind(s, 28986, 17)),
                        half: Promise.resolve().then(s.t.bind(s, 53463, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["board", "saw", "stuck", "half"])
                    }
                }),
                FB = QO.extend({
                    imageManifest: {
                        blank: Promise.resolve().then(s.t.bind(s, 71960, 17)),
                        graph: Promise.resolve().then(s.t.bind(s, 89808, 17)),
                        music: Promise.resolve().then(s.t.bind(s, 62127, 17)),
                        animation: Promise.resolve().then(s.t.bind(s, 56799, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["blank", "graph", "music", "animation"])
                    }
                }),
                zB = QO.extend({
                    imageManifest: {
                        marker: Promise.resolve().then(s.t.bind(s, 43929, 17)),
                        speech: Promise.resolve().then(s.t.bind(s, 51125, 17)),
                        heart: Promise.resolve().then(s.t.bind(s, 95174, 17)),
                        toilet: Promise.resolve().then(s.t.bind(s, 97645, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["marker", "speech", "heart", "toilet"])
                    }
                }),
                LB = QO.extend({
                    imageManifest: {
                        fire: Promise.resolve().then(s.t.bind(s, 9e3, 17)),
                        down: Promise.resolve().then(s.t.bind(s, 12543, 17)),
                        brace: Promise.resolve().then(s.t.bind(s, 12234, 17)),
                        sigh: Promise.resolve().then(s.t.bind(s, 31360, 17)),
                        drops: Promise.resolve().then(s.t.bind(s, 68255, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["fire", "down", "brace", "sigh", "drops"])
                    }
                }),
                RB = QO.extend({
                    imageManifest: {
                        tarp: Promise.resolve().then(s.t.bind(s, 87080, 17)),
                        light: Promise.resolve().then(s.t.bind(s, 50563, 17)),
                        projector: Promise.resolve().then(s.t.bind(s, 41880, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["tarp", "light", "projector"])
                    }
                }),
                IB = QO.extend({
                    imageManifest: {
                        pulley: Promise.resolve().then(s.t.bind(s, 13007, 17)),
                        hammer: Promise.resolve().then(s.t.bind(s, 2904, 17)),
                        net: Promise.resolve().then(s.t.bind(s, 15849, 17)),
                        claw: Promise.resolve().then(s.t.bind(s, 17726, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["pulley", "hammer", "net", "claw"])
                    }
                }),
                OB = QO.extend({
                    imageManifest: {
                        hedge: Promise.resolve().then(s.t.bind(s, 78306, 17)),
                        elephant: Promise.resolve().then(s.t.bind(s, 53292, 17)),
                        giraffe: Promise.resolve().then(s.t.bind(s, 73686, 17)),
                        ivy: Promise.resolve().then(s.t.bind(s, 82328, 17)),
                        marker: Promise.resolve().then(s.t.bind(s, 43297, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["hedge", "elephant", "giraffe", "ivy", "marker"])
                    }
                }),
                BB = QO.extend({
                    imageManifest: {
                        shovel: Promise.resolve().then(s.t.bind(s, 69806, 17)),
                        seeds: Promise.resolve().then(s.t.bind(s, 58510, 17)),
                        sprout: Promise.resolve().then(s.t.bind(s, 93608, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["shovel", "seeds", "shovel", "sprout"])
                    }
                }),
                YB = QO.extend({
                    imageManifest: {
                        cousin: Promise.resolve().then(s.t.bind(s, 43847, 17)),
                        ladder: Promise.resolve().then(s.t.bind(s, 41560, 17)),
                        roof: Promise.resolve().then(s.t.bind(s, 88456, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["roof", "cousin", "cousin", "ladder"])
                    }
                }),
                AB = QO.extend({
                    imageManifest: {
                        couch: Promise.resolve().then(s.t.bind(s, 45661, 17)),
                        baseboard: Promise.resolve().then(s.t.bind(s, 20636, 17)),
                        knob: Promise.resolve().then(s.t.bind(s, 17297, 17)),
                        furniture: Promise.resolve().then(s.t.bind(s, 45805, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["couch", "baseboard", "knob", "furniture"])
                    }
                }),
                HB = QO.extend({
                    imageManifest: {
                        curtains: Promise.resolve().then(s.t.bind(s, 62344, 17)),
                        future: Promise.resolve().then(s.t.bind(s, 61840, 17)),
                        couch0: Promise.resolve().then(s.t.bind(s, 74157, 17)),
                        couch1: Promise.resolve().then(s.t.bind(s, 81096, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["curtains", "future", "couch0", "couch1"])
                    }
                }),
                GB = QO.extend({
                    imageManifest: {
                        tea: Promise.resolve().then(s.t.bind(s, 4537, 17)),
                        fridge: Promise.resolve().then(s.t.bind(s, 91833, 17)),
                        ladder: Promise.resolve().then(s.t.bind(s, 81736, 17)),
                        fall: Promise.resolve().then(s.t.bind(s, 91893, 17)),
                        spill: Promise.resolve().then(s.t.bind(s, 48102, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["tea", "fridge", "ladder", "fall", "spill"])
                    }
                }),
                VB = QO.extend({
                    imageManifest: {
                        tire: Promise.resolve().then(s.t.bind(s, 85700, 17)),
                        oil: Promise.resolve().then(s.t.bind(s, 84547, 17)),
                        hose: Promise.resolve().then(s.t.bind(s, 43736, 17)),
                        nut: Promise.resolve().then(s.t.bind(s, 40662, 17)),
                        car: Promise.resolve().then(s.t.bind(s, 52618, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["tire", "oil", "hose", "nut", "car"])
                    }
                }),
                EB = QO.extend({
                    imageManifest: {
                        toothpaste: Promise.resolve().then(s.t.bind(s, 93699, 17)),
                        scratch: Promise.resolve().then(s.t.bind(s, 28476, 17)),
                        hose: Promise.resolve().then(s.t.bind(s, 91274, 17)),
                        worse: Promise.resolve().then(s.t.bind(s, 28784, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["toothpaste", "scratch", "hose", "worse"])
                    }
                }),
                qB = QO.extend({
                    imageManifest: {
                        school: Promise.resolve().then(s.t.bind(s, 43683, 17)),
                        dontDrive: Promise.resolve().then(s.t.bind(s, 64615, 17)),
                        dontKiss: Promise.resolve().then(s.t.bind(s, 47219, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["school", "dontDrive", "dontKiss"])
                    }
                }),
                NB = QO.extend({
                    imageManifest: {
                        folded: Promise.resolve().then(s.t.bind(s, 63875, 17)),
                        pin: Promise.resolve().then(s.t.bind(s, 3866, 17)),
                        knob: Promise.resolve().then(s.t.bind(s, 35867, 17)),
                        table: Promise.resolve().then(s.t.bind(s, 3696, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["folded", "pin", "knob", "table"])
                    }
                }),
                XB = QO.extend({
                    imageManifest: {
                        bottom: Promise.resolve().then(s.t.bind(s, 12347, 17)),
                        burger: Promise.resolve().then(s.t.bind(s, 71565, 17)),
                        sloppy: Promise.resolve().then(s.t.bind(s, 8825, 17)),
                        neighbor: Promise.resolve().then(s.t.bind(s, 78607, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["bottom", "burger", "sloppy", "neighbor"])
                    }
                }),
                WB = QO.extend({
                    imageManifest: {
                        removeBag: Promise.resolve().then(s.t.bind(s, 35062, 17)),
                        bypassHole: Promise.resolve().then(s.t.bind(s, 21225, 17)),
                        beltTape: Promise.resolve().then(s.t.bind(s, 21173, 17)),
                        hose: Promise.resolve().then(s.t.bind(s, 83606, 17)),
                        towel: Promise.resolve().then(s.t.bind(s, 50303, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["removeBag", "bypassHole", "beltTape", "hose", "towel"])
                    }
                }),
                UB = QO.extend({
                    imageManifest: {
                        box: Promise.resolve().then(s.t.bind(s, 4369, 17)),
                        assemble: Promise.resolve().then(s.t.bind(s, 98929, 17)),
                        wheel: Promise.resolve().then(s.t.bind(s, 10583, 17)),
                        trap: Promise.resolve().then(s.t.bind(s, 13451, 17))
                    },
                    elements() {
                        return this.elementsFromImageKeys(["box", "assemble", "wheel", "trap"])
                    }
                });
            C.p8.registerPlugin(vt.X);
            const $B = He.extend({
                    stepDuration: .15,
                    className: "fire-emergency",
                    shouldWiggle: !1,
                    isFullScreen: !0,
                    imageManifest: {
                        flame: Promise.resolve().then(s.t.bind(s, 81557, 17))
                    },
                    elements: [{
                        class: "background",
                        type: "div",
                        pos: [-5e3, -5e3],
                        html: ""
                    }, {
                        class: "glow",
                        type: "div",
                        html: ""
                    }, ...Ye.elementsFromImages(["flame", "flame flame-0"], ["flame", "flame flame-1"], ["flame", "flame flame-2"], ["flame", "flame flame-3"], ["flame", "flame flame-4"], ["flame", "flame flame-5"], ["flame", "flame flame-6"], ["flame", "flame flame-7"], ["flame", "flame flame-8"], ["flame", "flame flame-9"])],
                    onLoadComplete() {
                        C.p8.to(".e.background", {
                            opacity: .9
                        })
                    },
                    initializeTimeline() {
                        Ye.addInfiniteWiggle(["flame-0", "flame-1", "flame-2", "flame-3", "flame-4", "flame-5", "flame-6", "flame-7", "flame-8", "flame-9"]), C.p8.set(".e.glow", {
                            left: "-50%",
                            top: "7%"
                        }), C.p8.set(".e.flame-0", {
                            left: "-50%",
                            top: "14%"
                        }), C.p8.set(".e.flame-1", {
                            left: "-50%",
                            top: "21%",
                            scaleX: -1
                        }), C.p8.set(".e.flame-2", {
                            left: "-50%",
                            top: "28%"
                        }), C.p8.set(".e.flame-3", {
                            left: "-50%",
                            top: "35%",
                            scaleX: -1
                        }), C.p8.set(".e.flame-4", {
                            left: "-50%",
                            top: "42%"
                        }), C.p8.set(".e.flame-5", {
                            left: "-50%",
                            top: "49%",
                            scaleX: -1
                        }), C.p8.set(".e.flame-6", {
                            left: "-50%",
                            top: "56%"
                        }), C.p8.set(".e.flame-7", {
                            left: "-50%",
                            top: "63%",
                            scaleX: -1
                        }), C.p8.set(".e.flame-8", {
                            left: "-50%",
                            top: "70%"
                        }), C.p8.set(".e.flame-9", {
                            left: "-50%",
                            top: "77%",
                            scaleX: -1
                        }), this.timeline.to(".e.flame-0", {
                            top: "21%",
                            duration: 1
                        }).set(".e.flame-0", {
                            visibility: "hidden"
                        }).to(".e.flame-1", {
                            top: "28%",
                            duration: 1
                        }).set(".e.flame-1", {
                            visibility: "hidden"
                        }).to(".e.flame-2", {
                            top: "35%",
                            duration: 1
                        }).set(".e.flame-2", {
                            visibility: "hidden"
                        }).to(".e.flame-3", {
                            top: "42%",
                            duration: 1
                        }).set(".e.flame-3", {
                            visibility: "hidden"
                        }).to(".e.flame-4", {
                            top: "49%",
                            duration: 1
                        }).set(".e.flame-4", {
                            visibility: "hidden"
                        }).to(".e.flame-5", {
                            top: "56%",
                            duration: 1
                        }).set(".e.flame-5", {
                            visibility: "hidden"
                        }).to(".e.flame-6", {
                            top: "63%",
                            duration: 1
                        }).set(".e.flame-6", {
                            visibility: "hidden"
                        }).to(".e.flame-7", {
                            top: "70%",
                            duration: 1
                        }).set(".e.flame-7", {
                            visibility: "hidden"
                        }).to(".e.flame-8", {
                            top: "77%",
                            duration: 1
                        }).set(".e.flame-8", {
                            visibility: "hidden"
                        }).to(".e.flame-9", {
                            top: "84%",
                            duration: 1
                        }).set(".e.flame-9", {
                            visibility: "hidden"
                        }).to(".e.glow", {
                            top: "77%",
                            duration: 10,
                            ease: "none"
                        }, 0)
                    }
                }),
                jB = He.extend({
                    stepDuration: .15,
                    className: "power-emergency",
                    shouldWiggle: !1,
                    imageManifest: {
                        crank: Promise.resolve().then(s.t.bind(s, 37700, 17)),
                        shadow: Promise.resolve().then(s.t.bind(s, 11432, 17))
                    },
                    elements: [{
                        class: "panel",
                        type: "div",
                        pos: [50, 400],
                        html: ""
                    }, {
                        class: "background",
                        type: "div",
                        pos: [-5e3, -5e3],
                        html: ""
                    }, {
                        class: "shadow",
                        type: "img",
                        pos: [535, 215],
                        key: "shadow"
                    }, {
                        class: "light light-0",
                        type: "div",
                        pos: [90, 440],
                        html: ""
                    }, {
                        class: "light light-1",
                        type: "div",
                        pos: [174, 440],
                        html: ""
                    }, {
                        class: "light light-2",
                        type: "div",
                        pos: [258, 440],
                        html: ""
                    }, {
                        class: "light light-3",
                        type: "div",
                        pos: [342, 440],
                        html: ""
                    }, {
                        class: "light light-4",
                        type: "div",
                        pos: [426, 440],
                        html: ""
                    }, {
                        class: "crank",
                        type: "img",
                        pos: [500, 250],
                        key: "crank"
                    }],
                    onLoadComplete() {
                        C.p8.to(".e.background", {
                            opacity: 1
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to([".e.crank", ".e.shadow"], {
                                rotate: 1800,
                                duration: 1,
                                ease: "none"
                            }),
                            t = C.p8.timeline().call((() => {
                                this.$el.find(".light-4").addClass("charging")
                            }), null, 0).call((() => {
                                this.$el.find(".light-4").removeClass("charging").addClass("on"), this.$el.find(".light-3").addClass("charging")
                            }), null, .2).call((() => {
                                this.$el.find(".light-3").removeClass("charging").addClass("on"), this.$el.find(".light-2").addClass("charging")
                            }), null, .4).call((() => {
                                this.$el.find(".light-2").removeClass("charging").addClass("on"), this.$el.find(".light-1").addClass("charging")
                            }), null, .6).call((() => {
                                this.$el.find(".light-1").removeClass("charging").addClass("on"), this.$el.find(".light-0").addClass("charging")
                            }), null, .8).call((() => {
                                this.$el.find(".light-0").removeClass("charging").addClass("on")
                            }), null, 1),
                            s = C.p8.timeline().to([".e.background", ".e.shadow"], {
                                opacity: .9,
                                duration: .2
                            }).to([".e.background", ".e.shadow"], {
                                opacity: 0,
                                duration: .1
                            });
                        this.timeline.add(e), this.timeline.add(t, 0), this.timeline.add(s, .7)
                    },
                    onDiscreteProgress() {}
                }),
                KB = He.extend({
                    stepDuration: .15,
                    className: "flood-emergency",
                    shouldWiggle: !1,
                    isFullScreen: !0,
                    imageManifest: {
                        broom: Promise.resolve().then(s.t.bind(s, 70341, 17)),
                        cake: Promise.resolve().then(s.t.bind(s, 16214, 17)),
                        cat: Promise.resolve().then(s.t.bind(s, 38318, 17)),
                        chair: Promise.resolve().then(s.t.bind(s, 54580, 17)),
                        corn: Promise.resolve().then(s.t.bind(s, 18004, 17)),
                        fish: Promise.resolve().then(s.t.bind(s, 45769, 17)),
                        game: Promise.resolve().then(s.t.bind(s, 27262, 17)),
                        glue: Promise.resolve().then(s.t.bind(s, 13915, 17)),
                        hotdog: Promise.resolve().then(s.t.bind(s, 74709, 17)),
                        laptop: Promise.resolve().then(s.t.bind(s, 10556, 17)),
                        microwave: Promise.resolve().then(s.t.bind(s, 29825, 17)),
                        milk: Promise.resolve().then(s.t.bind(s, 17287, 17)),
                        phone: Promise.resolve().then(s.t.bind(s, 83349, 17)),
                        remote: Promise.resolve().then(s.t.bind(s, 40974, 17)),
                        spatula: Promise.resolve().then(s.t.bind(s, 30597, 17)),
                        toast: Promise.resolve().then(s.t.bind(s, 3230, 17)),
                        water: Promise.resolve().then(s.t.bind(s, 10174, 17))
                    },
                    elements() {
                        const e = [{
                            class: "background",
                            type: "div",
                            pos: [-5e3, -5e3],
                            html: ""
                        }, {
                            class: "floater",
                            type: "img",
                            key: (0, i.sample)(["cake", "chair", "cat", "laptop", "microwave"])
                        }];
                        for (let t = 0; t <= 3; t++) e.push({
                            class: `bobber bobber-${t}`,
                            type: "img",
                            key: (0, i.sample)(["broom", "corn", "fish", "game", "glue", "hotdog", "milk", "phone", "remote", "toast", "spatula"])
                        });
                        return e.push({
                            class: "water",
                            type: "div",
                            html: ""
                        }), e
                    },
                    onLoadComplete() {
                        C.p8.set(".e.water", {
                            top: "50%",
                            left: "-100%",
                            width: "300%",
                            height: "100%"
                        }), C.p8.to(".e.water", {
                            top: "0%",
                            duration: .5,
                            ease: "none"
                        }), C.p8.set(".e.floater", {
                            top: "-13%",
                            left: "100%",
                            width: 100,
                            height: 100
                        }), C.p8.to(".e.floater", {
                            left: "-20%",
                            duration: 15,
                            yoyo: !0,
                            repeat: -1,
                            ease: "power2.inOut"
                        }), C.p8.to(".e.background", {
                            opacity: .9
                        });
                        for (let e = 0; e <= 3; e++) C.p8.set(`.e.bobber-${e}`, {
                            top: 10 * e + 30 + "%",
                            left: "80%",
                            rotate: (0, i.random)(0, 360),
                            width: 75,
                            height: 75
                        }), C.p8.to(`.e.bobber-${e}`, {
                            left: "0%",
                            duration: (0, i.random)(10, 15),
                            yoyo: !0,
                            repeat: -1,
                            ease: "power2.inOut"
                        }).progress(40 * e / 100), Ye.addInfiniteWiggle(`bobber-${e}`)
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.floater", {
                            top: "87%",
                            ease: "none"
                        }).to(".e.water", {
                            top: "100%",
                            ease: "none"
                        }, 0);
                        this.timeline.add(e);
                        for (let e = 0; e <= 3; e++) {
                            const t = C.p8.timeline().to(`.e.bobber-${e}`, {
                                top: "100%",
                                ease: "none"
                            });
                            this.timeline.add(t, 0)
                        }
                    }
                }),
                ZB = He.extend({
                    stepDuration: .15,
                    className: "termite-emergency",
                    shouldWiggle: !1,
                    isFullScreen: !0,
                    width: 0,
                    height: 0,
                    deadCount: 0,
                    elements() {
                        const e = [{
                            class: "background",
                            type: "div",
                            pos: [-5e3, -5e3],
                            html: ""
                        }];
                        for (let t = 0; t < 40; t++) e.push({
                            class: `termite termite-${t}`,
                            type: "div",
                            pos: [0, 0],
                            html: ""
                        });
                        return e.push({
                            class: "smoke",
                            type: "div",
                            pos: [0, 0],
                            html: ""
                        }), e
                    },
                    onLoadComplete() {
                        this.width = this.el.clientWidth, this.height = this.el.clientHeight;
                        for (let e = 0; e < 40; e++) {
                            const t = (0, i.random)(0, this.width - 80),
                                s = (0, i.random)(70, this.height - 92);
                            C.p8.set(`.e.termite-${e}`, {
                                x: t,
                                y: s
                            });
                            const o = [{
                                x: t,
                                y: s
                            }, {
                                x: (0, i.random)(0, this.width - 80),
                                y: (0, i.random)(70, this.height - 92)
                            }, {
                                x: (0, i.random)(0, this.width - 80),
                                y: (0, i.random)(70, this.height - 92)
                            }, {
                                x: (0, i.random)(0, this.width - 80),
                                y: (0, i.random)(70, this.height - 92)
                            }, {
                                x: t,
                                y: s
                            }];
                            C.p8.to(`.e.termite-${e}`, {
                                motionPath: {
                                    path: o,
                                    curviness: 2,
                                    autoRotate: !0
                                },
                                runBackwards: !0,
                                duration: (0, i.random)(7, 12),
                                ease: "none",
                                repeat: -1
                            })
                        }
                        C.p8.set(".e.smoke", {
                            top: "100%",
                            left: "-100%"
                        }), C.p8.to(".e.background", {
                            opacity: .9
                        })
                    },
                    onDiscreteProgress(e) {
                        const t = Math.ceil(40 / (100 / e));
                        for (let e = 0; e < 40; e++) {
                            if (e < this.deadCount) continue;
                            if (e > t) continue;
                            const s = document.getElementsByClassName(`termite-${e}`);
                            if (!s || !s.length) continue;
                            const i = s[0];
                            i.classList && (i.classList.add("dead"), C.p8.killTweensOf(`.e.termite-${e}`), C.p8.set(`.e.termite-${e}`, {
                                scaleY: -1
                            }), C.p8.to(`.e.termite-${e}`, {
                                y: this.height + 50,
                                delay: .5
                            }))
                        }
                        C.p8.to(".e.smoke", {
                            top: 100 - e + "%",
                            duration: .15,
                            ease: "none"
                        }), C.p8.timeline().to(".e.smoke", {
                            opacity: .9,
                            duration: .1,
                            ease: "none"
                        }).to(".e.smoke", {
                            opacity: .75,
                            duration: .1,
                            ease: "none"
                        }), this.deadCount = t
                    }
                }),
                JB = He.extend({
                    stepDuration: .15,
                    className: "door-emergency",
                    shouldWiggle: !1,
                    imageManifest: {
                        frame: Promise.resolve().then(s.t.bind(s, 84156, 17)),
                        door: Promise.resolve().then(s.t.bind(s, 61148, 17))
                    },
                    elements: [{
                        class: "house-container",
                        type: "container",
                        children: [{
                            class: "house",
                            type: "div",
                            pos: [-5075, -5e3],
                            html: ""
                        }, {
                            class: "grass",
                            type: "div",
                            pos: [925, -5e3],
                            html: ""
                        }, {
                            class: "inside",
                            type: "div",
                            pos: [130, 280],
                            html: ""
                        }, {
                            class: "door",
                            type: "img",
                            key: "door"
                        }, {
                            class: "cracks",
                            type: "div",
                            pos: [136, 276],
                            html: ""
                        }, {
                            class: "frame",
                            type: "img",
                            pos: [0, -1e3],
                            key: "frame"
                        }]
                    }],
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.cracks", {
                            backgroundPositionX: "100%",
                            ease: "steps(11)"
                        });
                        this.timeline.add(e)
                    },
                    onDiscreteProgress(e) {
                        C.p8.timeline().to(".e.house-container", {
                            x: "random(-10, 10)",
                            y: "random(-10, 10)",
                            duration: .05
                        }).to(".e.house-container", {
                            x: "random(-8, 8)",
                            y: "random(-8, 8)",
                            duration: .05
                        }).to(".e.house-container", {
                            x: "random(-6, 6)",
                            y: "random(-6, 6)",
                            duration: .05
                        }).to(".e.house-container", {
                            x: "random(-4, 4)",
                            y: "random(-4, 4)",
                            duration: .05
                        }).to(".e.house-container", {
                            x: "random(-3, 3)",
                            y: "random(-3, 3)",
                            duration: .05
                        }).to(".e.house-container", {
                            x: "random(-2, 2)",
                            y: "random(-2, 2)",
                            duration: .05
                        }).to(".e.house-container", {
                            x: "random(-1, 1)",
                            y: "random(-1, 1)",
                            duration: .05
                        }).to(".e.house-container", {
                            x: 0,
                            y: 0,
                            duration: .05
                        }), e >= 99 && C.p8.to([".e.cracks", ".e.door"], {
                            scale: .5,
                            opacity: 0,
                            duration: .1
                        })
                    }
                }),
                _B = He.extend({
                    imageManifest: {
                        chair1: Promise.resolve().then(s.t.bind(s, 84773, 17)),
                        chair0: Promise.resolve().then(s.t.bind(s, 3562, 17)),
                        paw: Promise.resolve().then(s.t.bind(s, 41705, 17))
                    },
                    sprites: {
                        chair0: {
                            key: "chair0",
                            images: {
                                chair2: [10, 10, 709, 932, 36, 159],
                                chair1: [729, 10, 709, 932, 36, 159],
                                chair0: [10, 952, 709, 829, 139, 159]
                            }
                        },
                        chair1: {
                            key: "chair1",
                            images: {
                                chair6: [10, 10, 719, 932, 36, 159],
                                chair5: [739, 10, 709, 932, 36, 159],
                                chair4: [10, 952, 709, 932, 36, 159],
                                chair3: [729, 952, 709, 932, 36, 159]
                            }
                        }
                    },
                    elements: [{
                        class: "c",
                        type: "container",
                        children: [...Ye.elementsFromSprite("chair0", ["chair0", "chair1", "chair2"]), ...Ye.elementsFromSprite("chair1", ["chair3", "chair4", "chair5", "chair6"])]
                    }, ...Ye.elementsFromImages(["paw", null, [700, 0]])],
                    onLoadComplete() {
                        C.p8.set(".e.chair1, .e.chair2, .e.chair3, .e.chair4, .e.chair5, .e.chair6", {
                            visibility: "hidden"
                        })
                    },
                    onDiscreteProgress(e) {
                        const t = Math.floor(e / 100 * 7);
                        C.p8.timeline({
                            delay: .3
                        }).set(".e.chair0", {
                            visibility: 0 === t ? "visible" : "hidden"
                        }).set(".e.chair1", {
                            visibility: 1 === t ? "visible" : "hidden"
                        }).set(".e.chair2", {
                            visibility: 2 === t ? "visible" : "hidden"
                        }).set(".e.chair3", {
                            visibility: 3 === t ? "visible" : "hidden"
                        }).set(".e.chair4", {
                            visibility: 4 === t ? "visible" : "hidden"
                        }).set(".e.chair5", {
                            visibility: 5 === t ? "visible" : "hidden"
                        }).set(".e.chair6", {
                            visibility: t >= 6 ? "visible" : "hidden"
                        }).to(".e.c", {
                            scale: .95,
                            duration: .15
                        }).to(".e.c", {
                            scale: 1,
                            duration: .15
                        }), C.p8.timeline().to(".e.paw", {
                            y: -250,
                            scale: 1.3,
                            duration: .15
                        }).to(".e.paw", {
                            y: -500,
                            scale: 1,
                            duration: .15
                        }).to(".e.paw", {
                            y: 0,
                            duration: .15
                        })
                    }
                }),
                QB = He.extend({
                    imageManifest: {
                        claws: Promise.resolve().then(s.t.bind(s, 97187, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "claws",
                            images: {
                                claw0: [10, 1648, 129, 177, 476, 305],
                                claw1: [10, 1447, 111, 191, 373, 448],
                                claw2: [131, 1447, 111, 168, 480, 589],
                                paw: [10, 10, 504, 1427, 373, 248]
                            }
                        }
                    },
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["claw0", "claw1", "claw2", "paw"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.c", {
                            scale: 1.2
                        })
                    },
                    initializeTimeline() {
                        const e = this.model.get("durationInMs"),
                            t = C.p8.timeline({
                                ease: "none",
                                repeat: e / 1e3
                            }).to(".e.c", {
                                x: 5,
                                y: 5
                            }).to(".e.c", {
                                x: -5,
                                y: -5
                            }).to(".e.c", {
                                x: -5,
                                y: 5
                            }).to(".e.c", {
                                x: 5,
                                y: 5
                            }).to(".e.c", {
                                x: 5,
                                y: -5
                            }).to(".e.c", {
                                x: -5,
                                y: 5
                            }).to(".e.c", {
                                x: -5,
                                y: 5
                            }).to(".e.c", {
                                x: 5,
                                y: 5
                            }).to(".e.c", {
                                x: 5,
                                y: -5
                            }).to(".e.c", {
                                x: 5,
                                y: 5
                            }).to(".e.c", {
                                x: 5,
                                y: 5
                            });
                        t.name = "image", this.timeline.add(t)
                    },
                    onStartProgress() {
                        C.p8.to(".e.c", {
                            scale: 1,
                            duration: .25
                        }), C.p8.to(".e.claw0", {
                            x: -70,
                            y: -130,
                            duration: .25
                        }), C.p8.to(".e.claw1", {
                            x: -1,
                            y: -180,
                            duration: .25
                        }), C.p8.to(".e.claw2", {
                            x: 73,
                            y: -110,
                            duration: .25
                        })
                    },
                    onStopProgress() {
                        C.p8.to(".e.c", {
                            scale: 1.2,
                            duration: .25
                        }), C.p8.to(".e.claw0", {
                            x: 0,
                            y: 0,
                            duration: .25
                        }), C.p8.to(".e.claw1", {
                            x: 0,
                            y: 0,
                            duration: .25
                        }), C.p8.to(".e.claw2", {
                            x: 0,
                            y: 0,
                            duration: .25
                        })
                    }
                }),
                eY = He.extend({
                    stepDuration: .5,
                    imageManifest: {
                        nails: Promise.resolve().then(s.t.bind(s, 21523, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "nails",
                            images: {
                                scissors0: [866, 10, 216, 302, 349, 432],
                                scissors1: [866, 322, 216, 302, 349, 354],
                                nails0: [267, 1158, 60, 38, 431, 889],
                                paw0: [1092, 10, 208, 254, 412, 693],
                                nails1: [84, 1231, 83, 52, 423, 866],
                                paw1: [1092, 274, 208, 254, 412, 693],
                                nails2: [10, 1231, 64, 53, 552, 837],
                                paw2: [866, 898, 183, 254, 412, 693],
                                nails3: [1092, 538, 90, 79, 526, 811],
                                paw3: [10, 967, 183, 254, 412, 693],
                                nails4: [203, 1158, 54, 90, 576, 695],
                                paw4: [203, 967, 183, 181, 412, 693],
                                paw: [866, 634, 256, 254, 412, 693],
                                nails: [10, 10, 846, 947, 27, 3]
                            }
                        }
                    },
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["nails", "paw", "paw4", "nails4", "paw3", "nails3", "paw2", "nails2", "paw1", "nails1", "paw0", "nails0"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.paw4, .e.nails4", {
                            visibility: "hidden"
                        }), C.p8.set(".e.paw3, .e.nails3", {
                            visibility: "hidden"
                        }), C.p8.set(".e.paw2, .e.nails2", {
                            visibility: "hidden"
                        }), C.p8.set(".e.paw1, .e.nails1", {
                            visibility: "hidden"
                        }), C.p8.set(".e.paw0, .e.nails0", {
                            visibility: "hidden"
                        })
                    },
                    initializeTimeline() {
                        this.timeline.set(".e.paw", {
                            visibility: "hidden"
                        }, 0).set(".e.paw0", {
                            visibility: "visible"
                        }, 0).set(".e.nails0", {
                            visibility: "visible"
                        }, 0).to(".e.nails0", {
                            x: 50,
                            y: 300,
                            rotate: 200
                        }, 0).set(".e.paw0", {
                            visibility: "hidden"
                        }, 1).set(".e.paw1", {
                            visibility: "visible"
                        }, 1).set(".e.nails1", {
                            visibility: "visible"
                        }, 1).to(".e.nails1", {
                            x: -100,
                            y: 400,
                            rotate: -200
                        }, 1).set(".e.paw1", {
                            visibility: "hidden"
                        }, 2).set(".e.paw2", {
                            visibility: "visible"
                        }, 2).set(".e.nails2", {
                            visibility: "visible"
                        }, 2).to(".e.nails2", {
                            x: -100,
                            y: -300,
                            rotate: 200
                        }, 2).set(".e.paw2", {
                            visibility: "hidden"
                        }, 3).set(".e.paw3", {
                            visibility: "visible"
                        }, 3).set(".e.nails3", {
                            visibility: "visible"
                        }, 3).to(".e.nails3", {
                            x: 50,
                            y: 400,
                            rotate: 200
                        }, 3).set(".e.paw3", {
                            visibility: "hidden"
                        }, 4).set(".e.paw4", {
                            visibility: "visible"
                        }, 4).set(".e.nails4", {
                            visibility: "visible"
                        }, 4).to(".e.nails4", {
                            x: -200,
                            y: 300,
                            rotate: -200
                        }, 4)
                    },
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.c", {
                            scale: .95,
                            duration: .1
                        }).to(".e.c", {
                            scale: 1,
                            duration: .1
                        })
                    }
                }),
                tY = He.extend({
                    imageManifest: {
                        door: Promise.resolve().then(s.t.bind(s, 34390, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "door",
                            images: {
                                door2: [10, 10, 891, 843, 94, 47],
                                door1: [911, 10, 891, 843, 94, 47],
                                door0: [10, 863, 891, 843, 94, 47],
                                door: [911, 863, 891, 843, 94, 47]
                            }
                        }
                    },
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["door", "door0", "door1", "door2"])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.door0", {
                            visibility: "hidden"
                        }), C.p8.set(".e.door1", {
                            visibility: "hidden"
                        }), C.p8.set(".e.door2", {
                            visibility: "hidden"
                        })
                    },
                    onDiscreteProgress(e) {
                        C.p8.timeline().to(".e.c", {
                            scale: .95,
                            duration: .15
                        }).to(".e.c", {
                            scale: 1,
                            duration: .15
                        });
                        let t = 0;
                        e > 0 && e < 28 ? t = 1 : e > 33 && e < 66 ? t = 2 : e > 72 && (t = 3), C.p8.set(".e.door0", {
                            visibility: 1 === t ? "visible" : "hidden"
                        }), C.p8.set(".e.door1", {
                            visibility: 2 === t ? "visible" : "hidden"
                        }), C.p8.set(".e.door2", {
                            visibility: 3 === t ? "visible" : "hidden"
                        }), C.p8.set(".e.door", {
                            visibility: 0 === t ? "visible" : "hidden"
                        })
                    }
                }),
                sY = He.extend({
                    stepDuration: .45,
                    imageManifest: {
                        paw: Promise.resolve().then(s.t.bind(s, 41705, 17)),
                        bugs: Promise.resolve().then(s.t.bind(s, 29942, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "bugs",
                            images: {
                                bug3: [402, 10, 458, 257, 377, 275],
                                bug2: [10, 325, 484, 194, 429, 262],
                                bug1: [504, 277, 316, 290, 361, 346],
                                bug0: [10, 10, 382, 305, 353, 313]
                            }
                        }
                    },
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["bug0", "bug1", "bug2", "bug3"])
                    }, ...Ye.elementsFromImages(["paw", null, [700, 0]])],
                    onLoadComplete() {
                        C.p8.set(".e.bug1, .e.bug2, .e.bug3", {
                            visibility: "hidden"
                        })
                    },
                    onDiscreteProgress() {
                        const e = (0, i.random)(0, 3),
                            t = Math.random() < .5 ? 1 : -1;
                        C.p8.timeline().to(".e.paw", {
                            y: -250,
                            scale: 1.3,
                            duration: .15
                        }, 0).to(".e.c", {
                            scale: .8,
                            duration: .1
                        }, .15).set(".e.bug0", {
                            scaleX: t,
                            visibility: 0 === e ? "visible" : "hidden"
                        }, .2).set(".e.bug1", {
                            scaleX: t,
                            visibility: 1 === e ? "visible" : "hidden"
                        }, .2).set(".e.bug2", {
                            scaleX: t,
                            visibility: 2 === e ? "visible" : "hidden"
                        }, .2).set(".e.bug3", {
                            scaleX: t,
                            visibility: 3 === e ? "visible" : "hidden"
                        }, .2).to(".e.c", {
                            scale: 1,
                            duration: .15,
                            ease: "back.in(2)"
                        }, .25).to(".e.paw", {
                            y: -500,
                            scale: 1,
                            duration: .15
                        }, .15).to(".e.paw", {
                            y: 0,
                            duration: .15
                        }, .3)
                    }
                }),
                iY = He.extend({
                    imageManifest: {
                        treat: Promise.resolve().then(s.t.bind(s, 11300, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "treat",
                            images: {
                                treat: [664, 10, 320, 666, 167, 340],
                                heart: [10, 1312, 183, 184, 140, 402],
                                cat: [10, 661, 619, 641, 359, 189],
                                happy: [639, 686, 616, 641, 359, 192],
                                nom: [10, 10, 644, 641, 359, 178]
                            }
                        }
                    }
                }),
                oY = iY.extend({
                    stepDuration: .25,
                    elements: Ye.elementsFromSprite("sprite", ["happy", "treat"]),
                    onLoadComplete() {
                        C.p8.set(".e.treat", {
                            y: 100,
                            rotate: 90
                        }), C.p8.set(".e.happy", {
                            y: 20,
                            scale: .9,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.happy", {
                            y: 0,
                            scale: 1,
                            opacity: 1
                        }, 0).to(".e.treat", {
                            y: -350,
                            rotate: 0,
                            scale: .4
                        }, 0)
                    }
                }),
                nY = iY.extend({
                    stepDuration: .4,
                    elements: Ye.elementsFromSprite("sprite", ["happy", "nom", "treat"]),
                    onLoadComplete() {
                        C.p8.set(".e.treat", {
                            y: -350,
                            scale: .4
                        }), C.p8.set(".e.nom", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.treat", {
                            y: 160,
                            scale: .25,
                            rotate: 140
                        }).set(".e.treat", {
                            hidden: !0
                        }).fillTime(.1)
                    },
                    onDiscreteProgress() {
                        Ye.squashTransition("happy", "nom", .4)
                    }
                }),
                aY = iY.extend({
                    elements: Ye.elementsFromSprite("sprite", ["nom", ["heart", "heart0", [180, 302]],
                        ["heart", "heart2", [180, 502]],
                        ["heart", "heart1", [180, 402]]
                    ]),
                    onLoadComplete() {
                        C.p8.set(".e.heart0", {
                            opacity: 0,
                            rotate: -20
                        }), C.p8.set(".e.heart1", {
                            opacity: 0
                        }), C.p8.set(".e.heart2", {
                            opacity: 0,
                            rotate: 20
                        }), C.p8.timeline({
                            repeat: -1,
                            repeatDelay: .4
                        }).set(".e.heart0", {
                            opacity: 0
                        }, 0).to(".e.heart0", {
                            opacity: 1,
                            duration: .2
                        }, 0).to(".e.heart0", {
                            opacity: 0,
                            duration: .2
                        }, .2).to(".e.heart0", {
                            x: -50,
                            y: -100,
                            duration: .4
                        }, 0), C.p8.timeline({
                            repeat: -1,
                            repeatDelay: .4,
                            delay: .2
                        }).set(".e.heart1", {
                            opacity: 0
                        }, 0).to(".e.heart1", {
                            opacity: 1,
                            duration: .2
                        }, 0).to(".e.heart1", {
                            opacity: 0,
                            duration: .2
                        }, .2).to(".e.heart1", {
                            y: -120,
                            duration: .4
                        }, 0), C.p8.timeline({
                            repeat: -1,
                            repeatDelay: .4,
                            delay: .4
                        }).set(".e.heart2", {
                            opacity: 0
                        }, 0).to(".e.heart2", {
                            opacity: 1,
                            duration: .2
                        }, 0).to(".e.heart2", {
                            opacity: 0,
                            duration: .2
                        }, .2).to(".e.heart2", {
                            x: 50,
                            y: -100,
                            duration: .4
                        }, 0)
                    },
                    onStartProgress() {
                        Ye.startHoldShake("nom")
                    },
                    onStopProgress() {
                        Ye.stopHoldShake("nom")
                    }
                }),
                rY = He.extend({
                    imageManifest: {
                        paw: Promise.resolve().then(s.t.bind(s, 41705, 17)),
                        litter: Promise.resolve().then(s.t.bind(s, 79791, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "litter",
                            images: {
                                dust2: [270, 496, 240, 228, 158, 50],
                                dust1: [10, 496, 250, 178, 54, 290],
                                dust0: [10, 684, 240, 228, 143, 568],
                                dustL: [487, 734, 190, 142, 790, 35],
                                dustR: [260, 734, 217, 168, 777, 755],
                                broom: [758, 10, 238, 948, 26, 381],
                                box: [10, 10, 738, 476, 148, 80]
                            }
                        }
                    }
                }),
                lY = rY.extend({
                    elements: [...Ye.elementsFromSprite("sprite", ["box", "dust0", "dust1", "dust2"]), ...Ye.elementsFromImages(["paw", null, [700, 0]])],
                    onLoadComplete() {
                        C.p8.set(".e.dust0", {
                            opacity: 0
                        }), C.p8.set(".e.dust1", {
                            opacity: 0
                        }), C.p8.set(".e.dust2", {
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        const e = ".e.dust" + this.model.get("tapsLeft") % 3;
                        C.p8.timeline({
                            delay: .3,
                            ease: "power2.out"
                        }).set(e, {
                            y: 0,
                            opacity: 1
                        }).to(e, {
                            y: -50,
                            opacity: 0,
                            duration: 1
                        }), C.p8.timeline().to(".e.paw", {
                            y: -250,
                            scale: 1.3,
                            duration: .15
                        }).to(".e.paw", {
                            y: -500,
                            scale: 1,
                            duration: .15
                        }).to(".e.paw", {
                            y: 0,
                            duration: .15
                        })
                    }
                }),
                dY = rY.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["box", "broom", "dustL", "dustR"]),
                    onLoadComplete() {
                        C.p8.set(".e.dustL", {
                            x: 100,
                            opacity: 0
                        }), C.p8.set(".e.dustR", {
                            x: -100,
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline({
                            repeat: 2
                        }).to(".e.broom", {
                            rotate: 20,
                            duration: .5
                        }, 0).to(".e.broom", {
                            rotate: 0,
                            duration: .5
                        }, .5).set(".e.dustL", {
                            x: 100,
                            opacity: 0
                        }).to(".e.dustL", {
                            x: 50,
                            opacity: 1,
                            duration: .5,
                            ease: "none"
                        }, 0).to(".e.dustL", {
                            x: 0,
                            opacity: 0,
                            duration: .5,
                            ease: "none"
                        }, .5).to(".e.broom", {
                            rotate: -20,
                            duration: .5
                        }, 1).to(".e.broom", {
                            rotate: 0,
                            duration: .5
                        }, 1.5).set(".e.dustR", {
                            x: -100,
                            opacity: 0
                        }, 1).to(".e.dustR", {
                            x: -50,
                            opacity: 1,
                            duration: .5,
                            ease: "none"
                        }, 1).to(".e.dustR", {
                            x: 0,
                            opacity: 0,
                            duration: .5,
                            ease: "none"
                        }, 1.5);
                        this.timeline.add(e)
                    }
                }),
                pY = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 92386, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                cat: [810, 10, 840, 630, 85, 50],
                                laptop: [10, 10, 790, 628, 186, 105]
                            }
                        }
                    },
                    elements: [{
                        type: "container",
                        class: "c",
                        children: Ye.elementsFromSprite("sprite", ["laptop", "cat"])
                    }]
                }),
                cY = pY.extend({
                    initializeTimeline() {
                        const e = this.model.get("durationInMs"),
                            t = C.p8.timeline({
                                ease: "none",
                                repeat: e / 4e3
                            }).to(".e.cat", {
                                scaleY: 1.03,
                                transformOrigin: "bottom"
                            }).to(".e.cat", {
                                scaleY: 1,
                                transformOrigin: "bottom"
                            });
                        t.name = "cat", this.timeline.add(t)
                    },
                    onStartProgress() {
                        C.p8.to(".e.c", {
                            scale: .95,
                            duration: .25
                        })
                    },
                    onStopProgress() {
                        C.p8.to(".e.c", {
                            scale: 1,
                            duration: .25
                        })
                    }
                }),
                mY = pY.extend({
                    initializeTimeline() {
                        const e = this.model.get("durationInMs"),
                            t = C.p8.timeline({
                                ease: "none",
                                repeat: e / 4e3
                            }).to(".e.cat", {
                                scaleY: 1.03,
                                transformOrigin: "bottom"
                            }).to(".e.cat", {
                                scaleY: 1,
                                transformOrigin: "bottom"
                            });
                        t.name = "cat", this.timeline.add(t)
                    },
                    onStartProgress() {
                        C.p8.to(".e.c", {
                            scale: .95,
                            duration: .25
                        })
                    },
                    onStopProgress() {
                        C.p8.to(".e.c", {
                            scale: 1,
                            duration: .25
                        })
                    }
                }),
                hY = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 66083, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                attack: [962, 643, 940, 687, 313, 0],
                                hand: [1666, 10, 186, 623, 377, 407],
                                eyes: [714, 10, 942, 522, 259, 29],
                                roll: [10, 542, 942, 522, 259, 29],
                                sitting: [10, 10, 694, 512, 214, 153]
                            }
                        }
                    }
                }),
                uY = hY.extend({
                    elements: [{
                        class: "c",
                        type: "container",
                        children: Ye.elementsFromSprite("sprite", ["sitting", "eyes", "roll"])
                    }],
                    onLoadComplete() {
                        C.p8.to(".e.c", {
                            scale: 1.1
                        }), C.p8.to(".e.eyes", {
                            hidden: !0
                        }), C.p8.to(".e.roll", {
                            hidden: !0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.fillTime(1).call((() => Ye.squashTransition("sitting", "roll", .3))).fillTime(1).call((() => Ye.squashTransition("roll", "eyes", .3))).fillTime(1)
                    },
                    onStartProgress() {
                        C.p8.to(".e.c", {
                            scale: 1,
                            duration: .25
                        })
                    },
                    onStopProgress() {
                        C.p8.to(".e.c", {
                            scale: 1.1,
                            duration: .25
                        })
                    }
                }),
                gY = hY.extend({
                    elements: Ye.elementsFromSprite("sprite", ["eyes", "hand"]),
                    onLoadComplete() {
                        C.p8.set(".e.hand", {
                            y: 300
                        })
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.hand", {
                                y: 0
                            }).to(".e.hand", {
                                y: 100
                            }).to(".e.hand", {
                                y: 0
                            }).to(".e.hand", {
                                y: 100
                            }).to(".e.hand", {
                                y: 0
                            }).to(".e.hand", {
                                y: 100
                            }).to(".e.hand", {
                                y: 0
                            }),
                            t = C.p8.timeline().fillTime(.5).to(".e.eyes", {
                                x: (0, i.random)(-30, 30),
                                y: (0, i.random)(-10, 10),
                                rotation: (0, i.random)(-15, 15),
                                ease: "power2.inOut"
                            }).to(".e.eyes", {
                                x: (0, i.random)(-30, 30),
                                y: (0, i.random)(-10, 10),
                                rotation: (0, i.random)(-15, 15),
                                ease: "power2.inOut"
                            }).to(".e.eyes", {
                                x: (0, i.random)(-30, 30),
                                y: (0, i.random)(-10, 10),
                                rotation: (0, i.random)(-15, 15),
                                ease: "power2.inOut"
                            }).to(".e.eyes", {
                                x: (0, i.random)(-30, 30),
                                y: (0, i.random)(-10, 10),
                                rotation: (0, i.random)(-15, 15),
                                ease: "power2.inOut"
                            }).to(".e.eyes", {
                                x: (0, i.random)(-30, 30),
                                y: (0, i.random)(-10, 10),
                                rotation: (0, i.random)(-15, 15),
                                ease: "power2.inOut"
                            }).to(".e.eyes", {
                                x: 0,
                                y: 0,
                                rotation: 0
                            });
                        this.timeline.add(e), this.timeline.add(t, 0)
                    }
                }),
                yY = hY.extend({
                    stepDuration: .35,
                    elements: Ye.elementsFromSprite("sprite", ["attack", "eyes", "hand"]),
                    onLoadComplete() {
                        C.p8.set(".e.attack", {
                            hidden: !0
                        }), C.p8.to(".e.hand", {
                            opacity: 0,
                            duration: .1,
                            delay: .15
                        }), Ye.squashTransition("eyes", "attack", .3)
                    },
                    onDiscreteProgress() {
                        Ye.squashOnce("attack", .2)
                    }
                }),
                bY = He.extend({
                    imageManifest: {
                        items: Promise.resolve().then(s.t.bind(s, 28199, 17)),
                        paw: Promise.resolve().then(s.t.bind(s, 41705, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "items",
                            images: {
                                item0: [220, 647, 188, 174, 413, 406],
                                item1: [10, 501, 200, 162, 422, 400],
                                item2: [430, 637, 178, 181, 400, 411],
                                item3: [220, 501, 200, 136, 464, 400],
                                item4: [430, 501, 194, 126, 437, 403],
                                item5: [182, 831, 173, 152, 428, 414],
                                item6: [618, 701, 192, 158, 421, 404],
                                item7: [778, 501, 186, 95, 452, 407],
                                item8: [10, 673, 162, 162, 419, 419],
                                item9: [418, 828, 176, 160, 420, 412],
                                item10: [634, 501, 134, 190, 405, 433],
                                desk: [10, 10, 942, 481, 183, 30]
                            }
                        }
                    }
                }),
                xY = bY.extend({
                    stepDuration: .25,
                    items: [0, 1, 2],
                    counter: 2,
                    elements: [...Ye.elementsFromSprite("sprite", ["desk"]), {
                        type: "container",
                        class: "items-container",
                        children: Ye.elementsFromSprite("sprite", ["item0", "item1", "item2", "item3", "item4", "item5", "item6", "item7", "item8", "item9", "item10"])
                    }, ...Ye.elementsFromImages(["paw", null, [700, 0]])],
                    onLoadComplete() {
                        C.p8.set(".e.item0", {
                            x: -250
                        }), C.p8.set(".e.item2", {
                            x: 250
                        }), C.p8.set(".e.item3", {
                            opacity: 0
                        }), C.p8.set(".e.item4", {
                            opacity: 0
                        }), C.p8.set(".e.item5", {
                            opacity: 0
                        }), C.p8.set(".e.item6", {
                            opacity: 0
                        }), C.p8.set(".e.item7", {
                            opacity: 0
                        }), C.p8.set(".e.item8", {
                            opacity: 0
                        }), C.p8.set(".e.item9", {
                            opacity: 0
                        }), C.p8.set(".e.item10", {
                            opacity: 0
                        }), C.p8.set(".e.desk", {
                            zIndex: -2
                        })
                    },
                    onDiscreteProgress() {
                        const e = (this.model.get("tapsLeft") - 1) % 3;
                        let t = 0,
                            s = 0;
                        0 === e && (t = -150), 2 === e && (t = 150), 0 === e && (s = -250), 1 === e && (s = 0), 2 === e && (s = 250), 10 === this.counter ? this.counter = 0 : this.counter += 1, C.p8.timeline().to(".e.paw", {
                            x: t,
                            y: -350,
                            scale: 1.2,
                            duration: .15
                        }).to(".e.paw", {
                            x: 2 * t,
                            y: -500,
                            scale: .8,
                            duration: .15
                        }).to(".e.paw", {
                            x: 0,
                            y: 0,
                            scale: 1,
                            duration: .15
                        }), C.p8.timeline().set(`.e.item${this.counter}`, {
                            x: s,
                            y: 0,
                            rotation: 0,
                            opacity: 1,
                            scale: .5,
                            zIndex: -1
                        }, .3).to(`.e.item${this.counter}`, {
                            scale: 1,
                            duration: .1
                        }, .3).to(`.e.item${this.items[e]}`, {
                            y: 800,
                            rotation: (0, i.random)(-360, 360),
                            zIndex: 0,
                            duration: .5,
                            ease: "power2.in"
                        }, .3).set(`.e.item${this.items[e]}`, {
                            opacity: 0
                        }, .8), this.items[e] = this.counter
                    }
                }),
                fY = bY.extend({
                    stepDuration: .5,
                    imageManifest: {
                        items: Promise.resolve().then(s.t.bind(s, 28199, 17))
                    },
                    elements: [...Ye.elementsFromSprite("sprite", ["desk"]), {
                        type: "container",
                        class: "items-container",
                        children: Ye.elementsFromSprite("sprite", [
                            [`item${(0,i.random)(0,10)}`, "item0"],
                            [`item${(0,i.random)(0,10)}`, "item1"],
                            [`item${(0,i.random)(0,10)}`, "item2"],
                            [`item${(0,i.random)(0,10)}`, "item3"],
                            [`item${(0,i.random)(0,10)}`, "item4"]
                        ])
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.item0", {
                            x: -300,
                            y: 400,
                            rotate: 90
                        }), C.p8.set(".e.item1", {
                            x: -150,
                            y: 450,
                            rotate: 0
                        }), C.p8.set(".e.item2", {
                            x: 0,
                            y: 500,
                            rotate: -90
                        }), C.p8.set(".e.item3", {
                            x: 150,
                            y: 400,
                            rotate: 90
                        }), C.p8.set(".e.item4", {
                            x: 300,
                            y: 450,
                            rotate: -90
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.item2", {
                            y: 0,
                            rotate: 0,
                            ease: "back.out(2)"
                        }).to(".e.item4", {
                            y: 0,
                            rotate: 0,
                            ease: "back.out(2)"
                        }).to(".e.item0", {
                            y: 0,
                            rotate: 0,
                            ease: "back.out(2)"
                        }).to(".e.item3", {
                            y: 0,
                            rotate: 0,
                            ease: "back.out(2)"
                        }).to(".e.item1", {
                            y: 0,
                            rotate: 0,
                            ease: "back.out(2)"
                        })
                    }
                }),
                vY = He.extend({
                    className: "pose",
                    imageManifest: {
                        pose: Promise.resolve().then(s.t.bind(s, 52117, 17)),
                        posts: Promise.resolve().then(s.t.bind(s, 21506, 17))
                    },
                    sprites: {
                        pose: {
                            key: "pose",
                            images: {
                                phone: [1463, 10, 541, 948, 0, 0],
                                cat: [952, 10, 501, 903, 0, 0],
                                costume: [10, 10, 932, 835, 83, 34]
                            }
                        },
                        posts: {
                            key: "posts",
                            images: {
                                tt: [10, 10, 689, 930, 34, 156],
                                ig: [709, 10, 689, 930, 34, 156],
                                tw: [10, 950, 799, 950, 29, 101]
                            }
                        }
                    }
                }),
                kY = vY.extend({
                    elements: [...Ye.elementsFromSprite("pose", [
                        ["cat", "cat cat-real"]
                    ]), {
                        type: "container",
                        class: "phone-container",
                        pos: [50, 400],
                        children: [{
                            type: "div",
                            pos: [26, 26],
                            class: "phone-bg",
                            html: ""
                        }, ...Ye.elementsFromSprite("pose", [
                            ["cat", "cat cat-phone"], "phone"
                        ])]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.cat-phone", {
                            scale: .7
                        })
                    },
                    initializeTimeline() {
                        const e = this.model.get("durationInMs"),
                            t = C.p8.timeline({
                                repeat: e / 2e4
                            }).to(".e.cat", {
                                x: (0, i.random)(-120, 120),
                                y: (0, i.random)(-20, 20),
                                rotation: (0, i.random)(-100, 100),
                                ease: "power2.inOut"
                            }).to(".e.cat", {
                                x: (0, i.random)(-120, 120),
                                y: (0, i.random)(-20, 20),
                                rotation: (0, i.random)(-100, 100),
                                ease: "power2.inOut"
                            }).to(".e.cat", {
                                x: (0, i.random)(-120, 120),
                                y: (0, i.random)(-20, 20),
                                rotation: (0, i.random)(-100, 100),
                                ease: "power2.inOut"
                            }).to(".e.cat", {
                                x: (0, i.random)(-120, 120),
                                y: (0, i.random)(-20, 20),
                                rotation: (0, i.random)(-100, 100),
                                ease: "power2.inOut"
                            }).to(".e.cat", {
                                x: (0, i.random)(-120, 120),
                                y: (0, i.random)(-20, 20),
                                rotation: (0, i.random)(-100, 100),
                                ease: "power2.inOut"
                            }).to(".e.cat", {
                                x: (0, i.random)(-120, 120),
                                y: (0, i.random)(-20, 20),
                                rotation: (0, i.random)(-100, 100),
                                ease: "power2.inOut"
                            }).to(".e.cat", {
                                x: (0, i.random)(-120, 120),
                                y: (0, i.random)(-20, 20),
                                rotation: (0, i.random)(-100, 100),
                                ease: "power2.inOut"
                            }).to(".e.cat", {
                                x: (0, i.random)(-120, 120),
                                y: (0, i.random)(-20, 20),
                                rotation: (0, i.random)(-100, 100),
                                ease: "power2.inOut"
                            }).to(".e.cat", {
                                x: (0, i.random)(-120, 120),
                                y: (0, i.random)(-20, 20),
                                rotation: (0, i.random)(-100, 100),
                                ease: "power2.inOut"
                            }).to(".e.cat", {
                                x: (0, i.random)(-120, 120),
                                y: (0, i.random)(-20, 20),
                                rotation: (0, i.random)(-100, 100),
                                ease: "power2.inOut"
                            }).to(".e.cat", {
                                x: 0,
                                y: 0,
                                rotation: 0
                            });
                        t.name = "image", this.timeline.add(t)
                    },
                    onStartProgress() {
                        C.p8.to(".e.cat-real", {
                            scale: .97,
                            duration: .35
                        })
                    },
                    onStopProgress() {
                        C.p8.to(".e.cat-real", {
                            scale: 1,
                            duration: .35
                        })
                    }
                }),
                PY = vY.extend({
                    stepDuration: .35,
                    elements: [...Ye.elementsFromSprite("pose", [
                        ["costume", "costume cat-real"]
                    ]), {
                        type: "container",
                        class: "phone-container",
                        pos: [50, 400],
                        children: [{
                            type: "div",
                            pos: [26, 26],
                            class: "phone-bg",
                            html: ""
                        }, ...Ye.elementsFromSprite("pose", [
                            ["costume", "costume cat-phone"], "phone"
                        ])]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.cat-phone", {
                            y: -500,
                            scale: .7
                        }), C.p8.set(".e.phone-container", {
                            x: -200,
                            y: 500,
                            scale: .5,
                            rotate: -30
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.cat-phone", {
                            y: 0
                        }, 0).to(".e.phone-container", {
                            x: 0,
                            y: 0,
                            scale: 1,
                            rotate: -3
                        }, 0)
                    }
                }),
                wY = vY.extend({
                    elements: [...Ye.elementsFromSprite("pose", [
                        ["costume", "costume cat-real"]
                    ]), {
                        type: "container",
                        class: "phone-container",
                        pos: [50, 400],
                        children: [{
                            type: "div",
                            pos: [26, 26],
                            class: "phone-bg",
                            html: ""
                        }, ...Ye.elementsFromSprite("pose", [
                            ["costume", "costume cat-phone"], "phone"
                        ])]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.cat-phone", {
                            scale: .7
                        }), C.p8.set(".e.phone-container", {
                            rotate: -3
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.phone-container", {
                            x: -5,
                            rotate: -3,
                            scaleX: .98,
                            ease: "power1.inOut"
                        }, 0).to(".e.cat-phone", {
                            x: -300,
                            ease: "power1.inOut"
                        }, 0).to(".e.phone-container", {
                            x: 2,
                            rotate: 5,
                            scaleX: 1,
                            ease: "power1.inOut"
                        }, 1).to(".e.cat-phone", {
                            y: -50,
                            x: -275,
                            ease: "power1.inOut"
                        }, 1).to(".e.phone-container", {
                            x: -3,
                            rotate: 1,
                            scaleX: .98,
                            ease: "power1.inOut"
                        }, 2).to(".e.cat-phone", {
                            y: -70,
                            x: -100,
                            ease: "power1.inOut"
                        }, 2).to(".e.phone-container", {
                            x: 0,
                            rotate: 0,
                            scaleX: 1,
                            ease: "power1.inOut"
                        }, 3).to(".e.cat-phone", {
                            x: -300,
                            ease: "power1.inOut"
                        }, 3)
                    }
                }),
                TY = vY.extend({
                    stepDuration: .25,
                    elements: [...Ye.elementsFromSprite("pose", [
                        ["costume", "costume cat-real"]
                    ]), {
                        type: "container",
                        class: "phone-container",
                        pos: [50, 400],
                        children: [{
                            type: "div",
                            pos: [26, 26],
                            class: "phone-bg"
                        }, ...Ye.elementsFromSprite("pose", [
                            ["costume", "costume cat-phone"]
                        ]), {
                            type: "div",
                            pos: [26, 26],
                            class: "flash"
                        }, ...Ye.elementsFromSprite("pose", ["phone"])]
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.cat-phone", {
                            x: -300,
                            y: -50,
                            scale: .7
                        }), C.p8.set(".e.flash", {
                            opacity: 0
                        })
                    },
                    initializeTimeline() {
                        this.timeline.to(".e.flash", {
                            opacity: 1,
                            duration: .05,
                            ease: "none"
                        }).to(".e.flash", {
                            opacity: 0,
                            duration: .15
                        }, .15)
                    }
                }),
                SY = vY.extend({
                    stepDuration: .4,
                    elements: [...Ye.elementsFromSprite("pose", [
                        ["costume", "costume cat-real"]
                    ]), {
                        type: "container",
                        class: "phone-container",
                        pos: [50, 400],
                        children: [{
                            type: "div",
                            pos: [26, 26],
                            class: "phone-bg"
                        }, ...Ye.elementsFromSprite("pose", [
                            ["costume", "costume cat-phone"], "phone"
                        ])]
                    }, ...Ye.elementsFromSprite("posts", ["ig", "tt", "tw"])],
                    onLoadComplete() {
                        C.p8.set(".e.cat-phone", {
                            x: -300,
                            y: -50,
                            scale: .7
                        }), C.p8.to(".e.phone-container", {
                            x: -160,
                            rotate: -3,
                            duration: .3
                        }), C.p8.to(".e.cat-real", {
                            scale: .7,
                            opacity: 0,
                            duration: .3
                        }), C.p8.set(".e.ig", {
                            hidden: !0,
                            rotate: -3
                        }), C.p8.set(".e.tt", {
                            hidden: !0,
                            rotate: 3
                        }), C.p8.set(".e.tw", {
                            hidden: !0,
                            rotate: -1
                        })
                    },
                    initializeTimeline() {
                        this.timeline.add(Ye.squashTransition("phone-container", "tw")).add(Ye.squashTransition("tw", "ig")).add(Ye.squashTransition("ig", "tt"))
                    }
                }),
                MY = He.extend({
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 92721, 17)),
                        paw: Promise.resolve().then(s.t.bind(s, 41705, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                dust3: [1224, 10, 682, 444, 278, 159],
                                dust2: [628, 10, 586, 428, 286, 207],
                                dust1: [10, 378, 588, 490, 255, 206],
                                dust0: [608, 464, 766, 541, 229, 117],
                                robot: [10, 10, 608, 358, 321, 196]
                            }
                        }
                    },
                    elements: [...Ye.elementsFromSprite("sprite", ["robot", "dust0", "dust1", "dust2", "dust3"]), ...Ye.elementsFromImages(["paw", null, [700, 0]])],
                    onLoadComplete() {
                        C.p8.set(".e.dust0", {
                            opacity: 0
                        }), C.p8.set(".e.dust1", {
                            opacity: 0
                        }), C.p8.set(".e.dust2", {
                            opacity: 0
                        }), C.p8.set(".e.dust3", {
                            opacity: 0
                        })
                    },
                    onDiscreteProgress() {
                        const e = `.e.dust${(0,i.random)(0,3)}`;
                        C.p8.timeline().to(".e.paw", {
                            y: -250,
                            scale: 1.3,
                            duration: .15
                        }).to(".e.paw", {
                            y: -500,
                            scale: 1,
                            duration: .15
                        }).to(".e.paw", {
                            y: 0,
                            duration: .15
                        }).to(".e.robot", {
                            x: (0, i.random)(-75, 75),
                            y: (0, i.random)(-75, 75),
                            rotation: (0, i.random)(-30, 30),
                            duration: .2,
                            scale: .9,
                            ease: "back.out(2)"
                        }, .3).to(".e.robot", {
                            scale: 1,
                            duration: .1
                        }), C.p8.timeline({
                            delay: .3,
                            ease: "power2.out"
                        }).set(e, {
                            x: 0,
                            y: 0,
                            opacity: 1,
                            rotation: (0, i.random)(0, 359)
                        }).to(e, {
                            x: (0, i.random)(-100, 100),
                            y: -150,
                            opacity: 0,
                            duration: 1
                        })
                    }
                }),
                CY = He.extend({
                    imageManifest: {
                        cat: Promise.resolve().then(s.t.bind(s, 8752, 17)),
                        vomit: Promise.resolve().then(s.t.bind(s, 1941, 17))
                    },
                    elements: [{
                        type: "container",
                        class: "c",
                        children: Ye.elementsFromImages("cat", "vomit")
                    }],
                    onLoadComplete() {
                        C.p8.set(".e.vomit", {
                            visibility: "hidden"
                        })
                    },
                    onDiscreteProgress(e) {
                        const t = e > 66 || e > 33 && Math.random() > .5;
                        C.p8.timeline().to(".e.c", {
                            scale: .95,
                            duration: .15
                        }).to(".e.c", {
                            scale: 1,
                            duration: .15
                        }), C.p8.set(".e.cat", {
                            visibility: t ? "hidden" : "visible"
                        }), C.p8.set(".e.vomit", {
                            visibility: t ? "visible" : "hidden"
                        })
                    }
                }),
                DY = He.extend({
                    className: "search-scene",
                    progressCounter: 0,
                    cloudCounter: 0,
                    mistakeText: ["IT'S NOT<br/>HERE", "NO LUCK", "DIDN'T<br/>FIND IT", "NOPE"],
                    imageManifest: {
                        sprite: Promise.resolve().then(s.t.bind(s, 89799, 17))
                    },
                    sprites: {
                        sprite: {
                            key: "sprite",
                            images: {
                                cloud0: [0, 0, 786, 563],
                                cloud1: [786, 0, 786, 563],
                                cloud2: [0, 562, 786, 563],
                                cloud3: [786, 562, 786, 563],
                                item0: [1572, 0, 225, 225],
                                item1: [1797, 0, 225, 225],
                                item2: [2022, 0, 225, 225],
                                item3: [1572, 225, 225, 225],
                                item4: [1797, 225, 225, 225],
                                item5: [2022, 225, 225, 225],
                                item6: [1572, 450, 225, 225],
                                item7: [1797, 450, 225, 225],
                                item8: [2022, 450, 225, 225],
                                item9: [1572, 675, 225, 225],
                                item10: [1797, 675, 225, 225],
                                item11: [2022, 675, 225, 225],
                                item12: [1572, 900, 225, 225],
                                item13: [2022, 900, 225, 225]
                            }
                        }
                    },
                    bindings: {
                        ".text span": {
                            observe: ["location", "isMistake"],
                            updateMethod: "html",
                            onGet(e) {
                                let [t, s] = e;
                                return s ? (0, i.sample)(this.mistakeText) : `SEARCH ${t}`
                            },
                            classes: {
                                mistake: "isMistake"
                            }
                        }
                    },
                    elements: [{
                        class: "search-container",
                        type: "container",
                        children: [{
                            class: "text",
                            type: "div",
                            pos: [100, 100],
                            html: "<span></span>"
                        }, ...Ye.elementsFromSprite("sprite", [
                            ["cloud0", "dust0", [218, 107]],
                            ["cloud1", "dust1", [218, 107]],
                            ["cloud2", "dust2", [218, 107]],
                            ["cloud3", "dust3", [218, 107]],
                            ["cloud0", "dust4", [218, 107]],
                            ["cloud1", "dust5", [218, 107]],
                            ["cloud2", "dust6", [218, 107]],
                            ["cloud3", "dust7", [218, 107]],
                            ["item0", null, [387, 387]],
                            ["item1", null, [387, 387]],
                            ["item2", null, [387, 387]],
                            ["item3", null, [387, 387]],
                            ["item4", null, [387, 387]],
                            ["item5", null, [387, 387]],
                            ["item6", null, [387, 387]],
                            ["item7", null, [387, 387]],
                            ["item8", null, [387, 387]],
                            ["item9", null, [387, 387]],
                            ["item10", null, [387, 387]],
                            ["item11", null, [387, 387]],
                            ["item12", null, [387, 387]],
                            ["item13", null, [387, 387]]
                        ])]
                    }],
                    onLoadComplete() {
                        C.ZP.set(".e.dust0, .e.dust1, .e.dust2, .e.dust3, .e.dust4, .e.dust5, .e.dust6, .e.dust7", {
                            opacity: 0
                        }), C.ZP.set(".e.item0, .e.item1, .e.item2, .e.item3, .e.item4, .e.item5, .e.item6", {
                            opacity: 0
                        }), C.ZP.set(".e.item7, .e.item8, .e.item9, .e.item10, .e.item11, .e.item12, .e.item13", {
                            opacity: 0
                        })
                    },
                    onProgress(e) {
                        if (e > this.progressCounter) {
                            const e = (0, i.random)(50, 75) / 100,
                                t = 6 * Math.random(),
                                s = (0, i.random)(0, 360);
                            if (C.ZP.set(`.e.dust${this.cloudCounter}`, {
                                    x: 0,
                                    y: 0,
                                    scale: e,
                                    rotation: s,
                                    opacity: 1
                                }), C.ZP.to(`.e.dust${this.cloudCounter}`, {
                                    opacity: 0,
                                    delay: .5,
                                    duration: .5
                                }), C.ZP.to(`.e.dust${this.cloudCounter}`, {
                                    x: 250 * Math.cos(t),
                                    y: 250 * Math.sin(t),
                                    scale: 1.1 * e,
                                    duration: 1
                                }), this.progressCounter += 5, 7 === this.cloudCounter ? this.cloudCounter = 0 : this.cloudCounter += 1, Math.random() < .2) {
                                const e = (0, i.random)(60, 85) / 100,
                                    t = 6 * Math.random(),
                                    s = (0, i.random)(0, 360),
                                    o = (0, i.random)(0, 13);
                                C.ZP.set(`.e.item${o}`, {
                                    x: 0,
                                    y: 0,
                                    scale: e,
                                    rotation: s,
                                    opacity: 1
                                }), C.ZP.to(`.e.item${o}`, {
                                    opacity: 0,
                                    delay: .5,
                                    duration: .5
                                }), C.ZP.to(`.e.item${o}`, {
                                    x: 250 * Math.cos(t),
                                    y: 250 * Math.sin(t),
                                    scale: 1.4 * e,
                                    duration: 1
                                })
                            }
                        }
                    }
                }),
                FY = He.extend({
                    imageManifest: {
                        hand: Promise.resolve().then(s.t.bind(s, 61590, 17)),
                        Adult0: Promise.resolve().then(s.t.bind(s, 42059, 17)),
                        Adult0v2: Promise.resolve().then(s.t.bind(s, 24677, 17)),
                        Adult1: Promise.resolve().then(s.t.bind(s, 7979, 17)),
                        Adult1v2: Promise.resolve().then(s.t.bind(s, 12156, 17)),
                        Child0: Promise.resolve().then(s.t.bind(s, 96297, 17)),
                        Child0v2: Promise.resolve().then(s.t.bind(s, 42521, 17)),
                        Child0v3: Promise.resolve().then(s.t.bind(s, 34979, 17)),
                        Child1: Promise.resolve().then(s.t.bind(s, 77344, 17)),
                        Child1v2: Promise.resolve().then(s.t.bind(s, 54477, 17)),
                        Child1v3: Promise.resolve().then(s.t.bind(s, 51756, 17)),
                        Child2: Promise.resolve().then(s.t.bind(s, 61357, 17)),
                        Child2v2: Promise.resolve().then(s.t.bind(s, 54598, 17)),
                        Child2v3: Promise.resolve().then(s.t.bind(s, 81267, 17)),
                        Teen0: Promise.resolve().then(s.t.bind(s, 87039, 17)),
                        Teen0v2: Promise.resolve().then(s.t.bind(s, 70590, 17)),
                        Teen0v3: Promise.resolve().then(s.t.bind(s, 75638, 17)),
                        Teen1: Promise.resolve().then(s.t.bind(s, 42330, 17)),
                        Teen1v2: Promise.resolve().then(s.t.bind(s, 56148, 17)),
                        Teen1v3: Promise.resolve().then(s.t.bind(s, 66034, 17)),
                        Teen2: Promise.resolve().then(s.t.bind(s, 45152, 17)),
                        Teen2v2: Promise.resolve().then(s.t.bind(s, 30345, 17)),
                        Teen2v3: Promise.resolve().then(s.t.bind(s, 59213, 17))
                    },
                    elements() {
                        return [{
                            class: "player-container",
                            type: "container",
                            children: [{
                                class: "player",
                                type: "img",
                                pos: [100, 250],
                                key: this.model.get("playerInfo").avatar
                            }, {
                                class: "hand",
                                type: "img",
                                pos: [100, 250],
                                key: "hand"
                            }]
                        }]
                    }
                }),
                zY = FY.extend({
                    initializeTimeline() {
                        const e = this.model.get("durationInMs"),
                            t = C.p8.timeline({
                                repeat: e / 2e4
                            }).to(".e.hand", {
                                scale: 1.05
                            }).to(".e.hand", {
                                scale: 1
                            }).to(".e.hand", {
                                scale: 1.05
                            }).to(".e.hand", {
                                scale: 1
                            }).to(".e.hand", {
                                scale: 1.05
                            }).to(".e.hand", {
                                scale: 1
                            }).to(".e.hand", {
                                scale: 1.05
                            }).to(".e.hand", {
                                scale: 1
                            }).to(".e.hand", {
                                scale: 1.05
                            }).to(".e.hand", {
                                scale: 1
                            }).to(".e.hand", {
                                scale: 1.05
                            }).to(".e.hand", {
                                scale: 1
                            });
                        t.name = "image", this.timeline.add(t)
                    }
                }),
                LY = FY.extend({
                    onDiscreteProgress() {
                        C.p8.timeline().to(".e.hand", {
                            scale: 1.05,
                            duration: .15
                        }).to(".e.hand", {
                            scale: 1,
                            duration: .15
                        })
                    }
                }),
                RY = FY.extend({
                    initializeTimeline() {
                        const e = this.model.get("durationInMs"),
                            t = C.p8.timeline({
                                repeat: e / 2e4
                            }).to(".e.hand", {
                                scale: 1.05
                            }).to(".e.hand", {
                                scale: 1
                            }).to(".e.hand", {
                                scale: 1.05
                            }).to(".e.hand", {
                                scale: 1
                            }).to(".e.hand", {
                                scale: 1.05
                            }).to(".e.hand", {
                                scale: 1
                            }).to(".e.hand", {
                                scale: 1.05
                            }).to(".e.hand", {
                                scale: 1
                            }).to(".e.hand", {
                                scale: 1.05
                            }).to(".e.hand", {
                                scale: 1
                            }).to(".e.hand", {
                                scale: 1.05
                            }).to(".e.hand", {
                                scale: 1
                            });
                        t.name = "image", this.timeline.add(t)
                    }
                }),
                IY = He.extend({
                    elements() {
                        return [{
                            class: "image",
                            type: "img",
                            pos: [0, 0],
                            key: Object.keys(this.imageManifest)[0]
                        }]
                    },
                    initializeTimeline() {
                        const e = C.p8.timeline().to(".e.image", {
                            opacity: 0,
                            ease: pt.bJ.easeNone
                        });
                        e.name = "image", this.timeline.add(e)
                    }
                }),
                OY = {
                    Stir: Ve,
                    EatBreakfast: Ee,
                    EatLunch: qe,
                    EatDinner: Ne,
                    FrostCake1: We,
                    FrostCake2: Ue,
                    FrostCake3: $e,
                    Flip1: Ke,
                    Flip2: Ke,
                    Watch: Ze,
                    UnscrewSD: _e,
                    StealBatteries: Qe,
                    InsertBatteries: et,
                    TurnOnTV: tt,
                    ScoopFish: it,
                    CarryFish: ot,
                    TossFish: nt,
                    Prayer: at,
                    FinalFlush: rt,
                    PickUpClothes: mt,
                    Clutter: ht,
                    Vacuum: ut,
                    WindCord: gt,
                    GutterStep1: bt,
                    GutterStep2: ft,
                    GutterStep3: xt,
                    GutterStep4: ft,
                    Dish1Step1: Tt,
                    Dish1Step2: kt,
                    Dish1Step3: Pt,
                    Dish2Step1: St,
                    Dish2Step2: Mt,
                    Dish2Step3: kt,
                    Dish2Step4: Pt,
                    Dish3Step1: Ct,
                    Dish3Step2: Dt,
                    Dish3Step3: Ft,
                    Dish3Step4: kt,
                    Dish3Step5: Pt,
                    Thermo1: Lt,
                    Thermo2: Rt,
                    Thermo3: It,
                    Thermo4: Ot,
                    UnclogStep1: Yt,
                    UnclogStep2: At,
                    UnclogStep3: Ht,
                    FindBoard: Vt,
                    GrabBoard: Et,
                    PlayCheckers: Nt,
                    FlipBoard: Xt,
                    TuckLeft: Ut,
                    TuckRight: $t,
                    TuckLeftAgain: jt,
                    ThrowBlanket: Kt,
                    DrawerLookLeft: Jt,
                    DrawerLookRight: _t,
                    UntangleWires: Qt,
                    PlugOutlet: es,
                    PickWeeds1: ss,
                    AvoidFlowers1: is,
                    PickWeeds2: os,
                    AvoidFlowers2: ns,
                    YankRoots: as,
                    PlantWater: rs,
                    PlantDead: ls,
                    PlantTear: ds,
                    CutParsley: ps,
                    CutCilantro: cs,
                    CilantroParsley: ms,
                    CutBagel: hs,
                    ToastBagel: gs,
                    ToasterTune: ys,
                    CreamCheese: bs,
                    RecycleBottles: fs,
                    RecycleCans: vs,
                    RecycleLandfill: ks,
                    RecycleReward: Ps,
                    SpiderWait: Ts,
                    SpiderTrap: Ss,
                    SpiderOutside: Ms,
                    SpiderFreedom: Cs,
                    DragOutPool: Fs,
                    PoolWater: ba,
                    FillKiddiePool: zs,
                    PoolDistraction: Ls,
                    ForgetPool: Rs,
                    BirdhouseStep1: Os,
                    BirdhouseStep2: Bs,
                    BirdhouseStep3: Ys,
                    BirdhouseStep4: As,
                    TupperwareStep1: Hs,
                    TupperwareStep2: Gs,
                    TupperwareStep3: Vs,
                    TupperwareStep4: Es,
                    TupperwareStep5: qs,
                    TupperwareStep6: Ns,
                    VacuumAnts: Ws,
                    SquishEscape: Us,
                    GatherCarnage: $s,
                    TossAnts: js,
                    RotateTV: Ks,
                    RotateTV2: Zs,
                    RotateTVBack: Js,
                    SmackTV: _s,
                    MicroStart: ei,
                    MicroCook: ti,
                    MicroStir: si,
                    MicroStartAgain: ii,
                    MicroWait: oi,
                    MicroCool: ni,
                    UnfurlCloth: ri,
                    FlattenCloth: li,
                    FlattenMore: di,
                    Candelabra: pi,
                    Chimney1Step1: mi,
                    Chimney1Step2: hi,
                    Chimney1Step3: ui,
                    Chimney1Step4: gi,
                    Chimney1Step5: yi,
                    Chimney2Step1: xi,
                    Chimney2Step2: fi,
                    Chimney2Step3: vi,
                    Chimney2Step4: ki,
                    Chimney2Step5: Pi,
                    GreetNeighborStep1: Ti,
                    GreetNeighborStep2: Si,
                    GreetNeighborStep3: Mi,
                    SetTable1: Di,
                    SetTable2: Fi,
                    SetTable3: zi,
                    SetTable4: Li,
                    ExpiredFood1: Ii,
                    ExpiredFood2: Oi,
                    ExpiredFood3: Bi,
                    ExpiredFood4: Yi,
                    MopFloor1: Hi,
                    MopFloor2: Gi,
                    MopFloor3: Vi,
                    MopFloor4: Ei,
                    LeftoversFridge1: Ni,
                    LeftoversFridge2: Xi,
                    LeftoversFridge3: Wi,
                    LeftoversFridge4: Ui,
                    LeftoversFridge5: $i,
                    LeftoversFridge6: ji,
                    LeftoversFridge7: Ki,
                    PlasticSouvenirCups1: Ji,
                    PlasticSouvenirCups2: _i,
                    PlasticSouvenirCups3: Qi,
                    PlasticSouvenirCups4: eo,
                    PlasticSouvenirCups5: to,
                    BirdWatch1: io,
                    BirdWatch2: oo,
                    BirdWatch3: no,
                    BirdWatch4: ao,
                    BirdWatch5: ro,
                    BirdWatch6: lo,
                    MakeIceCubes1: mo,
                    MakeIceCubes2: ho,
                    MakeIceCubes3: uo,
                    HosePatioFurniture1: yo,
                    HosePatioFurniture2: bo,
                    HosePatioFurniture3: xo,
                    HosePatioFurniture4: fo,
                    HosePatioFurniture5: vo,
                    CleanShowerCurtain1: Po,
                    CleanShowerCurtain2: wo,
                    CleanShowerCurtain3: To,
                    CleanShowerCurtain4: So,
                    CleanShowerCurtain5: Mo,
                    CleanShowerCurtain6: Co,
                    CleanShowerCurtain7: Do,
                    PutAwayLaundry1: zo,
                    PutAwayLaundry2: Lo,
                    PutAwayLaundry3: Ro,
                    PutAwayLaundry4: Io,
                    CleanFancyDishes1: Bo,
                    CleanFancyDishes2: Yo,
                    CleanFancyDishes3: Ao,
                    CleanFancyDishes4: Ho,
                    HangFrame1: Vo,
                    HangFrame2: Eo,
                    HangFrame3: qo,
                    HangFrame4: No,
                    PutBooksAway1: Wo,
                    PutBooksAway2: Uo,
                    PutBooksAway3: $o,
                    PutBooksAway4: jo,
                    PutBooksAway5: Ko,
                    PaintSpill1: Qo,
                    PaintSpill2: en,
                    PaintSpill3: tn,
                    PaintSpill4: sn,
                    PaintSpill5: on,
                    PaintSpill6: nn,
                    FoldLaundry1: rn,
                    FoldLaundry2: ln,
                    FoldLaundry3: dn,
                    FoldLaundry4: pn,
                    FoldLaundry5: cn,
                    HavePicnic1: hn,
                    HavePicnic2: un,
                    HavePicnic3: gn,
                    HavePicnic4: yn,
                    Mahjong1Step1: xn,
                    Mahjong1Step2: fn,
                    Mahjong1Step3: vn,
                    Mahjong2Step1: kn,
                    Mahjong2Step2: Pn,
                    Mahjong2Step3: wn,
                    Mahjong2Step4: Tn,
                    Mahjong2Step5: Sn,
                    PlayShogi1: Cn,
                    PlayShogi2: Dn,
                    PlayShogi3: Fn,
                    PlayShogi4: zn,
                    CheckMilkA1: Yn,
                    CheckMilkA2: An,
                    CheckMilkA3: Hn,
                    CheckMilkA4: Gn,
                    CheckMilkB1: Vn,
                    CheckMilkB2: En,
                    CheckMilkB3: qn,
                    CheckMilkB4: Nn,
                    BugsStep1: Wn,
                    BugsStep2: Un,
                    BugsStep3: $n,
                    BugsStep4: jn,
                    BugsStep5: Kn,
                    PickUpStupidToy: Zn,
                    TossBear: Jn,
                    TossMarbles: _n,
                    PickUpMarbles: Qn,
                    HelpOldLady: ta,
                    PickUpLitter: sa,
                    WearBadge: oa,
                    TieKnots: ia,
                    SquishAntsSlow: na,
                    SquishAntsFast: aa,
                    SlimeSupplies: la,
                    SlimeMix: da,
                    SlimePlay: pa,
                    SlimeSupplies2: ma,
                    SlimeMix2: ha,
                    SlimeFall: ua,
                    SlimeHide: ga,
                    HoseOn: ba,
                    RunThroughSprinkler: xa,
                    SprinklerRunMore: fa,
                    PickToy1: ka,
                    PickToy2: Pa,
                    ReturnToyBox: wa,
                    BathStep1: Sa,
                    BathStep2: Ma,
                    BathStep3: Ca,
                    PickupMarble: Fa,
                    PullSling: za,
                    LetGo: La,
                    VaseRun: Ra,
                    VasePieces: Oa,
                    GlueVase: Ba,
                    HoldVase: Ya,
                    JumpRopeStep1: Ha,
                    JumpRopeStep2: Ga,
                    JumpRopeStep3: Va,
                    JumpRopeStep4: Ea,
                    ToyCereal1Step1: Wa,
                    ToyCereal1Step2: Ua,
                    ToyCereal1Step3: $a,
                    ToyCereal1Step4: ja,
                    ToyCereal2Step1: Ka,
                    ToyCereal2Step2: Za,
                    ToyCereal2Step3: Ja,
                    ToyCereal2Step4: _a,
                    MakePBJ1: er,
                    MakePBJ2: tr,
                    MakePBJ3: sr,
                    MakePBJ4: ir,
                    ColoringBook1: nr,
                    ColoringBook2: ar,
                    ColoringBook3: rr,
                    PackBackpack1: dr,
                    PackBackpack2: pr,
                    PackBackpack3: cr,
                    PackBackpack4: mr,
                    PackBackpack5: hr,
                    CapeRun1: gr,
                    CapeRun2: yr,
                    CapeRun3: br,
                    CapeRun4: xr,
                    CapeRun5: fr,
                    MacaroniArt1: kr,
                    MacaroniArt2: Pr,
                    MacaroniArt3: wr,
                    PutOnShoes1: Sr,
                    PutOnShoes2: Mr,
                    PutOnShoes3: Cr,
                    SwingSet1: Fr,
                    SwingSet2: zr,
                    SwingSet3: Lr,
                    SwingSet4: Rr,
                    Cartwheel1: Or,
                    Cartwheel2: Br,
                    Cartwheel3: Yr,
                    Cartwheel4: Ar,
                    Cartwheel5: Hr,
                    PaperLantern1Step1: Vr,
                    PaperLantern1Step2: Er,
                    PaperLantern1Step3: qr,
                    PaperLantern1Step4: Nr,
                    PaperLantern2Step1: Wr,
                    PaperLantern2Step2: Ur,
                    PaperLantern2Step3: $r,
                    PaperLantern2Step4: jr,
                    JuiceBox1: Zr,
                    JuiceBox2: Jr,
                    JuiceBox3: _r,
                    JuiceBox4: Qr,
                    JuiceBox5: el,
                    LittleWagon1: sl,
                    LittleWagon2: il,
                    LittleWagon3: ol,
                    LittleWagon4: nl,
                    LittleWagon5: al,
                    GrownupClothes1: ll,
                    GrownupClothes2: dl,
                    GrownupClothes3: pl,
                    GrownupClothes4: cl,
                    GrownupClothes5: ml,
                    FeedFish1Step1: ul,
                    FeedFish1Step2: gl,
                    FeedFish1Step3: yl,
                    FeedFish2Step1: bl,
                    FeedFish2Step2: xl,
                    FeedFish2Step3: fl,
                    FingerPainting1: kl,
                    FingerPainting2: Pl,
                    FingerPainting3: wl,
                    FingerPainting4: Tl,
                    PuppetShow1: Ml,
                    PuppetShow2: Cl,
                    PuppetShow3: Dl,
                    PuppetShow4: Fl,
                    PuppetShow5: zl,
                    RefuseNap1: Pv,
                    RefuseNap2: wv,
                    RefuseNap3: Tv,
                    HalloweenCandy1: Mv,
                    HalloweenCandy2: Cv,
                    HalloweenCandy3: Dv,
                    ClothesHamper1: Rl,
                    ClothesHamper2: Il,
                    MakeCollage1: Bl,
                    MakeCollage2: Yl,
                    MakeCollage3: Al,
                    MakeCollage4: Hl,
                    IcePick: Vl,
                    IceMelt: El,
                    SprayCleaner: Wl,
                    ScrubMirror: Nl,
                    WipeClean: Xl,
                    CoffeeOpen: $l,
                    CoffeeScoop: jl,
                    CoffeeBrew: Kl,
                    CoffeeBurning: Zl,
                    LightCandles: Jl,
                    LookForSmell: _l,
                    SmellOpenWindow: Ql,
                    MashAvocado: ed,
                    SpreadAvocado: td,
                    OpenAC: sd,
                    HoldAC: id,
                    ShoveAC: od,
                    CloseAC: nd,
                    RepressEmotions: ad,
                    GluePaper: ld,
                    PastePaper: dd,
                    PaperBubbles: pd,
                    HoldPaper: cd,
                    ShowerStep1: md,
                    ShowerStep2: hd,
                    ShowerStep3: ud,
                    TieStep1: yd,
                    TieStep2: bd,
                    TieStep3: xd,
                    GarageButton: vd,
                    GarageGunk: kd,
                    GarageOpen: Pd,
                    GarageClose: wd,
                    ClimbLadder: Sd,
                    OldBulb: Md,
                    NewBulb: Cd,
                    ClimbLadderDirty: Fd,
                    DirtyBulb: zd,
                    CleanBulb: Ld,
                    ReturnBulb: Rd,
                    CrustSide1: Od,
                    CrustSide2: Bd,
                    CrustSide3: Yd,
                    CrustSide4: Ad,
                    EatCrusts: Hd,
                    LiquidSoap1Step1: Vd,
                    LiquidSoap1Step2: Ed,
                    LiquidSoap1Step3: qd,
                    LiquidSoap1Step4: Nd,
                    LiquidSoap1Step5: Xd,
                    LiquidSoap2Step1: Ud,
                    LiquidSoap2Step2: $d,
                    LiquidSoap2Step3: jd,
                    Smoothie1Step1: Zd,
                    Smoothie1Step2: Jd,
                    Smoothie1Step3: _d,
                    Smoothie2Step1: ep,
                    Smoothie2Step2: tp,
                    Smoothie2Step3: sp,
                    Smoothie2Step4: ip,
                    FridgeLeaking1: np,
                    FridgeLeaking2: ap,
                    FridgeLeaking3: rp,
                    FridgeLeaking4: lp,
                    BakeCake1: pp,
                    BakeCake2: cp,
                    BakeCake3: mp,
                    BakeCake4: hp,
                    BakeCake5: up,
                    ChangeCarOil1: yp,
                    ChangeCarOil2: bp,
                    ChangeCarOil3: xp,
                    ChangeCarOil4: fp,
                    ChangeCarOil5: vp,
                    RollToothpaste1: Pp,
                    RollToothpaste2: wp,
                    RollToothpaste3: Tp,
                    RollToothpaste4: Sp,
                    ShopVac1: Cp,
                    ShopVac2: Dp,
                    ShopVac3: Fp,
                    ShopVac4: zp,
                    ShopVac5: Lp,
                    FilterStep1: Ip,
                    FilterStep2: Op,
                    FilterStep3: Bp,
                    FilterStep4: Yp,
                    FilterStep5: Ap,
                    LotionStep1: Gp,
                    LotionStep2: Vp,
                    LotionStep3: Ep,
                    AlbumStep1: Np,
                    AlbumStep2: Xp,
                    AlbumStep3: Wp,
                    AlbumStep4: Up,
                    AlbumStep5: $p,
                    AlbumStep6: jp,
                    RemoveTire: Zp,
                    MoveTire: Jp,
                    ReplaceTire: _p,
                    OpenEnvelopes: ec,
                    TossCatalogs: tc,
                    ReunionReflect: sc,
                    GatherForms: oc,
                    ClaimDependents: nc,
                    HideIncome: ac,
                    SignTaxes: rc,
                    BirdNests: dc,
                    BirdMama: pc,
                    BirdCoward: cc,
                    BirdLease: mc,
                    WipeCounter: uc,
                    SprayCounter: gc,
                    ScrubCounter: yc,
                    HardScrubCounter: bc,
                    ScrubJelly1: fc,
                    ScrubJelly2: vc,
                    ScrubJelly3: kc,
                    LivingRoomStep1: Pc,
                    LivingRoomStep2: wc,
                    LivingRoomStep3: Tc,
                    LivingRoomStep4: Sc,
                    LivingRoomStep5: Mc,
                    LivingRoomStep6: Cc,
                    Grilling1Step1: zc,
                    Grilling1Step2: Lc,
                    Grilling1Step3: Dc,
                    Grilling1Step4: Fc,
                    Grilling2Step1: zc,
                    Grilling2Step2: Lc,
                    Grilling2Step3: Rc,
                    Grilling2Step4: Ic,
                    Grilling2Step5: Oc,
                    FamPhotoStep1: Yc,
                    FamPhotoStep2: Ac,
                    FamPhotoStep3: Hc,
                    FamPhotoStep4: Gc,
                    AlcoholBottles: Ec,
                    HideBottles: qc,
                    CeramicFigurines1: Xc,
                    CeramicFigurines2: Wc,
                    CeramicFigurines3: Uc,
                    CeramicFigurines4: $c,
                    PayBills1: Kc,
                    PayBills2: Zc,
                    PayBills3: Jc,
                    PayBills4: _c,
                    PayBills5: Qc,
                    ScreamingKids1: tm,
                    ScreamingKids2: sm,
                    ScreamingKids3: im,
                    ScreamingKids4: om,
                    ScreamingKids5: nm,
                    AtticInsulation1: rm,
                    AtticInsulation2: lm,
                    AtticInsulation3: dm,
                    AtticInsulation4: pm,
                    LeakySink1: hm,
                    LeakySink2: um,
                    LeakySink3: gm,
                    LeakySink4: ym,
                    ZitStep1: xm,
                    ZitStep2: fm,
                    ZitStep3: vm,
                    FindMelon: Pm,
                    HoldMelon: wm,
                    KissMelon: Tm,
                    FrenchKissMelon: Sm,
                    Bobby: Mm,
                    LiftIron1: Dm,
                    LiftIron2: Fm,
                    LiftIron3: zm,
                    CatchBreath: Lm,
                    StandAround: Im,
                    StandAround2: Om,
                    DeodorantStep1: Ym,
                    DeodorantStep2: Am,
                    DeodorantStep3: Hm,
                    RewireSpeakers1: Vm,
                    RewireSpeakers2: Em,
                    RewireSpeakers3: qm,
                    RewireSpeakers4: Nm,
                    RewireSpeakers5: Xm,
                    PartyThrowUp1: Um,
                    PartyThrowUp2: $m,
                    PartyThrowUp3: jm,
                    PartyThrowUp4: Km,
                    FixVCR1: Jm,
                    FixVCR2: _m,
                    FixVCR3: Qm,
                    FixVCR4: eh,
                    CrushBags: sh,
                    Squash: ih,
                    Hose: nh,
                    Scrub: ah,
                    Dry: rh,
                    FlipPage1: dh,
                    FlipPage2: ph,
                    FlipPageBack: ch,
                    HomeworkFlipTable: mh,
                    Rake1Step1: uh,
                    Rake1Step2: gh,
                    Rake1Step3: yh,
                    Rake2Step1: xh,
                    Rake2Step2: fh,
                    Rake2Step3: vh,
                    Rake2Step4: kh,
                    Circles: Ph,
                    BackForth: wh,
                    MowStart: Sh,
                    MowSpot: Mh,
                    MowTurnAround: Ch,
                    MowMiss: Dh,
                    MowDone: Fh,
                    OrigamiCrane1: zh,
                    OrigamiCrane2: Lh,
                    OrigamiCrane3: Rh,
                    OrigamiCrane4: Ih,
                    OrigamiCrane5: Oh,
                    NewPants1: Yh,
                    NewPants2: Ah,
                    NewPants3: Hh,
                    NewPants4: Gh,
                    NewPants5: Vh,
                    NewPants6: Eh,
                    CoolFridgeStep1: Rn,
                    CoolFridgeStep2: In,
                    CoolFridgeStep3: On,
                    CookieStep1: Nh,
                    CookieStep2: Xh,
                    CookieStep3: Wh,
                    DrawWallStep1: $h,
                    DrawWallStep2: jh,
                    DrawWallStep3: Kh,
                    DrawWallStep4: Zh,
                    CreekStep1: _h,
                    CreekStep2: Qh,
                    CreekStep3: eu,
                    CreekStep4: tu,
                    WatchScaryMovie1: iu,
                    WatchScaryMovie2: ou,
                    WatchScaryMovie3: nu,
                    UnnecessaryQuestion1: ru,
                    UnnecessaryQuestion2: lu,
                    UnnecessaryQuestion3: du,
                    YankCatsTail1: cu,
                    YankCatsTail2: mu,
                    YankCatsTail3: hu,
                    YankCatsTail4: uu,
                    YankCatsTail5: gu,
                    PoopPants1: yu,
                    WhereBabiesComeFrom1: xu,
                    WhereBabiesComeFrom2: fu,
                    WhereBabiesComeFrom3: vu,
                    WhereBabiesComeFrom4: ku,
                    ClimbDangerousTree1: wu,
                    ClimbDangerousTree2: Tu,
                    ClimbDangerousTree3: Su,
                    ClimbDangerousTree4: Mu,
                    FloorIsLava1: Du,
                    FloorIsLava2: Fu,
                    FloorIsLava3: zu,
                    FloorIsLava4: Lu,
                    FloorIsLava5: Ru,
                    ReadDiary1: Ou,
                    ReadDiary2: Bu,
                    ReadDiary3: Yu,
                    ReadDiary4: Au,
                    PillowFort1: Gu,
                    PillowFort2: Vu,
                    PillowFort3: Eu,
                    ThrowTantrum1: Nu,
                    ThrowTantrum2: Xu,
                    ThrowTantrum3: Wu,
                    StairToys1: ju,
                    StairToys2: Ku,
                    StairToys3: Zu,
                    StairToys4: Ju,
                    TossFootball1: Qu,
                    TossFootball2: eg,
                    TossFootball3: tg,
                    LearnCurse1: ig,
                    LearnCurse2: og,
                    LearnCurse3: ng,
                    StealCandy1: rg,
                    StealCandy2: lg,
                    StealCandy3: dg,
                    StealCandy4: pg,
                    PlayWithMatches1: mg,
                    PlayWithMatches2: hg,
                    PlayWithMatches3: ug,
                    PlayWithMatches4: gg,
                    BreakNewToy1: yg,
                    BreakNewToy2: bg,
                    BreakNewToy3: xg,
                    BreakNewToy4: fg,
                    BreakNewToy5: vg,
                    SpinAround1: Pg,
                    SpinAround2: wg,
                    SpinAround3: Tg,
                    SpinAround4: Sg,
                    SwallowInedibleObjects1: Cg,
                    SwallowInedibleObjects2: Dg,
                    SwallowInedibleObjects3: Fg,
                    SwallowInedibleObjects4: zg,
                    AdoptPet1: Rg,
                    AdoptPet2: Ig,
                    AdoptPet3: Og,
                    AdoptPet4: Bg,
                    AdoptPet5: Yg,
                    BuryMagnets1: Hg,
                    BuryMagnets2: Gg,
                    BuryMagnets3: Vg,
                    SocialMediaFight1: qg,
                    SocialMediaFight2: Ng,
                    SocialMediaFight3: Xg,
                    SocialMediaFight4: Wg,
                    TakeNap1: $g,
                    TakeNap2: jg,
                    TakeNap3: Kg,
                    TakeNap4: Zg,
                    TakeNap5: Jg,
                    TakeNap6: _g,
                    TakeNap7: Qg,
                    ToiletPhone1: ty,
                    ToiletPhone2: sy,
                    ToiletPhone3: iy,
                    ToiletPhone4: oy,
                    ToiletPhone5: ny,
                    StareBlanklyOutWindow: ay,
                    RomanceTimeStep1: ly,
                    RomanceTimeStep2: dy,
                    RomanceTimeStep3: py,
                    RomanceTimeStep4: cy,
                    RomanceTimeStep5: my,
                    SwearWordStep1: uy,
                    SwearWordStep2: gy,
                    SwearWordStep3: yy,
                    SwearWordStep4: by,
                    PourWineStep1: fy,
                    PourWineStep2: vy,
                    PourWineStep3: ky,
                    AdultRadioStep1: wy,
                    AdultRadioStep2: Ty,
                    AdultRadioStep3: Sy,
                    AdultRadioStep4: My,
                    HideAndSeek1: Dy,
                    HideAndSeek2: Fy,
                    HideAndSeek3: zy,
                    IgnoreInLaws1: Ry,
                    IgnoreInLaws2: Iy,
                    IgnoreInLaws3: Oy,
                    IgnoreInLaws4: By,
                    CatchUpCall2: Ay,
                    CatchUpCall3: Hy,
                    CatchUpCall4: Gy,
                    BrewTea1: Ey,
                    BrewTea2: qy,
                    BrewTea3: Ny,
                    BrewTea4: Xy,
                    BoringBook1: Uy,
                    BoringBook2: $y,
                    BoringBook3: jy,
                    BoringBook4: Ky,
                    MidlifeCrisis1: Jy,
                    MidlifeCrisis2: _y,
                    MidlifeCrisis3: Qy,
                    MidlifeCrisis4: eb,
                    SteamyRomanceNovel1: sb,
                    SteamyRomanceNovel2: ib,
                    SteamyRomanceNovel3: ob,
                    SteamyRomanceNovel4: nb,
                    WatchTelenovela1: rb,
                    WatchTelenovela2: lb,
                    WatchTelenovela3: db,
                    WatchTelenovela4: pb,
                    StashCandy1: mb,
                    StashCandy2: hb,
                    StashCandy3: ub,
                    DonateToys1: yb,
                    DonateToys2: bb,
                    DonateToys3: xb,
                    DonateToys4: fb,
                    DonateToys5: vb,
                    TrashMail1: Pb,
                    TrashMail2: wb,
                    TrashMail3: Tb,
                    PostBabyPhotos1: Mb,
                    PostBabyPhotos2: Cb,
                    PostBabyPhotos3: Db,
                    PostBabyPhotos4: Fb,
                    PostBabyPhotos5: zb,
                    AloneInYard1: Rb,
                    AloneInYard2: Ib,
                    AloneInYard3: Ob,
                    AloneInYard4: Bb,
                    DisobeyDiet1: Ab,
                    DisobeyDiet2: Hb,
                    DisobeyDiet3: Gb,
                    DisobeyDiet4: Vb,
                    LongBath1: qb,
                    LongBath2: Nb,
                    LongBath3: Xb,
                    LongBath4: Wb,
                    FlipTableDeed: $b,
                    MagazineStep1: Kb,
                    MagazineStep2: Zb,
                    MagazineStep3: Jb,
                    SneakOutStep1: Qb,
                    SneakOutStep2: ex,
                    SneakOutStep3: tx,
                    SneakOutStep4: sx,
                    CoasterStep1: ox,
                    CoasterStep2: nx,
                    CoasterStep3: ax,
                    CoasterStep4: rx,
                    GrandpaPolitics1: dx,
                    GrandpaPolitics2: px,
                    GrandpaPolitics3: cx,
                    GraphicTV1: hx,
                    GraphicTV2: ux,
                    GraphicTV3: gx,
                    GraphicTV4: yx,
                    HogBathroom1: xx,
                    HogBathroom2: fx,
                    HogBathroom3: vx,
                    HogBathroom4: kx,
                    UseUpData1: wx,
                    UseUpData2: Tx,
                    UseUpData3: Sx,
                    UseUpData4: Mx,
                    UseUpData5: Cx,
                    TrentTalk2: Fx,
                    TrentTalk3: zx,
                    TrentTalk4: Lx,
                    TakeSelfie1: Ix,
                    TakeSelfie2: Ox,
                    TakeSelfie3: Bx,
                    BorrowCreditCard1: Ax,
                    BorrowCreditCard2: Hx,
                    BorrowCreditCard3: Gx,
                    BorrowCreditCard4: Vx,
                    BorrowCreditCard5: Ex,
                    IHateYou1: Nx,
                    IHateYou2: Xx,
                    IHateYou3: Wx,
                    Mope1: Ux,
                    Mope2: $x,
                    Mope3: jx,
                    Joyride1: Zx,
                    Joyride2: Jx,
                    Joyride3: _x,
                    Joyride4: Qx,
                    HideToys1: tf,
                    HideToys2: sf,
                    HideToys3: of ,
                    KpopShrine1: af,
                    KpopShrine2: rf,
                    KpopShrine3: lf,
                    KpopShrine4: df,
                    HideManga1: cf,
                    HideManga2: mf,
                    HideManga3: hf,
                    VideoGameStep1: gf,
                    VideoGameStep2: yf,
                    ShootSpitball1: xf,
                    ShootSpitball2: ff,
                    KickMeSign1: kf,
                    KickMeSign2: Pf,
                    KickMeSign3: wf,
                    KickMeSign4: Tf,
                    LeaveMilkOut1: Mf,
                    LeaveMilkOut2: Cf,
                    LeaveMilkOut3: Df,
                    AlterReportCard1: zf,
                    AlterReportCard2: Lf,
                    AlterReportCard3: Rf,
                    DisrespectElders1: Of,
                    DisrespectElders2: Bf,
                    DisrespectElders3: Yf,
                    Wait: Hf,
                    Unplug: Gf,
                    PlugIn: Vf,
                    Works: Ef,
                    OpenHood: Nf,
                    Look: Xf,
                    Hit: Wf,
                    Realize: Uf,
                    LookClose: jf,
                    Remember: Kf,
                    ThinkPrank1: Jf,
                    ThinkPrank2: _f,
                    OrderCake2: ev,
                    OrderCake3: tv,
                    OrderCake4: sv,
                    CableBundle2: ov,
                    CableBundle3: nv,
                    CableBundle4: av,
                    CableBundle5: rv,
                    CancelDinner1: dv,
                    CancelDinner2: pv,
                    AnimalControl1: mv,
                    AnimalControl2: hv,
                    AnimalControl3: uv,
                    CancelMagazine1: yv,
                    CancelMagazine2: bv,
                    RestaurantReservation1: fv,
                    RestaurantReservation3: vv,
                    LearnDrums1: zv,
                    LearnDrums2: Lv,
                    LearnDrums3: Rv,
                    LearnDrums4: Iv,
                    PlayBass1: Bv,
                    PlayBass2: Yv,
                    PlayBass3: Av,
                    PlayBass4: Hv,
                    JamOut: Vv,
                    AlbumCover1: qv,
                    AlbumCover2: Nv,
                    AlbumCover3: Xv,
                    AlbumCover4: Wv,
                    Autographs1: $v,
                    Autographs2: jv,
                    Autographs3: Kv,
                    Autographs4: Zv,
                    ReunionShow: _v,
                    SecretMarinade1: ek,
                    SecretMarinade2: tk,
                    SecretMarinade3: sk,
                    SecretMarinade4: ik,
                    SecretMarinade5: ok,
                    LightUpGrill1: ak,
                    LightUpGrill2: rk,
                    LightUpGrill3: lk,
                    LightUpGrill4: dk,
                    LightUpGrill5: pk,
                    BurnReportCard1: mk,
                    BurnReportCard2: hk,
                    BurnReportCard3: uk,
                    BurnReportCard4: gk,
                    WorkTheGrill1: bk,
                    WorkTheGrill2: xk,
                    WorkTheGrill3: fk,
                    WorkTheGrill4: vk,
                    WorkTheGrill5: kk,
                    BeachRadio1: wk,
                    BeachRadio2: Tk,
                    BeachRadio3: Sk,
                    BeachRadio4: Mk,
                    PourSand: Dk,
                    BeachBalls1: zk,
                    BeachBalls2: Lk,
                    BeachBalls3: Rk,
                    BeachBalls4: Ik,
                    BeachBalls5: Ok,
                    TropicalBeverage1: Yk,
                    TropicalBeverage2: Ak,
                    TropicalBeverage3: Hk,
                    BeachOcean1: Vk,
                    BeachOcean2: Ek,
                    BeachOcean3: qk,
                    BeachOcean4: Nk,
                    BeachFlirt1: Wk,
                    BeachFlirt2: Uk,
                    BeachFlirt3: $k,
                    BeachFlirt4: jk,
                    BeachLimbo1: Zk,
                    BeachLimbo2: Jk,
                    BeachLimbo3: _k,
                    BeachLimbo4: Qk,
                    BeachShells1: tP,
                    BeachShells2: sP,
                    BeachShells3: iP,
                    BeachShells4: oP,
                    FamilyTan: aP,
                    BeachACParty1: lP,
                    BeachACParty2: dP,
                    BeachACParty3: pP,
                    BeachACParty4: cP,
                    PickUpBalloons: hP,
                    BlowUp: uP,
                    ArrangeBalloons: gP,
                    AdmireArch: yP,
                    GoodTissues: xP,
                    GearUpChaperone: fP,
                    DabShaving: kP,
                    CarefulShave: PP,
                    BloodyShave: wP,
                    RinseOffShave: TP,
                    SwipeThroughDisguises: MP,
                    StackKids: CP,
                    KeepBalance: DP,
                    WalkAdult: FP,
                    ReadTut: LP,
                    InspectFlower: RP,
                    BabyBreath: IP,
                    Dashing: OP,
                    SayCheese: YP,
                    SillyOne: AP,
                    OneMore: HP,
                    OneMoreMore: GP,
                    TouchShoulders: EP,
                    MoreSpace: qP,
                    EvenMoreSpace: NP,
                    Sway: XP,
                    ShakeStink: UP,
                    PullPin: $P,
                    TossStink: jP,
                    CheeseIt: KP,
                    ThoughtfulDiscussion: JP,
                    ConsiderPoint: _P,
                    DefendPosition: QP,
                    LeavePeacefully: ew,
                    LipsReady: sw,
                    AimLips: iw,
                    LipsFire: ow,
                    BracesLocked: nw,
                    DigOutBook: rw,
                    BlowDustBook: lw,
                    FlipBirdBook: dw,
                    AbsorbBird: pw,
                    CloseBook: cw,
                    CramBossMeal: !1,
                    CheckTeeth: hw,
                    OpenDoorBoss: uw,
                    TapToes: yw,
                    SashayLeft: bw,
                    SashayRight: xw,
                    BigFinish: fw,
                    GreetCousin1: kw,
                    RompoPhoto: ww,
                    CousinGutters1: Sw,
                    CousinGutters2: Mw,
                    CousinGutters3: Cw,
                    CousinGutters4: Dw,
                    DishesCousin1: Bw,
                    DishesCousin2: Yw,
                    DishesCousin3: Aw,
                    DishesCousin4: Hw,
                    MakeSamosaCousin1: Vw,
                    MakeSamosaCousin2: Ew,
                    MakeSamosaCousin3: qw,
                    MakeSamosaCousin4: Nw,
                    PutOutFireCousin1: Ww,
                    PutOutFireCousin2: Uw,
                    PutOutFireCousin3: $w,
                    HideFromCousin1: Kw,
                    HideFromCousin2: Zw,
                    HideFromCousin3: Jw,
                    VacuumCousin1: Qw,
                    VacuumCousin2: eT,
                    VacuumCousin3: tT,
                    VacuumCousin4: sT,
                    LocalNews1: oT,
                    LocalNews2: nT,
                    LocalNews3: aT,
                    TryGronk1: lT,
                    TryGronk2: dT,
                    TryGronk3: pT,
                    TryGronk4: cT,
                    GronkPSA1: hT,
                    GronkPSA2: uT,
                    GronkPSA3: gT,
                    SpyTeenGronk1: bT,
                    SpyTeenGronk2: xT,
                    SpyTeenGronk3: fT,
                    SpyTeenGronk4: vT,
                    HideGronk1: PT,
                    HideGronk2: wT,
                    HideGronk3: TT,
                    SkipSchoolGronk1: MT,
                    SkipSchoolGronk2: CT,
                    SkipSchoolGronk3: DT,
                    GronkConversation: zT,
                    QuitGronk1: RT,
                    QuitGronk2: IT,
                    QuitGronk3: OT,
                    GronkPledge1: YT,
                    GronkPledge2: AT,
                    Telescope1: GT,
                    Telescope2: VT,
                    Telescope3: ET,
                    Telescope4: qT,
                    Telescope5: NT,
                    WarnFamily1: WT,
                    WarnFamily2: UT,
                    WarnFamily3: $T,
                    WarnFamily4: jT,
                    NoticeAsteroid1: ZT,
                    NoticeAsteroid2: JT,
                    NoticeAsteroid3: _T,
                    NoticeAsteroid4: QT,
                    AsteroidNews: tS,
                    AsteroidFIRE: iS,
                    WelcomeStudent1: nS,
                    WelcomeStudent2: aS,
                    WelcomeStudent3: rS,
                    IntellectualConvo1: dS,
                    IntellectualConvo2: pS,
                    IntellectualConvo3: cS,
                    IntellectualConvo4: mS,
                    RearrangeBookcase1: uS,
                    RearrangeBookcase2: gS,
                    RearrangeBookcase3: yS,
                    RearrangeBookcase4: bS,
                    CollegeApEx1: fS,
                    CollegeApEx2: vS,
                    CollegeApEx3: kS,
                    CollegeApEx4: PS,
                    Glower1: TS,
                    Glower2: SS,
                    Glower3: MS,
                    Glower4: CS,
                    Glower5: DS,
                    DeadLizard1: zS,
                    DeadLizard2: LS,
                    DeadLizard3: RS,
                    DeadLizard4: IS,
                    PlayPretendEx1: BS,
                    PlayPretendEx2: YS,
                    PlayPretendEx3: AS,
                    PlayPretendEx4: HS,
                    FameAudition1: VS,
                    FameAudition2: ES,
                    FameAudition3: qS,
                    FameAudition4: NS,
                    FameAuditionParent1: WS,
                    FameAuditionParent2: US,
                    FameAuditionParent3: $S,
                    FameAuditionParent4: jS,
                    SneakFilmSet1: ZS,
                    SneakFilmSet2: JS,
                    SneakFilmSet3: _S,
                    SneakFilmSet4: QS,
                    FameShowUpHotel1: tM,
                    FameShowUpHotel2: sM,
                    TakeSelfieBilly1: oM,
                    TakeSelfieBilly2: nM,
                    TakeSelfieBilly3: aM,
                    TakeSelfieBilly4: rM,
                    TakeSelfieBilly5: lM,
                    TakeSelfieBilly6: dM,
                    SignAutographs: pM,
                    LookLeft: mM,
                    LookRight: hM,
                    OpenDiary: uM,
                    DiscoverBoo: gM,
                    RemovePhotos: bM,
                    ReadyCam: fM,
                    WaitSmile1: vM,
                    WaitSmile2: kM,
                    TakeWhatYouGet: PM,
                    QuickRun: TM,
                    JumpCar: SM,
                    BangShin: MM,
                    WaitUp: DM,
                    CloseCarDoor: zM,
                    Turn1: LM,
                    Turn2: RM,
                    SkipDoor: IM,
                    WrapGift: BM,
                    TapeDown: YM,
                    UnspoolRibbon: AM,
                    Bow: HM,
                    CramGrandmaMeal: !1,
                    GrandmaBlowCandles: VM,
                    BatSnack1: EM,
                    BatSnack2: qM,
                    BatSnack3: NM,
                    BatVacuum1: WM,
                    BatVacuum2: UM,
                    BatVacuum3: $M,
                    SearchBat1: KM,
                    SearchBat2: ZM,
                    SearchBat3: JM,
                    SearchBat4: _M,
                    LayBatTrap1: eC,
                    LayBatTrap2: tC,
                    LayBatTrap3: sC,
                    CatchBatBlanket1: oC,
                    CatchBatBlanket2: nC,
                    CatchBatBlanket3: aC,
                    CatchBatBlanket4: rC,
                    WatchBatTrap1: dC,
                    WatchBatTrap2: pC,
                    WatchBatTrap3: cC,
                    WatchBatTrap4: mC,
                    ChantSpell: uC,
                    PickUpSticks: yC,
                    PruneHedges: xC,
                    BuildKissingBench1: vC,
                    BuildKissingBench2: kC,
                    BuildKissingBench3: PC,
                    BuildKissingBench4: wC,
                    WaterLawn1: SC,
                    WaterLawn2: MC,
                    WaterLawn3: CC,
                    RockGarden1: FC,
                    RockGarden2: zC,
                    RockGarden3: LC,
                    MutantFlower: IC,
                    RaiseTips1: BC,
                    RaiseTips2: YC,
                    RaiseTips3: AC,
                    RaiseTips4: HC,
                    SetUpLemonade1: VC,
                    SetUpLemonade2: EC,
                    SetUpLemonade3: qC,
                    SetUpLemonade4: NC,
                    LemonadeCustomer1: WC,
                    LemonadeCustomer2: UC,
                    LemonadeCustomer3: $C,
                    LemonadeCustomer4: jC,
                    LemonadeCustomer5: KC,
                    MysteryFootprints1: JC,
                    MysteryFootprints2: _C,
                    MysteryFootprints3: QC,
                    MysteryFootprints4: eD,
                    WackyGhostChase: sD,
                    MysteryPapers1: oD,
                    MysteryPapers2: nD,
                    MysteryPapers3: aD,
                    HideWaitGhost: lD,
                    UnmaskGhost1: pD,
                    UnmaskGhost2: cD,
                    NameOnCar1: hD,
                    NameOnCar2: uD,
                    NewCarFamilyPhoto: yD,
                    BackpackBugs1: xD,
                    BackpackBugs2: fD,
                    BackpackBugs3: vD,
                    BackpackBugs4: kD,
                    BackpackBugs5: PD,
                    GiveApple1: TD,
                    GiveApple2: SD,
                    GiveApple3: MD,
                    GiveApple4: CD,
                    GiveApple5: DD,
                    DoubleDutch1: zD,
                    DoubleDutch2: LD,
                    DoubleDutch3: RD,
                    DoubleDutch4: ID,
                    DoubleDutch5: OD,
                    ShamePE1: YD,
                    ShamePE2: AD,
                    ShamePE3: HD,
                    ShamePE4: GD,
                    ShamePE5: VD,
                    ReminisceSchool1: qD,
                    ReminisceSchool2: ND,
                    ReminisceSchool3: XD,
                    ReminisceSchool4: WD,
                    Declare2: $D,
                    Declare3: jD,
                    PowerOutfit1: ZD,
                    PowerOutfit2: JD,
                    PowerOutfit3: _D,
                    PowerOutfit4: QD,
                    IceCreamProtest1: tF,
                    IceCreamProtest2: sF,
                    IceCreamProtest3: iF,
                    ChurnIceCream: nF,
                    MakeSigns1: rF,
                    MakeSigns2: lF,
                    MakeSigns3: dF,
                    MakeSigns4: pF,
                    SneakSigns1: mF,
                    SneakSigns2: hF,
                    SneakSigns3: uF,
                    SneakStash1: yF,
                    SneakStash2: bF,
                    SneakStash3: xF,
                    SneakStash4: fF,
                    SneakStash5: vF,
                    BigSpeech1: PF,
                    BigSpeech2: wF,
                    BigSpeech3: TF,
                    DecorateCampaign1: MF,
                    DecorateCampaign2: CF,
                    DecorateCampaign3: DF,
                    DecorateCampaign4: FF,
                    SwimDryLand1: LF,
                    SwimDryLand2: RF,
                    SwimDryLand3: IF,
                    InviteFriendsPool2: BF,
                    InviteFriendsPool3: YF,
                    BuildPool1: HF,
                    BuildPool2: GF,
                    KidContractor1: EF,
                    KidContractor2: qF,
                    KidContractor3: NF,
                    KidContractor4: XF,
                    KidContractor5: WF,
                    KidContractor6: UF,
                    FillPool: jF,
                    Sunscreen1: ZF,
                    Sunscreen2: JF,
                    Sunscreen3: _F,
                    Sunscreen4: QF,
                    DivingMove1: tz,
                    DivingMove2: sz,
                    DivingMove3: iz,
                    FitInPool1: nz,
                    FitInPool2: az,
                    TakeTempPox1: lz,
                    TakeTempPox2: dz,
                    TakeTempPox3: pz,
                    BlowNosePox1: mz,
                    BlowNosePox2: hz,
                    BlowNosePox3: uz,
                    BlowNosePox4: gz,
                    ImpressDoctor1: bz,
                    ImpressDoctor2: xz,
                    ImpressDoctor3: fz,
                    ImpressDoctor4: vz,
                    PoxGoToBed: Pz,
                    ReportCardFridge1: Tz,
                    ReportCardFridge2: Sz,
                    ReportCardFridge3: Mz,
                    ChangeReportCard1: Dz,
                    ChangeReportCard2: Fz,
                    ChangeReportCard3: zz,
                    ChangeReportCard4: Lz,
                    TakeTeenPhone1: Iz,
                    TakeTeenPhone2: Oz,
                    TakeTeenPhone3: Bz,
                    TakeTeenPhone4: Yz,
                    StealBackPhone1: Hz,
                    StealBackPhone2: Gz,
                    StealBackPhone3: Vz,
                    StealBackPhone4: Ez,
                    DigOutReportCards1: Nz,
                    DigOutReportCards2: Xz,
                    DigOutReportCards3: Wz,
                    DigOutReportCards4: Uz,
                    EduGame: jz,
                    SignUpStageManage1: Zz,
                    SignUpStageManage2: Jz,
                    SignUpStageManage3: _z,
                    SignUpStageManage4: Qz,
                    CastSheet1: tL,
                    CastSheet2: sL,
                    CastSheet3: iL,
                    CastSheet4: oL,
                    LongLostStar1: aL,
                    LongLostStar2: rL,
                    LongLostStar3: lL,
                    LongLostStar4: dL,
                    SewKidCostume1: cL,
                    SewKidCostume2: mL,
                    SewKidCostume3: hL,
                    SewKidCostume4: uL,
                    SewOtherCostumes1: yL,
                    SewOtherCostumes2: bL,
                    SewOtherCostumes3: xL,
                    ImpressTheater1: vL,
                    ImpressTheater2: kL,
                    ImpressTheater3: PL,
                    ImpressTheater4: wL,
                    Hecklers1: SL,
                    Hecklers2: ML,
                    Hecklers3: CL,
                    Hecklers4: DL,
                    SitActI: zL,
                    SaveShow1: RL,
                    SaveShow2: IL,
                    SaveShow3: OL,
                    SaveShow4: BL,
                    SkipDummy1: AL,
                    SkipDummy2: HL,
                    SkipDummy3: GL,
                    SkipDummy4: VL,
                    PeaceQuiet1: qL,
                    PeaceQuiet2: NL,
                    PeaceQuiet3: XL,
                    PeaceQuiet4: WL,
                    ColliderFuel1: $L,
                    ColliderFuel2: jL,
                    ColliderFuel3: KL,
                    ColliderFuel4: ZL,
                    GorgeSkip1: _L,
                    GorgeSkip2: QL,
                    GorgeSkip3: eR,
                    GorgeSkip4: tR,
                    FlipChannelsScary: iR,
                    ChainsawTV: oR,
                    GripPillow: nR,
                    HideEyes: aR,
                    LoadCoffee1: lR,
                    LoadCoffee2: dR,
                    LoadCoffee3: pR,
                    LoadCoffee4: cR,
                    SlumberSneakKid1: hR,
                    SlumberSneakKid2: uR,
                    SlumberSneakKid3: gR,
                    SlumberSneakKid4: yR,
                    SlumberScareKids1: xR,
                    SlumberScareKids2: fR,
                    SlumberScareKids3: vR,
                    SlumberScareKids4: kR,
                    SlumberSound1: wR,
                    SlumberSound2: TR,
                    SlumberSound3: SR,
                    SlumberSound4: MR,
                    SlumberBedTime: CR,
                    HangOutGarage1: FR,
                    HangOutGarage2: zR,
                    HangOutGarage3: LR,
                    SlumberQuiet1: IR,
                    SlumberQuiet2: OR,
                    SlumberQuiet3: BR,
                    SlumberStayUp1: AR,
                    SlumberStayUp2: HR,
                    SlumberStayUp3: GR,
                    SlumberBedTimeSeriously: VR,
                    Centrifuge: ER,
                    SpaceSwim1: NR,
                    SpaceSwim2: XR,
                    SpaceSwim3: WR,
                    SpaceSwim4: UR,
                    PoochoPromo1: $R,
                    PoochoPromo2: jR,
                    BlastOff: KR,
                    TCDecideCapsule1: JR,
                    TCDecideCapsule2: _R,
                    TCDecideCapsule3: QR,
                    TCDecideCapsule4: eI,
                    TCDecideCapsule5: tI,
                    HideTaxPapers1: iI,
                    HideTaxPapers2: oI,
                    HideTaxPapers3: nI,
                    HideTaxPapers4: aI,
                    ComplainTC1: lI,
                    ComplainTC2: dI,
                    ComplainTC3: pI,
                    ComplainTC4: cI,
                    WriteLetterSelfKid1: hI,
                    WriteLetterSelfKid2: uI,
                    WriteLetterSelfKid3: gI,
                    WriteLetterSelfKid4: yI,
                    WriteLetterSelfTeen1: xI,
                    WriteLetterSelfTeen2: fI,
                    WriteLetterSelfTeen3: vI,
                    WriteLetterSelfParent1: PI,
                    WriteLetterSelfParent2: wI,
                    WriteLetterSelfParent3: TI,
                    WriteLetterSelfParent4: SI,
                    DigUp90sTC1: CI,
                    DigUp90sTC2: DI,
                    SlapBracelet1: zI,
                    SlapBracelet2: LI,
                    SlapBracelet3: RI,
                    DenimJacket1: OI,
                    DenimJacket2: BI,
                    DenimJacket3: YI,
                    Chew90sGum1: HI,
                    Chew90sGum2: GI,
                    Chew90sGum3: VI,
                    Chew90sGum4: EI,
                    Chew90sGum5: qI,
                    Read90sComic1: XI,
                    Read90sComic2: WI,
                    Read90sComic3: UI,
                    Read90sComic4: $I,
                    TrimTreeBranches1: KI,
                    TrimTreeBranches2: ZI,
                    TrimTreeBranches3: JI,
                    RaisePanel: _I,
                    HammerBoards1: eO,
                    HammerBoards2: tO,
                    HammerBoards3: sO,
                    PaintTreehouse1: oO,
                    PaintTreehouse2: nO,
                    PaintTreehouse3: aO,
                    SpyTree1: lO,
                    SpyTree2: dO,
                    SpyTree3: pO,
                    MakeOutBooTree1: mO,
                    MakeOutBooTree2: hO,
                    MakeOutBooTree3: uO,
                    MakeOutPartnerTree1: gO,
                    MakeOutPartnerTree2: yO,
                    MakeOutPartnerTree3: bO,
                    TreeCracks1: fO,
                    TreeCracks2: vO,
                    TreeCracks3: kO,
                    DuctTapeTree1: wO,
                    DuctTapeTree2: TO,
                    DuctTapeTree3: SO,
                    DuctTapeTree4: MO,
                    GorboMoveDen1: DO,
                    GorboMoveDen2: FO,
                    GorboMoveDen3: zO,
                    GorboMoveDen4: LO,
                    GorboMoveDen5: RO,
                    GorboStory1: OO,
                    GorboStory2: BO,
                    GorboStory3: YO,
                    GorboStory4: AO,
                    GorboStory5: HO,
                    GorboDoc1: VO,
                    GorboDoc2: EO,
                    GorboDoc3: qO,
                    SleepDen1: XO,
                    SleepDen2: WO,
                    SleepDen3: UO,
                    SleepDen4: $O,
                    GorboOoze1: KO,
                    GorboOoze2: ZO,
                    GorboOoze3: JO,
                    PassportPhotos: _O,
                    FireEmergency: $B,
                    FloodEmergency: KB,
                    PowerEmergency: jB,
                    LockOutEmergency: JB,
                    TermiteEmergency: ZB,
                    InstructionsBikeDeed: eB,
                    ShopToiletPaper1: tB,
                    PaperAirplane1: sB,
                    MagicTrick1: iB,
                    TieBowtie1: oB,
                    BrimstoneStew: nB,
                    TVBrightness2: aB,
                    RideBike1: rB,
                    InstallBirdFeeder1: lB,
                    AssemblePatioFurniture1: dB,
                    TeaParty1: pB,
                    PlayPretend1: cB,
                    PayAllowance1: mB,
                    DemonicPuzzle2: hB,
                    InstructionsDance1: uB,
                    InstructionsKidDance1: gB,
                    InstructionsGarbageDisposal1: yB,
                    InstructionsHair1: bB,
                    InstructionsPaint1: xB,
                    BakingSodaVolcano: fB,
                    PickOutfitDance: vB,
                    Choreography: kB,
                    RecordSingle: PB,
                    MakeParisBudget: wB,
                    PackParisSuitcase: TB,
                    GorboMuseum1: SB,
                    OrderPoolParts: MB,
                    PoolBlueprints: CB,
                    SawWood: DB,
                    MakePresentationRaise: FB,
                    FilmBigScene: zB,
                    ShutDownCollider: LB,
                    ExamineMachine: RB,
                    MysteryGhostTrap: IB,
                    Topiary: OB,
                    PlantExoticFlowers: BB,
                    CousinRoof: YB,
                    MakeHousePresentable: AB,
                    Melancholy: HB,
                    TeaRevenge: GB,
                    CarMaintenance: VB,
                    HideCarScratch: EB,
                    EmbarrassKids: qB,
                    UnfoldTable: NB,
                    HideMeatShortage: XB,
                    OxygenScrubber: WB,
                    AssembleBatTrap: UB,
                    AudienceSpawnScratchChair: _B,
                    AudienceSpawnShowClaws: QB,
                    AudienceClipClaws1: eY,
                    AudienceSpawnDartOut: tY,
                    AudienceSpawnEatBugs: sY,
                    AudienceGiveKittyTreat1: oY,
                    AudienceGiveKittyTreat2: nY,
                    AudienceGiveKittyTreat3: aY,
                    AudienceSpawnPawWater: zw,
                    AudienceGetWater1: Lw,
                    AudienceGetWater2: Rw,
                    AudienceGetWater3: Iw,
                    AudienceSpawnDestroyLitter: lY,
                    AudienceCleanLitter1: dY,
                    AudienceSpawnLayOnLaptop: cY,
                    AudienceMoveKitty1: mY,
                    AudienceSpawnShowBelly: uY,
                    AudiencePetKitty1: gY,
                    AudiencePetKitty2: yY,
                    AudienceSpawnKnockItems: xY,
                    AudiencePickUp1: fY,
                    AudienceSpawnPoseForPic: kY,
                    AudienceTakeKittyPic1: PY,
                    AudienceTakeKittyPic2: wY,
                    AudienceTakeKittyPic3: TY,
                    AudienceTakeKittyPic4: SY,
                    AudienceSpawnFightVacuum: MY,
                    AudienceSpawnVomit: CY,
                    Search: DY,
                    CancelerAdult: zY,
                    CancelerChild: LY,
                    CancelerTeen: RY,
                    HoldTest: Zo.extend({
                        imageManifest: {
                            cookie: Promise.resolve().then(s.t.bind(s, 67351, 17))
                        }
                    }),
                    NothingTest: ts.extend({
                        imageManifest: {
                            cookie: Promise.resolve().then(s.t.bind(s, 67351, 17))
                        }
                    }),
                    RotateTest: ct.extend({
                        imageManifest: {
                            cookie: Promise.resolve().then(s.t.bind(s, 67351, 17))
                        }
                    }),
                    ScrubTest: IY.extend({
                        imageManifest: {
                            cookie: Promise.resolve().then(s.t.bind(s, 67351, 17))
                        }
                    }),
                    SwipeTest: po.extend({
                        imageManifest: {
                            cookie: Promise.resolve().then(s.t.bind(s, 67351, 17))
                        }
                    }),
                    TapTest: mn.extend({
                        imageManifest: {
                            cookie: Promise.resolve().then(s.t.bind(s, 67351, 17))
                        }
                    }),
                    HoldDefault: He.extend({
                        className: "default hold",
                        bindings: {
                            ":el": {
                                classes: {
                                    mistake: "mistake",
                                    complete: "isComplete"
                                }
                            }
                        },
                        elements: [{
                            class: "text",
                            type: "div",
                            pos: [50, 50],
                            html: "<span>TAP AND HOLD!</span>"
                        }],
                        initializeTimeline() {
                            const e = this.model.get("durationInMs");
                            C.p8.set(".e.text", {
                                rotation: -10
                            });
                            const t = C.p8.timeline({
                                ease: pt.bJ.easeNone,
                                repeat: e / 2e3
                            }).to(".e.text", {
                                x: 1,
                                y: 1,
                                rotation: -10
                            }).to(".e.text", {
                                x: -1,
                                y: -1,
                                rotation: -10
                            }).to(".e.text", {
                                x: -1,
                                y: 0,
                                rotation: -9
                            }).to(".e.text", {
                                x: 1,
                                y: 1,
                                rotation: -10
                            }).to(".e.text", {
                                x: 1,
                                y: -1,
                                rotation: -9
                            }).to(".e.text", {
                                x: -1,
                                y: 1,
                                rotation: -11
                            }).to(".e.text", {
                                x: -1,
                                y: 1,
                                rotation: -10
                            }).to(".e.text", {
                                x: 1,
                                y: 1,
                                rotation: -11
                            }).to(".e.text", {
                                x: 1,
                                y: -1,
                                rotation: -9
                            }).to(".e.text", {
                                x: 1,
                                y: 1,
                                rotation: -10
                            }).to(".e.text", {
                                x: 1,
                                y: 1,
                                rotation: -11
                            });
                            t.name = "text", this.timeline.add(t)
                        }
                    }),
                    InstructionsDefault: He.extend({
                        className: "instructions",
                        holdTL: null,
                        imageManifest: {
                            battery: Promise.resolve().then(s.t.bind(s, 70378, 17))
                        },
                        elements: [{
                            class: "step step0",
                            type: "img",
                            pos: [0, 0],
                            key: "battery"
                        }],
                        resetToStep() {
                            C.p8.set(".e.step", {
                                rotation: 0,
                                x: 0,
                                y: 0,
                                opacity: 1
                            })
                        },
                        onTapDown() {
                            C.p8.to(".e.step", {
                                duration: .15,
                                scale: .97,
                                ease: pt.bJ.easeNone
                            }), this.holdTL = C.p8.timeline({
                                ease: pt.bJ.easeNone,
                                repeat: -1
                            }).to(".e.step", {
                                x: 2,
                                y: 2,
                                duration: .1
                            }).to(".e.step", {
                                x: -2,
                                y: -2,
                                duration: .1
                            }).to(".e.step", {
                                x: -2,
                                y: 0,
                                duration: .1
                            }).to(".e.step", {
                                x: 2,
                                y: 2,
                                duration: .1
                            }).to(".e.step", {
                                x: 2,
                                y: -2,
                                duration: .1
                            }).to(".e.step", {
                                x: -2,
                                y: 2,
                                duration: .1
                            }).to(".e.step", {
                                x: -2,
                                y: 2,
                                duration: .1
                            }).to(".e.step", {
                                x: 2,
                                y: 2,
                                duration: .1
                            }).to(".e.step", {
                                x: 2,
                                y: -2,
                                duration: .1
                            }).to(".e.step", {
                                x: 2,
                                y: 2,
                                duration: .1
                            }).to(".e.step", {
                                x: 2,
                                y: -2,
                                duration: .1
                            })
                        },
                        onTapUp() {
                            C.p8.to(".e.step", {
                                duration: .15,
                                scale: 1,
                                ease: pt.bJ.easeNone
                            }), this.holdTL.pause(), this.holdTL = null
                        },
                        onRotation(e) {
                            C.p8.set(".e.step", {
                                rotation: e
                            })
                        },
                        onSwipe(e) {
                            C.p8.to(".e.step", {
                                duration: .15,
                                opacity: 0,
                                x: 50 * Math.cos(e),
                                y: 50 * Math.sin(e),
                                ease: pt.bJ.easeNone
                            })
                        }
                    }),
                    NothingDefault: He.extend({
                        className: "default nothing",
                        usesTimeline: !1,
                        bindings: {
                            ":el": {
                                classes: {
                                    mistake: "mistake",
                                    complete: "isComplete"
                                }
                            }
                        },
                        elements: [{
                            class: "text",
                            type: "div",
                            pos: [50, 50],
                            html: '<span class="message">DO NOTHING!</span>'
                        }],
                        onLoadComplete() {
                            C.p8.set(".e.text", {
                                rotation: -10
                            }), this.model.setUpdate({
                                message: "DO NOTHING!"
                            })
                        }
                    }),
                    RotateDefault: He.extend({
                        className: "default rotate",
                        usesTimeline: !1,
                        bindings: {
                            ":el": {
                                classes: {
                                    mistake: "mistake",
                                    complete: "isComplete"
                                }
                            },
                            ".text span": {
                                observe: "message",
                                updateMethod: "html"
                            }
                        },
                        elements: [{
                            class: "text",
                            type: "div",
                            pos: [50, 50],
                            html: "<span>ROTATE!</span>"
                        }],
                        onLoadComplete() {
                            const e = this.model.get("direction");
                            let t = "ROTATE!";
                            e && "clockwise" === e.toLowerCase() && (t = "ROTATE<br/>CLOCKWISE!"), e && "counter" === e.toLowerCase() && (t = "ROTATE<br/>COUNTER!"), this.model.setUpdate({
                                message: t
                            })
                        },
                        onProgress() {
                            const e = this.model.get("degreesRotated");
                            C.p8.set(".e.text", {
                                rotation: e - 10
                            })
                        }
                    }),
                    ScrubDefault: He.extend({
                        className: "default scrub",
                        elements: [{
                            class: "text background",
                            type: "div",
                            pos: [50, 50],
                            html: "<span>SCRUB!</span>"
                        }, {
                            class: "text foreground",
                            type: "div",
                            pos: [50, 50],
                            html: "<span>SCRUB!</span>"
                        }],
                        initializeTimeline() {
                            C.p8.set(".e.foreground", {
                                rotation: -10
                            }), C.p8.set(".e.background", {
                                rotation: -10,
                                opacity: 0
                            });
                            const e = C.p8.timeline().to(".e.foreground", {
                                opacity: 0,
                                ease: pt.Lp.easeOut
                            });
                            e.name = "foreground", this.timeline.add(e);
                            const t = C.p8.timeline().to(".e.background", {
                                opacity: 1,
                                ease: pt.Lp.easeOut
                            });
                            t.name = "background", this.timeline.add(t, "-=0.25")
                        }
                    }),
                    SwipeDefault: He.extend({
                        className: "default swipe",
                        usesTimeline: !1,
                        bindings: {
                            ":el": {
                                classes: {
                                    mistake: "mistake",
                                    complete: "isComplete"
                                }
                            },
                            ".text span": "infoText"
                        },
                        imageManifest: {
                            arrow: Promise.resolve().then(s.t.bind(s, 3036, 17))
                        },
                        elements: [{
                            class: "text move",
                            type: "div",
                            pos: [50, 50],
                            html: "<span></span>"
                        }, {
                            class: "text",
                            type: "div",
                            pos: [50, 50],
                            html: "<span></span>"
                        }, {
                            class: "arrow",
                            type: "img",
                            pos: [250, 250],
                            key: "arrow"
                        }],
                        onLoadComplete() {
                            C.p8.set(".e.move", {
                                opacity: 0
                            }), C.p8.set(".e.arrow", {
                                opacity: 0,
                                scale: .5
                            })
                        },
                        onDiscreteProgress(e, t, s) {
                            const i = s.radians;
                            C.p8.set(".e.move", {
                                opacity: 1
                            }), C.p8.to(".e.move", {
                                opacity: 0,
                                x: 50 * Math.cos(i),
                                y: 50 * Math.sin(i),
                                onComplete() {
                                    C.p8.set(this.targets()[0], {
                                        x: 0,
                                        y: 0
                                    })
                                }
                            })
                        },
                        onMistake(e) {
                            C.p8.set(".e.arrow", {
                                rotation: -e
                            }), C.p8.to(".e.arrow", {
                                opacity: 1,
                                scale: 1,
                                duration: .25
                            }), setTimeout((() => {
                                C.p8.set(".e.arrow", {
                                    opacity: 0,
                                    scale: .5
                                })
                            }), 500)
                        }
                    }),
                    TapDefault: He.extend({
                        className: "default tap",
                        usesTimeline: !1,
                        bindings: {
                            ":el": {
                                classes: {
                                    complete: "isComplete",
                                    waiting: "isWaiting"
                                }
                            },
                            ".text span": {
                                observe: "isWaiting",
                                onGet: e => e ? "WAIT!" : "TAP!"
                            }
                        },
                        elements: [{
                            class: "text",
                            type: "div",
                            pos: [50, 50],
                            html: "<span>TAP!</span>"
                        }]
                    }),
                    Default: He.extend({
                        className: "default",
                        usesTimeline: !1,
                        bindings: {
                            ":el": {
                                classes: {
                                    mistake: "mistake",
                                    complete: "isComplete",
                                    waiting: "isWaiting"
                                }
                            },
                            ".text span": {
                                observe: "progress",
                                onGet: e => Math.round(e)
                            }
                        },
                        elements: [{
                            class: "text",
                            type: "div",
                            pos: [50, 50],
                            html: "<span></span>"
                        }],
                        onMistake() {
                            this.model.setUpdate({
                                mistake: !0
                            }), setTimeout((() => {
                                this.model.setUpdate({
                                    mistake: !1
                                })
                            }), 500)
                        }
                    })
                },
                BY = g.S.extend({
                    defaults: {
                        scene: null
                    }
                }),
                YY = p().View.extend({
                    template: o().template('<div id="gesture-ui" class="gestures scene-box-wrapper"> <div id="scene-region" class="scene scene-box"></div> <div id="target-ui" class="target"></div> </div> <div class="progress"> <div class="progress-bar"></div> </div> <svg class="pie" viewBox="0 0 28 28"> <circle r="25%" cx="50%" cy="50%"></circle> </svg> <div class="info"></div> <div class="demo-finger"></div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p>'),
                    model: new BY,
                    progressType: "auto",
                    useGestures: !1,
                    useTaps: !1,
                    gestureRegion: null,
                    sceneView: null,
                    autoInterval: null,
                    autoIntervalLength: 50,
                    isReady: !1,
                    ui: {
                        gesture: null,
                        target: null
                    },
                    regions: {
                        scene: "#scene-region"
                    },
                    events: {
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ":el": {
                            classes: {
                                demo: "showDemo"
                            }
                        },
                        ".instructions": {
                            observe: "instructions",
                            updateMethod: "html"
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".leave": {
                            observe: "canLeave",
                            visible: !0
                        },
                        ".pie": {
                            classes: {
                                hidden: {
                                    observe: "totalSteps",
                                    onGet: e => !e || e <= 1
                                }
                            }
                        },
                        ".scene-box-wrapper": {
                            classes: {
                                full: "isFullScreen"
                            }
                        },
                        ".info": {
                            observe: ["infoText", "mistakeText", "isWaiting"],
                            updateMethod: "html",
                            onGet(e) {
                                let [t, s] = e;
                                return s || t || ""
                            },
                            classes: {
                                mistake: "mistake",
                                waiting: "isWaiting",
                                complete: "isComplete"
                            }
                        },
                        ".progress-bar": {
                            attributes: [{
                                name: "style",
                                observe: ["progress", "stepDuration"],
                                onGet(e) {
                                    let t = "";
                                    return e[0] && (t += `width: ${e[0]}%;`), e[1] && (t += `transition-duration: ${e[1]}s;`), t
                                }
                            }]
                        },
                        ".pie circle": {
                            attributes: [{
                                name: "style",
                                observe: ["stepIndex", "totalSteps"],
                                onGet(e) {
                                    let [t, s] = e;
                                    return `stroke-dasharray: ${42/s*t} 42;`
                                }
                            }]
                        },
                        ".demo-finger": {
                            attributes: [{
                                name: "class",
                                observe: "demoClass",
                                onGet: e => e || ""
                            }]
                        }
                    },
                    initialize() {
                        this.listenTo(this.model, "change:stepId", this.onStepIdChange)
                    },
                    onRender() {
                        this.stickit()
                    },
                    onAttach() {
                        this.ui.gesture = this.$el.find("#gesture-ui")[0], this.ui.target = this.$el.find("#target-ui")[0], this.useGestures && (this.bindGestureRegion(), this.bindGestures()), this.useTaps && this.bindTaps(), this.setupRoot(), this.checkForDemo()
                    },
                    onBeforeDestroy() {
                        this.usesGestures && this.unbindGestureRegion(), this.clearProgressTimer(), this.willDestroy()
                    },
                    willDestroy() {},
                    onStepIdChange() {
                        this.isReady && this.setupRoot()
                    },
                    setupRoot() {
                        this.isAttached() && (this.sceneView && this.sceneView.destroy(), this.isReady = !0, this.model.setUpdate({
                            showDemo: !1,
                            progress: 0,
                            elapsedInMs: 0,
                            isComplete: !1,
                            mistakeText: null,
                            mistake: !1
                        }), this.setup(), this.showScene(), this.onSetupComplete())
                    },
                    setup() {},
                    showScene() {
                        this.sceneView = class {
                            static getScene(e) {
                                const t = e.get("scene"),
                                    s = e.get("deed"),
                                    i = e.get("state");
                                if (t && OY[t]) return new OY[t]({
                                    model: e
                                });
                                if (s && OY[s]) return new OY[s]({
                                    model: e
                                });
                                switch (i) {
                                    case "HoldMechanic":
                                        return new OY.HoldDefault({
                                            model: e
                                        });
                                    case "InstructionsMechanicCaptain":
                                        return new OY.InstructionsDefault({
                                            model: e
                                        });
                                    case "NothingMechanic":
                                        return new OY.NothingDefault({
                                            model: e
                                        });
                                    case "SwipeMechanic":
                                        return new OY.SwipeDefault({
                                            model: e
                                        });
                                    case "TapMechanic":
                                    case "TapResultingMechanic":
                                        return new OY.TapDefault({
                                            model: e
                                        });
                                    case "RotateMechanic":
                                        return new OY.RotateDefault({
                                            model: e
                                        });
                                    case "ScrubMechanic":
                                        return new OY.ScrubDefault({
                                            model: e
                                        });
                                    default:
                                        return new OY.Default({
                                            model: e
                                        })
                                }
                            }
                        }.getScene(this.model), this.model.set({
                            isFullScreen: this.sceneView.isFullScreen
                        }), "interactive" === this.progressType && (this.sceneView.stepDuration = 0), "auto" === this.progressType && (this.sceneView.stepDuration = .05), this.showChildView("scene", this.sceneView)
                    },
                    onSetupComplete() {},
                    onLeaveClick() {
                        this.triggerMethod("client:message", {
                            action: "leaveTask"
                        })
                    },
                    bindGestureRegion() {
                        this.gestureRegion = new(ye().Region)(this.ui.gesture)
                    },
                    unbindGestureRegion() {
                        this.gestureRegion.unbind(this.ui.gesture)
                    },
                    bindGestures() {},
                    bindTaps() {
                        this.delegateEvents(Object.assign(this.events, {
                            "touchstart .target": "onTouchStart",
                            "touchend .target": "onTouchEnd",
                            "mousedown .target": "onTouchStart",
                            "mouseup .target": "onTouchEnd"
                        }))
                    },
                    onTouchStart(e) {
                        e.preventDefault(), this.onTapStart()
                    },
                    onTouchEnd(e) {
                        e.preventDefault(), this.onTapEnd()
                    },
                    onTapStart() {},
                    onTapEnd() {},
                    startProgressTimer() {
                        this.autoInterval || (this.autoInterval = window.setInterval(this.onProgressTimerInterval.bind(this), this.autoIntervalLength)), void 0 === this.model.get("elapsedInMs") && this.model.setUpdate({
                            elapsedInMs: 0
                        }), this.rewindingAtRate = null, this.sceneView && this.sceneView.onStartProgress()
                    },
                    clearProgressTimer() {
                        this.autoInterval && (window.clearInterval(this.autoInterval), this.autoInterval = null)
                    },
                    stopProgressTimer(e, t) {
                        e ? this.rewindingAtRate = e : (this.autoInterval && (t || this.model.setUpdate({
                            elapsedInMs: 0,
                            progress: 0
                        }), this.clearProgressTimer()), this.sceneView && this.sceneView.onStopProgress())
                    },
                    onProgressTimerInterval() {
                        if (this.model.get("isComplete")) return void this.clearProgressTimer();
                        const e = this.rewindingAtRate ? this.model.get("elapsedInMs") - this.autoIntervalLength * this.rewindingAtRate : this.model.get("elapsedInMs") + this.autoIntervalLength,
                            t = this.model.get("durationInMs"),
                            s = this.model.get("progress"),
                            i = e / t * 100;
                        this.model.setUpdate({
                            elapsedInMs: e,
                            progress: i
                        }), i <= 0 && (this.model.setUpdate({
                            elapsedInMs: 0,
                            progress: 0,
                            rewindingAtRate: null
                        }), this.clearProgressTimer()), i >= 100 && (this.model.setUpdate({
                            elapsedInMs: t,
                            progress: 100,
                            isComplete: !0
                        }), this.clearProgressTimer(), this.onTimeBasedSuccess()), this.sceneView && this.sceneView.onProgress(i, s)
                    },
                    onTimeBasedSuccess() {},
                    checkForDemo() {
                        this.demoKey && Te.app.storage.isSupported && !Te.app.storage.get(`datd:demos:${this.demoKey}`) && (this.model.setUpdate({
                            showDemo: !0
                        }), Te.app.storage.set(`datd:demos:${this.demoKey}`, !0))
                    }
                }),
                AY = g.S.extend({
                    defaults: {
                        infoText: "",
                        isComplete: !1,
                        isRotating: !1,
                        rotateTarget: 720,
                        degreesRotated: 0,
                        isSwiping: !1,
                        isTapping: !1,
                        tapCount: 0,
                        isHolding: !1,
                        elapsedInMs: 0,
                        durationInMs: 2e3
                    },
                    hasSignificantRotation() {
                        const e = this.get("rotateTarget"),
                            t = this.get("degreesRotated");
                        return Math.abs(t) > e / 2
                    },
                    hasSignificantScrub() {
                        return this.get("distanceScrubbed") > 500
                    }
                }),
                HY = YY.extend({
                    className: "mechanic gesture instructions captain",
                    template: o().template('<div id="gesture-ui" class="gestures scene-box-wrapper"> <div id="scene-region" class="scene scene-box"></div> <div id="target-ui" class="target"></div> </div> <div class="clamp"> <div class="ask"></div> <div class="info"></div> </div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p> '),
                    model: new AY,
                    useGestures: !0,
                    useTaps: !1,
                    tapTimeout: null,
                    tapTimeoutLength: 500,
                    rotateTimeout: null,
                    rotateTimeoutLength: 150,
                    successText: ["NICE ONE", "GOT IT", "GOOD JOB", "GREAT WORK", "WELL DONE"],
                    bindings: {
                        ".leave": {
                            observe: "canLeave",
                            visible: !0
                        },
                        ".instructions": "stepInstructions",
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".info": {
                            observe: ["infoText", "isWaiting"],
                            onGet(e) {
                                let [t, s] = e;
                                return s ? "WAIT" : t || ""
                            },
                            classes: {
                                waiting: "isWaiting",
                                success: "isSuccess",
                                mistake: "isMistake"
                            }
                        },
                        ".ask": {
                            observe: "participant",
                            updateMethod: "html",
                            onGet: e => e ? `Ask <span class="player-name ${e.avatar}">${e.name}</span> what to do.` : "",
                            classes: {
                                conceal: {
                                    observe: ["infoText", "isWaiting"],
                                    onGet(e) {
                                        let [t, s] = e;
                                        return t || s
                                    }
                                }
                            }
                        }
                    },
                    initialize() {
                        this.listenTo(this.model, "change:mistakeCheck", this.onMistakeCheck), this.resetData()
                    },
                    resetData() {
                        this.model.setUpdate({
                            isWaiting: !1
                        })
                    },
                    onMistakeCheck(e) {
                        this.model.get("isWaiting") && this.sceneView && (this.sceneView.resetToStep(this.model.get("currentStepIndex")), this.model.setUpdate({
                            isWaiting: !1
                        }), void 0 === e.changed.currentStepIndex ? this.triggerMethod("result", {
                            type: "fail",
                            message: "TRY<br/>AGAIN"
                        }) : (this.model.setUpdate({
                            isWaiting: !1,
                            isSuccess: !0,
                            infoText: o().sample(this.successText)
                        }), setTimeout((() => {
                            this.model.set({
                                infoText: null,
                                isSuccess: !1
                            })
                        }), 1e3)))
                    },
                    bindGestures() {
                        const e = new(ye().Tap);
                        e.start = this.onTapStart.bind(this, !1), e.end = this.onTapEnd.bind(this, !1), this.gestureRegion.bind(this.ui.target, e, this.onTapEnd.bind(this), !0);
                        const t = new(ye().Rotate);
                        t.end = this.onRotateEnd.bind(this, !1), this.gestureRegion.bind(this.ui.target, t, this.onRotate.bind(this), !0);
                        const s = new(ye().Swipe);
                        s.end = this.onSwipeEnd, this.gestureRegion.bind(this.ui.target, s, this.onSwipe.bind(this))
                    },
                    onTapStart() {
                        this.tapTimeout && (clearTimeout(this.tapTimeout), this.tapTimeout = null);
                        const e = this.model.get("tapCount");
                        this.model.setUpdate({
                            isTapping: !0,
                            tapCount: e + 1
                        }), this.tapTimeout = setTimeout(this.onTapTimeout.bind(this), this.tapTimeoutLength), this.sceneView.onTapDown(), this.startProgressTimer(), this.model.setUpdate({
                            isHolding: !0
                        })
                    },
                    onTapEnd() {
                        this.sceneView.onTapUp(), this.stopProgressTimer(0), this.model.setUpdate({
                            isTapping: !1,
                            isHolding: !1,
                            degreesRotated: 0
                        }), this.sceneView.onRotation(0)
                    },
                    onTapTimeout() {
                        const e = this.model.get("isHolding"),
                            t = this.model.get("isRotating"),
                            s = this.model.get("isScrubbing"),
                            i = this.model.get("isSwiping");
                        e || t || s || i || this.sendTap(this.model.get("tapCount")), this.model.setUpdate({
                            isSwiping: !1,
                            tapCount: 0
                        }), this.tapTimeout = null
                    },
                    onTimeBasedSuccess() {
                        if (this.model.hasSignificantRotation() || this.model.hasSignificantScrub()) return this.stopProgressTimer(0), void this.model.setUpdate({
                            isComplete: !1,
                            elapsedInMs: 0,
                            progress: 0
                        });
                        this.sendHold()
                    },
                    onRotateStart() {
                        this.model.setUpdate({
                            isRotating: !0
                        }), this.rotateTimeout = setTimeout((() => {
                            clearTimeout(this.rotateTimeout), this.rotateTimeout = null
                        }), this.rotateTimeoutLength)
                    },
                    onRotate(e) {
                        if (this.model.get("isComplete")) return;
                        this.model.get("isRotating") || this.onRotateStart();
                        const t = e.detail,
                            s = this.model.get("degreesRotated") + t.distanceFromLast;
                        this.model.setUpdate({
                            degreesRotated: s
                        }), s >= this.model.get("rotateTarget") && this.sendRotate("clockwise"), s <= -this.model.get("rotateTarget") && this.sendRotate("counter"), this.model.setUpdate({
                            degreesRotated: s
                        }), this.rotateTimeout || this.sceneView.onRotation(s)
                    },
                    onRotateEnd() {
                        this.model.get("isRotating") && this.model.setUpdate({
                            isRotating: !1,
                            degreesRotated: 0,
                            distanceScrubbed: 0,
                            lastPosition: null
                        })
                    },
                    getSwipeRadians(e) {
                        let t = 0;
                        return "UP" === e && (t = 270), "DOWN" === e && (t = 90), "LEFT" === e && (t = 180), "RIGHT" === e && (t = 0), t * (Math.PI / 180)
                    },
                    getSwipeDirection: e => e > 45 && e < 135 ? "UP" : e > 225 && e < 315 ? "DOWN" : e > 135 && e < 225 ? "LEFT" : e < 45 || e > 315 ? "RIGHT" : null,
                    onSwipeEnd(e) {
                        const t = ye().Swipe.prototype.end.apply(this, [e]);
                        if (t) return t;
                        const s = e[0];
                        if (!s.progress.swipe) return !1;
                        if (!s.progress.swipe.moves) return !1;
                        if (s.progress.swipe.moves.length < 5) return !1;
                        const i = s.initial.x - s.current.x,
                            o = s.initial.y - s.current.y;
                        return Math.abs(i) > Math.abs(o) ? {
                            data: [{
                                currentDirection: i > 0 ? 180 : 360
                            }]
                        } : {
                            data: [{
                                currentDirection: o > 0 ? 90 : 270
                            }]
                        }
                    },
                    onSwipe(e) {
                        if (this.model.get("isComplete")) return;
                        if (null === this.tapTimeout) return;
                        this.model.setUpdate({
                            isSwiping: !0
                        });
                        const t = this.getSwipeDirection(e.detail.data[0].currentDirection),
                            s = this.getSwipeRadians(t);
                        this.sceneView.onSwipe(s), setTimeout((() => {
                            this.sendSwipe(t)
                        }), 250)
                    },
                    sendRotate(e) {
                        this.model.get("isComplete") || (this.model.setUpdate({
                            isComplete: !0
                        }), "clockwise" !== e ? this.send("ROTATE_COUNTER") : this.send("ROTATE_CLOCK"))
                    },
                    sendTap(e) {
                        if (!this.model.get("isComplete")) {
                            if (1 === e) return this.model.setUpdate({
                                isComplete: !0
                            }), void this.send("TAP");
                            this.model.setUpdate({
                                isComplete: !0
                            }), this.send("TAP_3")
                        }
                    },
                    sendHold() {
                        this.send("TAP_HOLD")
                    },
                    sendSwipe(e) {
                        this.model.get("isComplete") || (this.model.setUpdate({
                            isComplete: !0
                        }), "UP" !== e ? "LEFT" !== e ? "RIGHT" !== e ? this.send("SWIPE_DOWN") : this.send("SWIPE_RIGHT") : this.send("SWIPE_LEFT") : this.send("SWIPE_UP"))
                    },
                    send(e) {
                        this.triggerMethod("client:message", {
                            action: e
                        }), this.tapTimeout && (clearTimeout(this.tapTimeout), this.tapTimeout = null), this.rotateTimeout && (clearTimeout(this.rotateTimeout), this.rotateTimeout = null), this.stopProgressTimer(), this.model.setUpdate({
                            isHolding: !1,
                            isRotating: !1,
                            isScrubbing: !1,
                            isSwiping: !1,
                            isWaiting: !0
                        })
                    }
                }),
                GY = p().View.extend({
                    className: "mechanic instructions participant",
                    template: o().template('<div class="scrollable"> <div class="clamp"> <div class="info"></div> <div class="steps"></div> </div> </div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p>'),
                    model: new g.S,
                    events: {
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ".leave": {
                            observe: "canLeave",
                            visible: !0
                        },
                        ".instructions": {
                            observe: "instructions",
                            updateMethod: "html"
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".info": {
                            observe: "captain",
                            updateMethod: "html",
                            onGet: e => e ? `Give <span class="player-name ${e.avatar}">${e.name}</span> these instructions. Steps will be crossed off as they’re completed.` : ""
                        },
                        ".steps": {
                            observe: ["steps", "currentStepIndex"],
                            updateMethod: "html",
                            onGet(e) {
                                let [t, s] = e;
                                if (!t) return "";
                                let i = "<ol>";
                                return t.forEach(((e, t) => {
                                    let o = "step";
                                    t < s && (o += " complete"), t === s && (o += " active"), i += `<li class="${o}">${this.getStepText(e)}</li>`
                                })), i += "</ol>", i
                            }
                        }
                    },
                    onRender() {
                        this.stickit()
                    },
                    getStepText(e) {
                        switch (e.mechanic) {
                            case "ROTATE_CLOCK":
                                return `${e.instructions} by rotating right twice`;
                            case "ROTATE_COUNTER":
                                return `${e.instructions} by rotating left twice`;
                            case "TAP":
                                return `${e.instructions} by tapping once`;
                            case "TAP_3":
                                return `${e.instructions} by triple tapping`;
                            case "TAP_HOLD":
                                return `${e.instructions} by tapping and holding for 3 seconds`;
                            case "SWIPE_UP":
                                return `${e.instructions} by swiping up`;
                            case "SWIPE_DOWN":
                                return `${e.instructions} by swiping down`;
                            case "SWIPE_LEFT":
                                return `${e.instructions} by swiping left`;
                            case "SWIPE_RIGHT":
                                return `${e.instructions} by swiping right`;
                            default:
                                return ""
                        }
                    },
                    onLeaveClick() {
                        this.triggerMethod("client:message", {
                            action: "leaveTask"
                        })
                    }
                }),
                VY = p().View.extend({
                    tagName: "button",
                    className: "button location",
                    template: o().template('<div class="name"></div>'),
                    prefixes: ["LOOK", "CHECK", "SEARCH"],
                    events: {
                        click: "onClick"
                    },
                    bindings: {
                        ".name": "name"
                    },
                    onRender() {
                        this.stickit()
                    },
                    onClick() {
                        this.triggerMethod("button:select", this.model)
                    }
                }),
                EY = p().CollectionView.extend({
                    tagName: "div",
                    className: "locations",
                    childView: VY,
                    collection: new(l().Collection)
                }),
                qY = YY.extend({
                    className: "mechanic gesture scrub",
                    progressType: "interactive",
                    demoKey: "scrub",
                    useGestures: !0,
                    useTaps: !1,
                    isPanning: !1,
                    distanceMap: {
                        xShort: 1e3,
                        short: 3e3,
                        medium: 5e3,
                        long: 8e3,
                        xLong: 11e3
                    },
                    setup() {
                        const e = this.model.get("distance"),
                            t = this.distanceMap[e] || 5e3;
                        this.model.setUpdate({
                            infoText: "SCRUB",
                            distanceInPx: t,
                            lastDistance: 0,
                            distanceScrubbed: 0
                        })
                    },
                    bindGestures() {
                        const e = new(ye().Pan);
                        e.end = this.onPanEnd.bind(this), this.gestureRegion.bind(this.ui.target, e, this.onPan.bind(this))
                    },
                    onPanStart() {
                        this.isPanning = !0, this.sceneView.onStartProgress()
                    },
                    onPan(e) {
                        if (this.model.get("isComplete")) return;
                        e.detail.data.length > 1 && console.warn("Multitouch not supported"), this.isPanning || this.onPanStart();
                        const t = e.detail.data[0],
                            s = this.model.get("distanceInPx"),
                            i = t.distanceFromOrigin,
                            o = this.model.get("lastDistance"),
                            n = Math.abs(i - o),
                            a = this.model.get("distanceScrubbed") + n,
                            r = a / s * 100;
                        this.model.setUpdate({
                            progress: r,
                            distanceScrubbed: a,
                            lastDistance: i
                        }), r >= 100 && (this.model.setUpdate({
                            progress: 100,
                            isComplete: !0
                        }), this.onComplete()), this.sceneView.onProgress(r)
                    },
                    onPanEnd() {
                        this.isPanning = !1, this.sceneView.onStopProgress()
                    },
                    onComplete() {
                        const e = this.sceneView.lastStepDuration;
                        setTimeout((() => {
                            this.triggerMethod("client:message", {
                                action: "success"
                            })
                        }), 1e3 * e)
                    }
                }),
                NY = qY.extend({
                    className: "gesture scrub",
                    template: o().template('\n    <div id="gesture-ui" class="gestures scene-box-wrapper">\n        <div id="scene-region" class="scene scene-box"></div>\n        <div id="target-ui" class="target"></div>\n    </div>\n    <div class="progress">\n        <div class="progress-bar"></div>\n    </div>\n    <div class="info">SCRUB TO SEARCH</div>\n'),
                    initialize(e) {
                        this.model.setUpdate({
                            distance: "xshort",
                            scene: "Search",
                            category: "none"
                        }), qY.prototype.initialize.apply(this, [e])
                    },
                    onMistake() {
                        this.sceneView.model.set({
                            isMistake: !0
                        })
                    },
                    onComplete() {
                        this.triggerMethod("search:complete", this.model)
                    }
                }),
                XY = g.S.extend({
                    selectedLocation() {
                        const e = this.get("searching");
                        return e ? this.get("locations").find((t => t.id === e)) : null
                    }
                }),
                WY = p().View.extend({
                    className: "mechanic search",
                    template: o().template('<div class="scrollable"> <div class="clamp"> <div class="wrapper"> <div class="info"></div> <div id="locations-region"></div> </div> </div> </div> <div id="searching-region"></div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p> '),
                    model: new XY,
                    locationsView: null,
                    searchingView: null,
                    regions: {
                        locations: "#locations-region",
                        searching: "#searching-region"
                    },
                    events: {
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ":el": {
                            classes: {
                                searching: "searching"
                            }
                        },
                        ".instructions": {
                            observe: "instructions",
                            updateMethod: "html"
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".info": {
                            observe: "name",
                            onGet: e => `Tap any location to search for ${e}`
                        },
                        ".leave": {
                            classes: {
                                back: {
                                    observe: "searching",
                                    onGet: e => e
                                }
                            }
                        }
                    },
                    initialize() {
                        this.model.setUpdate({
                            searching: null,
                            isRevealing: !1
                        }), this.locationsView = new EY, this.listenTo(this.model, "change", this.update, this), this.listenTo(this.model, "change:mistakeCheck", this.onMistakeCheck)
                    },
                    update() {
                        const e = this.model.get("locations");
                        this.locationsView.collection.set(e)
                    },
                    onRender() {
                        this.showChildView("locations", this.locationsView), this.stickit()
                    },
                    returnToLocations() {
                        this.$el.scrollTop(0), this.searchingView && (this.searchingView.destroy(), this.searchingView = null), this.model.setUpdate({
                            searching: null,
                            isRevealing: !1
                        })
                    },
                    onMistakeCheck(e) {
                        e.get("isWaiting") && e.get("searching") && (this.model.setUpdate({
                            isWaiting: !1,
                            isRevealing: !0
                        }), this.searchingView.onMistake(), setTimeout((() => {
                            this.returnToLocations()
                        }), 750))
                    },
                    onLeaveClick() {
                        this.model.get("isRevealing") || (this.model.get("searching") ? this.returnToLocations() : this.triggerMethod("client:message", {
                            action: "leaveTask"
                        }))
                    },
                    onChildviewSearchComplete() {
                        this.model.setUpdate({
                            isWaiting: !0
                        }), this.triggerMethod("client:message", {
                            action: "check",
                            locationId: this.model.get("searching")
                        })
                    },
                    onChildviewChildviewButtonSelect(e) {
                        this.model.get("searching") || (this.searchingView = new NY, this.showChildView("searching", this.searchingView), this.model.setUpdate({
                            searching: e.get("id")
                        }), this.searchingView.sceneView.model.set({
                            isMistake: !1
                        }), this.searchingView.model.setUpdate({
                            location: this.model.selectedLocation().name
                        }))
                    }
                }),
                UY = p().View.extend({
                    className: "mechanic text captain",
                    template: o().template('<div class="clamp"> <div class="info"></div> <div class="word"></div> </div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p>'),
                    model: new g.S,
                    events: {
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ".leave": {
                            observe: "canLeave",
                            visible: !0
                        },
                        ".instructions": {
                            observe: "instructions",
                            updateMethod: "html"
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".info": {
                            observe: "participant",
                            updateMethod: "html",
                            onGet: e => e ? `Read <span class="player-name ${e.avatar}">${e.name}</span> this word. Spelling and spaces count!` : ""
                        },
                        ".word": "correctText"
                    },
                    onRender() {
                        this.stickit()
                    },
                    onLeaveClick() {
                        this.triggerMethod("client:message", {
                            action: "leaveTask"
                        })
                    }
                }),
                $Y = p().View.extend({
                    className: "mechanic text participant",
                    template: o().template('<div class="clamp"> <div class="info"></div> <form> <input type="text" name="word" placeholder="ENTER WORD" maxlength="40" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"/> <button type="submit" class="button submit">SUBMIT</button> </form> </div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p>'),
                    model: new g.S,
                    events: {
                        "submit form": "onSubmitClick",
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ".leave": {
                            observe: "canLeave",
                            visible: !0
                        },
                        ".instructions": {
                            observe: "instructions",
                            updateMethod: "html"
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".info": {
                            observe: "captain",
                            updateMethod: "html",
                            onGet: e => e ? `Ask <span class="player-name ${e.avatar}">${e.name}</span> for the word you need.` : ""
                        },
                        "input[name=word]": "word",
                        ".submit": {
                            attributes: [{
                                name: "disabled",
                                observe: "word",
                                onGet: e => "" === e
                            }]
                        }
                    },
                    initialize() {
                        this.listenTo(this.model, "change:mistakeCheck", this.onMistakeCheck), this.listenTo(this.model, "change:stepIndex", this.resetData), this.listenTo(this.model, "change:isPaused", this.isPaused), this.resetData()
                    },
                    resetData() {
                        this.model.setUpdate({
                            isWaiting: !1,
                            word: ""
                        })
                    },
                    onRender() {
                        this.stickit()
                    },
                    onMistakeCheck(e) {
                        e.get("isWaiting") && (this.model.setUpdate({
                            isWaiting: !1
                        }), this.triggerMethod("result", {
                            type: "fail",
                            message: "TRY<br/>AGAIN"
                        }))
                    },
                    isPaused(e, t) {
                        t && document.activeElement.blur()
                    },
                    onSubmitClick(e) {
                        if (e.preventDefault(), this.model.get("isWaiting")) return;
                        this.model.setUpdate({
                            isWaiting: !0
                        });
                        const t = this.model.get("word");
                        this.triggerMethod("client:message", {
                            action: "answer",
                            text: t.trim().toUpperCase()
                        })
                    },
                    onLeaveClick() {
                        this.triggerMethod("client:message", {
                            action: "leaveTask"
                        })
                    }
                }),
                jY = {
                    wo: {
                        point: {
                            x: 1096.98,
                            y: 68.7
                        },
                        connections: [{
                            to: "wm",
                            direction: "n",
                            path: "M1118.28,163.6c-7.64-34.06-14.96-66.68-21.3-94.9",
                            distance: 97.26,
                            isReverse: !1
                        }, {
                            to: "ak",
                            direction: "e",
                            path: "M1096.96 68.7,L952.64 105.64",
                            distance: 148.97,
                            isReverse: !0
                        }, {
                            to: "wn",
                            direction: "w",
                            path: "M1240.14 32.06,L1096.96 68.7",
                            distance: 147.79,
                            isReverse: !1
                        }]
                    },
                    wn: {
                        point: {
                            x: 1240.14,
                            y: 32.06
                        },
                        connections: [{
                            to: "wl",
                            direction: "n",
                            path: "M1261.5 127.24,L1240.14 32.06",
                            distance: 97.55,
                            isReverse: !1
                        }, {
                            to: "wo",
                            direction: "e",
                            path: "M1240.14 32.06,L1096.96 68.7",
                            distance: 147.79,
                            isReverse: !0
                        }]
                    },
                    wm: {
                        point: {
                            x: 1118.28,
                            y: 163.6
                        },
                        connections: [{
                            to: "wo",
                            direction: "s",
                            path: "M1118.28,163.6c-7.64-34.06-14.96-66.68-21.3-94.9",
                            distance: 97.26,
                            isReverse: !0
                        }, {
                            to: "wj",
                            direction: "n",
                            path: "M1139.52,258.22c-7.02-31.26-14.26-63.54-21.24-94.6",
                            distance: 96.96,
                            isReverse: !1
                        }, {
                            to: "wl",
                            direction: "w",
                            path: "M1261.5 127.26,L1118.28 163.6",
                            distance: 147.76,
                            isReverse: !1
                        }, {
                            to: "aj",
                            direction: "e",
                            path: "M1118.28 163.62,L973.86 200.26",
                            distance: 149,
                            isReverse: !0
                        }]
                    },
                    wl: {
                        point: {
                            x: 1261.5,
                            y: 127.24
                        },
                        connections: [{
                            to: "wn",
                            direction: "s",
                            path: "M1261.5 127.24,L1240.14 32.06",
                            distance: 97.55,
                            isReverse: !0
                        }, {
                            to: "wi",
                            direction: "n",
                            path: "M1282.72 221.88,L1261.5 127.24",
                            distance: 96.99,
                            isReverse: !1
                        }, {
                            to: "wk",
                            direction: "w",
                            path: "M1419 87.26,L1261.5 127.26",
                            distance: 162.5,
                            isReverse: !1
                        }, {
                            to: "wm",
                            direction: "e",
                            path: "M1261.5 127.26,L1118.28 163.6",
                            distance: 147.76,
                            isReverse: !0
                        }]
                    },
                    wk: {
                        point: {
                            x: 1419,
                            y: 87.26
                        },
                        connections: [{
                            to: "wh",
                            direction: "n",
                            path: "M1458.02,177.42c-12.72-28.9-26.68-60.98-39-90.16",
                            distance: 98.23,
                            isReverse: !1
                        }, {
                            to: "wl",
                            direction: "e",
                            path: "M1419 87.26,L1261.5 127.26",
                            distance: 162.5,
                            isReverse: !0
                        }]
                    },
                    wh: {
                        point: {
                            x: 1457.86,
                            y: 177.36
                        },
                        connections: [{
                            to: "wk",
                            direction: "s",
                            path: "M1458.02,177.42c-12.72-28.9-26.68-60.98-39-90.16",
                            distance: 98.23,
                            isReverse: !0
                        }, {
                            to: "wi",
                            direction: "e",
                            path: "M1458.18 177.34,L1282.72 221.88",
                            distance: 181.02,
                            isReverse: !0
                        }]
                    },
                    wj: {
                        point: {
                            x: 1139.52,
                            y: 258.22
                        },
                        connections: [{
                            to: "wm",
                            direction: "s",
                            path: "M1139.52,258.22c-7.02-31.26-14.26-63.54-21.24-94.6",
                            distance: 96.96,
                            isReverse: !0
                        }, {
                            to: "wg",
                            direction: "n",
                            path: "M1160.76,352.82c-6.4-28.52-13.7-60.98-21.24-94.6",
                            distance: 96.96,
                            isReverse: !1
                        }, {
                            to: "wi",
                            direction: "w",
                            path: "M1282.72 221.88,L1139.52 258.22",
                            distance: 147.74,
                            isReverse: !1
                        }]
                    },
                    wi: {
                        point: {
                            x: 1282.72,
                            y: 221.88
                        },
                        connections: [{
                            to: "wf",
                            direction: "n",
                            path: "M1304.16,316.44c-11.94-53.02-21.44-94.56-21.44-94.56",
                            distance: 96.96,
                            isReverse: !1
                        }, {
                            to: "wl",
                            direction: "s",
                            path: "M1282.72 221.88,L1261.5 127.24",
                            distance: 96.99,
                            isReverse: !0
                        }, {
                            to: "wj",
                            direction: "e",
                            path: "M1282.72 221.88,L1139.52 258.22",
                            distance: 147.74,
                            isReverse: !0
                        }, {
                            to: "wh",
                            direction: "w",
                            path: "M1458.18 177.34,L1282.72 221.88",
                            distance: 181.02,
                            isReverse: !1
                        }]
                    },
                    wg: {
                        point: {
                            x: 1160.76,
                            y: 352.82
                        },
                        connections: [{
                            to: "wj",
                            direction: "s",
                            path: "M1160.76,352.82c-6.4-28.52-13.7-60.98-21.24-94.6",
                            distance: 96.96,
                            isReverse: !0
                        }, {
                            to: "we",
                            direction: "n",
                            path: "M1183.5,454.28c-0.48-2.38-0.98-4.72-1.5-7.04c-3.36-14.9-11.22-49.86-21.24-94.42",
                            distance: 103.98,
                            isReverse: !1
                        }, {
                            to: "wf",
                            direction: "w",
                            path: "M1304.16 316.44,L1160.76 352.82",
                            distance: 147.94,
                            isReverse: !1
                        }, {
                            to: "ah",
                            direction: "e",
                            path: "M1160.76 352.82,L1016.32 389.48",
                            distance: 149.02,
                            isReverse: !0
                        }]
                    },
                    wf: {
                        point: {
                            x: 1304.16,
                            y: 316.44
                        },
                        connections: [{
                            to: "wi",
                            direction: "s",
                            path: "M1304.16,316.44c-11.94-53.02-21.44-94.56-21.44-94.56",
                            distance: 96.96,
                            isReverse: !0
                        }, {
                            to: "wd",
                            direction: "n",
                            path: "M1330.32,433.76c-8.32-37.88-17.84-80.38-26.16-117.32",
                            distance: 120.2,
                            isReverse: !1
                        }, {
                            to: "wg",
                            direction: "e",
                            path: "M1304.16 316.44,L1160.76 352.82",
                            distance: 147.94,
                            isReverse: !0
                        }]
                    },
                    we: {
                        point: {
                            x: 1183.5,
                            y: 454.28
                        },
                        connections: [{
                            to: "wg",
                            direction: "s",
                            path: "M1183.5,454.28c-0.48-2.38-0.98-4.72-1.5-7.04c-3.36-14.9-11.22-49.86-21.24-94.42",
                            distance: 103.98,
                            isReverse: !0
                        }, {
                            to: "wb",
                            direction: "n",
                            path: "M1192.8,595.3c0,0,2.98-79.76-9.3-141.02",
                            distance: 141.59,
                            isReverse: !1
                        }, {
                            to: "wd",
                            direction: "w",
                            path: "M1330.32,433.76c-50.28,4.9-101.54,12.6-146.82,20.54",
                            distance: 148.29,
                            isReverse: !1
                        }]
                    },
                    wd: {
                        point: {
                            x: 1330.32,
                            y: 433.76
                        },
                        connections: [{
                            to: "wf",
                            direction: "s",
                            path: "M1330.32,433.76c-8.32-37.88-17.84-80.38-26.16-117.32",
                            distance: 120.2,
                            isReverse: !0
                        }, {
                            to: "wa",
                            direction: "n",
                            path: "M1358.54,681.26c2.6-49.36-3.14-142.96-14.54-184.02c-3.7-17.66-8.46-39.66-13.68-63.48",
                            distance: 250.03,
                            isReverse: !1
                        }, {
                            to: "we",
                            direction: "e",
                            path: "M1330.32,433.76c-50.28,4.9-101.54,12.6-146.82,20.54",
                            distance: 148.29,
                            isReverse: !0
                        }]
                    },
                    wb: {
                        point: {
                            x: 1192.8,
                            y: 595.3
                        },
                        connections: [{
                            to: "we",
                            direction: "s",
                            path: "M1192.8,595.3c0,0,2.98-79.76-9.3-141.02",
                            distance: 141.59,
                            isReverse: !0
                        }, {
                            to: "af",
                            direction: "e",
                            path: "M1192.8,595.3c-80.22-27.12-134-16.6-134-16.6",
                            distance: 136.2,
                            isReverse: !0
                        }, {
                            to: "wa",
                            direction: "w",
                            path: "M1358.54,681.26c-23.18-12.4-50.18-29.16-90.54-52.02c-26.82-15.2-52.12-26.14-75.2-33.94",
                            distance: 187.05,
                            isReverse: !1
                        }]
                    },
                    wa: {
                        point: {
                            x: 1358.54,
                            y: 681.26
                        },
                        connections: [{
                            to: "wd",
                            direction: "s",
                            path: "M1358.54,681.26c2.6-49.36-3.14-142.96-14.54-184.02c-3.7-17.66-8.46-39.66-13.68-63.48",
                            distance: 250.03,
                            isReverse: !0
                        }, {
                            to: "wb",
                            direction: "e",
                            path: "M1358.54,681.26c-23.18-12.4-50.18-29.16-90.54-52.02c-26.82-15.2-52.12-26.14-75.2-33.94",
                            distance: 187.05,
                            isReverse: !0
                        }]
                    },
                    ey: {
                        point: {
                            x: 211.94,
                            y: 63.24
                        },
                        connections: [{
                            to: "ev",
                            direction: "n",
                            path: "M219.14,157.24c-1.52-40.42-3.82-74.5-7.22-94",
                            distance: 94.33,
                            isReverse: !1
                        }, {
                            to: "bl",
                            direction: "e",
                            path: "M211.94 63.24,L74.52 63.24",
                            distance: 137.42,
                            isReverse: !0
                        }, {
                            to: "ex",
                            direction: "w",
                            path: "M335.46 63.24,L211.94 63.24",
                            distance: 123.52,
                            isReverse: !1
                        }]
                    },
                    ex: {
                        point: {
                            x: 335.46,
                            y: 63.24
                        },
                        connections: [{
                            to: "ew",
                            direction: "w",
                            path: "M477.46 26.64,L335.46 63.24",
                            distance: 146.64,
                            isReverse: !1
                        }, {
                            to: "eu",
                            direction: "n",
                            path: "M356.46 157.14,L335.46 63.24",
                            distance: 96.22,
                            isReverse: !1
                        }, {
                            to: "ey",
                            direction: "e",
                            path: "M335.46 63.24,L211.94 63.24",
                            distance: 123.52,
                            isReverse: !0
                        }]
                    },
                    ew: {
                        point: {
                            x: 477.46,
                            y: 26.64
                        },
                        connections: [{
                            to: "ex",
                            direction: "e",
                            path: "M477.46 26.64,L335.46 63.24",
                            distance: 146.64,
                            isReverse: !0
                        }, {
                            to: "et",
                            direction: "n",
                            path: "M498.98 120.9,L477.46 26.64",
                            distance: 96.69,
                            isReverse: !1
                        }]
                    },
                    ev: {
                        point: {
                            x: 219.1,
                            y: 157.24
                        },
                        connections: [{
                            to: "eq",
                            direction: "n",
                            path: "M221.36,251.24c-0.42-32.56-1.12-64.92-2.22-94",
                            distance: 94.03,
                            isReverse: !1
                        }, {
                            to: "ey",
                            direction: "s",
                            path: "M219.14,157.24c-1.52-40.42-3.82-74.5-7.22-94",
                            distance: 94.33,
                            isReverse: !0
                        }, {
                            to: "eu",
                            direction: "w",
                            path: "M356 157.24,L219.1 157.24",
                            distance: 136.9,
                            isReverse: !1
                        }]
                    },
                    eu: {
                        point: {
                            x: 356,
                            y: 157.24
                        },
                        connections: [{
                            to: "ev",
                            direction: "e",
                            path: "M356 157.24,L219.1 157.24",
                            distance: 136.9,
                            isReverse: !0
                        }, {
                            to: "et",
                            direction: "w",
                            path: "M498.98 120.9,L356.46 157.14",
                            distance: 147.06,
                            isReverse: !1
                        }, {
                            to: "ep",
                            direction: "n",
                            path: "M377.54 251.34,L356.46 157.14",
                            distance: 96.53,
                            isReverse: !1
                        }, {
                            to: "ex",
                            direction: "s",
                            path: "M356.46 157.14,L335.46 63.24",
                            distance: 96.22,
                            isReverse: !0
                        }]
                    },
                    et: {
                        point: {
                            x: 498.98,
                            y: 120.9
                        },
                        connections: [{
                            to: "eu",
                            direction: "e",
                            path: "M498.98 120.9,L356.46 157.14",
                            distance: 147.06,
                            isReverse: !0
                        }, {
                            to: "es",
                            direction: "w",
                            path: "M644.2 84,L498.98 120.9",
                            distance: 149.83,
                            isReverse: !1
                        }, {
                            to: "ew",
                            direction: "s",
                            path: "M498.98 120.9,L477.46 26.64",
                            distance: 96.69,
                            isReverse: !0
                        }, {
                            to: "eo",
                            direction: "n",
                            path: "M520.5 215.14,L498.98 120.9",
                            distance: 96.67,
                            isReverse: !1
                        }]
                    },
                    es: {
                        point: {
                            x: 644.2,
                            y: 84
                        },
                        connections: [{
                            to: "et",
                            direction: "e",
                            path: "M644.2 84,L498.98 120.9",
                            distance: 149.83,
                            isReverse: !0
                        }, {
                            to: "er",
                            direction: "w",
                            path: "M787.82 47.52,L644.2 84",
                            distance: 148.18,
                            isReverse: !1
                        }, {
                            to: "en",
                            direction: "n",
                            path: "M665.78 178.44,L644.2 84",
                            distance: 96.87,
                            isReverse: !1
                        }]
                    },
                    er: {
                        point: {
                            x: 787.82,
                            y: 47.52
                        },
                        connections: [{
                            to: "es",
                            direction: "e",
                            path: "M787.82 47.52,L644.2 84",
                            distance: 148.18,
                            isReverse: !0
                        }, {
                            to: "al",
                            direction: "w",
                            path: "M931.42 11.02,L787.82 47.52",
                            distance: 148.17,
                            isReverse: !1
                        }, {
                            to: "em",
                            direction: "n",
                            path: "M808.82 142.08,L787.82 47.52",
                            distance: 96.86,
                            isReverse: !1
                        }]
                    },
                    eq: {
                        point: {
                            x: 221.28,
                            y: 251.24
                        },
                        connections: [{
                            to: "el",
                            direction: "n",
                            path: "M221.96,347.24c0-30.08-0.16-63.14-0.6-96",
                            distance: 96,
                            isReverse: !1
                        }, {
                            to: "ev",
                            direction: "s",
                            path: "M221.36,251.24c-0.42-32.56-1.12-64.92-2.22-94",
                            distance: 94.03,
                            isReverse: !0
                        }, {
                            to: "bj",
                            direction: "e",
                            path: "M221.28 251.24,L80 251.24",
                            distance: 141.28,
                            isReverse: !0
                        }, {
                            to: "ep",
                            direction: "w",
                            path: "M378 251.24,L221.28 251.24",
                            distance: 156.72,
                            isReverse: !1
                        }]
                    },
                    ep: {
                        point: {
                            x: 378,
                            y: 251.24
                        },
                        connections: [{
                            to: "eq",
                            direction: "e",
                            path: "M378 251.24,L221.28 251.24",
                            distance: 156.72,
                            isReverse: !0
                        }, {
                            to: "eo",
                            direction: "w",
                            path: "M520.5 215.14,L378 251.24",
                            distance: 147,
                            isReverse: !1
                        }, {
                            to: "ek",
                            direction: "n",
                            path: "M398.96 347.02,L377.54 251.34",
                            distance: 98.05,
                            isReverse: !1
                        }, {
                            to: "eu",
                            direction: "s",
                            path: "M377.54 251.34,L356.46 157.14",
                            distance: 96.53,
                            isReverse: !0
                        }]
                    },
                    eo: {
                        point: {
                            x: 520.5,
                            y: 215.14
                        },
                        connections: [{
                            to: "ep",
                            direction: "e",
                            path: "M520.5 215.14,L378 251.24",
                            distance: 147,
                            isReverse: !0
                        }, {
                            to: "en",
                            direction: "w",
                            path: "M665.76 178.34,L520.5 215.14",
                            distance: 149.85,
                            isReverse: !1
                        }, {
                            to: "et",
                            direction: "s",
                            path: "M520.5 215.14,L498.98 120.9",
                            distance: 96.67,
                            isReverse: !0
                        }, {
                            to: "ej",
                            direction: "n",
                            path: "M542 309.24,L520.5 215.14",
                            distance: 96.52,
                            isReverse: !1
                        }]
                    },
                    en: {
                        point: {
                            x: 665.76,
                            y: 178.34
                        },
                        connections: [{
                            to: "eo",
                            direction: "e",
                            path: "M665.76 178.34,L520.5 215.14",
                            distance: 149.85,
                            isReverse: !0
                        }, {
                            to: "em",
                            direction: "w",
                            path: "M808.82 142.08,L665.76 178.34",
                            distance: 147.58,
                            isReverse: !1
                        }, {
                            to: "es",
                            direction: "s",
                            path: "M665.78 178.44,L644.2 84",
                            distance: 96.87,
                            isReverse: !0
                        }]
                    },
                    em: {
                        point: {
                            x: 808.82,
                            y: 142.08
                        },
                        connections: [{
                            to: "en",
                            direction: "e",
                            path: "M808.82 142.08,L665.76 178.34",
                            distance: 147.58,
                            isReverse: !0
                        }, {
                            to: "ak",
                            direction: "w",
                            path: "M952.64 105.64,L808.82 142.08",
                            distance: 148.36,
                            isReverse: !1
                        }, {
                            to: "er",
                            direction: "s",
                            path: "M808.82 142.08,L787.82 47.52",
                            distance: 96.86,
                            isReverse: !0
                        }]
                    },
                    el: {
                        point: {
                            x: 221.96,
                            y: 347.12
                        },
                        connections: [{
                            to: "eq",
                            direction: "s",
                            path: "M221.96,347.24c0-30.08-0.16-63.14-0.6-96",
                            distance: 96,
                            isReverse: !0
                        }, {
                            to: "ei",
                            direction: "n",
                            path: "M221.22,469.24c0,0,0.76-53.26,0.74-122",
                            distance: 122,
                            isReverse: !1
                        }, {
                            to: "ek",
                            direction: "w",
                            path: "M398.96 347.02,L221.96 347.12",
                            distance: 177,
                            isReverse: !1
                        }]
                    },
                    ek: {
                        point: {
                            x: 398.96,
                            y: 347.02
                        },
                        connections: [{
                            to: "ej",
                            direction: "w",
                            path: "M542 309.24,L398.96 347.02",
                            distance: 147.95,
                            isReverse: !1
                        }, {
                            to: "eg",
                            direction: "n",
                            path: "M420.04 441.22,L398.96 347.02",
                            distance: 96.53,
                            isReverse: !1
                        }, {
                            to: "ep",
                            direction: "s",
                            path: "M398.96 347.02,L377.54 251.34",
                            distance: 98.05,
                            isReverse: !0
                        }, {
                            to: "el",
                            direction: "e",
                            path: "M398.96 347.02,L221.96 347.12",
                            distance: 177,
                            isReverse: !0
                        }]
                    },
                    ej: {
                        point: {
                            x: 542,
                            y: 309.24
                        },
                        connections: [{
                            to: "ef",
                            direction: "n",
                            path: "M563.88 405.28,L542 309.24",
                            distance: 98.5,
                            isReverse: !1
                        }, {
                            to: "ek",
                            direction: "e",
                            path: "M542 309.24,L398.96 347.02",
                            distance: 147.95,
                            isReverse: !0
                        }, {
                            to: "eo",
                            direction: "s",
                            path: "M542 309.24,L520.5 215.14",
                            distance: 96.52,
                            isReverse: !0
                        }]
                    },
                    ei: {
                        point: {
                            x: 221.22,
                            y: 469.24
                        },
                        connections: [{
                            to: "eh",
                            direction: "w",
                            path: "M307.78,467.44c-9.72,1.2-19.52,1.8-29.32,1.8h-57.24",
                            distance: 86.63,
                            isReverse: !1
                        }, {
                            to: "el",
                            direction: "s",
                            path: "M221.22,469.24c0,0,0.76-53.26,0.74-122",
                            distance: 122,
                            isReverse: !0
                        }, {
                            to: "bh",
                            direction: "e",
                            path: "M221.22 469.24,L82.54 469.24",
                            distance: 138.68,
                            isReverse: !0
                        }]
                    },
                    eh: {
                        point: {
                            x: 307.78,
                            y: 467.44
                        },
                        connections: [{
                            to: "ei",
                            direction: "e",
                            path: "M307.78,467.44c-9.72,1.2-19.52,1.8-29.32,1.8h-57.24",
                            distance: 86.63,
                            isReverse: !0
                        }, {
                            to: "ec",
                            direction: "n",
                            newDirection: "w",
                            path: "M454.02,593.12c-22.98,4.96-43.92,9.9-61.88,14.38c-35.14,8.72-69.96-15.38-74.1-51.34l-10.24-88.72",
                            distance: 254.85,
                            isReverse: !1
                        }, {
                            to: "eg",
                            direction: "w",
                            path: "M420.04,441.22l-83.36,20.84c-9.52,2.38-19.16,4.18-28.88,5.36",
                            distance: 115.32,
                            isReverse: !1
                        }]
                    },
                    eg: {
                        point: {
                            x: 420.04,
                            y: 441.22
                        },
                        connections: [{
                            to: "eh",
                            direction: "e",
                            path: "M420.04,441.22l-83.36,20.84c-9.52,2.38-19.16,4.18-28.88,5.36",
                            distance: 115.32,
                            isReverse: !0
                        }, {
                            to: "ef",
                            direction: "w",
                            path: "M563.86 405.26,L420.04 441.22",
                            distance: 148.25,
                            isReverse: !1
                        }, {
                            to: "ec",
                            direction: "n",
                            path: "M454.02 593.12,L420.04 441.22",
                            distance: 155.65,
                            isReverse: !1
                        }, {
                            to: "ek",
                            direction: "s",
                            path: "M420.04 441.22,L398.96 347.02",
                            distance: 96.53,
                            isReverse: !0
                        }]
                    },
                    ef: {
                        point: {
                            x: 563.86,
                            y: 405.26
                        },
                        connections: [{
                            to: "eg",
                            direction: "e",
                            path: "M563.86 405.26,L420.04 441.22",
                            distance: 148.25,
                            isReverse: !0
                        }, {
                            to: "ee",
                            direction: "w",
                            path: "M707.26 369.4,L563.86 405.26",
                            distance: 147.82,
                            isReverse: !1
                        }, {
                            to: "ej",
                            direction: "s",
                            path: "M563.88 405.28,L542 309.24",
                            distance: 98.5,
                            isReverse: !0
                        }, {
                            to: "eb",
                            direction: "n",
                            path: "M600.32 567.76,L563.88 405.28",
                            distance: 166.52,
                            isReverse: !1
                        }]
                    },
                    ee: {
                        point: {
                            x: 707.26,
                            y: 369.4
                        },
                        connections: [{
                            to: "aj",
                            direction: "s",
                            newDirection: "w",
                            path: "M973.88,200.26L738.64,259.9c-29.32,7.44-47.44,36.82-40.92,66.36l9.54,43.14",
                            distance: 373.1,
                            isReverse: !1
                        }, {
                            to: "ed",
                            direction: "n",
                            newDirection: "w",
                            path: "M872.58,426.26l-88.52,22.64c-30.66,7.84-61.72-11.26-68.56-42.16l-8.26-37.32",
                            distance: 219.41,
                            isReverse: !1
                        }, {
                            to: "ef",
                            direction: "e",
                            path: "M707.26 369.4,L563.86 405.26",
                            distance: 147.82,
                            isReverse: !0
                        }]
                    },
                    ed: {
                        point: {
                            x: 872.58,
                            y: 426.26
                        },
                        connections: [{
                            to: "ee",
                            direction: "e",
                            newDirection: "s",
                            path: "M872.58,426.26l-88.52,22.64c-30.66,7.84-61.72-11.26-68.56-42.16l-8.26-37.32",
                            distance: 219.41,
                            isReverse: !0
                        }, {
                            to: "ah",
                            direction: "w",
                            path: "M1016.32 389.48,L872.58 426.26",
                            distance: 148.37,
                            isReverse: !1
                        }, {
                            to: "ea",
                            direction: "n",
                            path: "M911.94 601.7,L872.58 426.26",
                            distance: 179.8,
                            isReverse: !1
                        }]
                    },
                    ec: {
                        point: {
                            x: 454.02,
                            y: 593.12
                        },
                        connections: [{
                            to: "eh",
                            direction: "e",
                            newDirection: "s",
                            path: "M454.02,593.12c-22.98,4.96-43.92,9.9-61.88,14.38c-35.14,8.72-69.96-15.38-74.1-51.34l-10.24-88.72",
                            distance: 254.85,
                            isReverse: !0
                        }, {
                            to: "eb",
                            direction: "w",
                            path: "M600.32,567.76c-52.04,6.5-102.84,15.98-146.3,25.36",
                            distance: 148.53,
                            isReverse: !1
                        }, {
                            to: "eg",
                            direction: "s",
                            path: "M454.02 593.12,L420.04 441.22",
                            distance: 155.65,
                            isReverse: !0
                        }]
                    },
                    eb: {
                        point: {
                            x: 600.32,
                            y: 567.76
                        },
                        connections: [{
                            to: "ec",
                            direction: "e",
                            path: "M600.32,567.76c-52.04,6.5-102.84,15.98-146.3,25.36",
                            distance: 148.53,
                            isReverse: !0
                        }, {
                            to: "ea",
                            direction: "w",
                            path: "M911.94,601.7c-11.48-2.76-22.64-7.02-33.2-12.74c-65.16-35.32-174.28-34.22-278.42-21.2",
                            distance: 318.74,
                            isReverse: !1
                        }, {
                            to: "ef",
                            direction: "s",
                            path: "M600.32 567.76,L563.88 405.28",
                            distance: 166.52,
                            isReverse: !0
                        }]
                    },
                    ea: {
                        point: {
                            x: 911.94,
                            y: 601.7
                        },
                        connections: [{
                            to: "eb",
                            direction: "e",
                            path: "M911.94,601.7c-11.48-2.76-22.64-7.02-33.2-12.74c-65.16-35.32-174.28-34.22-278.42-21.2",
                            distance: 318.74,
                            isReverse: !0
                        }, {
                            to: "af",
                            direction: "w",
                            path: "M1058.78,578.7l-75.76,21.5c-23.36,6.64-47.86,7.1-71.08,1.48",
                            distance: 150.64,
                            isReverse: !1
                        }, {
                            to: "ae",
                            direction: "n",
                            newDirection: "w",
                            path: "M1069,664.14c-67,21.3-73,39.1-103,73.1s-94,8-94-26s36-58,39.94-109.54",
                            distance: 366.03,
                            isReverse: !1
                        }, {
                            to: "ed",
                            direction: "s",
                            path: "M911.94 601.7,L872.58 426.26",
                            distance: 179.8,
                            isReverse: !0
                        }]
                    },
                    n3: {
                        point: {
                            x: 656,
                            y: 955.24
                        },
                        connections: [{
                            to: "nz",
                            direction: "e",
                            newDirection: "n",
                            path: "M511.22,1051.56c0,0-25.22-78.32-1.22-96.32s112-4,146,0",
                            distance: 248.34,
                            isReverse: !1
                        }]
                    },
                    n2: {
                        point: {
                            x: 1202,
                            y: 839.24
                        },
                        connections: [{
                            to: "ca",
                            direction: "n",
                            path: "M1233.42,976.82c0,0,20.58-81.58-31.42-137.58",
                            distance: 146.56,
                            isReverse: !1
                        }]
                    },
                    n1: {
                        point: {
                            x: 306,
                            y: 1107.24
                        },
                        connections: [{
                            to: "nv",
                            direction: "n",
                            path: "M298.9,1214.76c-8.06-25.04-6.9-71.52,7.1-107.52",
                            distance: 109.43,
                            isReverse: !1
                        }]
                    },
                    n0: {
                        point: {
                            x: 408.4,
                            y: 1050.02
                        },
                        connections: [{
                            to: "nw",
                            direction: "e",
                            newDirection: "n",
                            path: "M185.96,1205.3c-1.88-5.3-9.48-23.66-11.4-27.78c-24.58-52.38-8.56-118.28,19.44-128.28s214.4,0.78,214.4,0.78",
                            distance: 385.59,
                            isReverse: !1
                        }, {
                            to: "cc",
                            direction: "s",
                            path: "M408.4,1050.02c-0.24-106.66-0.4-180.86-0.4-180.86",
                            distance: 180.86,
                            isReverse: !0
                        }, {
                            to: "nu",
                            direction: "n",
                            path: "M408.76,1215.08c-0.12-59.24-0.26-115.64-0.36-165.06",
                            distance: 165.06,
                            isReverse: !1
                        }, {
                            to: "nz",
                            direction: "w",
                            path: "M511.22,1051.56c-44-1.38-85.32-2.24-102.82-1.54",
                            distance: 102.84,
                            isReverse: !1
                        }]
                    },
                    nz: {
                        point: {
                            x: 511.22,
                            y: 1051.56
                        },
                        connections: [{
                            to: "ny",
                            direction: "w",
                            path: "M894.96,1058.5c-13.66,0-23.44,8.14-42.58,8.04c-27.04-0.12-209.16-10.82-341.16-14.98",
                            distance: 385.03,
                            isReverse: !1
                        }, {
                            to: "n0",
                            direction: "e",
                            path: "M511.22,1051.56c-44-1.38-85.32-2.24-102.82-1.54",
                            distance: 102.84,
                            isReverse: !0
                        }, {
                            to: "n3",
                            direction: "s",
                            newDirection: "e",
                            path: "M511.22,1051.56c0,0-25.22-78.32-1.22-96.32s112-4,146,0",
                            distance: 248.34,
                            isReverse: !0
                        }, {
                            to: "nt",
                            direction: "n",
                            path: "M555.98,1202.58c2-63.46-44.76-151.02-44.76-151.02",
                            distance: 158.93,
                            isReverse: !1
                        }]
                    },
                    ny: {
                        point: {
                            x: 894.96,
                            y: 1058.5
                        },
                        connections: [{
                            to: "nr",
                            direction: "n",
                            path: "M893.76,1205.24c-0.16-55.38,0.18-106.36,1.2-146.74",
                            distance: 146.75,
                            isReverse: !1
                        }, {
                            to: "cb",
                            direction: "s",
                            path: "M894.96,1058.5c0.98-38.46,3.48-69.82,5.92-83.78",
                            distance: 84.04,
                            isReverse: !0
                        }, {
                            to: "nz",
                            direction: "e",
                            path: "M894.96,1058.5c-13.66,0-23.44,8.14-42.58,8.04c-27.04-0.12-209.16-10.82-341.16-14.98",
                            distance: 385.03,
                            isReverse: !0
                        }]
                    },
                    nx: {
                        point: {
                            x: 1220,
                            y: 1085.24
                        },
                        connections: [{
                            to: "nq",
                            direction: "n",
                            path: "M1269.1,1241.18c0,0,2.9-109.94-49.1-155.94",
                            distance: 167.85,
                            isReverse: !1
                        }]
                    },
                    nw: {
                        point: {
                            x: 185.96,
                            y: 1205.3
                        },
                        connections: [{
                            to: "np",
                            direction: "n",
                            newDirection: "w",
                            path: "M409.02,1334c-67,0-98.92,14.6-150.92,6.6c-46.5-7.16-56.3-90.56-72.16-135.3",
                            distance: 312,
                            isReverse: !1
                        }, {
                            to: "n0",
                            direction: "s",
                            newDirection: "w",
                            path: "M185.96,1205.3c-1.88-5.3-9.48-23.66-11.4-27.78c-24.58-52.38-8.56-118.28,19.44-128.28s214.4,0.78,214.4,0.78",
                            distance: 385.59,
                            isReverse: !0
                        }, {
                            to: "nv",
                            direction: "w",
                            path: "M298.9,1214.76c-44.68-0.96-89.88-3.44-112.96-9.44",
                            distance: 113.53,
                            isReverse: !1
                        }]
                    },
                    nv: {
                        point: {
                            x: 298.9,
                            y: 1214.76
                        },
                        connections: [{
                            to: "nw",
                            direction: "e",
                            path: "M298.9,1214.76c-44.68-0.96-89.88-3.44-112.96-9.44",
                            distance: 113.53,
                            isReverse: !0
                        }, {
                            to: "nu",
                            direction: "w",
                            path: "M408.76,1215.08c-21,0.08-65.16,0.64-109.86-0.34",
                            distance: 109.86,
                            isReverse: !1
                        }, {
                            to: "n1",
                            direction: "s",
                            newDirection: "n",
                            path: "M298.9,1214.76c-8.06-25.04-6.9-71.52,7.1-107.52",
                            distance: 109.43,
                            isReverse: !0
                        }]
                    },
                    nu: {
                        point: {
                            x: 408.76,
                            y: 1215.08
                        },
                        connections: [{
                            to: "np",
                            direction: "n",
                            path: "M409.02,1334c-0.08-40.08-0.18-80.1-0.26-118.9",
                            distance: 118.9,
                            isReverse: !1
                        }, {
                            to: "n0",
                            direction: "s",
                            path: "M408.76,1215.08c-0.12-59.24-0.26-115.64-0.36-165.06",
                            distance: 165.06,
                            isReverse: !0
                        }, {
                            to: "nv",
                            direction: "e",
                            path: "M408.76,1215.08c-21,0.08-65.16,0.64-109.86-0.34",
                            distance: 109.86,
                            isReverse: !0
                        }, {
                            to: "nt",
                            direction: "w",
                            path: "M555.98,1202.58c-48.24-0.48-96.96,2.26-147.22,12.5",
                            distance: 148.03,
                            isReverse: !1
                        }]
                    },
                    nt: {
                        point: {
                            x: 555.98,
                            y: 1202.58
                        },
                        connections: [{
                            to: "nz",
                            direction: "s",
                            path: "M555.98,1202.58c2-63.46-44.76-151.02-44.76-151.02",
                            distance: 158.93,
                            isReverse: !0
                        }, {
                            to: "nu",
                            direction: "e",
                            path: "M555.98,1202.58c-48.24-0.48-96.96,2.26-147.22,12.5",
                            distance: 148.03,
                            isReverse: !0
                        }, {
                            to: "home",
                            direction: "w",
                            path: "M740,1211.36c-61.96-2.28-122.58-8.16-184.02-8.78",
                            distance: 184.25,
                            isReverse: !1
                        }]
                    },
                    home: {
                        point: {
                            x: 740,
                            y: 1211.36
                        },
                        connections: [{
                            to: "nt",
                            direction: "e",
                            path: "M740,1211.36c-61.96-2.28-122.58-8.16-184.02-8.78",
                            distance: 184.25,
                            isReverse: !0
                        }, {
                            to: "nr",
                            direction: "w",
                            path: "M894,1205.24c-52.98,7.48-103.92,7.96-154,6.12",
                            distance: 154.33,
                            isReverse: !1
                        }]
                    },
                    nr: {
                        point: {
                            x: 893.76,
                            y: 1205.24
                        },
                        connections: [{
                            to: "ny",
                            direction: "s",
                            path: "M893.76,1205.24c-0.16-55.38,0.18-106.36,1.2-146.74",
                            distance: 146.75,
                            isReverse: !0
                        }, {
                            to: "ng",
                            direction: "n",
                            path: "M896.68,1449.22c-1.52-78.54-2.7-165.66-2.92-243.98",
                            distance: 244,
                            isReverse: !1
                        }, {
                            to: "home",
                            direction: "e",
                            path: "M894,1205.24c-52.98,7.48-103.92,7.96-154,6.12",
                            distance: 154.33,
                            isReverse: !0
                        }]
                    },
                    nq: {
                        point: {
                            x: 1269.1,
                            y: 1241.18
                        },
                        connections: [{
                            to: "nf",
                            direction: "n",
                            path: "M1223,1480.74c24-31,47-65.5,47-111.5c0-29.74-0.9-128.06-0.9-128.06",
                            distance: 251.53,
                            isReverse: !1
                        }, {
                            to: "ac",
                            direction: "e",
                            path: "M1269.1,1241.18c-40.06-13.02-80.1-26.02-119.1-26.1c-16-0.02-44.2-1.14-81-2.68",
                            distance: 203.49,
                            isReverse: !0
                        }, {
                            to: "bb",
                            direction: "w",
                            path: "M1406.42,1266.34c-44.78,4.88-91.08-10.14-137.32-25.16",
                            distance: 140.69,
                            isReverse: !1
                        }, {
                            to: "nx",
                            direction: "s",
                            newDirection: "n",
                            path: "M1269.1,1241.18c0,0,2.9-109.94-49.1-155.94",
                            distance: 167.85,
                            isReverse: !0
                        }]
                    },
                    np: {
                        point: {
                            x: 409.02,
                            y: 1334
                        },
                        connections: [{
                            to: "nu",
                            direction: "s",
                            path: "M409.02,1334c-0.08-40.08-0.18-80.1-0.26-118.9",
                            distance: 118.9,
                            isReverse: !0
                        }, {
                            to: "nw",
                            direction: "e",
                            newDirection: "s",
                            path: "M409.02,1334c-67,0-98.92,14.6-150.92,6.6c-46.5-7.16-56.3-90.56-72.16-135.3",
                            distance: 312,
                            isReverse: !0
                        }, {
                            to: "nj",
                            direction: "n",
                            path: "M409.36,1489.26c-0.1-50.12-0.22-102.74-0.34-155.26",
                            distance: 155.26,
                            isReverse: !1
                        }, {
                            to: "no",
                            direction: "w",
                            path: "M491.98,1334c-45.38,0-82.96,0-82.96,0",
                            distance: 82.96,
                            isReverse: !1
                        }]
                    },
                    no: {
                        point: {
                            x: 491.98,
                            y: 1334
                        },
                        connections: [{
                            to: "ne",
                            direction: "n",
                            newDirection: "w",
                            path: "M656.84,1571.8c-69.3,0-139.9-7.06-158.08-69.02c-15.32-52.16-9-146.32-6.76-168.78",
                            distance: 355.79,
                            isReverse: !1
                        }, {
                            to: "np",
                            direction: "e",
                            path: "M491.98,1334c-45.38,0-82.96,0-82.96,0",
                            distance: 82.96,
                            isReverse: !0
                        }, {
                            to: "nn",
                            direction: "w",
                            path: "M656.84,1334c-23.04,0-102.28,0-164.84,0",
                            distance: 164.84,
                            isReverse: !1
                        }]
                    },
                    nn: {
                        point: {
                            x: 656.84,
                            y: 1334
                        },
                        connections: [{
                            to: "no",
                            direction: "e",
                            path: "M656.84,1334c-23.04,0-102.28,0-164.84,0",
                            distance: 164.84,
                            isReverse: !0
                        }, {
                            to: "ni",
                            direction: "w",
                            newDirection: "n",
                            path: "M739.12,1452.9c0,0,0-118.9-82.28-118.9",
                            distance: 161.03,
                            isReverse: !1
                        }, {
                            to: "ne",
                            direction: "n",
                            path: "M656.84 1571.8,L656.84 1334",
                            distance: 237.8,
                            isReverse: !1
                        }]
                    },
                    nm: {
                        point: {
                            x: 810,
                            y: 1315.24
                        },
                        connections: [{
                            to: "nh",
                            direction: "n",
                            path: "M822,1448.46c0,0,4-99.22-12-133.22",
                            distance: 134.54,
                            isReverse: !1
                        }]
                    },
                    nl: {
                        point: {
                            x: 1158,
                            y: 1329.24
                        },
                        connections: [{
                            to: "nf",
                            direction: "n",
                            newDirection: "w",
                            path: "M1223,1480.74c-102,2-77-87.5-65-151.5",
                            distance: 202.65,
                            isReverse: !1
                        }]
                    },
                    nk: {
                        point: {
                            x: 313.3,
                            y: 1407.24
                        },
                        connections: [{
                            to: "nj",
                            direction: "n",
                            newDirection: "w",
                            path: "M409.36,1489.26c0,0-91.58-8.44-96.06-82.02",
                            distance: 137.7,
                            isReverse: !1
                        }]
                    },
                    nj: {
                        point: {
                            x: 409.36,
                            y: 1489.26
                        },
                        connections: [{
                            to: "bf",
                            direction: "n",
                            path: "M409.68,1642.76c-0.1-45.74-0.2-98.08-0.32-153.5",
                            distance: 153.5,
                            isReverse: !1
                        }, {
                            to: "np",
                            direction: "s",
                            path: "M409.36,1489.26c-0.1-50.12-0.22-102.74-0.34-155.26",
                            distance: 155.26,
                            isReverse: !0
                        }, {
                            to: "nk",
                            direction: "e",
                            newDirection: "n",
                            path: "M409.36,1489.26c0,0-91.58-8.44-96.06-82.02",
                            distance: 137.7,
                            isReverse: !0
                        }]
                    },
                    ni: {
                        point: {
                            x: 739.12,
                            y: 1452.9
                        },
                        connections: [{
                            to: "nh",
                            direction: "w",
                            path: "M822,1448.46c-51.28,0.9-82.9,4.44-82.9,4.44",
                            distance: 83.04,
                            isReverse: !1
                        }, {
                            to: "nn",
                            direction: "s",
                            newDirection: "e",
                            path: "M739.12,1452.9c0,0,0-118.9-82.28-118.9",
                            distance: 161.03,
                            isReverse: !0
                        }, {
                            to: "bd",
                            direction: "n",
                            path: "M739.12,1687.8c0-117.64-0.02-234.9-0.02-234.9",
                            distance: 234.9,
                            isReverse: !1
                        }]
                    },
                    nh: {
                        point: {
                            x: 822,
                            y: 1448.46
                        },
                        connections: [{
                            to: "ni",
                            direction: "e",
                            path: "M822,1448.46c-51.28,0.9-82.9,4.44-82.9,4.44",
                            distance: 83.04,
                            isReverse: !0
                        }, {
                            to: "nm",
                            direction: "s",
                            newDirection: "n",
                            path: "M822,1448.46c0,0,4-99.22-12-133.22",
                            distance: 134.54,
                            isReverse: !0
                        }, {
                            to: "ng",
                            direction: "w",
                            path: "M896.68,1449.22c-27.8-1.04-53-1.14-74.68-0.78",
                            distance: 74.69,
                            isReverse: !1
                        }]
                    },
                    ng: {
                        point: {
                            x: 896.68,
                            y: 1449.22
                        },
                        connections: [{
                            to: "nc",
                            direction: "n",
                            path: "M899.5,1571.2c-0.96-35.78-1.94-77.5-2.8-121.98",
                            distance: 122.01,
                            isReverse: !1
                        }, {
                            to: "nr",
                            direction: "s",
                            path: "M896.68,1449.22c-1.52-78.54-2.7-165.66-2.92-243.98",
                            distance: 244,
                            isReverse: !0
                        }, {
                            to: "nh",
                            direction: "e",
                            path: "M896.68,1449.22c-27.8-1.04-53-1.14-74.68-0.78",
                            distance: 74.69,
                            isReverse: !0
                        }]
                    },
                    nf: {
                        point: {
                            x: 1223,
                            y: 1480.74
                        },
                        connections: [{
                            to: "nq",
                            direction: "s",
                            path: "M1223,1480.74c24-31,47-65.5,47-111.5c0-29.74-0.9-128.06-0.9-128.06",
                            distance: 251.53,
                            isReverse: !0
                        }, {
                            to: "nl",
                            direction: "e",
                            newDirection: "n",
                            path: "M1223,1480.74c-102,2-77-87.5-65-151.5",
                            distance: 202.65,
                            isReverse: !0
                        }, {
                            to: "na",
                            direction: "n",
                            newDirection: "s",
                            path: "M1170,1571.24c4-32,29-59.5,53-90.5",
                            distance: 106.19,
                            isReverse: !1
                        }]
                    },
                    ne: {
                        point: {
                            x: 656.84,
                            y: 1571.8
                        },
                        connections: [{
                            to: "no",
                            direction: "e",
                            newDirection: "s",
                            path: "M656.84,1571.8c-69.3,0-139.9-7.06-158.08-69.02c-15.32-52.16-9-146.32-6.76-168.78",
                            distance: 355.79,
                            isReverse: !0
                        }, {
                            to: "nn",
                            direction: "s",
                            path: "M656.84 1571.8,L656.84 1334",
                            distance: 237.8,
                            isReverse: !0
                        }, {
                            to: "be",
                            direction: "n",
                            path: "M656.84 1690.7,L656.84 1571.8",
                            distance: 118.9,
                            isReverse: !1
                        }]
                    },
                    nd: {
                        point: {
                            x: 796,
                            y: 1551.24
                        },
                        connections: [{
                            to: "nc",
                            direction: "w",
                            path: "M899.5,1571.2c-24,0-81.5,2.04-103.5-19.96",
                            distance: 107.67,
                            isReverse: !1
                        }]
                    },
                    nc: {
                        point: {
                            x: 899.5,
                            y: 1571.2
                        },
                        connections: [{
                            to: "ng",
                            direction: "s",
                            path: "M899.5,1571.2c-0.96-35.78-1.94-77.5-2.8-121.98",
                            distance: 122.01,
                            isReverse: !0
                        }, {
                            to: "bc",
                            direction: "n",
                            path: "M904,1687.98c-1.06-8.5-2.78-53.32-4.5-116.78",
                            distance: 116.88,
                            isReverse: !1
                        }, {
                            to: "nd",
                            direction: "e",
                            newDirection: "w",
                            path: "M899.5,1571.2c-24,0-81.5,2.04-103.5-19.96",
                            distance: 107.67,
                            isReverse: !0
                        }, {
                            to: "nb",
                            direction: "w",
                            newDirection: "e",
                            path: "M1006,1571.24c-24-12-72.82-0.04-106.5-0.04",
                            distance: 107.44,
                            isReverse: !1
                        }]
                    },
                    nb: {
                        point: {
                            x: 1006,
                            y: 1571.24
                        },
                        connections: [{
                            to: "nc",
                            direction: "e",
                            path: "M1006,1571.24c-24-12-72.82-0.04-106.5-0.04",
                            distance: 107.44,
                            isReverse: !0
                        }]
                    },
                    na: {
                        point: {
                            x: 1170,
                            y: 1571.24
                        },
                        connections: [{
                            to: "nf",
                            direction: "s",
                            path: "M1170,1571.24c4-32,29-59.5,53-90.5",
                            distance: 106.19,
                            isReverse: !0
                        }]
                    },
                    lk: {
                        point: {
                            x: 76,
                            y: 1597.12
                        },
                        connections: [{
                            to: "lj",
                            direction: "n",
                            path: "M55.26,1771.3c0,0,24.74-126.28,20.74-174.16",
                            distance: 175.73,
                            isReverse: !1
                        }, {
                            to: "li",
                            direction: "w",
                            path: "M410,1809.62c0,0-60,5.62-132-50.38c-55.4-43.08-107.24-120.5-202-162.12",
                            distance: 404.52,
                            isReverse: !1
                        }]
                    },
                    lj: {
                        point: {
                            x: 55.28,
                            y: 1771.28
                        },
                        connections: [{
                            to: "lk",
                            direction: "s",
                            path: "M55.26,1771.3c0,0,24.74-126.28,20.74-174.16",
                            distance: 175.73,
                            isReverse: !0
                        }, {
                            to: "lm",
                            direction: "w",
                            newDirection: "n",
                            path: "M282.61,1972.22c0-39.63-102.13-170.18-227.33-200.94",
                            distance: 315.28,
                            isReverse: !1
                        }]
                    },
                    li: {
                        point: {
                            x: 410,
                            y: 1809.62
                        },
                        connections: [{
                            to: "bf",
                            direction: "s",
                            path: "M410,1809.62c0-10.2-0.12-75.28-0.32-166.86",
                            distance: 166.86,
                            isReverse: !0
                        }, {
                            to: "lh",
                            direction: "w",
                            path: "M610,1810.86c-24.8-0.48-71.66-1.24-117.72-1.24c-67,0-82.28,0-82.28,0",
                            distance: 200.01,
                            isReverse: !1
                        }, {
                            to: "lk",
                            direction: "e",
                            path: "M410,1809.62c0,0-60,5.62-132-50.38c-55.4-43.08-107.24-120.5-202-162.12",
                            distance: 404.52,
                            isReverse: !0
                        }, {
                            to: "lc",
                            direction: "n",
                            path: "M497.92,2179.26c-12-130-87.92-237.64-87.92-369.64",
                            distance: 381.5,
                            isReverse: !1
                        }]
                    },
                    lh: {
                        point: {
                            x: 610,
                            y: 1810.86
                        },
                        connections: [{
                            to: "lb",
                            direction: "n",
                            path: "M574.02,2180.18c0,0-6-279.32,36-369.32",
                            distance: 372.97,
                            isReverse: !1
                        }, {
                            to: "li",
                            direction: "e",
                            path: "M610,1810.86c-24.8-0.48-71.66-1.24-117.72-1.24c-67,0-82.28,0-82.28,0",
                            distance: 200.01,
                            isReverse: !0
                        }, {
                            to: "lg",
                            direction: "w",
                            path: "M739.12,1809.62L628,1811.24c0,0-6.72-0.16-18-0.38",
                            distance: 129.14,
                            isReverse: !1
                        }]
                    },
                    lg: {
                        point: {
                            x: 739.12,
                            y: 1809.62
                        },
                        connections: [{
                            to: "lf",
                            direction: "w",
                            path: "M985.96,1808.08c-123.96-0.5-222.72,1.52-246.84,1.52",
                            distance: 246.85,
                            isReverse: !1
                        }, {
                            to: "le",
                            direction: "n",
                            path: "M739.12,1928.52c0-9.18,0-56.94,0-118.9",
                            distance: 118.9,
                            isReverse: !1
                        }, {
                            to: "lh",
                            direction: "e",
                            path: "M739.12,1809.62L628,1811.24c0,0-6.72-0.16-18-0.38",
                            distance: 129.14,
                            isReverse: !0
                        }]
                    },
                    lf: {
                        point: {
                            x: 985.96,
                            y: 1808
                        },
                        connections: [{
                            to: "aa",
                            direction: "w",
                            path: "M1069,1808.8c-28.52-0.38-56.36-0.6-83.04-0.72",
                            distance: 83.04,
                            isReverse: !1
                        }, {
                            to: "ld",
                            direction: "n",
                            newDirection: "e",
                            path: "M903.66,2047.42c90.28-3.32,82.28-85.24,82.28-118.9c0-33.66,0-120.44,0-120.44",
                            distance: 287.35,
                            isReverse: !1
                        }, {
                            to: "lg",
                            direction: "e",
                            path: "M985.96,1808.08c-123.96-0.5-222.72,1.52-246.84,1.52",
                            distance: 246.85,
                            isReverse: !0
                        }]
                    },
                    le: {
                        point: {
                            x: 739.12,
                            y: 1928.52
                        },
                        connections: [{
                            to: "ld",
                            direction: "w",
                            newDirection: "n",
                            path: "M903.66,2047.42c17.06-53.44,51.06-121.02-82.28-118.9c-45.38,0.72-44.28,0-82.28,0",
                            distance: 277.81,
                            isReverse: !1
                        }, {
                            to: "lg",
                            direction: "s",
                            path: "M739.12,1928.52c0-9.18,0-56.94,0-118.9",
                            distance: 118.9,
                            isReverse: !0
                        }, {
                            to: "la",
                            direction: "n",
                            path: "M739.12,2166.34c-49.56-28.52-82.28-67-82.28-103.82c0-73.52,82.28-67.28,82.28-134",
                            distance: 302.6,
                            isReverse: !1
                        }]
                    },
                    ld: {
                        point: {
                            x: 904.06,
                            y: 2047.42
                        },
                        connections: [{
                            to: "le",
                            direction: "s",
                            newDirection: "e",
                            path: "M903.66,2047.42c17.06-53.44,51.06-121.02-82.28-118.9c-45.38,0.72-44.28,0-82.28,0",
                            distance: 277.81,
                            isReverse: !0
                        }, {
                            to: "la",
                            direction: "e",
                            path: "M739.12,2166.34c130.88-21.1,60.88-115.1,164.54-118.92",
                            distance: 216.78,
                            isReverse: !1
                        }, {
                            to: "lf",
                            direction: "w",
                            newDirection: "s",
                            path: "M903.66,2047.42c90.28-3.32,82.28-85.24,82.28-118.9c0-33.66,0-120.44,0-120.44",
                            distance: 287.35,
                            isReverse: !0
                        }]
                    },
                    lc: {
                        point: {
                            x: 497.92,
                            y: 2179.26
                        },
                        connections: [{
                            to: "lm",
                            direction: "e",
                            newDirection: "s",
                            path: "M497.92,2179.26c-12.1-0.6-30.42,0.68-38.5,0.56c-78.62-1.22-176.81-144.37-176.81-207.6",
                            distance: 327.5,
                            isReverse: !0
                        }, {
                            to: "lb",
                            direction: "w",
                            path: "M574.02,2180.18c-30.78,0.5-56.98-0.12-76.1-0.92",
                            distance: 76.12,
                            isReverse: !1
                        }, {
                            to: "li",
                            direction: "s",
                            path: "M497.92,2179.26c-12-130-87.92-237.64-87.92-369.64",
                            distance: 381.5,
                            isReverse: !0
                        }]
                    },
                    lm: {
                        point: {
                            x: 281.71,
                            y: 1972.21
                        },
                        connections: [{
                            to: "lc",
                            direction: "n",
                            newDirection: "w",
                            path: "M497.92,2179.26c-12.1-0.6-30.42,0.68-38.5,0.56c-78.62-1.22-176.81-144.37-176.81-207.6",
                            distance: 327.5,
                            isReverse: !1
                        }, {
                            to: "ln",
                            direction: "e",
                            newDirection: "s",
                            path: "M282.61,1972.22c-64.7,0-88.73,30.2-88.73,30.2L76.63,2157.76c0,0-17.06,26.36-17.06,60.89",
                            distance: 354.83,
                            isReverse: !0
                        }, {
                            to: "lj",
                            direction: "s",
                            newDirection: "e",
                            path: "M282.61,1972.22c0-39.63-102.13-170.18-227.33-200.94",
                            distance: 315.28,
                            isReverse: !0
                        }]
                    },
                    ln: {
                        point: {
                            x: 59.57,
                            y: 2218.65
                        },
                        connections: [{
                            to: "lm",
                            direction: "s",
                            newDirection: "w",
                            path: "M282.61,1972.22c-64.7,0-88.73,30.2-88.73,30.2L76.63,2157.76c0,0-17.06,26.36-17.06,60.89",
                            distance: 354.83,
                            isReverse: !1
                        }]
                    },
                    lb: {
                        point: {
                            x: 573.72,
                            y: 2180.36
                        },
                        connections: [{
                            to: "lh",
                            direction: "s",
                            path: "M574.02,2180.18c0,0-6-279.32,36-369.32",
                            distance: 372.97,
                            isReverse: !0
                        }, {
                            to: "la",
                            direction: "w",
                            path: "M739.12,2166.34c-59.64,9.62-117.76,13.06-165.1,13.84",
                            distance: 165.82,
                            isReverse: !1
                        }, {
                            to: "lc",
                            direction: "e",
                            path: "M574.02,2180.18c-30.78,0.5-56.98-0.12-76.1-0.92",
                            distance: 76.12,
                            isReverse: !0
                        }]
                    },
                    la: {
                        point: {
                            x: 739.12,
                            y: 2166.34
                        },
                        connections: [{
                            to: "ld",
                            direction: "w",
                            path: "M739.12,2166.34c130.88-21.1,60.88-115.1,164.54-118.92",
                            distance: 216.78,
                            isReverse: !0
                        }, {
                            to: "le",
                            direction: "s",
                            path: "M739.12,2166.34c-49.56-28.52-82.28-67-82.28-103.82c0-73.52,82.28-67.28,82.28-134",
                            distance: 302.6,
                            isReverse: !0
                        }, {
                            to: "lb",
                            direction: "e",
                            path: "M739.12,2166.34c-59.64,9.62-117.76,13.06-165.1,13.84",
                            distance: 165.82,
                            isReverse: !0
                        }]
                    },
                    ll: {
                        point: {
                            x: 891.96,
                            y: 2196.04
                        },
                        connections: [{
                            to: "am",
                            direction: "s",
                            newDirection: "w",
                            path: "M1069,2141.23c-19.87,1.29-34.75,7.75-46.58-7.42c-11.83-15.17,12.58-65.51,0.56-80.53c-12.01-15.02-21.4-4.86-32.66,28.72c-7.84,23.38-4.2,59.23,14.08,80.53c19.09,22.24-8.15,26.41-27.4,10.73c-14.55-11.85-16.15-51.36-17.65-66.38c-0.86-8.56-10.67-20.87-28.16-5.17c-16.89,15.17,30.36,78.85,18.02,85.03c-18.58,9.3-35.48-79.86-54.62-73.67c-20.13,6.51-2.44,55.27-2.63,82.97",
                            distance: 711.66,
                            isReverse: !1
                        }]
                    },
                    gg: {
                        point: {
                            x: 1201.9,
                            y: 2128.98
                        },
                        connections: [{
                            to: "gd",
                            direction: "s",
                            newDirection: "w",
                            path: "M1201.9,2128.98c-17.22-18.2-48.32-50.42-38.32-78.42s66.1-29.32,101.04-32.5",
                            distance: 202.4,
                            isReverse: !0
                        }, {
                            to: "gb",
                            direction: "n",
                            newDirection: "w",
                            path: "M1345.78,2177.12c-15.34,14.94-34.08,26.26-54.86,32.76c-25.16,7.84-51,6.74-59.04-6.34c-16-26-11.88-55.42-29.98-74.56",
                            distance: 208.55,
                            isReverse: !1
                        }]
                    },
                    gf: {
                        point: {
                            x: 1220,
                            y: 1812.44
                        },
                        connections: [{
                            to: "aa",
                            direction: "e",
                            path: "M1220,1812.44c-50.66-1.86-101.84-3-151-3.66",
                            distance: 151.05,
                            isReverse: !0
                        }, {
                            to: "ge",
                            direction: "w",
                            path: "M1378,1821.14c-50-3.9-103.7-6.7-158-8.68",
                            distance: 158.25,
                            isReverse: !1
                        }, {
                            to: "gd",
                            direction: "n",
                            path: "M1264.6,2018.06c-0.64-18.44,3.48-36.28,5.4-46.82c8.1-44.62-13.68-48.76-12-96c1.28-36.04-32-36-38-62.8",
                            distance: 221.29,
                            isReverse: !1
                        }]
                    },
                    ge: {
                        point: {
                            x: 1378,
                            y: 1821.14
                        },
                        connections: [{
                            to: "gf",
                            direction: "e",
                            path: "M1378,1821.14c-50-3.9-103.7-6.7-158-8.68",
                            distance: 158.25,
                            isReverse: !0
                        }, {
                            to: "gc",
                            direction: "n",
                            path: "M1406,1929.24c-4-38-28-108.1-28-108.1",
                            distance: 111.84,
                            isReverse: !1
                        }]
                    },
                    gd: {
                        point: {
                            x: 1264.6,
                            y: 2018.06
                        },
                        connections: [{
                            to: "gg",
                            direction: "e",
                            newDirection: "n",
                            path: "M1201.9,2128.98c-17.22-18.2-48.32-50.42-38.32-78.42s66.1-29.32,101.04-32.5",
                            distance: 202.4,
                            isReverse: !1
                        }, {
                            to: "gc",
                            direction: "w",
                            path: "M1406,1929.24c-60,76-141.4,88.82-141.4,88.82",
                            distance: 170.33,
                            isReverse: !1
                        }, {
                            to: "gf",
                            direction: "s",
                            path: "M1264.6,2018.06c-0.64-18.44,3.48-36.28,5.4-46.82c8.1-44.62-13.68-48.76-12-96c1.28-36.04-32-36-38-62.8",
                            distance: 221.29,
                            isReverse: !0
                        }, {
                            to: "gb",
                            direction: "n",
                            path: "M1345.78,2177.12c-9.2-14.6-13.78-50.38-19.78-63.88c-8-18-46-40-56-66c-3.5-9.12-5.04-19.22-5.4-29.18",
                            distance: 184.07,
                            isReverse: !1
                        }]
                    },
                    gc: {
                        point: {
                            x: 1406,
                            y: 1929.24
                        },
                        connections: [{
                            to: "gd",
                            direction: "e",
                            path: "M1406,1929.24c-60,76-141.4,88.82-141.4,88.82",
                            distance: 170.33,
                            isReverse: !0
                        }, {
                            to: "ge",
                            direction: "s",
                            path: "M1406,1929.24c-4-38-28-108.1-28-108.1",
                            distance: 111.84,
                            isReverse: !0
                        }, {
                            to: "ga",
                            direction: "n",
                            path: "M1460.02,2069.54c-28.08-47.24-51.44-115.8-54.02-140.3",
                            distance: 151.04,
                            isReverse: !1
                        }]
                    },
                    gb: {
                        point: {
                            x: 1345.78,
                            y: 2177.12
                        },
                        connections: [{
                            to: "gg",
                            direction: "e",
                            newDirection: "s",
                            path: "M1345.78,2177.12c-15.34,14.94-34.08,26.26-54.86,32.76c-25.16,7.84-51,6.74-59.04-6.34c-16-26-11.88-55.42-29.98-74.56",
                            distance: 208.55,
                            isReverse: !0
                        }, {
                            to: "gd",
                            direction: "s",
                            path: "M1345.78,2177.12c-9.2-14.6-13.78-50.38-19.78-63.88c-8-18-46-40-56-66c-3.5-9.12-5.04-19.22-5.4-29.18",
                            distance: 184.07,
                            isReverse: !0
                        }, {
                            to: "ga",
                            direction: "w",
                            path: "M1460.34,2070.08c-48.8,16.06-75.6,48.68-89.78,74.46c-6.66,12.12-15.04,23.08-24.78,32.56",
                            distance: 160.57,
                            isReverse: !1
                        }]
                    },
                    ga: {
                        point: {
                            x: 1460.02,
                            y: 2070.08
                        },
                        connections: [{
                            to: "gc",
                            direction: "s",
                            path: "M1460.02,2069.54c-28.08-47.24-51.44-115.8-54.02-140.3",
                            distance: 151.04,
                            isReverse: !0
                        }, {
                            to: "gb",
                            direction: "e",
                            path: "M1460.34,2070.08c-48.8,16.06-75.6,48.68-89.78,74.46c-6.66,12.12-15.04,23.08-24.78,32.56",
                            distance: 160.57,
                            isReverse: !0
                        }]
                    },
                    cc: {
                        point: {
                            x: 408,
                            y: 869.16
                        },
                        connections: [{
                            to: "n0",
                            direction: "n",
                            path: "M408.4,1050.02c-0.24-106.66-0.4-180.86-0.4-180.86",
                            distance: 180.86,
                            isReverse: !1
                        }, {
                            to: "bg",
                            direction: "e",
                            path: "M408,869.16c-119.96,1.16-248.24-3.32-328.5-6.88",
                            distance: 328.61,
                            isReverse: !0
                        }, {
                            to: "cb",
                            direction: "w",
                            path: "M900.88,974.72C791.34,957.92,706.66,846.3,614,858.24c-55.24,7.12-128.9,10.18-206,10.92",
                            distance: 520.5,
                            isReverse: !1
                        }]
                    },
                    cb: {
                        point: {
                            x: 900.88,
                            y: 974.72
                        },
                        connections: [{
                            to: "ny",
                            direction: "n",
                            path: "M894.96,1058.5c0.98-38.46,3.48-69.82,5.92-83.78",
                            distance: 84.04,
                            isReverse: !1
                        }, {
                            to: "cc",
                            direction: "e",
                            path: "M900.88,974.72C791.34,957.92,706.66,846.3,614,858.24c-55.24,7.12-128.9,10.18-206,10.92",
                            distance: 520.5,
                            isReverse: !0
                        }, {
                            to: "ad",
                            direction: "w",
                            path: "M1069,976.82c0,0-18,0-141,0c-9.22,0-18.24-0.74-27.12-2.1",
                            distance: 168.23,
                            isReverse: !1
                        }]
                    },
                    ca: {
                        point: {
                            x: 1234.13,
                            y: 976.82
                        },
                        connections: [{
                            to: "n2",
                            direction: "s",
                            newDirection: "n",
                            path: "M1233.42,976.82c0,0,20.58-81.58-31.42-137.58",
                            distance: 146.56,
                            isReverse: !0
                        }, {
                            to: "ad",
                            direction: "e",
                            path: "M1233.42 976.82,L1069 976.82",
                            distance: 164.42,
                            isReverse: !0
                        }, {
                            to: "ba",
                            direction: "w",
                            path: "M1398 976.82,L1233.42 976.82",
                            distance: 164.58,
                            isReverse: !1
                        }]
                    },
                    bl: {
                        point: {
                            x: 74.52,
                            y: 63.24
                        },
                        connections: [{
                            to: "bj",
                            direction: "n",
                            path: "M80.92,251.22c-0.56-33.08-4.7-160.2-6.4-187.98",
                            distance: 188.09,
                            isReverse: !1
                        }, {
                            to: "ey",
                            direction: "w",
                            path: "M211.94 63.24,L74.52 63.24",
                            distance: 137.42,
                            isReverse: !1
                        }]
                    },
                    bj: {
                        point: {
                            x: 80,
                            y: 251.24
                        },
                        connections: [{
                            to: "bl",
                            direction: "s",
                            path: "M80.92,251.22c-0.56-33.08-4.7-160.2-6.4-187.98",
                            distance: 188.09,
                            isReverse: !0
                        }, {
                            to: "bh",
                            direction: "n",
                            path: "M82.54,469.24c0-41.4-1.1-187.2-1.64-218.02",
                            distance: 218.03,
                            isReverse: !1
                        }, {
                            to: "eq",
                            direction: "w",
                            path: "M221.28 251.24,L80 251.24",
                            distance: 141.28,
                            isReverse: !1
                        }]
                    },
                    bh: {
                        point: {
                            x: 82.54,
                            y: 469.24
                        },
                        connections: [{
                            to: "bj",
                            direction: "s",
                            path: "M82.54,469.24c0-41.4-1.1-187.2-1.64-218.02",
                            distance: 218.03,
                            isReverse: !0
                        }, {
                            to: "bg",
                            direction: "n",
                            path: "M79.5,862.28c1.54-117.56,3.02-257.84,3.04-393.04",
                            distance: 393.05,
                            isReverse: !1
                        }, {
                            to: "ei",
                            direction: "w",
                            path: "M221.22 469.24,L82.54 469.24",
                            distance: 138.68,
                            isReverse: !1
                        }]
                    },
                    bg: {
                        point: {
                            x: 79.5,
                            y: 862.28
                        },
                        connections: [{
                            to: "cc",
                            direction: "w",
                            path: "M408,869.16c-119.96,1.16-248.24-3.32-328.5-6.88",
                            distance: 328.61,
                            isReverse: !1
                        }, {
                            to: "bh",
                            direction: "s",
                            path: "M79.5,862.28c1.54-117.56,3.02-257.84,3.04-393.04",
                            distance: 393.05,
                            isReverse: !0
                        }, {
                            to: "bf",
                            direction: "n",
                            newDirection: "w",
                            path: "M409.68,1642.76c-21.5-11.02-60.32-10.8-80.6-38.16C266.9,1520.68,230,1433.24,190,1393.24s-114-138-114-262c0-37.1,1.8-139.2,3.5-268.96",
                            distance: 905.91,
                            isReverse: !1
                        }]
                    },
                    bf: {
                        point: {
                            x: 409.68,
                            y: 1642.76
                        },
                        connections: [{
                            to: "li",
                            direction: "n",
                            path: "M410,1809.62c0-10.2-0.12-75.28-0.32-166.86",
                            distance: 166.86,
                            isReverse: !1
                        }, {
                            to: "nj",
                            direction: "s",
                            path: "M409.68,1642.76c-0.1-45.74-0.2-98.08-0.32-153.5",
                            distance: 153.5,
                            isReverse: !0
                        }, {
                            to: "bg",
                            direction: "e",
                            newDirection: "s",
                            path: "M409.68,1642.76c-21.5-11.02-60.32-10.8-80.6-38.16C266.9,1520.68,230,1433.24,190,1393.24s-114-138-114-262c0-37.1,1.8-139.2,3.5-268.96",
                            distance: 905.91,
                            isReverse: !0
                        }, {
                            to: "be",
                            direction: "w",
                            path: "M656.84,1690.7c-49.72,3.96-171.16-1.32-247.16-47.96",
                            distance: 255.15,
                            isReverse: !1
                        }]
                    },
                    be: {
                        point: {
                            x: 656.84,
                            y: 1690.7
                        },
                        connections: [{
                            to: "bf",
                            direction: "e",
                            path: "M656.84,1690.7c-49.72,3.96-171.16-1.32-247.16-47.96",
                            distance: 255.15,
                            isReverse: !0
                        }, {
                            to: "bd",
                            direction: "w",
                            path: "M739.12,1687.8c-33.92,0.46-62.96,1.36-82.3,2.9",
                            distance: 82.36,
                            isReverse: !1
                        }, {
                            to: "ne",
                            direction: "s",
                            path: "M656.84 1690.7,L656.84 1571.8",
                            distance: 118.9,
                            isReverse: !0
                        }]
                    },
                    bd: {
                        point: {
                            x: 739.12,
                            y: 1687.8
                        },
                        connections: [{
                            to: "ni",
                            direction: "s",
                            path: "M739.12,1687.8c0-117.64-0.02-234.9-0.02-234.9",
                            distance: 234.9,
                            isReverse: !0
                        }, {
                            to: "be",
                            direction: "e",
                            path: "M739.12,1687.8c-33.92,0.46-62.96,1.36-82.3,2.9",
                            distance: 82.36,
                            isReverse: !0
                        }, {
                            to: "bc",
                            direction: "w",
                            path: "M904,1687.98c-55.18-0.58-115.22-0.86-164.86-0.18",
                            distance: 164.86,
                            isReverse: !1
                        }]
                    },
                    bc: {
                        point: {
                            x: 904,
                            y: 1687.98
                        },
                        connections: [{
                            to: "nc",
                            direction: "s",
                            path: "M904,1687.98c-1.06-8.5-2.78-53.32-4.5-116.78",
                            distance: 116.88,
                            isReverse: !0
                        }, {
                            to: "bd",
                            direction: "e",
                            path: "M904,1687.98c-55.18-0.58-115.22-0.86-164.86-0.18",
                            distance: 164.86,
                            isReverse: !0
                        }, {
                            to: "ab",
                            direction: "w",
                            path: "M1069,1690.7c0,0-76.2-1.78-165-2.72",
                            distance: 165.02,
                            isReverse: !1
                        }]
                    },
                    bb: {
                        point: {
                            x: 1406.42,
                            y: 1266.34
                        },
                        connections: [{
                            to: "nq",
                            direction: "e",
                            path: "M1406.42,1266.34c-44.78,4.88-91.08-10.14-137.32-25.16",
                            distance: 140.69,
                            isReverse: !0
                        }, {
                            to: "ab",
                            direction: "n",
                            newDirection: "e",
                            path: "M1069,1690.7c246.22,0,174.78-139.46,247.78-187.46c68.02-44.72,129.2-101.54,106-170c-6.62-19.54-11.72-42.4-15.6-66.9",
                            distance: 627.77,
                            isReverse: !1
                        }, {
                            to: "ba",
                            direction: "s",
                            path: "M1407.18,1266.34c-19.54-123.42-9.18-289.1-9.18-289.1",
                            distance: 289.71,
                            isReverse: !0
                        }]
                    },
                    ba: {
                        point: {
                            x: 1398,
                            y: 976.82
                        },
                        connections: [{
                            to: "bb",
                            direction: "n",
                            path: "M1407.18,1266.34c-19.54-123.42-9.18-289.1-9.18-289.1",
                            distance: 289.71,
                            isReverse: !1
                        }, {
                            to: "ca",
                            direction: "e",
                            path: "M1398 976.82,L1233.42 976.82",
                            distance: 164.58,
                            isReverse: !0
                        }]
                    },
                    al: {
                        point: {
                            x: 931.42,
                            y: 11.02
                        },
                        connections: [{
                            to: "er",
                            direction: "e",
                            path: "M931.42 11.02,L787.82 47.52",
                            distance: 148.17,
                            isReverse: !0
                        }, {
                            to: "ak",
                            direction: "n",
                            path: "M952.64 105.64,L931.42 11.02",
                            distance: 96.97,
                            isReverse: !1
                        }]
                    },
                    ak: {
                        point: {
                            x: 952.64,
                            y: 105.64
                        },
                        connections: [{
                            to: "wo",
                            direction: "w",
                            path: "M1096.96 68.7,L952.64 105.64",
                            distance: 148.97,
                            isReverse: !1
                        }, {
                            to: "em",
                            direction: "e",
                            path: "M952.64 105.64,L808.82 142.08",
                            distance: 148.36,
                            isReverse: !0
                        }, {
                            to: "al",
                            direction: "s",
                            path: "M952.64 105.64,L931.42 11.02",
                            distance: 96.97,
                            isReverse: !0
                        }, {
                            to: "aj",
                            direction: "n",
                            path: "M973.88 200.26,L952.64 105.64",
                            distance: 96.97,
                            isReverse: !1
                        }]
                    },
                    ah: {
                        point: {
                            x: 1016.32,
                            y: 389.48
                        },
                        connections: [{
                            to: "wg",
                            direction: "w",
                            path: "M1160.76 352.82,L1016.32 389.48",
                            distance: 149.02,
                            isReverse: !1
                        }, {
                            to: "ed",
                            direction: "e",
                            path: "M1016.32 389.48,L872.58 426.26",
                            distance: 148.37,
                            isReverse: !0
                        }, {
                            to: "aj",
                            direction: "s",
                            path: "M1016.32 389.48,L973.88 200.26",
                            distance: 193.92,
                            isReverse: !0
                        }, {
                            to: "af",
                            direction: "n",
                            path: "M1058.78 578.7,L1016.32 389.48",
                            distance: 193.93,
                            isReverse: !1
                        }]
                    },
                    aj: {
                        point: {
                            x: 974.09,
                            y: 200.84
                        },
                        connections: [{
                            to: "ee",
                            direction: "e",
                            newDirection: "n",
                            path: "M973.88,200.26L738.64,259.9c-29.32,7.44-47.44,36.82-40.92,66.36l9.54,43.14",
                            distance: 373.1,
                            isReverse: !0
                        }, {
                            to: "wm",
                            direction: "w",
                            path: "M1118.28 163.62,L973.86 200.26",
                            distance: 149,
                            isReverse: !1
                        }, {
                            to: "ak",
                            direction: "s",
                            path: "M973.88 200.26,L952.64 105.64",
                            distance: 96.97,
                            isReverse: !0
                        }, {
                            to: "ah",
                            direction: "n",
                            path: "M1016.32 389.48,L973.88 200.26",
                            distance: 193.92,
                            isReverse: !1
                        }]
                    },
                    af: {
                        point: {
                            x: 1058.78,
                            y: 578.7
                        },
                        connections: [{
                            to: "wb",
                            direction: "w",
                            path: "M1192.8,595.3c-80.22-27.12-134-16.6-134-16.6",
                            distance: 136.2,
                            isReverse: !1
                        }, {
                            to: "ea",
                            direction: "e",
                            path: "M1058.78,578.7l-75.76,21.5c-23.36,6.64-47.86,7.1-71.08,1.48",
                            distance: 150.64,
                            isReverse: !0
                        }, {
                            to: "ae",
                            direction: "n",
                            path: "M1069,664.14c0-26.52-2.92-52.94-8.74-78.82l-1.48-6.62",
                            distance: 86.25,
                            isReverse: !1
                        }, {
                            to: "ah",
                            direction: "s",
                            path: "M1058.78 578.7,L1016.32 389.48",
                            distance: 193.93,
                            isReverse: !0
                        }]
                    },
                    ae: {
                        point: {
                            x: 1069,
                            y: 664.14
                        },
                        connections: [{
                            to: "ea",
                            direction: "e",
                            newDirection: "s",
                            path: "M1069,664.14c-67,21.3-73,39.1-103,73.1s-94,8-94-26s36-58,39.94-109.54",
                            distance: 366.03,
                            isReverse: !0
                        }, {
                            to: "af",
                            direction: "s",
                            path: "M1069,664.14c0-26.52-2.92-52.94-8.74-78.82l-1.48-6.62",
                            distance: 86.25,
                            isReverse: !0
                        }, {
                            to: "ad",
                            direction: "n",
                            path: "M1069 976.82,L1069 664.14",
                            distance: 312.68,
                            isReverse: !1
                        }]
                    },
                    ad: {
                        point: {
                            x: 1069,
                            y: 976.82
                        },
                        connections: [{
                            to: "cb",
                            direction: "e",
                            path: "M1069,976.82c0,0-18,0-141,0c-9.22,0-18.24-0.74-27.12-2.1",
                            distance: 168.23,
                            isReverse: !0
                        }, {
                            to: "ca",
                            direction: "w",
                            path: "M1233.42 976.82,L1069 976.82",
                            distance: 164.42,
                            isReverse: !1
                        }, {
                            to: "ae",
                            direction: "s",
                            path: "M1069 976.82,L1069 664.14",
                            distance: 312.68,
                            isReverse: !0
                        }, {
                            to: "ac",
                            direction: "n",
                            path: "M1069 1212.4,L1069 976.82",
                            distance: 235.58,
                            isReverse: !1
                        }]
                    },
                    ac: {
                        point: {
                            x: 1069,
                            y: 1212.4
                        },
                        connections: [{
                            to: "nq",
                            direction: "w",
                            path: "M1269.1,1241.18c-40.06-13.02-80.1-26.02-119.1-26.1c-16-0.02-44.2-1.14-81-2.68",
                            distance: 203.49,
                            isReverse: !1
                        }, {
                            to: "ad",
                            direction: "s",
                            path: "M1069 1212.4,L1069 976.82",
                            distance: 235.58,
                            isReverse: !0
                        }, {
                            to: "ab",
                            direction: "n",
                            path: "M1069 1690.7,L1069 1212.4",
                            distance: 478.3,
                            isReverse: !1
                        }]
                    },
                    ab: {
                        point: {
                            x: 1069,
                            y: 1690.7
                        },
                        connections: [{
                            to: "bc",
                            direction: "e",
                            path: "M1069,1690.7c0,0-76.2-1.78-165-2.72",
                            distance: 165.02,
                            isReverse: !0
                        }, {
                            to: "bb",
                            direction: "w",
                            newDirection: "s",
                            path: "M1069,1690.7c246.22,0,174.78-139.46,247.78-187.46c68.02-44.72,129.2-101.54,106-170c-6.62-19.54-11.72-42.4-15.6-66.9",
                            distance: 627.77,
                            isReverse: !0
                        }, {
                            to: "ac",
                            direction: "s",
                            path: "M1069 1690.7,L1069 1212.4",
                            distance: 478.3,
                            isReverse: !0
                        }, {
                            to: "aa",
                            direction: "n",
                            path: "M1069 1808.8,L1069 1690.7",
                            distance: 118.1,
                            isReverse: !1
                        }]
                    },
                    aa: {
                        point: {
                            x: 1069,
                            y: 1808.8
                        },
                        connections: [{
                            to: "lf",
                            direction: "e",
                            path: "M1069,1808.8c-28.52-0.38-56.36-0.6-83.04-0.72",
                            distance: 83.04,
                            isReverse: !0
                        }, {
                            to: "gf",
                            direction: "w",
                            path: "M1220,1812.44c-50.66-1.86-101.84-3-151-3.66",
                            distance: 151.05,
                            isReverse: !1
                        }, {
                            to: "ab",
                            direction: "s",
                            path: "M1069 1808.8,L1069 1690.7",
                            distance: 118.1,
                            isReverse: !0
                        }, {
                            to: "am",
                            direction: "n",
                            path: "M1069 2141.23,L1069 1808.8",
                            distance: 332.43,
                            isReverse: !1
                        }]
                    },
                    am: {
                        point: {
                            x: 1069,
                            y: 2141.08
                        },
                        connections: [{
                            to: "ll",
                            direction: "e",
                            newDirection: "s",
                            path: "M1069,2141.23c-19.87,1.29-34.75,7.75-46.58-7.42c-11.83-15.17,12.58-65.51,0.56-80.53c-12.01-15.02-21.4-4.86-32.66,28.72c-7.84,23.38-4.2,59.23,14.08,80.53c19.09,22.24-8.15,26.41-27.4,10.73c-14.55-11.85-16.15-51.36-17.65-66.38c-0.86-8.56-10.67-20.87-28.16-5.17c-16.89,15.17,30.36,78.85,18.02,85.03c-18.58,9.3-35.48-79.86-54.62-73.67c-20.13,6.51-2.44,55.27-2.63,82.97",
                            distance: 711.66,
                            isReverse: !0
                        }, {
                            to: "aa",
                            direction: "s",
                            path: "M1069 2141.23,L1069 1808.8",
                            distance: 332.43,
                            isReverse: !0
                        }]
                    }
                },
                KY = g.S.extend({
                    defaults: {
                        disabled: !1
                    }
                });
            C.p8.registerPlugin(vt.X);
            const ZY = p().View.extend({
                    className: "mechanic travel captain",
                    template: o().template('<div class="clamp"> <div class="info"></div> </div> <div class="scene-box-wrapper"> <div class="controls scene-box"> <button class="move forward"> <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 356 300" xml:space="preserve"> <path d="M21.83,300c43.08-33.67,97.28-53.74,156.17-53.74c58.89,0,113.09,20.07,156.17,53.74C334,299.32,356,276.28,356,276.28\n\t\tL178,25L0,276.28C0,276.28,22,299.32,21.83,300z"/> </svg> </button> <button class="move left"> <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 356 300" xml:space="preserve"> <path d="M21.83,300c43.08-33.67,97.28-53.74,156.17-53.74c58.89,0,113.09,20.07,156.17,53.74C334,299.32,356,276.28,356,276.28\n\t\tL178,25L0,276.28C0,276.28,22,299.32,21.83,300z"/> </svg> </button> <button class="move right"> <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 356 300" xml:space="preserve"> <path d="M21.83,300c43.08-33.67,97.28-53.74,156.17-53.74c58.89,0,113.09,20.07,156.17,53.74C334,299.32,356,276.28,356,276.28\n\t\tL178,25L0,276.28C0,276.28,22,299.32,21.83,300z"/> </svg> </button> <div class="map-container"> <div class="frame"> <div class="map"> <div class="destination"><p></p></div> </div> </div> <div class="car"></div> </div> </div> </div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p> '),
                    model: new KY,
                    boundOnKeyDown: null,
                    directions: {
                        n: 0,
                        e: 270,
                        s: 180,
                        w: 90
                    },
                    turns: {
                        n: {
                            n: "+=0",
                            e: "+=90",
                            s: "+=180",
                            w: "-=90"
                        },
                        e: {
                            n: "-=90",
                            e: "+=0",
                            s: "+=90",
                            w: "+=180"
                        },
                        s: {
                            n: "+=180",
                            e: "-=90",
                            s: "+=0",
                            w: "+=90"
                        },
                        w: {
                            n: "+=90",
                            e: "-=180",
                            s: "-=90",
                            w: "+=0"
                        }
                    },
                    events: {
                        "click .leave": "onLeaveClick",
                        "click .forward": "onForwardClick",
                        "click .left": "onLeftClick",
                        "click .right": "onRightClick"
                    },
                    bindings: {
                        ".leave": {
                            observe: "canLeave",
                            visible: !0
                        },
                        ".instructions": {
                            observe: "instructions",
                            updateMethod: "html"
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".info": {
                            observe: ["participant", "destination"],
                            updateMethod: "html",
                            onGet(e) {
                                let [t, s] = e;
                                return t && s ? `Ask <span class="player-name ${t.avatar}">${t.name}</span> for directions to ${s.name}` : ""
                            }
                        },
                        ".scene-box-wrapper": {
                            attributes: [{
                                name: "class",
                                observe: "turning",
                                onGet: e => e || ""
                            }]
                        },
                        ".move": {
                            classes: {
                                disabled: "disabled"
                            }
                        },
                        ".left": {
                            classes: {
                                disabled: {
                                    observe: "moveOptions",
                                    onGet: e => !e[0]
                                }
                            }
                        },
                        ".forward": {
                            classes: {
                                disabled: {
                                    observe: "moveOptions",
                                    onGet: e => !e[1]
                                }
                            }
                        },
                        ".right": {
                            classes: {
                                disabled: {
                                    observe: "moveOptions",
                                    onGet: e => !e[2]
                                }
                            }
                        },
                        ".destination": {
                            attributes: [{
                                name: "style",
                                observe: "destination",
                                onGet: "getDestinationStyles"
                            }]
                        }
                    },
                    initialize() {
                        this.listenTo(this.model, "change:locationId", this.updateMap), this.listenTo(this.model, "change:stepIndex", this.resetData), this.boundOnKeyDown = this.onKeyDown.bind(this), document.addEventListener("keydown", this.boundOnKeyDown), this.resetData()
                    },
                    resetData() {
                        this.model.setUpdate({
                            disabled: !1
                        })
                    },
                    onRender() {
                        this.stickit(), setTimeout((() => this.updateMap(this.model)), 0)
                    },
                    onBeforeDestroy() {
                        document.removeEventListener("keydown", this.boundOnKeyDown)
                    },
                    getMovement(e) {
                        let t = null,
                            s = null,
                            i = null;
                        const o = e.get("locationId").toLowerCase(),
                            n = e.get("direction").toLowerCase(),
                            a = jY[o].point;
                        if (!a) throw Error("Unknown to point", o);
                        t = {
                            id: o,
                            direction: n,
                            point: a
                        };
                        let r = e.previous("locationId");
                        if (r && (r = r.toLowerCase()), r && r !== t.id) {
                            const o = e.previous("direction").toLowerCase(),
                                n = jY[r].point;
                            if (!n) throw Error("Unknown from point", r);
                            if (s = {
                                    id: r,
                                    direction: o,
                                    point: n
                                }, i = jY[t.id].connections.find((e => e.to === s.id)), !i) return [t, null, null]
                        }
                        return [t, s, i]
                    },
                    updateMap(e) {
                        this.model.setUpdate({
                            disabled: !1,
                            turning: null
                        });
                        const [t, s, i] = this.getMovement(e);
                        if (this.updateButtons(e), !s || t.id === s.id) return C.p8.set(".frame", {
                            rotation: `${this.directions[t.direction]}`
                        }), void C.p8.set(".map", {
                            x: 224 - (1480 - t.point.x),
                            y: 224 - (2280 - t.point.y)
                        });
                        const o = i.distance / 200;
                        C.p8.to(".map", {
                            motionPath: {
                                path: i.path,
                                offsetX: -1256,
                                offsetY: -2056
                            },
                            duration: o,
                            delay: .25,
                            runBackwards: i.isReverse
                        }), C.p8.to(".frame", {
                            rotation: `${this.directions[t.direction]}_short`,
                            duration: .25
                        })
                    },
                    updateButtons(e) {
                        const t = e.get("locationId").toLowerCase(),
                            s = e.get("direction").toLowerCase(),
                            i = jY[t].connections;
                        if (!i) throw Error("Unknown to point", t);
                        const o = {};
                        let n = [];
                        i.forEach((e => {
                            o[e.direction] = !0
                        })), "n" === s && (n = [void 0 !== o.w, void 0 !== o.n, void 0 !== o.e]), "e" === s && (n = [void 0 !== o.n, void 0 !== o.e, void 0 !== o.s]), "s" === s && (n = [void 0 !== o.e, void 0 !== o.s, void 0 !== o.w]), "w" === s && (n = [void 0 !== o.s, void 0 !== o.w, void 0 !== o.n]), this.model.setUpdate({
                            moveOptions: n
                        })
                    },
                    onLeftClick() {
                        const e = this.model.get("moveOptions");
                        !this.model.get("disabled") && e && e[0] && (this.model.setUpdate({
                            turning: "left",
                            disabled: !0
                        }), this.triggerMethod("client:message", {
                            action: "move",
                            direction: "LEFT"
                        }))
                    },
                    onForwardClick() {
                        const e = this.model.get("moveOptions");
                        !this.model.get("disabled") && e && e[1] && (this.model.setUpdate({
                            disabled: !0
                        }), this.triggerMethod("client:message", {
                            action: "move",
                            direction: "FORWARD"
                        }))
                    },
                    onRightClick() {
                        const e = this.model.get("moveOptions");
                        !this.model.get("disabled") && e && e[2] && (this.model.setUpdate({
                            turning: "right",
                            disabled: !0
                        }), this.triggerMethod("client:message", {
                            action: "move",
                            direction: "RIGHT"
                        }))
                    },
                    onKeyDown(e) {
                        switch (e.keyCode) {
                            case 37:
                                this.onLeftClick();
                                break;
                            case 38:
                                this.onForwardClick();
                                break;
                            case 39:
                                this.onRightClick()
                        }
                    },
                    onLeaveClick() {
                        this.triggerMethod("client:message", {
                            action: "leaveTask"
                        })
                    },
                    getDestinationStyles(e) {
                        const t = jY[e.locationId.toLowerCase()].point;
                        if (!t) throw new Error("Unknown Destination Point");
                        return `transform: translate(${1480-t.x}px, ${2280-t.y}px);`
                    }
                }),
                JY = {
                    wo: {
                        point: {
                            x: 191.51,
                            y: 1107.27
                        },
                        connections: [{
                            to: "wm",
                            direction: "n",
                            path: "M180.86,1059.82c3.82,17.03,7.48,33.34,10.65,47.45",
                            distance: 48.63,
                            isReverse: !1
                        }, {
                            to: "ak",
                            direction: "e",
                            path: "M191.52 1107.27,L263.68 1088.8",
                            distance: 74.49,
                            isReverse: !0
                        }, {
                            to: "wn",
                            direction: "w",
                            path: "M119.93 1125.59,L191.52 1107.27",
                            distance: 73.9,
                            isReverse: !1
                        }]
                    },
                    wn: {
                        point: {
                            x: 119.93,
                            y: 1125.59
                        },
                        connections: [{
                            to: "wl",
                            direction: "n",
                            path: "M109.25 1078,L119.93 1125.59",
                            distance: 48.77,
                            isReverse: !1
                        }, {
                            to: "wo",
                            direction: "e",
                            path: "M119.93 1125.59,L191.52 1107.27",
                            distance: 73.9,
                            isReverse: !0
                        }]
                    },
                    wm: {
                        point: {
                            x: 180.86,
                            y: 1059.82
                        },
                        connections: [{
                            to: "wo",
                            direction: "s",
                            path: "M180.86,1059.82c3.82,17.03,7.48,33.34,10.65,47.45",
                            distance: 48.63,
                            isReverse: !0
                        }, {
                            to: "wj",
                            direction: "n",
                            path: "M170.24,1012.51c3.51,15.63,7.13,31.77,10.62,47.3",
                            distance: 48.48,
                            isReverse: !1
                        }, {
                            to: "wl",
                            direction: "w",
                            path: "M109.25 1077.99,L180.86 1059.82",
                            distance: 73.88,
                            isReverse: !1
                        }, {
                            to: "aj",
                            direction: "e",
                            path: "M180.86 1059.81,L253.07 1041.49",
                            distance: 74.5,
                            isReverse: !0
                        }]
                    },
                    wl: {
                        point: {
                            x: 109.25,
                            y: 1078
                        },
                        connections: [{
                            to: "wn",
                            direction: "s",
                            path: "M109.25 1078,L119.93 1125.59",
                            distance: 48.77,
                            isReverse: !0
                        }, {
                            to: "wi",
                            direction: "n",
                            path: "M98.64 1030.68,L109.25 1078",
                            distance: 48.49,
                            isReverse: !1
                        }, {
                            to: "wk",
                            direction: "w",
                            path: "M30.5 1097.99,L109.25 1077.99",
                            distance: 81.25,
                            isReverse: !1
                        }, {
                            to: "wm",
                            direction: "e",
                            path: "M109.25 1077.99,L180.86 1059.82",
                            distance: 73.88,
                            isReverse: !0
                        }]
                    },
                    wk: {
                        point: {
                            x: 30.5,
                            y: 1097.99
                        },
                        connections: [{
                            to: "wh",
                            direction: "n",
                            path: "M10.99,1052.91c6.36,14.45,13.34,30.49,19.5,45.08",
                            distance: 49.12,
                            isReverse: !1
                        }, {
                            to: "wl",
                            direction: "e",
                            path: "M30.5 1097.99,L109.25 1077.99",
                            distance: 81.25,
                            isReverse: !0
                        }]
                    },
                    wh: {
                        point: {
                            x: 11.07,
                            y: 1052.94
                        },
                        connections: [{
                            to: "wk",
                            direction: "s",
                            path: "M10.99,1052.91c6.36,14.45,13.34,30.49,19.5,45.08",
                            distance: 49.12,
                            isReverse: !0
                        }, {
                            to: "wi",
                            direction: "e",
                            path: "M10.91 1052.95,L98.64 1030.68",
                            distance: 90.51,
                            isReverse: !0
                        }]
                    },
                    wj: {
                        point: {
                            x: 170.24,
                            y: 1012.51
                        },
                        connections: [{
                            to: "wm",
                            direction: "s",
                            path: "M170.24,1012.51c3.51,15.63,7.13,31.77,10.62,47.3",
                            distance: 48.48,
                            isReverse: !0
                        }, {
                            to: "wg",
                            direction: "n",
                            path: "M159.62,965.21c3.2,14.26,6.85,30.49,10.62,47.3",
                            distance: 48.48,
                            isReverse: !1
                        }, {
                            to: "wi",
                            direction: "w",
                            path: "M98.64 1030.68,L170.24 1012.51",
                            distance: 73.87,
                            isReverse: !1
                        }]
                    },
                    wi: {
                        point: {
                            x: 98.64,
                            y: 1030.68
                        },
                        connections: [{
                            to: "wf",
                            direction: "n",
                            path: "M87.92,983.4c5.97,26.51,10.72,47.28,10.72,47.28",
                            distance: 48.48,
                            isReverse: !1
                        }, {
                            to: "wl",
                            direction: "s",
                            path: "M98.64 1030.68,L109.25 1078",
                            distance: 48.49,
                            isReverse: !0
                        }, {
                            to: "wj",
                            direction: "e",
                            path: "M98.64 1030.68,L170.24 1012.51",
                            distance: 73.87,
                            isReverse: !0
                        }, {
                            to: "wh",
                            direction: "w",
                            path: "M10.91 1052.95,L98.64 1030.68",
                            distance: 90.51,
                            isReverse: !1
                        }]
                    },
                    wg: {
                        point: {
                            x: 159.62,
                            y: 965.21
                        },
                        connections: [{
                            to: "wj",
                            direction: "s",
                            path: "M159.62,965.21c3.2,14.26,6.85,30.49,10.62,47.3",
                            distance: 48.48,
                            isReverse: !0
                        }, {
                            to: "we",
                            direction: "n",
                            path: "M148.25,914.48c0.24,1.19,0.49,2.36,0.75,3.52c1.68,7.45,5.61,24.93,10.62,47.21",
                            distance: 51.99,
                            isReverse: !1
                        }, {
                            to: "wf",
                            direction: "w",
                            path: "M87.92 983.4,L159.62 965.21",
                            distance: 73.97,
                            isReverse: !1
                        }, {
                            to: "ah",
                            direction: "e",
                            path: "M159.62 965.21,L231.84 946.88",
                            distance: 74.51,
                            isReverse: !0
                        }]
                    },
                    wf: {
                        point: {
                            x: 87.92,
                            y: 983.4
                        },
                        connections: [{
                            to: "wi",
                            direction: "s",
                            path: "M87.92,983.4c5.97,26.51,10.72,47.28,10.72,47.28",
                            distance: 48.48,
                            isReverse: !0
                        }, {
                            to: "wd",
                            direction: "n",
                            path: "M74.84,924.74c4.16,18.94,8.92,40.19,13.08,58.66",
                            distance: 60.1,
                            isReverse: !1
                        }, {
                            to: "wg",
                            direction: "e",
                            path: "M87.92 983.4,L159.62 965.21",
                            distance: 73.97,
                            isReverse: !0
                        }]
                    },
                    we: {
                        point: {
                            x: 148.25,
                            y: 914.48
                        },
                        connections: [{
                            to: "wg",
                            direction: "s",
                            path: "M148.25,914.48c0.24,1.19,0.49,2.36,0.75,3.52c1.68,7.45,5.61,24.93,10.62,47.21",
                            distance: 51.99,
                            isReverse: !0
                        }, {
                            to: "wb",
                            direction: "n",
                            path: "M143.6,843.97c0,0-1.49,39.88,4.65,70.51",
                            distance: 70.79,
                            isReverse: !1
                        }, {
                            to: "wd",
                            direction: "w",
                            path: "M74.84,924.74c25.14-2.45,50.77-6.3,73.41-10.27",
                            distance: 74.14,
                            isReverse: !1
                        }]
                    },
                    wd: {
                        point: {
                            x: 74.84,
                            y: 924.74
                        },
                        connections: [{
                            to: "wf",
                            direction: "s",
                            path: "M74.84,924.74c4.16,18.94,8.92,40.19,13.08,58.66",
                            distance: 60.1,
                            isReverse: !0
                        }, {
                            to: "wa",
                            direction: "n",
                            path: "M60.73,800.99C59.43,825.67,62.3,872.47,68,893c1.85,8.83,4.23,19.83,6.84,31.74",
                            distance: 125.01,
                            isReverse: !1
                        }, {
                            to: "we",
                            direction: "e",
                            path: "M74.84,924.74c25.14-2.45,50.77-6.3,73.41-10.27",
                            distance: 74.14,
                            isReverse: !0
                        }]
                    },
                    wb: {
                        point: {
                            x: 143.6,
                            y: 843.97
                        },
                        connections: [{
                            to: "we",
                            direction: "s",
                            path: "M143.6,843.97c0,0-1.49,39.88,4.65,70.51",
                            distance: 70.79,
                            isReverse: !0
                        }, {
                            to: "af",
                            direction: "e",
                            path: "M143.6,843.97c40.11,13.56,67,8.3,67,8.3",
                            distance: 68.1,
                            isReverse: !0
                        }, {
                            to: "wa",
                            direction: "w",
                            path: "M60.73,800.99c11.59,6.2,25.09,14.58,45.27,26.01c13.41,7.6,26.06,13.07,37.6,16.97",
                            distance: 93.53,
                            isReverse: !1
                        }]
                    },
                    wa: {
                        point: {
                            x: 60.73,
                            y: 800.99
                        },
                        connections: [{
                            to: "wd",
                            direction: "s",
                            path: "M60.73,800.99C59.43,825.67,62.3,872.47,68,893c1.85,8.83,4.23,19.83,6.84,31.74",
                            distance: 125.01,
                            isReverse: !0
                        }, {
                            to: "wb",
                            direction: "e",
                            path: "M60.73,800.99c11.59,6.2,25.09,14.58,45.27,26.01c13.41,7.6,26.06,13.07,37.6,16.97",
                            distance: 93.53,
                            isReverse: !0
                        }]
                    },
                    ey: {
                        point: {
                            x: 634.03,
                            y: 1110
                        },
                        connections: [{
                            to: "ev",
                            direction: "n",
                            path: "M630.43,1063c0.76,20.21,1.91,37.25,3.61,47",
                            distance: 47.17,
                            isReverse: !1
                        }, {
                            to: "bl",
                            direction: "e",
                            path: "M634.03 1110,L702.74 1110",
                            distance: 68.71,
                            isReverse: !0
                        }, {
                            to: "ex",
                            direction: "w",
                            path: "M572.27 1110,L634.03 1110",
                            distance: 61.76,
                            isReverse: !1
                        }]
                    },
                    ex: {
                        point: {
                            x: 572.27,
                            y: 1110
                        },
                        connections: [{
                            to: "ew",
                            direction: "w",
                            path: "M501.27 1128.3,L572.27 1110",
                            distance: 73.32,
                            isReverse: !1
                        }, {
                            to: "eu",
                            direction: "n",
                            path: "M561.77 1063.05,L572.27 1110",
                            distance: 48.11,
                            isReverse: !1
                        }, {
                            to: "ey",
                            direction: "e",
                            path: "M572.27 1110,L634.03 1110",
                            distance: 61.76,
                            isReverse: !0
                        }]
                    },
                    ew: {
                        point: {
                            x: 501.27,
                            y: 1128.3
                        },
                        connections: [{
                            to: "ex",
                            direction: "e",
                            path: "M501.27 1128.3,L572.27 1110",
                            distance: 73.32,
                            isReverse: !0
                        }, {
                            to: "et",
                            direction: "n",
                            path: "M490.51 1081.17,L501.27 1128.3",
                            distance: 48.34,
                            isReverse: !1
                        }]
                    },
                    ev: {
                        point: {
                            x: 630.45,
                            y: 1063
                        },
                        connections: [{
                            to: "eq",
                            direction: "n",
                            path: "M629.32,1016c0.21,16.28,0.56,32.46,1.11,47",
                            distance: 47.01,
                            isReverse: !1
                        }, {
                            to: "ey",
                            direction: "s",
                            path: "M630.43,1063c0.76,20.21,1.91,37.25,3.61,47",
                            distance: 47.17,
                            isReverse: !0
                        }, {
                            to: "eu",
                            direction: "w",
                            path: "M562 1063,L630.45 1063",
                            distance: 68.45,
                            isReverse: !1
                        }]
                    },
                    eu: {
                        point: {
                            x: 562,
                            y: 1063
                        },
                        connections: [{
                            to: "ev",
                            direction: "e",
                            path: "M562 1063,L630.45 1063",
                            distance: 68.45,
                            isReverse: !0
                        }, {
                            to: "et",
                            direction: "w",
                            path: "M490.51 1081.17,L561.77 1063.05",
                            distance: 73.53,
                            isReverse: !1
                        }, {
                            to: "ep",
                            direction: "n",
                            path: "M551.23 1015.95,L561.77 1063.05",
                            distance: 48.26,
                            isReverse: !1
                        }, {
                            to: "ex",
                            direction: "s",
                            path: "M561.77 1063.05,L572.27 1110",
                            distance: 48.11,
                            isReverse: !0
                        }]
                    },
                    et: {
                        point: {
                            x: 490.51,
                            y: 1081.17
                        },
                        connections: [{
                            to: "eu",
                            direction: "e",
                            path: "M490.51 1081.17,L561.77 1063.05",
                            distance: 73.53,
                            isReverse: !0
                        }, {
                            to: "es",
                            direction: "w",
                            path: "M417.9 1099.62,L490.51 1081.17",
                            distance: 74.92,
                            isReverse: !1
                        }, {
                            to: "ew",
                            direction: "s",
                            path: "M490.51 1081.17,L501.27 1128.3",
                            distance: 48.34,
                            isReverse: !0
                        }, {
                            to: "eo",
                            direction: "n",
                            path: "M479.75 1034.05,L490.51 1081.17",
                            distance: 48.33,
                            isReverse: !1
                        }]
                    },
                    es: {
                        point: {
                            x: 417.9,
                            y: 1099.62
                        },
                        connections: [{
                            to: "et",
                            direction: "e",
                            path: "M417.9 1099.62,L490.51 1081.17",
                            distance: 74.92,
                            isReverse: !0
                        }, {
                            to: "er",
                            direction: "w",
                            path: "M346.09 1117.86,L417.9 1099.62",
                            distance: 74.09,
                            isReverse: !1
                        }, {
                            to: "en",
                            direction: "n",
                            path: "M407.11 1052.4,L417.9 1099.62",
                            distance: 48.44,
                            isReverse: !1
                        }]
                    },
                    er: {
                        point: {
                            x: 346.09,
                            y: 1117.86
                        },
                        connections: [{
                            to: "es",
                            direction: "e",
                            path: "M346.09 1117.86,L417.9 1099.62",
                            distance: 74.09,
                            isReverse: !0
                        }, {
                            to: "al",
                            direction: "w",
                            path: "M274.29 1136.11,L346.09 1117.86",
                            distance: 74.08,
                            isReverse: !1
                        }, {
                            to: "em",
                            direction: "n",
                            path: "M335.59 1070.58,L346.09 1117.86",
                            distance: 48.43,
                            isReverse: !1
                        }]
                    },
                    eq: {
                        point: {
                            x: 629.36,
                            y: 1016
                        },
                        connections: [{
                            to: "el",
                            direction: "n",
                            path: "M629.02,968c0,15.04,0.08,31.57,0.3,48",
                            distance: 48,
                            isReverse: !1
                        }, {
                            to: "ev",
                            direction: "s",
                            path: "M629.32,1016c0.21,16.28,0.56,32.46,1.11,47",
                            distance: 47.01,
                            isReverse: !0
                        }, {
                            to: "bj",
                            direction: "e",
                            path: "M629.36 1016,L700 1016",
                            distance: 70.64,
                            isReverse: !0
                        }, {
                            to: "ep",
                            direction: "w",
                            path: "M551 1016,L629.36 1016",
                            distance: 78.36,
                            isReverse: !1
                        }]
                    },
                    ep: {
                        point: {
                            x: 551,
                            y: 1016
                        },
                        connections: [{
                            to: "eq",
                            direction: "e",
                            path: "M551 1016,L629.36 1016",
                            distance: 78.36,
                            isReverse: !0
                        }, {
                            to: "eo",
                            direction: "w",
                            path: "M479.75 1034.05,L551 1016",
                            distance: 73.5,
                            isReverse: !1
                        }, {
                            to: "ek",
                            direction: "n",
                            path: "M540.52 968.11,L551.23 1015.95",
                            distance: 49.02,
                            isReverse: !1
                        }, {
                            to: "eu",
                            direction: "s",
                            path: "M551.23 1015.95,L561.77 1063.05",
                            distance: 48.26,
                            isReverse: !0
                        }]
                    },
                    eo: {
                        point: {
                            x: 479.75,
                            y: 1034.05
                        },
                        connections: [{
                            to: "ep",
                            direction: "e",
                            path: "M479.75 1034.05,L551 1016",
                            distance: 73.5,
                            isReverse: !0
                        }, {
                            to: "en",
                            direction: "w",
                            path: "M407.12 1052.45,L479.75 1034.05",
                            distance: 74.92,
                            isReverse: !1
                        }, {
                            to: "et",
                            direction: "s",
                            path: "M479.75 1034.05,L490.51 1081.17",
                            distance: 48.33,
                            isReverse: !0
                        }, {
                            to: "ej",
                            direction: "n",
                            path: "M469 987,L479.75 1034.05",
                            distance: 48.26,
                            isReverse: !1
                        }]
                    },
                    en: {
                        point: {
                            x: 407.12,
                            y: 1052.45
                        },
                        connections: [{
                            to: "eo",
                            direction: "e",
                            path: "M407.12 1052.45,L479.75 1034.05",
                            distance: 74.92,
                            isReverse: !0
                        }, {
                            to: "em",
                            direction: "w",
                            path: "M335.59 1070.58,L407.12 1052.45",
                            distance: 73.79,
                            isReverse: !1
                        }, {
                            to: "es",
                            direction: "s",
                            path: "M407.11 1052.4,L417.9 1099.62",
                            distance: 48.44,
                            isReverse: !0
                        }]
                    },
                    em: {
                        point: {
                            x: 335.59,
                            y: 1070.58
                        },
                        connections: [{
                            to: "en",
                            direction: "e",
                            path: "M335.59 1070.58,L407.12 1052.45",
                            distance: 73.79,
                            isReverse: !0
                        }, {
                            to: "ak",
                            direction: "w",
                            path: "M263.68 1088.8,L335.59 1070.58",
                            distance: 74.18,
                            isReverse: !1
                        }, {
                            to: "er",
                            direction: "s",
                            path: "M335.59 1070.58,L346.09 1117.86",
                            distance: 48.43,
                            isReverse: !0
                        }]
                    },
                    el: {
                        point: {
                            x: 629.02,
                            y: 968.06
                        },
                        connections: [{
                            to: "eq",
                            direction: "s",
                            path: "M629.02,968c0,15.04,0.08,31.57,0.3,48",
                            distance: 48,
                            isReverse: !0
                        }, {
                            to: "ei",
                            direction: "n",
                            path: "M629.39,907c0,0-0.38,26.63-0.37,61",
                            distance: 61,
                            isReverse: !1
                        }, {
                            to: "ek",
                            direction: "w",
                            path: "M540.52 968.11,L629.02 968.06",
                            distance: 88.5,
                            isReverse: !1
                        }]
                    },
                    ek: {
                        point: {
                            x: 540.52,
                            y: 968.11
                        },
                        connections: [{
                            to: "ej",
                            direction: "w",
                            path: "M469 987,L540.52 968.11",
                            distance: 73.97,
                            isReverse: !1
                        }, {
                            to: "eg",
                            direction: "n",
                            path: "M529.98 921.01,L540.52 968.11",
                            distance: 48.26,
                            isReverse: !1
                        }, {
                            to: "ep",
                            direction: "s",
                            path: "M540.52 968.11,L551.23 1015.95",
                            distance: 49.02,
                            isReverse: !0
                        }, {
                            to: "el",
                            direction: "e",
                            path: "M540.52 968.11,L629.02 968.06",
                            distance: 88.5,
                            isReverse: !0
                        }]
                    },
                    ej: {
                        point: {
                            x: 469,
                            y: 987
                        },
                        connections: [{
                            to: "ef",
                            direction: "n",
                            path: "M458.06 938.98,L469 987",
                            distance: 49.25,
                            isReverse: !1
                        }, {
                            to: "ek",
                            direction: "e",
                            path: "M469 987,L540.52 968.11",
                            distance: 73.97,
                            isReverse: !0
                        }, {
                            to: "eo",
                            direction: "s",
                            path: "M469 987,L479.75 1034.05",
                            distance: 48.26,
                            isReverse: !0
                        }]
                    },
                    ei: {
                        point: {
                            x: 629.39,
                            y: 907
                        },
                        connections: [{
                            to: "eh",
                            direction: "w",
                            path: "M586.11,907.9c4.86-0.6,9.76-0.9,14.66-0.9h28.62",
                            distance: 43.32,
                            isReverse: !1
                        }, {
                            to: "el",
                            direction: "s",
                            path: "M629.39,907c0,0-0.38,26.63-0.37,61",
                            distance: 61,
                            isReverse: !0
                        }, {
                            to: "bh",
                            direction: "e",
                            path: "M629.39 907,L698.73 907",
                            distance: 69.34,
                            isReverse: !0
                        }]
                    },
                    eh: {
                        point: {
                            x: 586.11,
                            y: 907.9
                        },
                        connections: [{
                            to: "ei",
                            direction: "e",
                            path: "M586.11,907.9c4.86-0.6,9.76-0.9,14.66-0.9h28.62",
                            distance: 43.32,
                            isReverse: !0
                        }, {
                            to: "ec",
                            direction: "n",
                            newDirection: "w",
                            path: "M512.99,845.06c11.49-2.48,21.96-4.95,30.94-7.19c17.57-4.36,34.98,7.69,37.05,25.67l5.12,44.36",
                            distance: 127.42,
                            isReverse: !1
                        }, {
                            to: "eg",
                            direction: "w",
                            path: "M529.98,921.01l41.68-10.42c4.76-1.19,9.58-2.09,14.44-2.68",
                            distance: 57.66,
                            isReverse: !1
                        }]
                    },
                    eg: {
                        point: {
                            x: 529.98,
                            y: 921.01
                        },
                        connections: [{
                            to: "eh",
                            direction: "e",
                            path: "M529.98,921.01l41.68-10.42c4.76-1.19,9.58-2.09,14.44-2.68",
                            distance: 57.66,
                            isReverse: !0
                        }, {
                            to: "ef",
                            direction: "w",
                            path: "M458.07 938.99,L529.98 921.01",
                            distance: 74.12,
                            isReverse: !1
                        }, {
                            to: "ec",
                            direction: "n",
                            path: "M512.99 845.06,L529.98 921.01",
                            distance: 77.83,
                            isReverse: !1
                        }, {
                            to: "ek",
                            direction: "s",
                            path: "M529.98 921.01,L540.52 968.11",
                            distance: 48.26,
                            isReverse: !0
                        }]
                    },
                    ef: {
                        point: {
                            x: 458.07,
                            y: 938.99
                        },
                        connections: [{
                            to: "eg",
                            direction: "e",
                            path: "M458.07 938.99,L529.98 921.01",
                            distance: 74.12,
                            isReverse: !0
                        }, {
                            to: "ee",
                            direction: "w",
                            path: "M386.37 956.92,L458.07 938.99",
                            distance: 73.91,
                            isReverse: !1
                        }, {
                            to: "ej",
                            direction: "s",
                            path: "M458.06 938.98,L469 987",
                            distance: 49.25,
                            isReverse: !0
                        }, {
                            to: "eb",
                            direction: "n",
                            path: "M439.84 857.74,L458.06 938.98",
                            distance: 83.26,
                            isReverse: !1
                        }]
                    },
                    ee: {
                        point: {
                            x: 386.37,
                            y: 956.92
                        },
                        connections: [{
                            to: "aj",
                            direction: "s",
                            newDirection: "w",
                            path: "M253.06,1041.49l117.62-29.82c14.66-3.72,23.72-18.41,20.46-33.18l-4.77-21.57",
                            distance: 186.55,
                            isReverse: !1
                        }, {
                            to: "ed",
                            direction: "n",
                            newDirection: "w",
                            path: "M303.71,928.49l44.26-11.32c15.33-3.92,30.86,5.63,34.28,21.08l4.13,18.66",
                            distance: 109.7,
                            isReverse: !1
                        }, {
                            to: "ef",
                            direction: "e",
                            path: "M386.37 956.92,L458.07 938.99",
                            distance: 73.91,
                            isReverse: !0
                        }]
                    },
                    ed: {
                        point: {
                            x: 303.71,
                            y: 928.49
                        },
                        connections: [{
                            to: "ee",
                            direction: "e",
                            newDirection: "s",
                            path: "M303.71,928.49l44.26-11.32c15.33-3.92,30.86,5.63,34.28,21.08l4.13,18.66",
                            distance: 109.7,
                            isReverse: !0
                        }, {
                            to: "ah",
                            direction: "w",
                            path: "M231.84 946.88,L303.71 928.49",
                            distance: 74.19,
                            isReverse: !1
                        }, {
                            to: "ea",
                            direction: "n",
                            path: "M284.03 840.77,L303.71 928.49",
                            distance: 89.9,
                            isReverse: !1
                        }]
                    },
                    ec: {
                        point: {
                            x: 512.99,
                            y: 845.06
                        },
                        connections: [{
                            to: "eh",
                            direction: "e",
                            newDirection: "s",
                            path: "M512.99,845.06c11.49-2.48,21.96-4.95,30.94-7.19c17.57-4.36,34.98,7.69,37.05,25.67l5.12,44.36",
                            distance: 127.42,
                            isReverse: !0
                        }, {
                            to: "eb",
                            direction: "w",
                            path: "M439.84,857.74c26.02-3.25,51.42-7.99,73.15-12.68",
                            distance: 74.26,
                            isReverse: !1
                        }, {
                            to: "eg",
                            direction: "s",
                            path: "M512.99 845.06,L529.98 921.01",
                            distance: 77.83,
                            isReverse: !0
                        }]
                    },
                    eb: {
                        point: {
                            x: 439.84,
                            y: 857.74
                        },
                        connections: [{
                            to: "ec",
                            direction: "e",
                            path: "M439.84,857.74c26.02-3.25,51.42-7.99,73.15-12.68",
                            distance: 74.26,
                            isReverse: !0
                        }, {
                            to: "ea",
                            direction: "w",
                            path: "M284.03,840.77c5.74,1.38,11.32,3.51,16.6,6.37c32.58,17.66,87.14,17.11,139.21,10.6",
                            distance: 159.37,
                            isReverse: !1
                        }, {
                            to: "ef",
                            direction: "s",
                            path: "M439.84 857.74,L458.06 938.98",
                            distance: 83.26,
                            isReverse: !0
                        }]
                    },
                    ea: {
                        point: {
                            x: 284.03,
                            y: 840.77
                        },
                        connections: [{
                            to: "eb",
                            direction: "e",
                            path: "M284.03,840.77c5.74,1.38,11.32,3.51,16.6,6.37c32.58,17.66,87.14,17.11,139.21,10.6",
                            distance: 159.37,
                            isReverse: !0
                        }, {
                            to: "af",
                            direction: "w",
                            path: "M210.61,852.27l37.88-10.75c11.68-3.32,23.93-3.55,35.54-0.74",
                            distance: 75.32,
                            isReverse: !1
                        }, {
                            to: "ae",
                            direction: "n",
                            newDirection: "w",
                            path: "M205.5,809.55C239,798.9,242,790,257,773s47-4,47,13s-18,29-19.97,54.77",
                            distance: 183.01,
                            isReverse: !1
                        }, {
                            to: "ed",
                            direction: "s",
                            path: "M284.03 840.77,L303.71 928.49",
                            distance: 89.9,
                            isReverse: !0
                        }]
                    },
                    n3: {
                        point: {
                            x: 412,
                            y: 664
                        },
                        connections: [{
                            to: "nz",
                            direction: "e",
                            newDirection: "n",
                            path: "M484.39,615.84c0,0,12.61,39.16,0.61,48.16s-56,2-73,0",
                            distance: 124.17,
                            isReverse: !1
                        }]
                    },
                    n2: {
                        point: {
                            x: 139,
                            y: 722
                        },
                        connections: [{
                            to: "ca",
                            direction: "n",
                            path: "M123.29,653.21c0,0-10.29,40.79,15.71,68.79",
                            distance: 73.28,
                            isReverse: !1
                        }]
                    },
                    n1: {
                        point: {
                            x: 587,
                            y: 588
                        },
                        connections: [{
                            to: "nv",
                            direction: "n",
                            path: "M590.55,534.24C594.58,546.76,594,570,587,588",
                            distance: 54.71,
                            isReverse: !1
                        }]
                    },
                    n0: {
                        point: {
                            x: 535.8,
                            y: 616.61
                        },
                        connections: [{
                            to: "nw",
                            direction: "e",
                            newDirection: "n",
                            path: "M647.02,538.97c0.94,2.65,4.74,11.83,5.7,13.89C665.01,579.05,657,612,643,617s-107.2-0.39-107.2-0.39",
                            distance: 192.79,
                            isReverse: !1
                        }, {
                            to: "cc",
                            direction: "s",
                            path: "M535.8,616.61c0.12,53.33,0.2,90.43,0.2,90.43",
                            distance: 90.43,
                            isReverse: !0
                        }, {
                            to: "nu",
                            direction: "n",
                            path: "M535.62,534.08c0.06,29.62,0.13,57.82,0.18,82.53",
                            distance: 82.53,
                            isReverse: !1
                        }, {
                            to: "nz",
                            direction: "w",
                            path: "M484.39,615.84c22,0.69,42.66,1.12,51.41,0.77",
                            distance: 51.42,
                            isReverse: !1
                        }]
                    },
                    nz: {
                        point: {
                            x: 484.39,
                            y: 615.84
                        },
                        connections: [{
                            to: "ny",
                            direction: "w",
                            path: "M292.52,612.37c6.83,0,11.72-4.07,21.29-4.02c13.52,0.06,104.58,5.41,170.58,7.49",
                            distance: 192.51,
                            isReverse: !1
                        }, {
                            to: "n0",
                            direction: "e",
                            path: "M484.39,615.84c22,0.69,42.66,1.12,51.41,0.77",
                            distance: 51.42,
                            isReverse: !0
                        }, {
                            to: "n3",
                            direction: "s",
                            newDirection: "e",
                            path: "M484.39,615.84c0,0,12.61,39.16,0.61,48.16s-56,2-73,0",
                            distance: 124.17,
                            isReverse: !0
                        }, {
                            to: "nt",
                            direction: "n",
                            path: "M462.01,540.33c-1,31.73,22.38,75.51,22.38,75.51",
                            distance: 79.47,
                            isReverse: !1
                        }]
                    },
                    ny: {
                        point: {
                            x: 292.52,
                            y: 612.37
                        },
                        connections: [{
                            to: "nr",
                            direction: "n",
                            path: "M293.12,539c0.08,27.69-0.09,53.18-0.6,73.37",
                            distance: 73.37,
                            isReverse: !1
                        }, {
                            to: "cb",
                            direction: "s",
                            path: "M292.52,612.37c-0.49,19.23-1.74,34.91-2.96,41.89",
                            distance: 42.02,
                            isReverse: !0
                        }, {
                            to: "nz",
                            direction: "e",
                            path: "M292.52,612.37c6.83,0,11.72-4.07,21.29-4.02c13.52,0.06,104.58,5.41,170.58,7.49",
                            distance: 192.51,
                            isReverse: !0
                        }]
                    },
                    nx: {
                        point: {
                            x: 130,
                            y: 599
                        },
                        connections: [{
                            to: "nq",
                            direction: "n",
                            path: "M105.45,521.03c0,0-1.45,54.97,24.55,77.97",
                            distance: 83.92,
                            isReverse: !1
                        }]
                    },
                    nw: {
                        point: {
                            x: 647.02,
                            y: 538.97
                        },
                        connections: [{
                            to: "np",
                            direction: "n",
                            newDirection: "w",
                            path: "M535.49,474.62c33.5,0,49.46-7.3,75.46-3.3c23.25,3.58,28.15,45.28,36.08,67.65",
                            distance: 156,
                            isReverse: !1
                        }, {
                            to: "n0",
                            direction: "s",
                            newDirection: "w",
                            path: "M647.02,538.97c0.94,2.65,4.74,11.83,5.7,13.89C665.01,579.05,657,612,643,617s-107.2-0.39-107.2-0.39",
                            distance: 192.79,
                            isReverse: !0
                        }, {
                            to: "nv",
                            direction: "w",
                            path: "M590.55,534.24c22.34,0.48,44.94,1.72,56.48,4.72",
                            distance: 56.77,
                            isReverse: !1
                        }]
                    },
                    nv: {
                        point: {
                            x: 590.55,
                            y: 534.24
                        },
                        connections: [{
                            to: "nw",
                            direction: "e",
                            path: "M590.55,534.24c22.34,0.48,44.94,1.72,56.48,4.72",
                            distance: 56.77,
                            isReverse: !0
                        }, {
                            to: "nu",
                            direction: "w",
                            path: "M535.62,534.08c10.5-0.04,32.58-0.32,54.93,0.17",
                            distance: 54.93,
                            isReverse: !1
                        }, {
                            to: "n1",
                            direction: "s",
                            newDirection: "n",
                            path: "M590.55,534.24C594.58,546.76,594,570,587,588",
                            distance: 54.71,
                            isReverse: !0
                        }]
                    },
                    nu: {
                        point: {
                            x: 535.62,
                            y: 534.08
                        },
                        connections: [{
                            to: "np",
                            direction: "n",
                            path: "M535.49,474.62c0.04,20.04,0.09,40.05,0.13,59.45",
                            distance: 59.45,
                            isReverse: !1
                        }, {
                            to: "n0",
                            direction: "s",
                            path: "M535.62,534.08c0.06,29.62,0.13,57.82,0.18,82.53",
                            distance: 82.53,
                            isReverse: !0
                        }, {
                            to: "nv",
                            direction: "e",
                            path: "M535.62,534.08c10.5-0.04,32.58-0.32,54.93,0.17",
                            distance: 54.93,
                            isReverse: !0
                        }, {
                            to: "nt",
                            direction: "w",
                            path: "M462.01,540.33c24.12,0.24,48.48-1.13,73.61-6.25",
                            distance: 74.02,
                            isReverse: !1
                        }]
                    },
                    nt: {
                        point: {
                            x: 462.01,
                            y: 540.33
                        },
                        connections: [{
                            to: "nz",
                            direction: "s",
                            path: "M462.01,540.33c-1,31.73,22.38,75.51,22.38,75.51",
                            distance: 79.47,
                            isReverse: !0
                        }, {
                            to: "nu",
                            direction: "e",
                            path: "M462.01,540.33c24.12,0.24,48.48-1.13,73.61-6.25",
                            distance: 74.02,
                            isReverse: !0
                        }, {
                            to: "home",
                            direction: "w",
                            path: "M370,535.94c30.98,1.14,61.29,4.08,92.01,4.39",
                            distance: 92.12,
                            isReverse: !1
                        }]
                    },
                    home: {
                        point: {
                            x: 370,
                            y: 535.94
                        },
                        connections: [{
                            to: "nt",
                            direction: "e",
                            path: "M370,535.94c30.98,1.14,61.29,4.08,92.01,4.39",
                            distance: 92.12,
                            isReverse: !0
                        }, {
                            to: "nr",
                            direction: "w",
                            path: "M293,539c26.49-3.74,51.96-3.98,77-3.06",
                            distance: 77.16,
                            isReverse: !1
                        }]
                    },
                    nr: {
                        point: {
                            x: 293.12,
                            y: 539
                        },
                        connections: [{
                            to: "ny",
                            direction: "s",
                            path: "M293.12,539c0.08,27.69-0.09,53.18-0.6,73.37",
                            distance: 73.37,
                            isReverse: !0
                        }, {
                            to: "ng",
                            direction: "n",
                            path: "M291.66,417.01c0.76,39.27,1.35,82.83,1.46,121.99",
                            distance: 122,
                            isReverse: !1
                        }, {
                            to: "home",
                            direction: "e",
                            path: "M293,539c26.49-3.74,51.96-3.98,77-3.06",
                            distance: 77.16,
                            isReverse: !0
                        }]
                    },
                    nq: {
                        point: {
                            x: 105.45,
                            y: 521.03
                        },
                        connections: [{
                            to: "nf",
                            direction: "n",
                            path: "M128.5,401.25C116.5,416.75,105,434,105,457c0,14.87,0.45,64.03,0.45,64.03",
                            distance: 125.76,
                            isReverse: !1
                        }, {
                            to: "ac",
                            direction: "e",
                            path: "M105.45,521.03c20.03,6.51,40.05,13.01,59.55,13.05c8,0.01,22.1,0.57,40.5,1.34",
                            distance: 101.74,
                            isReverse: !0
                        }, {
                            to: "bb",
                            direction: "w",
                            path: "M36.79,508.45c22.39-2.44,45.54,5.07,68.66,12.58",
                            distance: 70.34,
                            isReverse: !1
                        }, {
                            to: "nx",
                            direction: "s",
                            newDirection: "n",
                            path: "M105.45,521.03c0,0-1.45,54.97,24.55,77.97",
                            distance: 83.92,
                            isReverse: !0
                        }]
                    },
                    np: {
                        point: {
                            x: 535.49,
                            y: 474.62
                        },
                        connections: [{
                            to: "nu",
                            direction: "s",
                            path: "M535.49,474.62c0.04,20.04,0.09,40.05,0.13,59.45",
                            distance: 59.45,
                            isReverse: !0
                        }, {
                            to: "nw",
                            direction: "e",
                            newDirection: "s",
                            path: "M535.49,474.62c33.5,0,49.46-7.3,75.46-3.3c23.25,3.58,28.15,45.28,36.08,67.65",
                            distance: 156,
                            isReverse: !0
                        }, {
                            to: "nj",
                            direction: "n",
                            path: "M535.32,396.99c0.05,25.06,0.11,51.37,0.17,77.63",
                            distance: 77.63,
                            isReverse: !1
                        }, {
                            to: "no",
                            direction: "w",
                            path: "M494.01,474.62c22.69,0,41.48,0,41.48,0",
                            distance: 41.48,
                            isReverse: !1
                        }]
                    },
                    no: {
                        point: {
                            x: 494.01,
                            y: 474.62
                        },
                        connections: [{
                            to: "ne",
                            direction: "n",
                            newDirection: "w",
                            path: "M411.58,355.72c34.65,0,69.95,3.53,79.04,34.51c7.66,26.08,4.5,73.16,3.38,84.39",
                            distance: 177.9,
                            isReverse: !1
                        }, {
                            to: "np",
                            direction: "e",
                            path: "M494.01,474.62c22.69,0,41.48,0,41.48,0",
                            distance: 41.48,
                            isReverse: !0
                        }, {
                            to: "nn",
                            direction: "w",
                            path: "M411.58,474.62c11.52,0,51.14,0,82.42,0",
                            distance: 82.42,
                            isReverse: !1
                        }]
                    },
                    nn: {
                        point: {
                            x: 411.58,
                            y: 474.62
                        },
                        connections: [{
                            to: "no",
                            direction: "e",
                            path: "M411.58,474.62c11.52,0,51.14,0,82.42,0",
                            distance: 82.42,
                            isReverse: !0
                        }, {
                            to: "ni",
                            direction: "w",
                            newDirection: "n",
                            path: "M370.44,415.17c0,0,0,59.45,41.14,59.45",
                            distance: 80.52,
                            isReverse: !1
                        }, {
                            to: "ne",
                            direction: "n",
                            path: "M411.58 355.72,L411.58 474.62",
                            distance: 118.9,
                            isReverse: !1
                        }]
                    },
                    nm: {
                        point: {
                            x: 335,
                            y: 484
                        },
                        connections: [{
                            to: "nh",
                            direction: "n",
                            path: "M329,417.39c0,0-2,49.61,6,66.61",
                            distance: 67.27,
                            isReverse: !1
                        }]
                    },
                    nl: {
                        point: {
                            x: 161,
                            y: 477
                        },
                        connections: [{
                            to: "nf",
                            direction: "n",
                            newDirection: "w",
                            path: "M128.5,401.25c51-1,38.5,43.75,32.5,75.75",
                            distance: 101.33,
                            isReverse: !1
                        }]
                    },
                    nk: {
                        point: {
                            x: 583.35,
                            y: 438
                        },
                        connections: [{
                            to: "nj",
                            direction: "n",
                            newDirection: "w",
                            path: "M535.32,396.99c0,0,45.79,4.22,48.03,41.01",
                            distance: 68.85,
                            isReverse: !1
                        }]
                    },
                    nj: {
                        point: {
                            x: 535.32,
                            y: 396.99
                        },
                        connections: [{
                            to: "bf",
                            direction: "n",
                            path: "M535.16,320.24c0.05,22.87,0.1,49.04,0.16,76.75",
                            distance: 76.75,
                            isReverse: !1
                        }, {
                            to: "np",
                            direction: "s",
                            path: "M535.32,396.99c0.05,25.06,0.11,51.37,0.17,77.63",
                            distance: 77.63,
                            isReverse: !0
                        }, {
                            to: "nk",
                            direction: "e",
                            newDirection: "n",
                            path: "M535.32,396.99c0,0,45.79,4.22,48.03,41.01",
                            distance: 68.85,
                            isReverse: !0
                        }]
                    },
                    ni: {
                        point: {
                            x: 370.44,
                            y: 415.17
                        },
                        connections: [{
                            to: "nh",
                            direction: "w",
                            path: "M329,417.39c25.64-0.45,41.45-2.22,41.45-2.22",
                            distance: 41.52,
                            isReverse: !1
                        }, {
                            to: "nn",
                            direction: "s",
                            newDirection: "e",
                            path: "M370.44,415.17c0,0,0,59.45,41.14,59.45",
                            distance: 80.52,
                            isReverse: !0
                        }, {
                            to: "bd",
                            direction: "n",
                            path: "M370.44,297.72c0,58.82,0.01,117.45,0.01,117.45",
                            distance: 117.45,
                            isReverse: !1
                        }]
                    },
                    nh: {
                        point: {
                            x: 329,
                            y: 417.39
                        },
                        connections: [{
                            to: "ni",
                            direction: "e",
                            path: "M329,417.39c25.64-0.45,41.45-2.22,41.45-2.22",
                            distance: 41.52,
                            isReverse: !0
                        }, {
                            to: "nm",
                            direction: "s",
                            newDirection: "n",
                            path: "M329,417.39c0,0-2,49.61,6,66.61",
                            distance: 67.27,
                            isReverse: !0
                        }, {
                            to: "ng",
                            direction: "w",
                            path: "M291.66,417.01c13.9,0.52,26.5,0.57,37.34,0.39",
                            distance: 37.35,
                            isReverse: !1
                        }]
                    },
                    ng: {
                        point: {
                            x: 291.66,
                            y: 417.01
                        },
                        connections: [{
                            to: "nc",
                            direction: "n",
                            path: "M290.25,356.02c0.48,17.89,0.97,38.75,1.4,60.99",
                            distance: 61.01,
                            isReverse: !1
                        }, {
                            to: "nr",
                            direction: "s",
                            path: "M291.66,417.01c0.76,39.27,1.35,82.83,1.46,121.99",
                            distance: 122,
                            isReverse: !0
                        }, {
                            to: "nh",
                            direction: "e",
                            path: "M291.66,417.01c13.9,0.52,26.5,0.57,37.34,0.39",
                            distance: 37.35,
                            isReverse: !0
                        }]
                    },
                    nf: {
                        point: {
                            x: 128.5,
                            y: 401.25
                        },
                        connections: [{
                            to: "nq",
                            direction: "s",
                            path: "M128.5,401.25C116.5,416.75,105,434,105,457c0,14.87,0.45,64.03,0.45,64.03",
                            distance: 125.76,
                            isReverse: !0
                        }, {
                            to: "nl",
                            direction: "e",
                            newDirection: "n",
                            path: "M128.5,401.25c51-1,38.5,43.75,32.5,75.75",
                            distance: 101.33,
                            isReverse: !0
                        }, {
                            to: "na",
                            direction: "n",
                            newDirection: "s",
                            path: "M155,356c-2,16-14.5,29.75-26.5,45.25",
                            distance: 53.09,
                            isReverse: !1
                        }]
                    },
                    ne: {
                        point: {
                            x: 411.58,
                            y: 355.72
                        },
                        connections: [{
                            to: "no",
                            direction: "e",
                            newDirection: "s",
                            path: "M411.58,355.72c34.65,0,69.95,3.53,79.04,34.51c7.66,26.08,4.5,73.16,3.38,84.39",
                            distance: 177.9,
                            isReverse: !0
                        }, {
                            to: "nn",
                            direction: "s",
                            path: "M411.58 355.72,L411.58 474.62",
                            distance: 118.9,
                            isReverse: !0
                        }, {
                            to: "be",
                            direction: "n",
                            path: "M411.58 296.27,L411.58 355.72",
                            distance: 59.45,
                            isReverse: !1
                        }]
                    },
                    nd: {
                        point: {
                            x: 342,
                            y: 366
                        },
                        connections: [{
                            to: "nc",
                            direction: "w",
                            path: "M290.25,356.02c12,0,40.75-1.02,51.75,9.98",
                            distance: 53.83,
                            isReverse: !1
                        }]
                    },
                    nc: {
                        point: {
                            x: 290.25,
                            y: 356.02
                        },
                        connections: [{
                            to: "ng",
                            direction: "s",
                            path: "M290.25,356.02c0.48,17.89,0.97,38.75,1.4,60.99",
                            distance: 61.01,
                            isReverse: !0
                        }, {
                            to: "bc",
                            direction: "n",
                            path: "M288,297.63c0.53,4.25,1.39,26.66,2.25,58.39",
                            distance: 58.44,
                            isReverse: !1
                        }, {
                            to: "nd",
                            direction: "e",
                            newDirection: "w",
                            path: "M290.25,356.02c12,0,40.75-1.02,51.75,9.98",
                            distance: 53.83,
                            isReverse: !0
                        }, {
                            to: "nb",
                            direction: "w",
                            newDirection: "e",
                            path: "M237,356c12,6,36.41,0.02,53.25,0.02",
                            distance: 53.72,
                            isReverse: !1
                        }]
                    },
                    nb: {
                        point: {
                            x: 237,
                            y: 356
                        },
                        connections: [{
                            to: "nc",
                            direction: "e",
                            path: "M237,356c12,6,36.41,0.02,53.25,0.02",
                            distance: 53.72,
                            isReverse: !0
                        }]
                    },
                    na: {
                        point: {
                            x: 155,
                            y: 356
                        },
                        connections: [{
                            to: "nf",
                            direction: "s",
                            path: "M155,356c-2,16-14.5,29.75-26.5,45.25",
                            distance: 53.09,
                            isReverse: !0
                        }]
                    },
                    lk: {
                        point: {
                            x: 702,
                            y: 343.06
                        },
                        connections: [{
                            to: "lj",
                            direction: "n",
                            path: "M712.37,255.97c0,0-12.37,63.14-10.37,87.08",
                            distance: 87.86,
                            isReverse: !1
                        }, {
                            to: "li",
                            direction: "w",
                            path: "M535,236.81c0,0,30-2.81,66,25.19c27.7,21.54,53.62,60.25,101,81.06",
                            distance: 202.26,
                            isReverse: !1
                        }]
                    },
                    lj: {
                        point: {
                            x: 712.36,
                            y: 255.98
                        },
                        connections: [{
                            to: "lk",
                            direction: "s",
                            path: "M712.37,255.97c0,0-12.37,63.14-10.37,87.08",
                            distance: 87.86,
                            isReverse: !0
                        }, {
                            to: "lm",
                            direction: "w",
                            newDirection: "n",
                            path: "M598.7,155.51c0,19.81,51.07,85.09,113.66,100.47",
                            distance: 157.63,
                            isReverse: !1
                        }]
                    },
                    li: {
                        point: {
                            x: 535,
                            y: 236.81
                        },
                        connections: [{
                            to: "bf",
                            direction: "s",
                            path: "M535,236.81c0,5.1,0.06,37.64,0.16,83.43",
                            distance: 83.43,
                            isReverse: !0
                        }, {
                            to: "lh",
                            direction: "w",
                            path: "M435,236.19c12.4,0.24,35.83,0.62,58.86,0.62c33.5,0,41.14,0,41.14,0",
                            distance: 100,
                            isReverse: !1
                        }, {
                            to: "lk",
                            direction: "e",
                            path: "M535,236.81c0,0,30-2.81,66,25.19c27.7,21.54,53.62,60.25,101,81.06",
                            distance: 202.26,
                            isReverse: !0
                        }, {
                            to: "lc",
                            direction: "n",
                            path: "M491.04,51.99c6,65,43.96,118.82,43.96,184.82",
                            distance: 190.75,
                            isReverse: !1
                        }]
                    },
                    lh: {
                        point: {
                            x: 435,
                            y: 236.19
                        },
                        connections: [{
                            to: "lb",
                            direction: "n",
                            path: "M452.99,51.53c0,0,3,139.66-18,184.66",
                            distance: 186.48,
                            isReverse: !1
                        }, {
                            to: "li",
                            direction: "e",
                            path: "M435,236.19c12.4,0.24,35.83,0.62,58.86,0.62c33.5,0,41.14,0,41.14,0",
                            distance: 100,
                            isReverse: !0
                        }, {
                            to: "lg",
                            direction: "w",
                            path: "M370.44,236.81L426,236c0,0,3.36,0.08,9,0.19",
                            distance: 64.57,
                            isReverse: !1
                        }]
                    },
                    lg: {
                        point: {
                            x: 370.44,
                            y: 236.81
                        },
                        connections: [{
                            to: "lf",
                            direction: "w",
                            path: "M247.02,237.58c61.98,0.25,111.36-0.76,123.42-0.76",
                            distance: 123.42,
                            isReverse: !1
                        }, {
                            to: "le",
                            direction: "n",
                            path: "M370.44,177.36c0,4.59,0,28.47,0,59.45",
                            distance: 59.45,
                            isReverse: !1
                        }, {
                            to: "lh",
                            direction: "e",
                            path: "M370.44,236.81L426,236c0,0,3.36,0.08,9,0.19",
                            distance: 64.57,
                            isReverse: !0
                        }]
                    },
                    lf: {
                        point: {
                            x: 247.02,
                            y: 237.62
                        },
                        connections: [{
                            to: "aa",
                            direction: "w",
                            path: "M205.5,237.22c14.26,0.19,28.18,0.3,41.52,0.36",
                            distance: 41.52,
                            isReverse: !1
                        }, {
                            to: "ld",
                            direction: "n",
                            newDirection: "e",
                            path: "M288.17,117.91c-45.14,1.66-41.14,42.62-41.14,59.45s0,60.22,0,60.22",
                            distance: 143.67,
                            isReverse: !1
                        }, {
                            to: "lg",
                            direction: "e",
                            path: "M247.02,237.58c61.98,0.25,111.36-0.76,123.42-0.76",
                            distance: 123.42,
                            isReverse: !0
                        }]
                    },
                    le: {
                        point: {
                            x: 370.44,
                            y: 177.36
                        },
                        connections: [{
                            to: "ld",
                            direction: "w",
                            newDirection: "n",
                            path: "M288.17,117.91c-8.53,26.72-25.53,60.51,41.14,59.45c22.69-0.36,22.14,0,41.14,0",
                            distance: 138.9,
                            isReverse: !1
                        }, {
                            to: "lg",
                            direction: "s",
                            path: "M370.44,177.36c0,4.59,0,28.47,0,59.45",
                            distance: 59.45,
                            isReverse: !0
                        }, {
                            to: "la",
                            direction: "n",
                            path: "M370.44,58.45c24.78,14.26,41.14,33.5,41.14,51.91c0,36.76-41.14,33.64-41.14,67",
                            distance: 151.3,
                            isReverse: !1
                        }]
                    },
                    ld: {
                        point: {
                            x: 287.97,
                            y: 117.91
                        },
                        connections: [{
                            to: "le",
                            direction: "s",
                            newDirection: "e",
                            path: "M288.17,117.91c-8.53,26.72-25.53,60.51,41.14,59.45c22.69-0.36,22.14,0,41.14,0",
                            distance: 138.9,
                            isReverse: !0
                        }, {
                            to: "la",
                            direction: "e",
                            path: "M370.44,58.45C305,69,340,116,288.17,117.91",
                            distance: 108.39,
                            isReverse: !1
                        }, {
                            to: "lf",
                            direction: "w",
                            newDirection: "s",
                            path: "M288.17,117.91c-45.14,1.66-41.14,42.62-41.14,59.45s0,60.22,0,60.22",
                            distance: 143.67,
                            isReverse: !0
                        }]
                    },
                    lc: {
                        point: {
                            x: 491.04,
                            y: 51.99
                        },
                        connections: [{
                            to: "lm",
                            direction: "e",
                            newDirection: "s",
                            path: "M491.04,51.99c6.05,0.3,15.21-0.34,19.25-0.28c39.31,0.61,88.4,72.18,88.4,103.8",
                            distance: 163.75,
                            isReverse: !0
                        }, {
                            to: "lb",
                            direction: "w",
                            path: "M452.99,51.53c15.39-0.25,28.49,0.06,38.05,0.46",
                            distance: 38.06,
                            isReverse: !1
                        }, {
                            to: "li",
                            direction: "s",
                            path: "M491.04,51.99c6,65,43.96,118.82,43.96,184.82",
                            distance: 190.75,
                            isReverse: !0
                        }]
                    },
                    lm: {
                        point: {
                            x: 599.15,
                            y: 155.51
                        },
                        connections: [{
                            to: "lc",
                            direction: "n",
                            newDirection: "w",
                            path: "M491.04,51.99c6.05,0.3,15.21-0.34,19.25-0.28c39.31,0.61,88.4,72.18,88.4,103.8",
                            distance: 163.75,
                            isReverse: !1
                        }, {
                            to: "ln",
                            direction: "e",
                            newDirection: "s",
                            path: "M598.7,155.51c32.35,0,44.36-15.1,44.36-15.1l58.63-77.67c0,0,8.53-13.18,8.53-30.45",
                            distance: 177.42,
                            isReverse: !0
                        }, {
                            to: "lj",
                            direction: "s",
                            newDirection: "e",
                            path: "M598.7,155.51c0,19.81,51.07,85.09,113.66,100.47",
                            distance: 157.63,
                            isReverse: !0
                        }]
                    },
                    ln: {
                        point: {
                            x: 710.22,
                            y: 32.29
                        },
                        connections: [{
                            to: "lm",
                            direction: "s",
                            newDirection: "w",
                            path: "M598.7,155.51c32.35,0,44.36-15.1,44.36-15.1l58.63-77.67c0,0,8.53-13.18,8.53-30.45",
                            distance: 177.42,
                            isReverse: !1
                        }]
                    },
                    lb: {
                        point: {
                            x: 453.14,
                            y: 51.44
                        },
                        connections: [{
                            to: "lh",
                            direction: "s",
                            path: "M452.99,51.53c0,0,3,139.66-18,184.66",
                            distance: 186.48,
                            isReverse: !0
                        }, {
                            to: "la",
                            direction: "w",
                            path: "M370.44,58.45c29.82-4.81,58.88-6.53,82.55-6.92",
                            distance: 82.91,
                            isReverse: !1
                        }, {
                            to: "lc",
                            direction: "e",
                            path: "M452.99,51.53c15.39-0.25,28.49,0.06,38.05,0.46",
                            distance: 38.06,
                            isReverse: !0
                        }]
                    },
                    la: {
                        point: {
                            x: 370.44,
                            y: 58.45
                        },
                        connections: [{
                            to: "ld",
                            direction: "w",
                            path: "M370.44,58.45C305,69,340,116,288.17,117.91",
                            distance: 108.39,
                            isReverse: !0
                        }, {
                            to: "le",
                            direction: "s",
                            path: "M370.44,58.45c24.78,14.26,41.14,33.5,41.14,51.91c0,36.76-41.14,33.64-41.14,67",
                            distance: 151.3,
                            isReverse: !0
                        }, {
                            to: "lb",
                            direction: "e",
                            path: "M370.44,58.45c29.82-4.81,58.88-6.53,82.55-6.92",
                            distance: 82.91,
                            isReverse: !0
                        }]
                    },
                    ll: {
                        point: {
                            x: 294.02,
                            y: 43.6
                        },
                        connections: [{
                            to: "am",
                            direction: "s",
                            newDirection: "w",
                            path: "M205.5,71.01c9.93-0.65,17.38-3.87,23.29,3.71c5.92,7.58-6.29,32.75-0.28,40.26c6.01,7.51,10.7,2.43,16.33-14.36c3.92-11.69,2.1-29.61-7.04-40.26c-9.54-11.12,4.07-13.21,13.7-5.37c7.28,5.93,8.07,25.68,8.83,33.19c0.43,4.28,5.33,10.44,14.08,2.58c8.45-7.58-15.18-39.43-9.01-42.52c9.29-4.65,17.74,39.93,27.31,36.83c10.07-3.26,1.22-27.64,1.31-41.48",
                            distance: 355.83,
                            isReverse: !1
                        }]
                    },
                    gg: {
                        point: {
                            x: 139.05,
                            y: 77.13
                        },
                        connections: [{
                            to: "gd",
                            direction: "s",
                            newDirection: "w",
                            path: "M139.05,77.13c8.61,9.1,24.16,25.21,19.16,39.21s-33.05,14.66-50.52,16.25",
                            distance: 101.2,
                            isReverse: !0
                        }, {
                            to: "gb",
                            direction: "n",
                            newDirection: "w",
                            path: "M67.11,53.06c7.67-7.47,17.04-13.13,27.43-16.38c12.58-3.92,25.5-3.37,29.52,3.17c8,13,5.94,27.71,14.99,37.28",
                            distance: 104.28,
                            isReverse: !1
                        }]
                    },
                    gf: {
                        point: {
                            x: 130,
                            y: 235.4
                        },
                        connections: [{
                            to: "aa",
                            direction: "e",
                            path: "M130,235.4c25.33,0.93,50.92,1.5,75.5,1.83",
                            distance: 75.52,
                            isReverse: !0
                        }, {
                            to: "ge",
                            direction: "w",
                            path: "M51,231.05c25,1.95,51.85,3.35,79,4.34",
                            distance: 79.12,
                            isReverse: !1
                        }, {
                            to: "gd",
                            direction: "n",
                            path: "M107.7,132.59c0.32,9.22-1.74,18.14-2.7,23.41c-4.05,22.31,6.84,24.38,6,48c-0.64,18.02,16,18,19,31.4",
                            distance: 110.64,
                            isReverse: !1
                        }]
                    },
                    ge: {
                        point: {
                            x: 51,
                            y: 231.05
                        },
                        connections: [{
                            to: "gf",
                            direction: "e",
                            path: "M51,231.05c25,1.95,51.85,3.35,79,4.34",
                            distance: 79.12,
                            isReverse: !0
                        }, {
                            to: "gc",
                            direction: "n",
                            path: "M37,177c2,19,14,54.05,14,54.05",
                            distance: 55.92,
                            isReverse: !1
                        }]
                    },
                    gd: {
                        point: {
                            x: 107.7,
                            y: 132.59
                        },
                        connections: [{
                            to: "gg",
                            direction: "e",
                            newDirection: "n",
                            path: "M139.05,77.13c8.61,9.1,24.16,25.21,19.16,39.21s-33.05,14.66-50.52,16.25",
                            distance: 101.2,
                            isReverse: !1
                        }, {
                            to: "gc",
                            direction: "w",
                            path: "M37,177c30-38,70.7-44.41,70.7-44.41",
                            distance: 85.16,
                            isReverse: !1
                        }, {
                            to: "gf",
                            direction: "s",
                            path: "M107.7,132.59c0.32,9.22-1.74,18.14-2.7,23.41c-4.05,22.31,6.84,24.38,6,48c-0.64,18.02,16,18,19,31.4",
                            distance: 110.64,
                            isReverse: !0
                        }, {
                            to: "gb",
                            direction: "n",
                            path: "M67.11,53.06C71.71,60.36,74,78.25,77,85c4,9,23,20,28,33c1.75,4.56,2.52,9.61,2.7,14.59",
                            distance: 92.04,
                            isReverse: !1
                        }]
                    },
                    gc: {
                        point: {
                            x: 37,
                            y: 177
                        },
                        connections: [{
                            to: "gd",
                            direction: "e",
                            path: "M37,177c30-38,70.7-44.41,70.7-44.41",
                            distance: 85.16,
                            isReverse: !0
                        }, {
                            to: "ge",
                            direction: "s",
                            path: "M37,177c2,19,14,54.05,14,54.05",
                            distance: 55.92,
                            isReverse: !0
                        }, {
                            to: "ga",
                            direction: "n",
                            path: "M9.99,106.85C24.03,130.47,35.71,164.75,37,177",
                            distance: 75.52,
                            isReverse: !1
                        }]
                    },
                    gb: {
                        point: {
                            x: 67.11,
                            y: 53.06
                        },
                        connections: [{
                            to: "gg",
                            direction: "e",
                            newDirection: "s",
                            path: "M67.11,53.06c7.67-7.47,17.04-13.13,27.43-16.38c12.58-3.92,25.5-3.37,29.52,3.17c8,13,5.94,27.71,14.99,37.28",
                            distance: 104.28,
                            isReverse: !0
                        }, {
                            to: "gd",
                            direction: "s",
                            path: "M67.11,53.06C71.71,60.36,74,78.25,77,85c4,9,23,20,28,33c1.75,4.56,2.52,9.61,2.7,14.59",
                            distance: 92.04,
                            isReverse: !0
                        }, {
                            to: "ga",
                            direction: "w",
                            path: "M9.83,106.58c24.4-8.03,37.8-24.34,44.89-37.23c3.33-6.06,7.52-11.54,12.39-16.28",
                            distance: 80.29,
                            isReverse: !1
                        }]
                    },
                    ga: {
                        point: {
                            x: 9.99,
                            y: 106.58
                        },
                        connections: [{
                            to: "gc",
                            direction: "s",
                            path: "M9.99,106.85C24.03,130.47,35.71,164.75,37,177",
                            distance: 75.52,
                            isReverse: !0
                        }, {
                            to: "gb",
                            direction: "e",
                            path: "M9.83,106.58c24.4-8.03,37.8-24.34,44.89-37.23c3.33-6.06,7.52-11.54,12.39-16.28",
                            distance: 80.29,
                            isReverse: !0
                        }]
                    },
                    cc: {
                        point: {
                            x: 536,
                            y: 707.04
                        },
                        connections: [{
                            to: "n0",
                            direction: "n",
                            path: "M535.8,616.61c0.12,53.33,0.2,90.43,0.2,90.43",
                            distance: 90.43,
                            isReverse: !1
                        }, {
                            to: "bg",
                            direction: "e",
                            path: "M536,707.04c59.98-0.58,124.12,1.66,164.25,3.44",
                            distance: 164.3,
                            isReverse: !0
                        }, {
                            to: "cb",
                            direction: "w",
                            path: "M289.56,654.26c54.77,8.4,97.11,64.21,143.44,58.24c27.62-3.56,64.45-5.09,103-5.46",
                            distance: 260.25,
                            isReverse: !1
                        }]
                    },
                    cb: {
                        point: {
                            x: 289.56,
                            y: 654.26
                        },
                        connections: [{
                            to: "ny",
                            direction: "n",
                            path: "M292.52,612.37c-0.49,19.23-1.74,34.91-2.96,41.89",
                            distance: 42.02,
                            isReverse: !1
                        }, {
                            to: "cc",
                            direction: "e",
                            path: "M289.56,654.26c54.77,8.4,97.11,64.21,143.44,58.24c27.62-3.56,64.45-5.09,103-5.46",
                            distance: 260.25,
                            isReverse: !0
                        }, {
                            to: "ad",
                            direction: "w",
                            path: "M205.5,653.21c0,0,9,0,70.5,0c4.61,0,9.12,0.37,13.56,1.05",
                            distance: 84.11,
                            isReverse: !1
                        }]
                    },
                    ca: {
                        point: {
                            x: 122.93,
                            y: 653.21
                        },
                        connections: [{
                            to: "n2",
                            direction: "s",
                            newDirection: "n",
                            path: "M123.29,653.21c0,0-10.29,40.79,15.71,68.79",
                            distance: 73.28,
                            isReverse: !0
                        }, {
                            to: "ad",
                            direction: "e",
                            path: "M123.29 653.21,L205.5 653.21",
                            distance: 82.21,
                            isReverse: !0
                        }, {
                            to: "ba",
                            direction: "w",
                            path: "M41 653.21,L123.29 653.21",
                            distance: 82.29,
                            isReverse: !1
                        }]
                    },
                    bl: {
                        point: {
                            x: 702.74,
                            y: 1110
                        },
                        connections: [{
                            to: "bj",
                            direction: "n",
                            path: "M699.54,1016.01c0.28,16.54,2.35,80.1,3.2,93.99",
                            distance: 94.05,
                            isReverse: !1
                        }, {
                            to: "ey",
                            direction: "w",
                            path: "M634.03 1110,L702.74 1110",
                            distance: 68.71,
                            isReverse: !1
                        }]
                    },
                    bj: {
                        point: {
                            x: 700,
                            y: 1016
                        },
                        connections: [{
                            to: "bl",
                            direction: "s",
                            path: "M699.54,1016.01c0.28,16.54,2.35,80.1,3.2,93.99",
                            distance: 94.05,
                            isReverse: !0
                        }, {
                            to: "bh",
                            direction: "n",
                            path: "M698.73,907c0,20.7,0.55,93.6,0.82,109.01",
                            distance: 109.01,
                            isReverse: !1
                        }, {
                            to: "eq",
                            direction: "w",
                            path: "M629.36 1016,L700 1016",
                            distance: 70.64,
                            isReverse: !1
                        }]
                    },
                    bh: {
                        point: {
                            x: 698.73,
                            y: 907
                        },
                        connections: [{
                            to: "bj",
                            direction: "s",
                            path: "M698.73,907c0,20.7,0.55,93.6,0.82,109.01",
                            distance: 109.01,
                            isReverse: !0
                        }, {
                            to: "bg",
                            direction: "n",
                            path: "M700.25,710.48c-0.77,58.78-1.51,128.92-1.52,196.52",
                            distance: 196.53,
                            isReverse: !1
                        }, {
                            to: "ei",
                            direction: "w",
                            path: "M629.39 907,L698.73 907",
                            distance: 69.34,
                            isReverse: !1
                        }]
                    },
                    bg: {
                        point: {
                            x: 700.25,
                            y: 710.48
                        },
                        connections: [{
                            to: "cc",
                            direction: "w",
                            path: "M536,707.04c59.98-0.58,124.12,1.66,164.25,3.44",
                            distance: 164.3,
                            isReverse: !1
                        }, {
                            to: "bh",
                            direction: "s",
                            path: "M700.25,710.48c-0.77,58.78-1.51,128.92-1.52,196.52",
                            distance: 196.53,
                            isReverse: !0
                        }, {
                            to: "bf",
                            direction: "n",
                            newDirection: "w",
                            path: "M535.16,320.24c10.75,5.51,30.16,5.4,40.3,19.08C606.55,381.28,625,425,645,445s57,69,57,131c0,18.55-0.9,69.6-1.75,134.48",
                            distance: 452.96,
                            isReverse: !1
                        }]
                    },
                    bf: {
                        point: {
                            x: 535.16,
                            y: 320.24
                        },
                        connections: [{
                            to: "li",
                            direction: "n",
                            path: "M535,236.81c0,5.1,0.06,37.64,0.16,83.43",
                            distance: 83.43,
                            isReverse: !1
                        }, {
                            to: "nj",
                            direction: "s",
                            path: "M535.16,320.24c0.05,22.87,0.1,49.04,0.16,76.75",
                            distance: 76.75,
                            isReverse: !0
                        }, {
                            to: "bg",
                            direction: "e",
                            newDirection: "s",
                            path: "M535.16,320.24c10.75,5.51,30.16,5.4,40.3,19.08C606.55,381.28,625,425,645,445s57,69,57,131c0,18.55-0.9,69.6-1.75,134.48",
                            distance: 452.96,
                            isReverse: !0
                        }, {
                            to: "be",
                            direction: "w",
                            path: "M411.58,296.27c24.86-1.98,85.58,0.66,123.58,23.98",
                            distance: 127.57,
                            isReverse: !1
                        }]
                    },
                    be: {
                        point: {
                            x: 411.58,
                            y: 296.27
                        },
                        connections: [{
                            to: "bf",
                            direction: "e",
                            path: "M411.58,296.27c24.86-1.98,85.58,0.66,123.58,23.98",
                            distance: 127.57,
                            isReverse: !0
                        }, {
                            to: "bd",
                            direction: "w",
                            path: "M370.44,297.72c16.96-0.23,31.48-0.68,41.15-1.45",
                            distance: 41.18,
                            isReverse: !1
                        }, {
                            to: "ne",
                            direction: "s",
                            path: "M411.58 296.27,L411.58 355.72",
                            distance: 59.45,
                            isReverse: !0
                        }]
                    },
                    bd: {
                        point: {
                            x: 370.44,
                            y: 297.72
                        },
                        connections: [{
                            to: "ni",
                            direction: "s",
                            path: "M370.44,297.72c0,58.82,0.01,117.45,0.01,117.45",
                            distance: 117.45,
                            isReverse: !0
                        }, {
                            to: "be",
                            direction: "e",
                            path: "M370.44,297.72c16.96-0.23,31.48-0.68,41.15-1.45",
                            distance: 41.18,
                            isReverse: !0
                        }, {
                            to: "bc",
                            direction: "w",
                            path: "M288,297.63c27.59,0.29,57.61,0.43,82.43,0.09",
                            distance: 82.43,
                            isReverse: !1
                        }]
                    },
                    bc: {
                        point: {
                            x: 288,
                            y: 297.63
                        },
                        connections: [{
                            to: "nc",
                            direction: "s",
                            path: "M288,297.63c0.53,4.25,1.39,26.66,2.25,58.39",
                            distance: 58.44,
                            isReverse: !0
                        }, {
                            to: "bd",
                            direction: "e",
                            path: "M288,297.63c27.59,0.29,57.61,0.43,82.43,0.09",
                            distance: 82.43,
                            isReverse: !0
                        }, {
                            to: "ab",
                            direction: "w",
                            path: "M205.5,296.27c0,0,38.1,0.89,82.5,1.36",
                            distance: 82.51,
                            isReverse: !1
                        }]
                    },
                    bb: {
                        point: {
                            x: 36.79,
                            y: 508.45
                        },
                        connections: [{
                            to: "nq",
                            direction: "e",
                            path: "M36.79,508.45c22.39-2.44,45.54,5.07,68.66,12.58",
                            distance: 70.34,
                            isReverse: !0
                        }, {
                            to: "ab",
                            direction: "n",
                            newDirection: "e",
                            path: "M205.5,296.27C82.39,296.27,118.11,366,81.61,390c-34.01,22.36-64.6,50.77-53,85c3.31,9.77,5.86,21.2,7.8,33.45",
                            distance: 313.88,
                            isReverse: !1
                        }, {
                            to: "ba",
                            direction: "s",
                            path: "M36.41,508.45C46.18,570.16,41,653,41,653",
                            distance: 144.86,
                            isReverse: !0
                        }]
                    },
                    ba: {
                        point: {
                            x: 41,
                            y: 653.21
                        },
                        connections: [{
                            to: "bb",
                            direction: "n",
                            path: "M36.41,508.45C46.18,570.16,41,653,41,653",
                            distance: 144.86,
                            isReverse: !1
                        }, {
                            to: "ca",
                            direction: "e",
                            path: "M41 653.21,L123.29 653.21",
                            distance: 82.29,
                            isReverse: !0
                        }]
                    },
                    al: {
                        point: {
                            x: 274.29,
                            y: 1136.11
                        },
                        connections: [{
                            to: "er",
                            direction: "e",
                            path: "M274.29 1136.11,L346.09 1117.86",
                            distance: 74.08,
                            isReverse: !0
                        }, {
                            to: "ak",
                            direction: "n",
                            path: "M263.68 1088.8,L274.29 1136.11",
                            distance: 48.49,
                            isReverse: !1
                        }]
                    },
                    ak: {
                        point: {
                            x: 263.68,
                            y: 1088.8
                        },
                        connections: [{
                            to: "wo",
                            direction: "w",
                            path: "M191.52 1107.27,L263.68 1088.8",
                            distance: 74.49,
                            isReverse: !1
                        }, {
                            to: "em",
                            direction: "e",
                            path: "M263.68 1088.8,L335.59 1070.58",
                            distance: 74.18,
                            isReverse: !0
                        }, {
                            to: "al",
                            direction: "s",
                            path: "M263.68 1088.8,L274.29 1136.11",
                            distance: 48.49,
                            isReverse: !0
                        }, {
                            to: "aj",
                            direction: "n",
                            path: "M253.06 1041.49,L263.68 1088.8",
                            distance: 48.49,
                            isReverse: !1
                        }]
                    },
                    ah: {
                        point: {
                            x: 231.84,
                            y: 946.88
                        },
                        connections: [{
                            to: "wg",
                            direction: "w",
                            path: "M159.62 965.21,L231.84 946.88",
                            distance: 74.51,
                            isReverse: !1
                        }, {
                            to: "ed",
                            direction: "e",
                            path: "M231.84 946.88,L303.71 928.49",
                            distance: 74.19,
                            isReverse: !0
                        }, {
                            to: "aj",
                            direction: "s",
                            path: "M231.84 946.88,L253.06 1041.49",
                            distance: 96.96,
                            isReverse: !0
                        }, {
                            to: "af",
                            direction: "n",
                            path: "M210.61 852.27,L231.84 946.88",
                            distance: 96.96,
                            isReverse: !1
                        }]
                    },
                    aj: {
                        point: {
                            x: 252.96,
                            y: 1041.2
                        },
                        connections: [{
                            to: "ee",
                            direction: "e",
                            newDirection: "n",
                            path: "M253.06,1041.49l117.62-29.82c14.66-3.72,23.72-18.41,20.46-33.18l-4.77-21.57",
                            distance: 186.55,
                            isReverse: !0
                        }, {
                            to: "wm",
                            direction: "w",
                            path: "M180.86 1059.81,L253.07 1041.49",
                            distance: 74.5,
                            isReverse: !1
                        }, {
                            to: "ak",
                            direction: "s",
                            path: "M253.06 1041.49,L263.68 1088.8",
                            distance: 48.49,
                            isReverse: !0
                        }, {
                            to: "ah",
                            direction: "n",
                            path: "M231.84 946.88,L253.06 1041.49",
                            distance: 96.96,
                            isReverse: !1
                        }]
                    },
                    af: {
                        point: {
                            x: 210.61,
                            y: 852.27
                        },
                        connections: [{
                            to: "wb",
                            direction: "w",
                            path: "M143.6,843.97c40.11,13.56,67,8.3,67,8.3",
                            distance: 68.1,
                            isReverse: !1
                        }, {
                            to: "ea",
                            direction: "e",
                            path: "M210.61,852.27l37.88-10.75c11.68-3.32,23.93-3.55,35.54-0.74",
                            distance: 75.32,
                            isReverse: !0
                        }, {
                            to: "ae",
                            direction: "n",
                            path: "M205.5,809.55c0,13.26,1.46,26.47,4.37,39.41l0.74,3.31",
                            distance: 43.12,
                            isReverse: !1
                        }, {
                            to: "ah",
                            direction: "s",
                            path: "M210.61 852.27,L231.84 946.88",
                            distance: 96.96,
                            isReverse: !0
                        }]
                    },
                    ae: {
                        point: {
                            x: 205.5,
                            y: 809.55
                        },
                        connections: [{
                            to: "ea",
                            direction: "e",
                            newDirection: "s",
                            path: "M205.5,809.55C239,798.9,242,790,257,773s47-4,47,13s-18,29-19.97,54.77",
                            distance: 183.01,
                            isReverse: !0
                        }, {
                            to: "af",
                            direction: "s",
                            path: "M205.5,809.55c0,13.26,1.46,26.47,4.37,39.41l0.74,3.31",
                            distance: 43.12,
                            isReverse: !0
                        }, {
                            to: "ad",
                            direction: "n",
                            path: "M205.5 653.21,L205.5 809.55",
                            distance: 156.34,
                            isReverse: !1
                        }]
                    },
                    ad: {
                        point: {
                            x: 205.5,
                            y: 653.21
                        },
                        connections: [{
                            to: "cb",
                            direction: "e",
                            path: "M205.5,653.21c0,0,9,0,70.5,0c4.61,0,9.12,0.37,13.56,1.05",
                            distance: 84.11,
                            isReverse: !0
                        }, {
                            to: "ca",
                            direction: "w",
                            path: "M123.29 653.21,L205.5 653.21",
                            distance: 82.21,
                            isReverse: !1
                        }, {
                            to: "ae",
                            direction: "s",
                            path: "M205.5 653.21,L205.5 809.55",
                            distance: 156.34,
                            isReverse: !0
                        }, {
                            to: "ac",
                            direction: "n",
                            path: "M205.5 535.42,L205.5 653.21",
                            distance: 117.79,
                            isReverse: !1
                        }]
                    },
                    ac: {
                        point: {
                            x: 205.5,
                            y: 535.42
                        },
                        connections: [{
                            to: "nq",
                            direction: "w",
                            path: "M105.45,521.03c20.03,6.51,40.05,13.01,59.55,13.05c8,0.01,22.1,0.57,40.5,1.34",
                            distance: 101.74,
                            isReverse: !1
                        }, {
                            to: "ad",
                            direction: "s",
                            path: "M205.5 535.42,L205.5 653.21",
                            distance: 117.79,
                            isReverse: !0
                        }, {
                            to: "ab",
                            direction: "n",
                            path: "M205.5 296.27,L205.5 535.42",
                            distance: 239.15,
                            isReverse: !1
                        }]
                    },
                    ab: {
                        point: {
                            x: 205.5,
                            y: 296.27
                        },
                        connections: [{
                            to: "bc",
                            direction: "e",
                            path: "M205.5,296.27c0,0,38.1,0.89,82.5,1.36",
                            distance: 82.51,
                            isReverse: !0
                        }, {
                            to: "bb",
                            direction: "w",
                            newDirection: "s",
                            path: "M205.5,296.27C82.39,296.27,118.11,366,81.61,390c-34.01,22.36-64.6,50.77-53,85c3.31,9.77,5.86,21.2,7.8,33.45",
                            distance: 313.88,
                            isReverse: !0
                        }, {
                            to: "ac",
                            direction: "s",
                            path: "M205.5 296.27,L205.5 535.42",
                            distance: 239.15,
                            isReverse: !0
                        }, {
                            to: "aa",
                            direction: "n",
                            path: "M205.5 237.22,L205.5 296.27",
                            distance: 59.05,
                            isReverse: !1
                        }]
                    },
                    aa: {
                        point: {
                            x: 205.5,
                            y: 237.22
                        },
                        connections: [{
                            to: "lf",
                            direction: "e",
                            path: "M205.5,237.22c14.26,0.19,28.18,0.3,41.52,0.36",
                            distance: 41.52,
                            isReverse: !0
                        }, {
                            to: "gf",
                            direction: "w",
                            path: "M130,235.4c25.33,0.93,50.92,1.5,75.5,1.83",
                            distance: 75.52,
                            isReverse: !1
                        }, {
                            to: "ab",
                            direction: "s",
                            path: "M205.5 237.22,L205.5 296.27",
                            distance: 59.05,
                            isReverse: !0
                        }, {
                            to: "am",
                            direction: "n",
                            path: "M205.5 71.01,L205.5 237.22",
                            distance: 166.21,
                            isReverse: !1
                        }]
                    },
                    am: {
                        point: {
                            x: 205.5,
                            y: 71.08
                        },
                        connections: [{
                            to: "ll",
                            direction: "e",
                            newDirection: "s",
                            path: "M205.5,71.01c9.93-0.65,17.38-3.87,23.29,3.71c5.92,7.58-6.29,32.75-0.28,40.26c6.01,7.51,10.7,2.43,16.33-14.36c3.92-11.69,2.1-29.61-7.04-40.26c-9.54-11.12,4.07-13.21,13.7-5.37c7.28,5.93,8.07,25.68,8.83,33.19c0.43,4.28,5.33,10.44,14.08,2.58c8.45-7.58-15.18-39.43-9.01-42.52c9.29-4.65,17.74,39.93,27.31,36.83c10.07-3.26,1.22-27.64,1.31-41.48",
                            distance: 355.83,
                            isReverse: !0
                        }, {
                            to: "aa",
                            direction: "s",
                            path: "M205.5 71.01,L205.5 237.22",
                            distance: 166.21,
                            isReverse: !0
                        }]
                    }
                };
            C.p8.registerPlugin(vt.X);
            const _Y = p().View.extend({
                    className: "mechanic travel participant",
                    template: o().template('<div class="frame"> <div class="map"> <div class="car"></div> <div class="destination"><p></p></div> <div class="temp"></div> </div> <div class="frame-center"></div> </div> <div class="indicator">N</div> <button class="leave"></button> <div class="instructions-container"> <p class="instructions"></p> </div> <p class="score"></p> '),
                    model: new g.S,
                    $frame: null,
                    $map: null,
                    boundOnResize: null,
                    directions: {
                        n: 0,
                        e: 90,
                        s: 180,
                        w: 270,
                        nn: "360",
                        ne: "90",
                        ns: "180",
                        nw: "270",
                        en: "360",
                        ee: "90",
                        es: "180",
                        ew: "270",
                        sn: "360",
                        se: "90",
                        ss: "180",
                        sw: "270",
                        wn: "360",
                        we: "90",
                        ws: "180",
                        ww: "270"
                    },
                    turns: {
                        n: {
                            n: "+=0",
                            e: "+=90",
                            s: "+=180",
                            w: "-=90"
                        },
                        e: {
                            n: "-=90",
                            e: "+=0",
                            s: "+=90",
                            w: "+=180"
                        },
                        s: {
                            n: "+=180",
                            e: "-=90",
                            s: "+=0",
                            w: "+=90"
                        },
                        w: {
                            n: "+=90",
                            e: "-=180",
                            s: "-=90",
                            w: "+=0"
                        }
                    },
                    events: {
                        "click .leave": "onLeaveClick"
                    },
                    bindings: {
                        ".leave": {
                            observe: "canLeave",
                            visible: !0
                        },
                        ".instructions": {
                            observe: "instructions",
                            updateMethod: "html"
                        },
                        ".score": {
                            observe: "participationPoints",
                            visible: !0,
                            updateView: !0,
                            onGet: e => e ? `+${e}` : ""
                        },
                        ".destination": {
                            attributes: [{
                                name: "style",
                                observe: "destination",
                                onGet: "getDestinationStyles"
                            }, {
                                name: "class",
                                observe: "destination",
                                onGet: "getDestinationClasses"
                            }]
                        },
                        ".destination p": {
                            observe: "destination",
                            onGet: e => e.name
                        },
                        ".indicator": "direction"
                    },
                    initialize() {
                        this.boundOnResize = this.centerAndScale.bind(this), window.addEventListener("resize", this.boundOnResize), this.listenTo(this.model, "change:locationId", this.updateCar)
                    },
                    onRender() {
                        this.stickit(), this.$frame = this.$el.find(".frame"), this.$map = this.$el.find(".map"), setTimeout((() => this.updateCar(this.model)), 0)
                    },
                    onBeforeDestroy() {
                        window.removeEventListener("resize", this.boundOnResize)
                    },
                    getMovement(e) {
                        let t = null,
                            s = null,
                            i = null;
                        const o = e.get("locationId").toLowerCase(),
                            n = e.get("direction").toLowerCase(),
                            a = JY[o].point;
                        if (!a) throw Error("Unknown to point", o);
                        t = {
                            id: o,
                            direction: n,
                            point: a
                        };
                        let r = e.previous("locationId");
                        if (r && (r = r.toLowerCase()), r && r !== t.id) {
                            const o = e.previous("direction").toLowerCase(),
                                n = JY[r].point;
                            if (!n) throw Error("Unknown from point", r);
                            if (s = {
                                    id: r,
                                    direction: o,
                                    point: n
                                }, i = JY[t.id].connections.find((e => e.to === s.id)), !i) return [t, null, null]
                        }
                        return [t, s, i]
                    },
                    updateCar(e) {
                        const [t, s, i] = this.getMovement(e);
                        if (!s || t.id === s.id) return C.p8.set(".car", {
                            x: t.point.x - 20,
                            y: t.point.y - 20,
                            rotation: this.directions[t.direction]
                        }), void this.centerAndScale(0);
                        const o = i.distance / 200;
                        C.p8.to(".car", {
                            keyframes: [{
                                rotation: i.newDirection ? "+=0" : this.turns[s.direction][t.direction],
                                duration: .25
                            }, {
                                motionPath: {
                                    path: i.path,
                                    offsetX: -20,
                                    offsetY: -20,
                                    autoRotate: () => i.isReverse ? 270 : 90
                                },
                                duration: o,
                                runBackwards: i.isReverse
                            }, {
                                rotation: `${this.directions[`${s.direction}${t.direction}`]}_short`,
                                duration: .15
                            }]
                        }), this.centerAndScale(o)
                    },
                    getDestinationStyles(e) {
                        const t = JY[e.locationId.toLowerCase()].point;
                        if (!t) throw new Error("Unknown Destination Point");
                        return `transform: translate(${t.x}px, ${t.y}px);`
                    },
                    getDestinationClasses(e) {
                        const t = JY[e.locationId.toLowerCase()].point;
                        if (!t) throw new Error("Unknown Destination Point");
                        let s = "";
                        return t.x > 490 && (s += "left"), t.y < 150 && (s += " bottom"), s
                    },
                    centerAndScale(e) {
                        if (!this.$frame || !this.$map) return;
                        const t = this.$frame.innerWidth(),
                            s = this.$frame.innerHeight(),
                            i = this.model.get("destination"),
                            o = this.model.get("locationId"),
                            n = JY[o.toLowerCase()].point,
                            a = JY[i.locationId.toLowerCase()].point,
                            r = t / 2 - (n.x + a.x) / 2,
                            l = s / 2 - (n.y + a.y) / 2,
                            d = t > s ? 600 : 400,
                            p = t > s ? 400 : 600,
                            c = Math.abs(n.x - a.x) + 100,
                            m = Math.abs(n.y - a.y) + 150,
                            h = c - d,
                            u = m - p;
                        let g = t / s < .66 ? t / d : s / p;
                        h > 0 && h > u && (g = t / (c > d ? c : d)), u > 0 && u > h && (g = s / (m > p ? m : p)), this.$map.css({
                            transitionDuration: `${e}s`,
                            transform: `translate(${r}px, ${l}px)`
                        }), this.$frame.css({
                            transitionDuration: `${e}s`,
                            transform: `scale(${g})`
                        })
                    },
                    onLeaveClick() {
                        this.triggerMethod("client:message", {
                            action: "leaveTask"
                        })
                    }
                }),
                QY = YY.extend({
                    className: "mechanic gesture hold",
                    progressType: "auto",
                    demoKey: "hold",
                    useGestures: !1,
                    useTaps: !0,
                    setup() {
                        this.model.setUpdate({
                            infoText: "TAP AND HOLD",
                            elapsedInMs: 0
                        }), this.listenTo(this.model, "change:isPaused", this.onIsPausedChange)
                    },
                    willDestroy() {
                        this.stopProgressTimer()
                    },
                    onTapStart() {
                        this.startProgressTimer(), this.sceneView.onStartProgress()
                    },
                    onTapEnd() {
                        this.model.get("isComplete") || (this.model.get("failOnMistake") && this.triggerMethod("client:message", {
                            action: "failure"
                        }), this.model.get("progress") && (this.model.setUpdate({
                            mistake: !0
                        }), setTimeout((() => {
                            this.model.setUpdate({
                                mistake: !1
                            })
                        }), 500), this.sceneView.onMistake()), this.sceneView.onStopProgress(), this.stopProgressTimer(2))
                    },
                    onTimeBasedSuccess() {
                        this.model.get("isAudience") ? this.sendAudience() : this.sendPlayer()
                    },
                    onIsPausedChange(e, t) {
                        t && this.autoInterval && this.stopProgressTimer(null, !0)
                    },
                    sendPlayer() {
                        const e = this.sceneView.lastStepDuration;
                        setTimeout((() => {
                            this.triggerMethod("client:message", {
                                action: "success"
                            })
                        }), 1e3 * e)
                    },
                    sendAudience() {
                        this.triggerMethod("client:gCounter", {
                            key: this.model.get("counterEntity"),
                            times: 1
                        }), this.triggerMethod("result", {
                            type: "success",
                            messageKey: this.model.get("catTaskWorkingOn").id
                        }), this.model.setUpdate({
                            elapsedInMs: 0,
                            progress: 0,
                            isComplete: !1
                        })
                    }
                });
            var eA = s(89446);
            const tA = YY.extend({
                    className: "mechanic gesture nothing",
                    progressType: "auto",
                    demoKey: "nothing",
                    useGestures: !0,
                    useTaps: !0,
                    boundOnKeyDown: null,
                    events: Object.assign(YY.prototype.events, {
                        "mousemove .target": "onMouseMove"
                    }),
                    setup() {
                        this.boundOnKeyDown = this.onKeyDown.bind(this), document.addEventListener("keydown", this.boundOnKeyDown), this.model.setUpdate({
                            infoText: "DO NOTHING",
                            elapsedInMs: 0
                        }), this.listenTo(this.model, "change:isPaused", this.onIsPausedChange)
                    },
                    onSetupComplete() {
                        this.startProgressTimer()
                    },
                    willDestroy() {
                        document.removeEventListener("keydown", this.boundOnKeyDown), this.stopProgressTimer()
                    },
                    onTapStart() {
                        this.fail("touch")
                    },
                    onMouseMove() {
                        this.fail("mouse")
                    },
                    onKeyDown() {
                        this.fail("key")
                    },
                    onIsPausedChange(e, t) {
                        t && this.autoInterval ? this.stopProgressTimer(null, !0) : this.startProgressTimer()
                    },
                    getMistakeMessage(e) {
                        switch (e) {
                            case "key":
                                return "YOU HIT A KEY!";
                            case "mouse":
                                return "YOU MOVED THE CURSOR!";
                            case "touch":
                                return "YOU TOUCHED!";
                            case "move":
                                return "YOU MOVED!";
                            default:
                                return ""
                        }
                    },
                    fail: o().debounce((function(e) {
                        this.model.get("isComplete") || (this.sceneView.onMistake(e), this.stopProgressTimer(), this.startProgressTimer(), this.model.setUpdate({
                            mistakeText: this.getMistakeMessage(e),
                            mistake: !0
                        }), setTimeout((() => {
                            this.model.setUpdate({
                                mistakeText: null,
                                mistake: !1
                            })
                        }), 500), this.triggerMethod("client:message", {
                            action: "something",
                            reason: e
                        }))
                    }), 500, !0),
                    onTimeBasedSuccess() {
                        eA.c.queryParam("auto") && this.triggerMethod("client:message", {
                            action: "test"
                        })
                    }
                }),
                sA = YY.extend({
                    className: "mechanic gesture rotate",
                    progressType: "interactive",
                    demoKey: "rotate",
                    useGestures: !0,
                    useTaps: !1,
                    isRotating: !1,
                    setup() {
                        const e = this.model.get("direction").toLowerCase() || "clockwise",
                            t = "clockwise" === e ? "ROTATE RIGHT" : "ROTATE LEFT";
                        this.model.setUpdate({
                            demoClass: e,
                            infoText: t,
                            degreesRotated: 0
                        })
                    },
                    bindGestures() {
                        const e = new(ye().Rotate);
                        e.end = this.onRotateEnd.bind(this), this.gestureRegion.bind(this.ui.target, e, this.onRotate.bind(this))
                    },
                    onRotateStart() {
                        this.isRotating = !0, this.sceneView.onStartProgress()
                    },
                    onRotate(e) {
                        if (this.model.get("isComplete")) return;
                        this.isRotating || this.onRotateStart();
                        const t = e.detail,
                            s = this.model.get("direction").toLowerCase(),
                            i = this.model.get("rotationsInDeg"),
                            o = this.model.get("degreesRotated") + t.distanceFromLast;
                        let n = 0;
                        if (n = "clockwise" === s ? o / i * 100 : "counter" === s && 0 !== o ? -o / i * 100 : Math.abs(o) / i * 100, n < 0) return this.sceneView.onMistake(), void this.model.set({
                            mistakeText: "WRONG WAY",
                            mistake: !0
                        });
                        this.model.setUpdate({
                            progress: n,
                            degreesRotated: o,
                            mistakeText: null,
                            mistake: !1
                        }), n >= 100 && (this.model.setUpdate({
                            progress: 100,
                            isComplete: !0
                        }), this.model.get("isAudience") ? this.sendAudience() : this.sendPlayer()), this.sceneView.onProgress(n)
                    },
                    onRotateEnd() {
                        this.isRotating = !1, this.sceneView.onStopProgress()
                    },
                    sendPlayer() {
                        const e = this.sceneView.lastStepDuration;
                        setTimeout((() => {
                            this.triggerMethod("client:message", {
                                action: "success"
                            })
                        }), 1e3 * e)
                    },
                    sendAudience() {
                        this.triggerMethod("client:gCounter", {
                            key: this.model.get("counterEntity"),
                            times: 1
                        }), this.triggerMethod("result", {
                            type: "success",
                            messageKey: this.model.get("catTaskWorkingOn").id
                        }), this.model.setUpdate({
                            progress: 0,
                            degreesRotated: 0,
                            isComplete: !1
                        })
                    }
                }),
                iA = YY.extend({
                    className: "mechanic gesture swipe",
                    progressType: "discrete",
                    demoKey: "swipe",
                    useGestures: !0,
                    useTaps: !1,
                    setup() {
                        this.model.setUpdate({
                            infoText: "",
                            swipes: this.model.get("direction").split(","),
                            completedSwipes: 0
                        }), this.setInfoText()
                    },
                    bindGestures() {
                        const e = new(ye().Swipe);
                        e.end = this.onSwipeEnd, this.gestureRegion.bind(this.ui.target, e, this.onSwipe.bind(this))
                    },
                    getSwipeDirection: e => e > 60 && e < 120 ? "UP" : e > 240 && e < 300 ? "DOWN" : e > 150 && e < 210 ? "LEFT" : e < 30 || e > 330 ? "RIGHT" : e > 30 && e < 60 ? "UPRIGHT" : e > 120 && e < 150 ? "UPLEFT" : e > 210 && e < 240 ? "DOWNLEFT" : e > 300 && e < 330 ? "DOWNRIGHT" : null,
                    getSwipeAngles(e) {
                        let t = 0;
                        return "UP" === e && (t = 270), "DOWN" === e && (t = 90), "LEFT" === e && (t = 180), "RIGHT" === e && (t = 0), "UPRIGHT" === e && (t = 315), "UPLEFT" === e && (t = 225), "DOWNLEFT" === e && (t = 135), "DOWNRIGHT" === e && (t = 45), [t, t * (Math.PI / 180)]
                    },
                    checkSwipe: (e, t) => "UP" === e ? t > 0 && t < 180 : "DOWN" === e ? t > 180 && t < 360 : "LEFT" === e ? t > 90 && t < 270 : "RIGHT" === e ? t < 90 || t > 270 : "UPRIGHT" === e ? t < 135 || t > 315 : "UPLEFT" === e ? t > 45 && t < 225 : "DOWNLEFT" === e ? t > 135 && t < 315 : "DOWNRIGHT" === e && (t < 45 || t > 225),
                    setInfoText() {
                        const e = this.model.get("completedSwipes"),
                            t = this.model.get("swipes"),
                            s = t[e];
                        e !== t.length ? this.model.setUpdate({
                            demoClass: s ? `swipe-${s.toLowerCase()}` : "",
                            infoText: s ? `SWIPE ${s}` : ""
                        }) : this.model.setUpdate({
                            infoText: "DONE!"
                        })
                    },
                    onSwipeEnd(e) {
                        const t = ye().Swipe.prototype.end.apply(this, [e]);
                        if (t) return t;
                        const s = e[0];
                        if (!s.progress.swipe) return !1;
                        if (!s.progress.swipe.moves) return !1;
                        if (s.progress.swipe.moves.length < 5) return !1;
                        const i = s.initial.x - s.current.x,
                            o = s.initial.y - s.current.y;
                        return Math.abs(i) > Math.abs(o) ? {
                            data: [{
                                currentDirection: i > 0 ? 180 : 360
                            }]
                        } : {
                            data: [{
                                currentDirection: o > 0 ? 90 : 270
                            }]
                        }
                    },
                    onSwipe(e) {
                        if (this.model.get("isComplete")) return;
                        e.detail.data.length > 1 && console.warn("Multitouch not supported");
                        const t = e.detail.data[0];
                        let s = this.model.get("completedSwipes");
                        const i = this.model.get("swipes"),
                            o = i[s];
                        if (!this.checkSwipe(o, t.currentDirection)) return void this.onMistake(t.currentDirection);
                        s += 1;
                        const n = this.model.get("progress"),
                            a = this.getSwipeAngles(o),
                            r = s / i.length * 100;
                        if (this.model.setUpdate({
                                progress: r,
                                completedSwipes: s
                            }), r >= 100) {
                            this.model.setUpdate({
                                progress: 100,
                                isComplete: !0
                            });
                            const e = this.sceneView.lastStepDuration || 0;
                            setTimeout((() => {
                                this.triggerMethod("client:message", {
                                    action: "success"
                                })
                            }), 1e3 * e)
                        }
                        this.sceneView.onDiscreteProgress(r, n, {
                            degrees: a[0],
                            radians: a[1]
                        }), this.setInfoText()
                    },
                    onMistake(e) {
                        this.sceneView.onMistake(e), this.model.setUpdate({
                            mistake: !0
                        }), setTimeout((() => {
                            this.model.setUpdate({
                                mistake: !1
                            })
                        }), 500)
                    }
                }),
                oA = YY.extend({
                    className: "mechanic gesture tap",
                    progressType: "discrete",
                    demoKey: "tap",
                    useGestures: !1,
                    useTaps: !0,
                    setup() {
                        let e = this.model.get("wait") || 0;
                        "EMERGENCY" === this.model.get("category") && (e = 500), this.throttledTap = (0, i.throttle)(this.onTap, e, !0), this.listenTo(this.model, "change:tapsLeft", this.onTapsLeftChange), this.model.setUpdate({
                            infoText: "TAP",
                            isWaiting: !1,
                            isWaitingForTimer: !1,
                            isWaitingForServer: !1
                        })
                    },
                    updateIsWaiting() {
                        const e = this.model.get("isWaitingForTimer"),
                            t = this.model.get("isWaitingForServer");
                        this.model.setUpdate({
                            isWaiting: e || t
                        })
                    },
                    onTapsLeftChange() {
                        this.model.setUpdate({
                            isWaitingForServer: !1
                        }), this.updateIsWaiting()
                    },
                    onTapStart() {
                        this.throttledTap()
                    },
                    throttledTap: null,
                    onTap() {
                        if (this.model.get("isComplete")) return;
                        const e = this.model.get("isWaitingForTimer"),
                            t = this.model.get("isWaitingForServer");
                        if (e || t) return void this.sceneView.onMistake();
                        const s = this.model.get("tapsRequired"),
                            i = this.model.get("tapsLeft") - 1,
                            o = this.model.get("oldProgress"),
                            n = (s - i) / s * 100,
                            a = 0 === i;
                        this.model.setUpdate({
                            isComplete: a,
                            progress: n,
                            isWaitingForTimer: !0,
                            isWaitingForServer: !0
                        }), this.updateIsWaiting(), this.sceneView.onDiscreteProgress(n, o), setTimeout((() => {
                            this.model.setUpdate({
                                isWaitingForTimer: !1,
                                isWaitingForServer: !1
                            }), this.updateIsWaiting()
                        }), this.model.get("waitInMs"));
                        const r = a ? this.sceneView.lastStepDuration : 0;
                        setTimeout((() => {
                            this.triggerMethod("client:message", {
                                action: "tap"
                            })
                        }), 1e3 * r)
                    }
                }),
                nA = YY.extend({
                    className: "mechanic gesture tap",
                    progressType: "discrete",
                    useGestures: !1,
                    useTaps: !0,
                    setup() {
                        this.model.setUpdate({
                            infoText: "TAP",
                            isWaiting: !1,
                            tapsLeft: this.model.get("tapsRequired")
                        })
                    },
                    onTapStart() {
                        if (this.model.get("isComplete")) return;
                        if (this.model.get("isWaiting")) return void this.sceneView.onMistake();
                        const e = this.model.get("tapsRequired"),
                            t = this.model.get("tapsLeft") - 1,
                            s = this.model.get("oldProgress"),
                            i = (e - t) / e * 100,
                            o = 0 === t;
                        if (this.model.setUpdate({
                                isComplete: o,
                                tapsLeft: t,
                                progress: i,
                                isWaiting: !0
                            }), this.sceneView.onDiscreteProgress(i, s), o) {
                            const e = this.sceneView.lastStepDuration || 0;
                            setTimeout((() => {
                                this.model.get("isAudience") ? this.sendAudience() : this.sendPlayer()
                            }), 1e3 * e)
                        }
                        setTimeout((() => {
                            this.model.setUpdate({
                                isWaiting: !1
                            })
                        }), this.model.get("waitInMs"))
                    },
                    sendPlayer() {
                        this.triggerMethod("client:message", {
                            action: "success"
                        })
                    },
                    sendAudience() {
                        this.triggerMethod("client:gCounter", {
                            key: this.model.get("counterEntity"),
                            times: 1
                        }), this.triggerMethod("result", {
                            type: "success",
                            messageKey: this.model.get("catTaskWorkingOn").id
                        }), this.model.setUpdate({
                            tapsLeft: this.model.get("tapsRequired"),
                            progress: 0,
                            isWaiting: !1,
                            isComplete: !1
                        })
                    }
                });

            function aA(e, t) {
                var s = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var i = Object.getOwnPropertySymbols(e);
                    t && (i = i.filter((function(t) {
                        return Object.getOwnPropertyDescriptor(e, t).enumerable
                    }))), s.push.apply(s, i)
                }
                return s
            }

            function rA(e) {
                for (var t = 1; t < arguments.length; t++) {
                    var s = null != arguments[t] ? arguments[t] : {};
                    t % 2 ? aA(Object(s), !0).forEach((function(t) {
                        lA(e, t, s[t])
                    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(s)) : aA(Object(s)).forEach((function(t) {
                        Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(s, t))
                    }))
                }
                return e
            }

            function lA(e, t, s) {
                return t in e ? Object.defineProperty(e, t, {
                    value: s,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[t] = s, e
            }
            const dA = `${a.Z}\n    <div id="result-region"></div>\n    <div class="paused-overlay">\n        <div class="scene-box-wrapper">\n            <div class="scene-box">\n                <div class="hand"></div>\n                <p>LOOK UP AND LISTEN</p>\n            </div>\n        </div>\n        <div class="doh"></div>\n    </div>\n`,
                pA = n.v.extend({
                    sessionModulePrefix: "Everyday",
                    template: o().template(dA),
                    resultView: null,
                    regions: rA(rA({}, n.v.prototype.regions), {}, {
                        result: "#result-region"
                    }),
                    bindings: rA(rA({}, n.v.prototype.bindings), {}, {
                        ":el": rA(rA({}, n.v.prototype.bindings[":el"]), {}, {
                            classes: {
                                paused: {
                                    observe: "player",
                                    onGet: e => !!e && e.isPaused
                                }
                            },
                            attributes: [{
                                name: "class",
                                observe: "player",
                                onGet: e => e ? e.category ? `category-${e.category.toLowerCase()}` : "" : "audience"
                            }]
                        })
                    }),
                    initialize(e) {
                        this.playerTopBar = new m, this.resultView = new w, n.v.prototype.initialize.apply(this, [e])
                    },
                    onAttach() {
                        n.v.prototype.onAttach.apply(this), this.showChildView("result", this.resultView)
                    },
                    getGameLayout(e) {
                        switch (e) {
                            case "Lobby":
                                return this.setLayout(A);
                            case "TaskList":
                                return this.setLayout(P);
                            case "WaitingForAny":
                                return this.setLayout(T);
                            case "WaitingForAll":
                                return this.setLayout(S);
                            case "EmergencyObserver":
                                return this.setLayout(M);
                            case "AudienceSuccess":
                                return this.setLayout(z);
                            case "DialogMechanic":
                                return this.setLayout(J);
                            case "PhoneMechanic":
                                return this.setLayout(q);
                            case "GizmosMechanicCaptain":
                            case "GizmosMechanicParticipant":
                                return this.setLayout(ue);
                            case "FindMechanicCaptain":
                                return this.setLayout(Pe);
                            case "FindMechanicParticipant":
                                return this.setLayout(we);
                            case "GatherMechanicCaptain":
                                return this.setLayout(Se);
                            case "GatherMechanicParticipant":
                                return this.setLayout(Fe);
                            case "InstructionsMechanicCaptain":
                                return this.setLayout(HY);
                            case "InstructionsMechanicParticipant":
                                return this.setLayout(GY);
                            case "SearchMechanicCaptain":
                            case "SearchMechanicParticipant":
                                return this.setLayout(WY);
                            case "TextMechanicCaptain":
                                return this.setLayout(UY);
                            case "TextMechanicParticipant":
                                return this.setLayout($Y);
                            case "TravelMechanicCaptain":
                                return this.setLayout(ZY);
                            case "TravelMechanicParticipant":
                                return this.setLayout(_Y);
                            case "HoldMechanic":
                                return this.setLayout(QY);
                            case "NothingMechanic":
                                return this.setLayout(tA);
                            case "RotateMechanic":
                                return this.setLayout(sA);
                            case "ScrubMechanic":
                                return this.setLayout(qY);
                            case "SwipeMechanic":
                                return this.setLayout(iA);
                            case "TapMechanic":
                                return this.setLayout(oA);
                            case "TapResultingMechanic":
                                return this.setLayout(nA);
                            default:
                                return -1
                        }
                    },
                    parseBlob(e) {
                        return e.isAudience && this.parseAudience(e), "CancelerMechanic" === e.state && this.parseCanceler(e), "InstructionsMechanicCaptain" === e.state && this.mistakeCheckUpdate(e), "TextMechanicParticipant" === e.state && this.mistakeCheckUpdate(e), "FindMechanicCaptain" === e.state && this.mistakeCheckUpdate(e), "GizmosMechanicCaptain" === e.state && this.mistakeCheckUpdate(e), "PhoneMechanic" === e.state && this.mistakeCheckUpdate(e), "SearchMechanicCaptain" === e.state && this.mistakeCheckUpdate(e), "SearchMechanicParticipant" === e.state && this.mistakeCheckUpdate(e), e
                    },
                    didUpdate() {
                        const e = new u(this.playerTopBar.infoModel.attributes, this.model.attributes.blob);
                        this.playerTopBar.infoModel.set(e.update)
                    },
                    parseAudience(e) {
                        if (e.playerInfo = {
                                avatar: "Audience",
                                role: {
                                    id: "THE CAT"
                                },
                                name: e.catName || "THE CAT"
                            }, "AudienceMechanic" !== e.state) return;
                        const t = this.model.get("blob"),
                            s = t ? t.catTaskWorkingOn : null;
                        if (!e.catTaskWorkingOn) return s ? (e.state = "AudienceSuccess", void(e.taskResult = s)) : void(e.state = "Logo");
                        const i = D[e.catTaskWorkingOn.id];
                        i && (e.instructions = e.catTaskWorkingOn.name, Object.keys(i).forEach((t => {
                            e[t] = i[t]
                        })))
                    },
                    parseCanceler(e) {
                        const t = rA({}, F[e.playerInfo.role.id]);
                        let s = "SELFISH";
                        e.cancels && e.cancels.captain && (s = e.cancels.captain.name), t.instructions = t.instructions.replace("<NAME>", s), Object.keys(t).forEach((s => {
                            e[s] = t[s]
                        }))
                    },
                    mistakeCheckUpdate(e) {
                        e.mistakeCheck = Math.random()
                    },
                    onChildviewResult(e) {
                        e ? this.resultView.show(e) : this.resultView.hide()
                    }
                })
        },
        91482: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9d718c6cecc5c19de101.png"
        },
        88118: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/57250c247588f05076b4.png"
        },
        36687: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/197f40f67142c390725c.png"
        },
        98185: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a7934a6b5dfdec2b5d17.png"
        },
        94905: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/04f0ea271d74612fa926.png"
        },
        6246: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/319438ba26b72ddd6cd0.png"
        },
        33075: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9fdc42a3cb796f92f406.png"
        },
        45013: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1d1a8c13b10b3a29bcca.png"
        },
        48829: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/75a3226fa93948828ce7.png"
        },
        5546: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/18aa1c2c960744247ca4.png"
        },
        3036: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5ab66d0ec3c9d7b73b07.png"
        },
        89455: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a60557ae958d4275a78e.png"
        },
        80064: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/30b6b023198fb2d1e5fc.png"
        },
        91665: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/842295c36356dc01f908.png"
        },
        60793: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c1d6722f6003c3600e9b.png"
        },
        72952: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7ff3aa29cb5d8ba18e8d.png"
        },
        60833: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/31d0b16fc14855d072b0.png"
        },
        79097: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2ddef73cfa1680ecf3ee.png"
        },
        61209: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d1efa1e7353f18de2f76.png"
        },
        52001: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b9de423a1ec8d12dd257.png"
        },
        38906: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/73dd49ecb3b399b52b7e.png"
        },
        80310: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e98232f283bde8878c71.png"
        },
        97187: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/88b8c3f4d9a428167670.png"
        },
        21523: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/11edce4f04113980bbdc.png"
        },
        34390: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/73b01cf17b49821d2f70.png"
        },
        29942: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d20f2c78dcbf52e6563b.png"
        },
        11300: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/26ae5d4bd19ff99aaf14.png"
        },
        92721: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cb4f906d8813b668c340.png"
        },
        976: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2622acf74b84becca4f7.png"
        },
        92386: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5df0323ad554385e9e76.png"
        },
        79791: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b408f6dfe75830fbda38.png"
        },
        41705: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/94a12d55c596f53abf31.png"
        },
        66083: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b8b534540f289302f51c.png"
        },
        28199: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b901c74b98d4a7ff799e.png"
        },
        84773: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/558e1683286546c82f86.png"
        },
        3562: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/174f2d9666e2e12208e5.png"
        },
        52117: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ed4ea1454a056ec254a5.png"
        },
        21506: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e54c19215e33e3a30483.png"
        },
        8752: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3c8b33fc6b28b923d684.png"
        },
        1941: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c8b558f48f965a9d0ef2.png"
        },
        73603: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/32c9300cea5a25745914.png"
        },
        60827: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/563f507327e9e69a8a77.png"
        },
        36772: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0e68899ff9f21b793927.png"
        },
        34329: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8d75b3f9bad43512176b.png"
        },
        73091: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5d103e307a2a62150292.png"
        },
        36055: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4a584d11415f5305c5ed.png"
        },
        9703: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8ebe1c19df4988fcd03c.png"
        },
        11746: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4ece16394ba98a1a8006.png"
        },
        19630: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6ff150bf4395d0a3b4a8.png"
        },
        74584: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dbf0c8779927d277498b.png"
        },
        29207: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/428ced6dc088e5657956.png"
        },
        38283: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b354f602c601a0aadd19.png"
        },
        71661: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7a4abc62207d06edb9fc.png"
        },
        57352: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8a85195192ca9bf16189.png"
        },
        80644: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5d63fe9149e6f0d28a5c.png"
        },
        69011: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e6274fb366140e40a9c7.png"
        },
        1035: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/87d7cef66fc859248546.png"
        },
        56041: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9360cb585fa3fc8d0f44.png"
        },
        61638: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/72c457e63013e0aa7799.png"
        },
        24655: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f6248fcee3d8bb3560fe.png"
        },
        3637: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/975b89b930fd3a989caa.png"
        },
        30749: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/33e987d9d705e6ba6eff.png"
        },
        13656: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f92dd8c7d54c618491d7.png"
        },
        68792: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/34ecf9245d0ea111f7bc.png"
        },
        74928: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5eba05378a2a56adf7d6.png"
        },
        38212: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/03696d5519aefbb0d4bd.png"
        },
        80824: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7fbd38497ed8e79b92c8.png"
        },
        18431: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6409d7b05f1e9bad7ae7.png"
        },
        79169: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6c0fbc7bc1bc67803942.png"
        },
        27454: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c3a2e5abba23152f9728.png"
        },
        26718: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/da580623811b11bc3b05.png"
        },
        4033: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/91e2af041733c3c51562.png"
        },
        45884: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c80182615b264a345f10.png"
        },
        37570: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b9ec82d0621bbfbde6d6.png"
        },
        95834: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/49983a414fc69952cd3f.png"
        },
        93251: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f103a43888e752987ace.png"
        },
        75705: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/da9a78f3ae0c8eb186fb.png"
        },
        82822: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a8e7470146be2c4db86c.png"
        },
        46347: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e44547c29c9c79040c31.png"
        },
        91660: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8a4a0720a193e99af229.png"
        },
        76190: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d4071367f62a0c2ea4a5.png"
        },
        67920: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2f3e7ff075c8ce4e3131.png"
        },
        77522: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/eb59bf808db98e3a8e74.png"
        },
        8668: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/534ed6eeadf8d6b51c45.png"
        },
        99650: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ca130e309296f931d01a.png"
        },
        91268: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d3bc3c43b04fada58d21.png"
        },
        60840: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dbd90b7c6d003b3db282.png"
        },
        21824: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/914677e933afbdf1130a.png"
        },
        20104: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d9026fc8b2da691dc37e.png"
        },
        59276: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e44dcb5fad6468a36bb3.png"
        },
        63496: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/437b8aab643278a12e2b.png"
        },
        23816: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ae4208aa52f0cf5ac483.png"
        },
        78849: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3541c9b9b99f8225de57.png"
        },
        16619: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3f69dfd78ceba87d9d78.png"
        },
        66931: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3356de39ac644db503de.png"
        },
        23239: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/aa2b7835ef4d2a523350.png"
        },
        74434: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b7b8f9eb5e3700a16ad9.png"
        },
        21130: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/de0d8c7fa8d926134c71.png"
        },
        3418: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/eb0f94da40f5bc27f7e5.png"
        },
        93358: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5dfb420d662b70ced173.png"
        },
        81465: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/392d59cb754aebe94172.png"
        },
        40727: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/91e9f86d602c89442e2d.png"
        },
        87937: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5b08e2546322888e699e.png"
        },
        62974: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/01d145770030d66632d9.png"
        },
        21704: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c0ba006a541abd9f5885.png"
        },
        38904: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/558476840fb1ba7a391d.png"
        },
        76462: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1762934645e9929df89f.png"
        },
        46583: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8d48373b2fa6ca372289.png"
        },
        91407: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a0321851bf7474a468d4.png"
        },
        21108: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0aa372cccb52257327c2.png"
        },
        41577: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/767cee86302c913cc731.png"
        },
        59364: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e9a511f7547fe0ff3826.png"
        },
        87891: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/60bd22c7f91b5ee671cc.png"
        },
        99207: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3c6e2fa9a30f907dca4e.png"
        },
        68782: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/597fca0700585a173860.png"
        },
        83353: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e06167455a72555de226.png"
        },
        41158: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7d7f44b2a51168f67f48.png"
        },
        76709: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1a41bf5aa4d0a22f0cdb.png"
        },
        63862: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/acd8afd383d382f40f1c.png"
        },
        21002: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2fe9d407ddb5ad94e337.png"
        },
        46797: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/218b3d3a016a52b6999a.png"
        },
        10070: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/568056dd95318f3bf984.png"
        },
        2341: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b998b77888da4fb6df06.png"
        },
        49676: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/df04f0a08a29686a90c6.png"
        },
        52010: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/548f5002b0caede70048.png"
        },
        7589: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8b3a175e4f5ab84c406c.png"
        },
        57218: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/31deb76bbd9e7d100ae7.png"
        },
        29090: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/089b8269d761d048a029.png"
        },
        28142: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/909f0051aa204761452f.png"
        },
        99779: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8436b3d7dfbe563d9671.png"
        },
        71314: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9857413a15cc18b81755.png"
        },
        17470: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/aeb180c36c2ad8cd162b.png"
        },
        91023: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a1c1f4431c4c3dd9d27d.png"
        },
        14389: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/aaa10b2f8c24931edf5e.png"
        },
        36175: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ba73187d7ba4d2eb93f7.png"
        },
        8955: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/18a5d767037b4f245ee6.png"
        },
        59486: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a88c50de5aecfc9a176f.png"
        },
        15209: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ec572a0bfb373e4d83ac.png"
        },
        78107: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ae39af108c4ea330b122.png"
        },
        9515: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f4455a3a9f2c26841814.png"
        },
        52931: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c2997f59ae6aa129348e.png"
        },
        77530: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/02d83dae728d72cfd112.png"
        },
        85398: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8ae0777e85d768c3c879.png"
        },
        26868: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2bcbfe9e5a1ae02a515d.png"
        },
        2552: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bcb81940aee4ddecbc54.png"
        },
        84470: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d94bd6923a255de34c00.png"
        },
        76289: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/558814f094fad2a5f90f.png"
        },
        1467: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/80ece1d4b93f741cddd0.png"
        },
        22882: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e969988a6d4298e794d1.png"
        },
        96508: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ee908072fb820aa5b1ad.png"
        },
        15714: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/96294c881ad56260ee07.png"
        },
        13949: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5731e3dc2096a40e51c0.png"
        },
        42059: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e0bc9493b3331e424ef2.png"
        },
        24677: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/258a0039e27802e6ed9c.png"
        },
        7979: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e4fad8976c152b7d8b02.png"
        },
        12156: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d49aec6d747e896d7ffb.png"
        },
        96297: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/aac6d6633d9cafcfbc39.png"
        },
        42521: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d9a9009f9701376fe48f.png"
        },
        34979: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bdedc0d812c8a6b55bb3.png"
        },
        77344: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/603284bf6ffb572a977d.png"
        },
        54477: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fec7671b99262329ac30.png"
        },
        51756: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9e8a97a97fd78a9446ff.png"
        },
        61357: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3f07fd9c0ff3c4e0738e.png"
        },
        54598: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8e80f55704434372db84.png"
        },
        81267: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7e9d6408b74941fcd61c.png"
        },
        87039: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0fd10d0981c128ce7306.png"
        },
        70590: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1387f223c4e92d7badc4.png"
        },
        75638: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8fc76d4d0657142d5090.png"
        },
        42330: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7c32179d26a2fde6c3c9.png"
        },
        56148: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/15db70ce23e7907a067e.png"
        },
        66034: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b143f4a58e2ad39e5d4d.png"
        },
        45152: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/88da893ba2b9b024e520.png"
        },
        30345: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/61dcaa60c6965b4b6f99.png"
        },
        59213: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7d602efa431e7584daea.png"
        },
        61590: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0b9915aab3307d8b7d1d.png"
        },
        44955: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/01f5c42b476a72e1081d.png"
        },
        51051: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7be4f942664943a57002.png"
        },
        86354: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a6d814918f2bcf0e49f1.png"
        },
        28177: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9f3ceb7d68ab012c5f32.png"
        },
        7269: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9f53266de835ab456ead.png"
        },
        76626: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c2bac4f8b67804710039.png"
        },
        28423: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fd4e65479caa204c66ec.png"
        },
        83084: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f48b196fd9097518694f.png"
        },
        46415: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6d15309015cb388e0a30.png"
        },
        40734: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fae2264bc1187d5a4f8c.png"
        },
        70378: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/704a6453ba23afd48e7e.png"
        },
        35623: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/af3e6434b5d3049ce63d.png"
        },
        25668: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2088611cfb22f31efaa5.png"
        },
        70983: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4ca7c74265f239d9d694.png"
        },
        69309: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8ec6f68a91e0c6aeb889.png"
        },
        53578: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/df43fc1e95ec49c366f8.png"
        },
        62830: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/89ee9c4f376f7142c7a5.png"
        },
        12942: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7cd06bcc2e03b8a99328.png"
        },
        67137: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2b2d6f14a6a5fb6fd2b2.png"
        },
        73818: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fb1924baa115211d89ac.png"
        },
        32537: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/30620c61bd721d63a792.png"
        },
        48455: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c65f42313e2f599a638f.png"
        },
        63060: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/612d21f991658c940022.png"
        },
        82729: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fb1924baa115211d89ac.png"
        },
        94247: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/30620c61bd721d63a792.png"
        },
        17808: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c65f42313e2f599a638f.png"
        },
        99497: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/612d21f991658c940022.png"
        },
        12874: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b391c83e8674298d618a.png"
        },
        73809: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/54e8e2c70ee3bccad0c7.png"
        },
        11346: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ef137993f138fe32bd5d.png"
        },
        8836: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d5cf2bc4c70b571e8afd.png"
        },
        31669: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e833d76f964cec270331.png"
        },
        17335: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ce067948ca268e492117.png"
        },
        77355: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6b3d9015c8bf759f71bc.png"
        },
        91985: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e596c5dc5276281f7558.png"
        },
        57514: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/77fcdc045c10f764e0fe.png"
        },
        32854: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9c6ebf5b8f5174ea0b92.png"
        },
        6612: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b52b816ae7267ecd428a.png"
        },
        31199: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f41592d59eafdb1d2602.png"
        },
        86885: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8bf2ede493cb298c42d5.png"
        },
        8397: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8b67c38b8cc226471464.png"
        },
        81652: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/834597cae59027dfb857.png"
        },
        55973: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d084bfb230a31361191e.png"
        },
        62815: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e0eecffce4181a1ceea5.png"
        },
        56323: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f6258d943a37737628de.png"
        },
        73846: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8e24beeef9d9d1aed133.png"
        },
        96801: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6010d1ab39e6bdbc1e9d.png"
        },
        321: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7c68780a1026e444952c.png"
        },
        25451: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/336922935426e32addca.png"
        },
        51906: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f6cb86eb637fc7093756.png"
        },
        36864: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/67d385d976051da35914.png"
        },
        86766: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5365cbbc440c1bd176da.png"
        },
        6436: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f597caab7cce256e64f4.png"
        },
        31269: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1bd07b071650e4578ecc.png"
        },
        24764: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7a9bdaf5229b7483dd95.png"
        },
        6656: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/efb95009f9193794f3a4.png"
        },
        71147: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7b8e03d78a7dd4ce62d7.png"
        },
        33247: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8b517a016c94fff8a798.png"
        },
        79564: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6816c1380c4c41552164.png"
        },
        31804: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/77eef2b01e5970e74fbb.png"
        },
        17066: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/27fb0710ed4d6da9bd14.png"
        },
        10198: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4e86aa7d4aade28f622a.png"
        },
        66781: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/786621472b4d4d261174.png"
        },
        93284: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3747fb805b8a3fc7936e.png"
        },
        84030: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b4971ad50dbd06a84fb2.png"
        },
        73895: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1ff202683d9aae010d85.png"
        },
        47571: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1274b98874c27ced0c8b.png"
        },
        42394: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0b08af6a13896d20e740.png"
        },
        79508: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/62e71710b5df8b131e8c.png"
        },
        30191: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/eb4d02c44769c42bd2c7.png"
        },
        57074: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1be5a29a63fa41574fe7.png"
        },
        8195: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f30e933f249fafe92df8.png"
        },
        69301: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8b01f5217d543b6b7ff6.png"
        },
        90722: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/be24164f65ad68bff3aa.png"
        },
        23545: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/63b0147b537e5025f206.png"
        },
        38708: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/11b8501f228fc6dd3534.png"
        },
        41794: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/244743af3daa558436fd.png"
        },
        41411: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5520680b4d9f95c043d0.png"
        },
        62150: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/21ddd78df4b9c015540a.png"
        },
        60030: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bd84a87e42c7783292fa.png"
        },
        19680: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a3c28d86bba6cfc4d5b0.png"
        },
        5026: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e1bc96790aca96839585.png"
        },
        74752: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a6f854557b2b8d194993.png"
        },
        89745: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9e32ab23be03cfcfb758.png"
        },
        86077: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/74a1c533a091891ad41b.png"
        },
        37404: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6fafbb21aa6c38fc50f4.png"
        },
        76269: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/33260eb1a3a2f242504c.png"
        },
        9109: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bd837a3dfbcbece22de2.png"
        },
        73325: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/25382d651e0ba5597923.png"
        },
        73442: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/26828c34baa995d24a60.png"
        },
        57368: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/abf1c4b094d1d53ff435.png"
        },
        89806: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5e13fec3cba7252bd510.png"
        },
        89796: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5aa17aa0ec19f3b395db.png"
        },
        57806: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d59b5dd54ed583dea60f.png"
        },
        24570: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1e243eca7f8233f52f23.png"
        },
        73198: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0ea5864e65d528748171.png"
        },
        82576: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/43d0f04bd656c25e9f79.png"
        },
        25107: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2d3df3bef9be7dc83ffe.png"
        },
        99389: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1ee383b8ee204c55f082.png"
        },
        17870: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/479e1b3d433dc22a2ea6.png"
        },
        58527: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fefbf6271c5a4720f0ff.png"
        },
        24736: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0eacc939ec6196abfd0e.png"
        },
        93166: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fc24ae01ebc6f403806a.png"
        },
        29984: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b7d1fcbb66689820342d.png"
        },
        7226: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dd9233c2e12764345078.png"
        },
        45086: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6fdcf7ab490737012d31.png"
        },
        65799: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e06c39abcdec1d202e43.png"
        },
        54838: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/17d2bb8c9950911b98d7.png"
        },
        83596: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7732e5206fc5d990303c.png"
        },
        87024: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6620d2b60dc999995ab0.png"
        },
        22959: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f0565b490261697aa5e7.png"
        },
        65708: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9e78cbd23750fd1a04bb.png"
        },
        51040: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a6087a067e41302d92d7.png"
        },
        21053: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/90aa9c52f3945e8a6476.png"
        },
        73287: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/51beeb6c05d0fdcce95d.png"
        },
        56561: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b798342c0e34e039edc3.png"
        },
        61567: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3a3eff4201182c5895aa.png"
        },
        88752: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/678fd7a9dfcf9bc49441.png"
        },
        36895: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e7b5df178994cda03bdf.png"
        },
        38362: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1db272653b40580f8f01.png"
        },
        70797: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b3e581d8e75a04ef683e.png"
        },
        19765: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b98bf77f2fae6b745b92.png"
        },
        98629: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/613df34887ae41a2ec61.png"
        },
        81730: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cecda8b84a6312c922fa.png"
        },
        24351: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a6deb1eeb16132fbc749.png"
        },
        54010: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/09c3e902fe01c7a9fd19.png"
        },
        88990: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9086c0f930c7240614c3.png"
        },
        43987: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b61eb0e1dd8ff3ba9ee4.png"
        },
        85582: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/560fbb9c17fd70017ba4.png"
        },
        80279: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8c0bfa20173091c344cc.png"
        },
        50071: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/562f55813c97d731f0ee.png"
        },
        7489: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bf57599db51d778c8ca3.png"
        },
        32208: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3a7fb78e5f6e9ba8cfb4.png"
        },
        32801: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c5eeabaad8831888541b.png"
        },
        62408: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d184cbda1a351536cf49.png"
        },
        25897: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bf55bdc4cd3140257d6a.png"
        },
        35875: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e7ee177a053b6eeec7ce.png"
        },
        42121: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/486006127f2d579cafec.png"
        },
        17317: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9e3dc4402f5416ef2996.png"
        },
        13632: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/680a4c7025873cf70758.png"
        },
        31331: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9e628c7ebd222198349a.png"
        },
        30834: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b2305d070f6094d45a86.png"
        },
        41818: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/96dde4ce7d21f122cdef.png"
        },
        23048: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e4e42274944ab0700613.png"
        },
        92993: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e88259a09b4948d212d4.png"
        },
        90517: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cf9c8a5eadb9f784ff96.png"
        },
        98846: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a90dc30c41e90147ec8f.png"
        },
        98714: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/788c6d1127c48aec73e6.png"
        },
        24023: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/75abb7902f9b9be33171.png"
        },
        72046: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/50beb88f7252e9cfd39f.png"
        },
        68715: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/646588c345500dc5dff2.png"
        },
        22041: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/63a8ec6d825bd3b38a2e.png"
        },
        24244: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/96a3ef6311486f373bac.png"
        },
        91970: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8d38e9a479a2b9e4cfe3.png"
        },
        36479: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/09674fd56d898bc2e1da.png"
        },
        57844: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c1be9f5072569e00a8ac.png"
        },
        22903: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ac0c86ecfdda8c14728c.png"
        },
        42721: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2b10447e9051cd39caf8.png"
        },
        43003: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a3927349fe6dc59e3c1b.png"
        },
        71405: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a1c678dbef2cb956234a.png"
        },
        64358: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4fa99ba331c39f18f01b.png"
        },
        54190: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3a0600f14b3c1ba895fd.png"
        },
        73280: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/93f2f516129db8f177f9.png"
        },
        69893: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f7ef9a42d22a46f4dc58.png"
        },
        64188: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/70f0d9cfcaaa60659b67.png"
        },
        95813: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/daf9163fad5376d24865.png"
        },
        85867: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/443a27901bf95d0f2803.png"
        },
        67921: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/da9f5fcec54994c1826e.png"
        },
        9710: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9833a902b1fcfe6b9ff7.png"
        },
        3072: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/777325dada10cc9b64f1.png"
        },
        72664: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3581685760fbbfda75eb.png"
        },
        62997: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/defcb4e07ec1c15b8a33.png"
        },
        90268: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/28f403f12c446f5c9b7b.png"
        },
        10757: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ef7d6942c84f58655403.png"
        },
        80792: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8c532a040f9ab48431db.png"
        },
        32415: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/51ae13f72a6bcbee7173.png"
        },
        61215: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/728e56e40ba7c63dd9a5.png"
        },
        71039: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/57473a0353ab97b16a26.png"
        },
        54908: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9b3a1eedbe3ea26af0a2.png"
        },
        30002: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/47b418b5667a4b88a93e.png"
        },
        92449: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a9dd089ccc0bf9522c8a.png"
        },
        17704: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4e3f80503df15cb9e722.png"
        },
        58189: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6902e3921f9bd113cad1.png"
        },
        16733: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d2576f2bf077940cef18.png"
        },
        8767: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1bf7b92d93dabde696d0.png"
        },
        34455: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5e43bc358494eea20936.png"
        },
        97922: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1e34e7a0dafae0934e9c.png"
        },
        43064: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2fa29e3504c865339d2b.png"
        },
        23019: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a75ae989d98907966178.png"
        },
        20355: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7f649597d1a1881409d8.png"
        },
        79216: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/149dfbc0ce3d63e449c5.png"
        },
        11464: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3166d38955e3a2750bad.png"
        },
        95020: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8a7603c401a94dd2135b.png"
        },
        51719: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f52ce4eba96d1707c8bd.png"
        },
        58016: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c3a9b792039d09570947.png"
        },
        5789: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a53a8664c8b7b0fe7121.png"
        },
        45751: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/af821eac504edbc78bfd.png"
        },
        60666: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c42c8b9fd81aa1252dc7.png"
        },
        12980: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/709eb853e37e3f206250.png"
        },
        31152: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/850a1c021f662ceaa3d0.png"
        },
        56170: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2a62a563873aec8ececc.png"
        },
        88383: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d52517de88c7269c8a05.png"
        },
        79698: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b14970e9759c5a72336f.png"
        },
        60249: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1a189744fabb155c100c.png"
        },
        6075: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/495a7736e60d4d92106c.png"
        },
        75229: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5cf69f41001df70eac82.png"
        },
        43046: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/891a857dd1951730dcfd.png"
        },
        87776: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6178b2bf93711566d271.png"
        },
        51226: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fae0bd79dab3abdbcc29.png"
        },
        79224: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ad20c4d1b15f4582fa4b.png"
        },
        32059: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/96501905c9fb0c77df4f.png"
        },
        84900: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d12514910f420b4a761a.png"
        },
        89626: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/81e74e521838391ab48e.png"
        },
        88502: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d11775518a517de1d47b.png"
        },
        31402: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3da3dfdd8a53e67713b6.png"
        },
        28882: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fcb3cff3755db1fd5d3c.png"
        },
        19392: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/20b47afaf61c1784fffd.png"
        },
        42039: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/12eb8ae93a605d84720f.png"
        },
        93700: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a79bd1838c686017857f.png"
        },
        40446: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e0fbdae2f00b6d7763b5.png"
        },
        9757: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/403fcb1c25cfa6ee6479.png"
        },
        57: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fef4133f0267ec3d12f0.png"
        },
        28069: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9d4131b1151af3d2e3e8.png"
        },
        24313: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/447f91a49bc3c9b336fc.png"
        },
        78415: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/68a6174090aa9a8ff85b.png"
        },
        44211: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/31c504a2d02db5abc1e1.png"
        },
        37330: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7bb3751e7e4e459fb6fe.png"
        },
        43632: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/320793d2c483da0fa10b.png"
        },
        85441: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b556d120bf93fb80935c.png"
        },
        73536: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4f585ca38f766c406951.png"
        },
        24748: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0d6f7750705951ac0be0.png"
        },
        38757: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1b83e1b843f20cb8c09b.png"
        },
        3892: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/18ca20b4d46c439713d2.png"
        },
        55544: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a3bdad20e996f86fc2b7.png"
        },
        22101: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/236928ea02e01481e997.png"
        },
        15569: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a265b336bc50317d9780.png"
        },
        96571: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/67852ef2f46f5af5fcfd.png"
        },
        61148: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e7f7259089851e3c960e.png"
        },
        84156: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/818fa6330c861c363cdf.png"
        },
        14615: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b42899e592b3ec96830d.png"
        },
        8459: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ca4fc2e954379222b389.png"
        },
        62853: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/da35b73efc34fa3752f2.png"
        },
        24953: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7fc34c211041f7845175.png"
        },
        76345: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a1844c76bf6f7346c005.png"
        },
        23385: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bbf550f1e42c6d50cc4d.png"
        },
        33056: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e7d933dd293f41eb9cb8.png"
        },
        45457: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8af7fff41d747b65aa72.png"
        },
        48404: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a4f0419b137d0800ff0e.png"
        },
        14302: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2afca74295fe87a36eef.png"
        },
        23743: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/00b5dc4a5af3056f296f.png"
        },
        20647: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5c0d109fdf27a24d7225.png"
        },
        11884: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/13eab03fcda826e4334c.png"
        },
        41957: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/69a1ac8e076881345e7f.png"
        },
        6688: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f40c6f649e3378c4cbb7.png"
        },
        96428: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/419995a5383d0b11e992.png"
        },
        3716: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f829eb1c2a22403f792d.png"
        },
        81719: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c3186ea2a2fbb9146032.png"
        },
        28109: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ac8f704c9795f32147d4.png"
        },
        8121: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9adda05b0df954981cb6.png"
        },
        92705: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/315863bcc785def94924.png"
        },
        29856: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b87c63caf57b74256449.png"
        },
        80190: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0c350d9bb693a50eb835.png"
        },
        58883: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7c358a325ed6855bc0de.png"
        },
        64400: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9fa4ac1ae2d5e3e76134.png"
        },
        62067: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/22606b8214fb2e7eafc6.png"
        },
        73649: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/347f659acb99698c606c.png"
        },
        40464: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bae7c2ccfb2d64090a70.png"
        },
        52439: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6d36d42d2d6420c2c0bd.png"
        },
        44613: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e6558c36f6f1f1fbdf58.png"
        },
        8721: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/42e42782dd035a30c2ef.png"
        },
        90067: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/984a8398cb87e800f6e5.png"
        },
        73309: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/043894e25894ea8cd2e3.png"
        },
        65460: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a27166150cc99a9c6b4d.png"
        },
        24225: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/061d818b9535d6794d30.png"
        },
        38151: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/39e434c1c5718142f686.png"
        },
        73456: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/644733e392882021e1f0.png"
        },
        6054: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cfaa76b537c38753537a.png"
        },
        81993: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/46c446e3a47494bce8db.png"
        },
        21664: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/73d58aca5edabb0b8781.png"
        },
        71738: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/567aa0a2ad19ecc6eb6b.png"
        },
        15578: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e534dd4ccbfa4cb14e6d.png"
        },
        8282: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b91c014de4c58141ed76.png"
        },
        70105: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/77238df5ce03912eb8c7.png"
        },
        63522: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6277320438dd9f8c312f.png"
        },
        45205: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1a9077a00ad8ecdb3349.png"
        },
        74440: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ad34ecd557f3040a73ee.png"
        },
        31174: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f13e24ad00bd0b7c5db8.png"
        },
        78601: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/85d829a87f91b606749d.png"
        },
        99997: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b3515d55aa9ba3f91957.png"
        },
        96976: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/01423e77a605f680887f.png"
        },
        89461: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6af51aa0d48e2b03637c.png"
        },
        77525: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ec8799ea377fb3f654ad.png"
        },
        73765: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cb8e9d2c5a63e24a7fc1.png"
        },
        81255: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b9bea60258ad5f4a3c62.png"
        },
        48760: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/75cc07795fd56db5c636.png"
        },
        76887: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c10062dcc7cd5d1d6068.png"
        },
        39214: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b60369c588780fa07fad.png"
        },
        80291: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e102ad6c1e990b7eef09.png"
        },
        91726: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b64b954db81eec22ccfd.png"
        },
        72139: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c50e54492b4995005230.png"
        },
        73993: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/41ad801dffcd233e57b3.png"
        },
        8684: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/416a107c5bc31d98bb9e.png"
        },
        47037: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3571a0106117ed4d2714.png"
        },
        25408: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/33c78b93c22130ae555d.png"
        },
        57870: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/552100375e2d44096f65.png"
        },
        94335: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a80bb25ca79c75422f6c.png"
        },
        73105: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/77f7bf337692854edd76.png"
        },
        98016: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9f84a88e1a712332f3b1.png"
        },
        46397: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1bc4f3b71d4099c36eb5.png"
        },
        81557: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a9c83c9b7e83795104ca.png"
        },
        44177: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/46fbe8398b02f7fce52e.png"
        },
        53848: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/06d32507d3b5c80d5bf4.png"
        },
        22632: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7d592be24443ebf31a16.png"
        },
        85063: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a10533daee9d7aee4ea5.png"
        },
        38910: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d9acb8728e03ed8685e0.png"
        },
        35010: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f1f3739296f2e54a7bba.png"
        },
        79872: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bfc751121f28f82b39b3.png"
        },
        96723: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/83653bfd37e9664d4fba.png"
        },
        29687: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/badc1e9c23f95d047fc0.png"
        },
        25099: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7b91cf619eed0a1fa9d5.png"
        },
        84391: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ff689f77e55ab6782be5.png"
        },
        27697: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e21bda59585d4caef1e8.png"
        },
        26512: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/63b9b77e89fc3501a839.png"
        },
        16490: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9a6713a0b6a5807e09c3.png"
        },
        72166: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e68c59b51a2125ea94c7.png"
        },
        20145: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/33a2b1cae721b6650739.png"
        },
        98717: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/eee11f9398d061c51513.png"
        },
        21776: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/436293328eb659f86002.png"
        },
        31130: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/66ca28956adf30592685.png"
        },
        16409: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1c74e62af7909f83db7f.png"
        },
        41143: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0d4d12fd774b3de74dc2.png"
        },
        66317: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/753b18ea55cf9b610129.png"
        },
        1654: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d5137e7b60e5cae6e8a4.png"
        },
        80969: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4bf3240701fb0cd91381.png"
        },
        39437: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f9c83bc30646a78c80ee.png"
        },
        6134: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fef620d514a65886a1ba.png"
        },
        36910: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7d401b3dae1c423e5bd6.png"
        },
        65138: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/de12be8cce2b3631915d.png"
        },
        72868: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/431833e9bddefaf172ce.png"
        },
        46127: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6e7ebea2604fa2ba97b9.png"
        },
        56906: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e19f4f617e0209bcd6f9.png"
        },
        60776: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/38264703e47041eeebb4.png"
        },
        50622: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0b40020bb7f71bc97756.png"
        },
        42316: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7ae071b3d8e8cb0e698e.png"
        },
        74178: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9534754b469fa141d20f.png"
        },
        38417: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c1af98003e1284363e02.png"
        },
        27991: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f2475e20d131cfa71e96.png"
        },
        57892: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6a5c7ce21ef348571281.png"
        },
        51536: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8c8a88fb2d27b1a2b5b7.png"
        },
        70341: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/75c420d5f77e81890815.png"
        },
        16214: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c9345efd7d080893da75.png"
        },
        38318: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/86c83724390eb38908a3.png"
        },
        54580: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4204fc9e747f3144b7ab.png"
        },
        18004: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ca04766399e25955dee7.png"
        },
        45769: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/85496dfa6486804a3175.png"
        },
        27262: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/90bef891b35d0c4468eb.png"
        },
        13915: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c65213f939440fcc6991.png"
        },
        74709: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e5f70af2b46db11fe56f.png"
        },
        10556: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/97e9680444e735c52e6c.png"
        },
        29825: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/332be1d4cfe0ec40bd84.png"
        },
        17287: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/970750ced02357ac8640.png"
        },
        83349: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2564b5d99fe88180a57f.png"
        },
        40974: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d4efa9159f9a963f6f66.png"
        },
        30597: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5fae421239fb6462ba0e.png"
        },
        3230: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/de8aa1a5b8ec84f96c08.png"
        },
        10174: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/37cef56b52406d129d84.png"
        },
        65351: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/56b0ae816822bc91c44d.png"
        },
        68561: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3e869bd8974d725bbdcf.png"
        },
        60486: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5770f55ea834f9b9507a.png"
        },
        26257: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/72dddf5bee27fb397a9c.png"
        },
        51319: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f1fa7174683f0274265f.png"
        },
        91037: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2b02ad7a7d19f420eb10.png"
        },
        13179: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/70fb7dc7c04cde496572.png"
        },
        63792: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a9f14eeaa07e0b99ffd0.png"
        },
        79462: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/94fae3101006b61fd89d.png"
        },
        75770: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e383137c38c2690d219a.png"
        },
        58211: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/88ec28c678e6744096f9.png"
        },
        3742: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e994b7ada3c41f432c6a.png"
        },
        46926: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/12bf64cef33e4bb8e3db.png"
        },
        36400: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/40fbb89eff493c5b84bc.png"
        },
        61714: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2f3131f1dec46b819e42.png"
        },
        31989: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c049e298e1872b48fc16.png"
        },
        880: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/235fbb37b47aa2b9879e.png"
        },
        8423: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6615cc1e76834c0d8cd4.png"
        },
        22347: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a2930055c507bccc5b1d.png"
        },
        15411: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e6e088744cc8d775890c.png"
        },
        83954: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d8730209313b645b7c68.png"
        },
        54965: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/73e77e6cec970a9db64a.png"
        },
        92553: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/03d1ac7ab9883bffd99b.png"
        },
        17946: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2d68ac5c5fba475cfe73.png"
        },
        62551: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/089a10a4c35281be0217.png"
        },
        45067: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b682e3267139e2877df7.png"
        },
        97913: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e2659a250c39f42cdcf1.png"
        },
        27791: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/54c32e448c73cbe1168b.png"
        },
        47346: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6afffd7bc4b04df1cec6.png"
        },
        20850: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b18a10cd493ff6076f76.png"
        },
        56798: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3bb734ee38014f9823cc.png"
        },
        96709: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/de39ef8e52413499e5c9.png"
        },
        88681: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b097176026632e848ed2.png"
        },
        69197: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8f5a83f90086bd190888.png"
        },
        36163: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/599285ff99dc2d0b9eed.png"
        },
        34747: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bc695ba0cb61121d3c05.png"
        },
        22426: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8ae232ecb6899b7f16e4.png"
        },
        61198: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3474a5754b4e07403074.png"
        },
        26532: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/70bff9de4e27825b2d06.png"
        },
        15378: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/750a2b6ec2489a55422f.png"
        },
        18925: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cbd06fa1eb3dbc01a673.png"
        },
        13786: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e24682413b2f3204215c.png"
        },
        28424: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f028a163d7ac12c76111.png"
        },
        70163: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6af2ba9608d7b5d8ddd6.png"
        },
        6359: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/28b2ec256cba2cfc3186.png"
        },
        66124: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8e80ade95d13895058d7.png"
        },
        94924: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bf73c83ec39d7edcd93e.png"
        },
        26201: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8dddcf4e1dac94b9c711.png"
        },
        12738: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4d66c8e1a67aefd7996c.png"
        },
        82812: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e7ca74f10274702dab6e.png"
        },
        3883: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5ae564bcd6e78f6cf20e.png"
        },
        1703: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/843cdecfb9a27bb0e15b.png"
        },
        25322: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d6faf5f6151f38be1bb3.png"
        },
        43063: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/287e666c5d9cb07b6f96.png"
        },
        99240: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0d98714f3730acad367a.png"
        },
        186: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/81f527c87ccbc9084843.png"
        },
        63333: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a64d05afee3955da3036.png"
        },
        26376: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5abc396d67b719a5103f.png"
        },
        35011: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f963fb9e8a5f766138e4.png"
        },
        20641: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fcb6a173ab87c6a7f24a.png"
        },
        84331: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d6faf5f6151f38be1bb3.png"
        },
        33962: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/61743ca66aa3a1f88c6c.png"
        },
        83395: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ef86ae4755babd9b88cf.png"
        },
        90700: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1084ba2ac2eebae5a215.png"
        },
        5215: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f046f4045ad350740b5c.png"
        },
        30630: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/be5f945e5f6a4267b687.png"
        },
        9963: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/53c8da81c6c57187ef84.png"
        },
        8031: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1ba5087afe71d044a3b5.png"
        },
        66642: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/aac813b2c565cf2cf98e.png"
        },
        28592: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7331a29145a521fca9bf.png"
        },
        31012: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c7787db344d1de27239b.png"
        },
        22704: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dce9655fef6f53f9c171.png"
        },
        93341: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4a96bb7e854c4241b46c.png"
        },
        20580: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1c62e65c30d19b54dac4.png"
        },
        91975: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/de5f6e788d6db75fff7f.png"
        },
        1029: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/82a7d223f669bb9c5f95.png"
        },
        94809: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/145840ba4d0714d3861c.png"
        },
        72159: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6817720f8013d20a8756.png"
        },
        34507: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c136d95127962e0c081c.png"
        },
        99387: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f14c087c992495784435.png"
        },
        48169: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c70bbda1177bbfd9dd38.png"
        },
        90602: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e4ae0f12f6bef5a95ae4.png"
        },
        35706: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/76ea43c19ecc97f55aea.png"
        },
        70225: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3f473384dfa46dafdd9f.png"
        },
        3796: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a889bfddd6169296a49d.png"
        },
        37727: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f83c7c7409024c3f3a72.png"
        },
        75359: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8cae810231eb26098601.png"
        },
        3534: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5a896e6d567bf6ec17d6.png"
        },
        94862: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a8dff67c011a34afa0e6.png"
        },
        43282: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/54faa984d205505f2ccd.png"
        },
        54425: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7348cfeeb0d4f7c4fd28.png"
        },
        9714: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/81854d15f4a77ffd14c1.png"
        },
        74199: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/de6eaa7e91d5d5b3f2b6.png"
        },
        44712: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7ab70b14f5b3ad36b9c6.png"
        },
        6518: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dc2f3a5bf70a3789118b.png"
        },
        92445: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d3844aaccac09bce05aa.png"
        },
        64006: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/aeec69f7472a10a25b53.png"
        },
        93109: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/86743b6a2e3eebac75f1.png"
        },
        24959: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e705b089a29fcaeb4f11.png"
        },
        41364: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cd42b435ff23de76c588.png"
        },
        13348: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/605b9719b7758917492d.png"
        },
        65112: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/97099b6c8d98ff8bab83.png"
        },
        38968: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d4da7d33962469b20614.png"
        },
        42038: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/896c28d54886df1d4853.png"
        },
        69282: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ff09dd110bdbb8d77f00.png"
        },
        12298: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/17629eb68ba780f7f1aa.png"
        },
        5620: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6f208ec025c1efd8a476.png"
        },
        2919: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/10c00ea522d206746610.png"
        },
        65828: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ed878354a8d5e11eff77.png"
        },
        79596: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e1ec23213fab83cabdf4.png"
        },
        87530: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/555ee74d321efae6d253.png"
        },
        92021: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6560a8cc39dd0287f996.png"
        },
        73426: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e10ab7ddcb266682c479.png"
        },
        98929: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a2f5e3e06c2706b38ca1.png"
        },
        4369: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/037382d141bfe116eec3.png"
        },
        13451: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cf31d72124011395d750.png"
        },
        10583: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/757e1ad13abfd7c354be.png"
        },
        31314: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d5a15374e86e45f6e71d.png"
        },
        40649: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f0cc515e4339101e80e2.png"
        },
        18856: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/54e6c582383abf691950.png"
        },
        78314: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/db7883052845464766de.png"
        },
        58923: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c7ee68445a523fe43102.png"
        },
        59824: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7d31369c41462bd66511.png"
        },
        69162: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3456586e0edb64a515be.png"
        },
        22366: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/85d2efa0b0f129f373c8.png"
        },
        54499: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9d5d45461ae11d163ae5.png"
        },
        27301: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ef19191572304edc5278.png"
        },
        62366: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ceff4e71e98a8bfeef4a.png"
        },
        75301: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e4e19825268374756542.png"
        },
        4852: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a7958c3feb7d5482210f.png"
        },
        56958: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/04963a09df21ae47d1ae.png"
        },
        66094: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d738bdfaa31bfe54c9d2.png"
        },
        16135: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8d8659ec025083cc19c7.png"
        },
        65633: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0b8c36c691d4aac3e592.png"
        },
        88128: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bd1d32ea21ecd7998896.png"
        },
        90093: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e00ddd1449578145b885.png"
        },
        62487: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/01e35dc6d418642b7236.png"
        },
        63646: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c6a908d47443a04ea51d.png"
        },
        59380: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1e7a6f60308de8512ad5.png"
        },
        65659: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/490a9b89dc61955b550a.png"
        },
        41589: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6f90fc3272cd4c818dc8.png"
        },
        82092: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/42cb4f789afb3c4cb6e7.png"
        },
        6916: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1af372ab6fe2791a1032.png"
        },
        19258: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c77a9f22f7014e216ab9.png"
        },
        96924: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/252d9cf83aae086b3026.png"
        },
        47155: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/24d56b7d55fc09e490e9.png"
        },
        68244: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/97313d6ff7573b7d6c9b.png"
        },
        58302: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e5c0d8bfe6cbe2add856.png"
        },
        97239: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/031d40637d8d3d47b80c.png"
        },
        69583: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/04e0e822ef3bbc314cff.png"
        },
        49854: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/edea8ea0398216f1e52d.png"
        },
        63513: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/edaf231228f3e0443564.png"
        },
        72026: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4554a5a7232fdfc15d69.png"
        },
        53292: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bf8b3eb2ccae0e7e2fc3.png"
        },
        73686: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/19c511b151b6233aa9f6.png"
        },
        78306: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/21982968cd8850a1f772.png"
        },
        82328: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/177b4944ff4a4833e0e7.png"
        },
        43297: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/98f3e7da3c7c4bcc0c72.png"
        },
        52618: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2af69277a0fd31f770f4.png"
        },
        84547: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fa296b5c7b47c6fb698d.png"
        },
        43736: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dd56d9c08d033aaa49e1.png"
        },
        40662: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ac4929ab845de3004683.png"
        },
        85700: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f6d62033043d50e3edd9.png"
        },
        64615: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/055d29a6a7c384f7638d.png"
        },
        47219: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dbff5bc85052d12500c0.png"
        },
        43683: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4e20564d95384ab23f60.png"
        },
        50563: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/233538fcbc2978e0edf6.png"
        },
        41880: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b5bdf753255397d06f5b.png"
        },
        87080: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/85615749bef51f55586d.png"
        },
        95174: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/11db85a0df27655eb53e.png"
        },
        43929: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/44033882b7df8d4f6ca1.png"
        },
        51125: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e3df3908440ff3692484.png"
        },
        97645: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/12a74c1c677f9d0b575e.png"
        },
        83881: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7acd86b790fe04c7adc2.png"
        },
        33415: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/21f320d267afb52f586b.png"
        },
        36351: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/801ae6f75db62e7b8fe8.png"
        },
        24341: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9dc522d95df117e77dda.png"
        },
        37755: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/aaa34348a4b597e95a1e.png"
        },
        43847: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6b38a33565ec21b969cd.png"
        },
        41560: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c880a5363710a3285f54.png"
        },
        88456: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/33fe114384ba3d33f1f5.png"
        },
        12347: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c27b3716a5fe484d5c81.png"
        },
        71565: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7df2fe45c7bd666b29e1.png"
        },
        78607: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3d55ff5261fa62f07d3f.png"
        },
        8825: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cab2bf297e6b902c8897.png"
        },
        91274: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bcc8f6c423b445f3e695.png"
        },
        28476: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5ad59065654239c9542c.png"
        },
        93699: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/283badd22da15cfbfbeb.png"
        },
        28784: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8d3e9cff560d5813af4a.png"
        },
        74070: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/609512936214f684f860.png"
        },
        50972: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/21e1202d8ef3a57b2bb6.png"
        },
        25163: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4e1b7382fa03e6118f5d.png"
        },
        10310: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dd72de7dffc68107d816.png"
        },
        33205: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bbd4dc3f56dc0d4f9875.png"
        },
        60113: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/967dfbae0e3729975922.png"
        },
        67395: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ae4d43f02d2cec3d47c0.png"
        },
        8687: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/000239993abdc099b6a7.png"
        },
        91893: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8dfe938f88fb31be67c3.png"
        },
        91833: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/aea7b96124d2817e4528.png"
        },
        81736: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7dc205f37b2b98edca4b.png"
        },
        48102: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6c9791ca0d69bafe8360.png"
        },
        4537: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5f66c23ecb1b03171e6c.png"
        },
        75316: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9e3987084e13f6cb0f05.png"
        },
        13626: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f3f397fd4dceaa2fa54d.png"
        },
        59130: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6b64f392da300a5de4a1.png"
        },
        43197: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a9d3b59d0218a8f3d11c.png"
        },
        10014: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b65bc573888490720cb9.png"
        },
        95290: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ca4209e6a6e4022568d0.png"
        },
        44591: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7c302a4108e0e60ec9f8.png"
        },
        93205: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fa156c2cd60d0ab4b232.png"
        },
        87840: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b5be8aefb06ce3b4e683.png"
        },
        83612: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/da5897c2d40ba78d82ef.png"
        },
        20636: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cc84bfa268d5fe569009.png"
        },
        45661: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b91c3e1abba2e1d13f33.png"
        },
        45805: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f3bcd33ca97a67390e4d.png"
        },
        17297: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c39fb7452a5d35a14f33.png"
        },
        56799: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/273803b38f59f2bc7128.png"
        },
        71960: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/72324821c76771914bd1.png"
        },
        89808: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/878b601f8707f97836c2.png"
        },
        62127: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f38dbeadcd055edcf1f4.png"
        },
        13807: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/685ff8b37a2c376f2788.png"
        },
        87624: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9609eb4a81ed261594a1.png"
        },
        84780: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/651963780fe0ff9d4e71.png"
        },
        90202: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7741d2c7600d132875af.png"
        },
        74157: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f9f2c5d4d2c05b2d11ea.png"
        },
        81096: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3c940860e09880ce62aa.png"
        },
        62344: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/eaffe954573ee8cb87ae.png"
        },
        61840: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b744c2c47334e82ee2cc.png"
        },
        42867: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ff9c806b68a39204dea6.png"
        },
        8922: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4fa3a297521d0799fb6d.png"
        },
        62927: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/de4e046a9107ed384c15.png"
        },
        30402: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6865d7d12eb0f9349925.png"
        },
        23220: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5d7a9b6f406362d70c35.png"
        },
        19605: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/38c2d07a542b959b2e29.png"
        },
        60188: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5875c61166af07c9da57.png"
        },
        12363: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f270b1ed983b15c982fb.png"
        },
        32191: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6dbdf47ed1e09f15e29f.png"
        },
        41005: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fbdb548537acb4ec55e4.png"
        },
        51638: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4424547cfadeca6d610e.png"
        },
        99081: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/83d93ff2b09e4b4c86aa.png"
        },
        98675: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9cdf010b813a35f6a53a.png"
        },
        89996: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7b8f9e44ba99a64d0f8b.png"
        },
        80383: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0e7aea0b4592028a1649.png"
        },
        60933: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7addfe2f0be61a0a61da.png"
        },
        65296: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d241a00288a903ae97cf.png"
        },
        88898: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/da9f5fcec54994c1826e.png"
        },
        4041: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9833a902b1fcfe6b9ff7.png"
        },
        58510: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d7db6c3c16c1c40e0b4e.png"
        },
        69806: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/52d7873072a45d885e45.png"
        },
        93608: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b038fe224ceeaa50c0bb.png"
        },
        21173: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0b7a2150ccbd015f3489.png"
        },
        21225: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fc8e9deb9156b87d9e78.png"
        },
        83606: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f97be6b4727fd2cd5e3c.png"
        },
        35062: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/568845f4c6dcd087e62c.png"
        },
        50303: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e947f53d4a53c61bc31f.png"
        },
        9155: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2acdde7e1288d2cf0c65.png"
        },
        71883: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c1efa01c1022af67fea4.png"
        },
        5341: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3082e5e6b58836f0810c.png"
        },
        78373: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fb63e514a682b4f2d3ee.png"
        },
        20695: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3eb1a96fe5864b768ea8.png"
        },
        41039: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3c79b303a98047094825.png"
        },
        36409: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b4f74a052b428316c6d9.png"
        },
        29709: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7b9ad4e0fd852dc84850.png"
        },
        53463: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d78aa046e57722e679a7.png"
        },
        71618: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0dd6d51ab93e85aafe60.png"
        },
        28986: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/afd8688e2fb3642dda6a.png"
        },
        17726: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b96ee39c99135b2f7f4a.png"
        },
        2904: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/281a99585884a09d25bf.png"
        },
        15849: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1e360313773a2c859a64.png"
        },
        13007: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ad8238e80e658065297a.png"
        },
        30260: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bc0e0e259c6504221920.png"
        },
        12030: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/025e0279b5fbe415a513.png"
        },
        12234: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/646287bd6881bea1eeb3.png"
        },
        12543: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f3793642497105935ec0.png"
        },
        68255: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d7520747dac21f777840.png"
        },
        9e3: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b8830bd384901afd1851.png"
        },
        31360: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ec7543031e3d284fcf75.png"
        },
        47803: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e1c550d7be3d81a5cff4.png"
        },
        79641: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c9723f20526553c016ef.png"
        },
        66669: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8d212158aebce4378649.png"
        },
        44266: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f5e10f68d101005ea62d.png"
        },
        74409: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2fdc7fcdcb9ed1cc39af.png"
        },
        54621: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/60536ba6bc08e858d730.png"
        },
        25230: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/964310dde40ec65154e5.png"
        },
        50500: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5abffbec46ec442567de.png"
        },
        39284: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b3cd00094d595cb09375.png"
        },
        58987: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ce6c8371971549533ff6.png"
        },
        39873: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9fd2244a837fd527cb2d.png"
        },
        21338: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/791a2e37f157b81fd2ad.png"
        },
        85348: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a9b5b7a4955b603f1d8b.png"
        },
        62167: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/59ee3d02d682937a0250.png"
        },
        63875: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dab8890939e6b295dff1.png"
        },
        35867: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7157513969124ef8747d.png"
        },
        3866: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2b3792e5da07fbf8707c.png"
        },
        3696: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8e4df75a8100bc736298.png"
        },
        58796: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/feffe6907e5a885cb12a.png"
        },
        3119: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b16f7d652adaf56b8778.png"
        },
        48980: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cd5b0b112449649d9027.png"
        },
        1797: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/61076efae6440c725c4d.png"
        },
        68166: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8936e02cb59825c0e691.png"
        },
        74341: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c75b12e2c2910a713bb7.png"
        },
        91030: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6269a32f314f7e370206.png"
        },
        3521: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/82dcefac7cfab12eeb33.png"
        },
        5890: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2130656cad53683ad978.png"
        },
        67307: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/df450bbeb451e67d9538.png"
        },
        71765: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3713cbc2d9d99fc0bcb7.png"
        },
        10550: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/03121ea0c60295b25a74.png"
        },
        45724: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f0d855dfd5f010a0fe6b.png"
        },
        73263: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7ea73c83370015861b2a.png"
        },
        5539: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3cced9920008b70cc9de.png"
        },
        90753: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3f76bddc31e51bda3e38.png"
        },
        51409: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7fc432665dfa0e116365.png"
        },
        54978: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/01be4760d6c976d43683.png"
        },
        88411: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/04341df46af075544100.png"
        },
        82393: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c59527a6fbab9c4cd138.png"
        },
        13968: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2af69277a0fd31f770f4.png"
        },
        22771: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2c8ba41c894eef1fd854.png"
        },
        31535: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2617324ae7e05968ff26.png"
        },
        58217: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/470ec382bc47d6e8a37b.png"
        },
        53622: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dd58eb6b100dbb574a49.png"
        },
        21548: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/223e2e4483017d13ab34.png"
        },
        18780: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b2f6fd9db65ef0955435.png"
        },
        14537: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c030804c21c035de4f6a.png"
        },
        65616: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5a7285c9ab2e79a62a1d.png"
        },
        53861: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a1425afacb53c15e1dee.png"
        },
        9359: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e0e7b291df96faad29c5.png"
        },
        86278: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cb30184cedf5772fcf06.png"
        },
        9519: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/046a7f791d964d8f790a.png"
        },
        73096: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c69463e9c482306d132a.png"
        },
        3063: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/68b245df3b954096e4f9.png"
        },
        40763: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e569eaba293bc61d42cb.png"
        },
        96346: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5140ae20fa8710224c9b.png"
        },
        95937: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/80b7d7c015a2891dc03d.png"
        },
        45629: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/29c94d0548cc944f5158.png"
        },
        54447: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0492741b53b2f0d73f20.png"
        },
        37269: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bdcb4757afca042a99a0.png"
        },
        60786: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c9893f92afcfba6dd7c7.png"
        },
        2822: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2ed7527f9959c9ea418a.png"
        },
        85487: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4f3736acf0322720dfbd.png"
        },
        45648: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/aaca874e6afca20e82b4.png"
        },
        75751: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c05f196c48ff438a3526.png"
        },
        90946: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/11165cf6475c5758a42d.png"
        },
        46956: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3410be32d06a70c3a3a9.png"
        },
        11476: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/00dfa8980eeafe266e5b.png"
        },
        35859: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/60133bcc16f2d72f23f8.png"
        },
        82899: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/767116fd3eb5dadeb4d1.png"
        },
        5592: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/05e5d3292607247ad2b5.png"
        },
        96578: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d11102c0636c08eb63a9.png"
        },
        80588: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d1f255ef5fce235037b7.png"
        },
        67343: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/17bc330faa2a6620b14d.png"
        },
        71114: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4611e8ea87957735767f.png"
        },
        23049: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6602a478d78784e21108.png"
        },
        8035: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/53538131e16b18681e34.png"
        },
        82953: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/855965eeb0c46171ee29.png"
        },
        10879: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/95eccd6de88365bb4974.png"
        },
        35573: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/10c09ae6c53f61549aa8.png"
        },
        9951: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/72d17ab0e1a261f54910.png"
        },
        53612: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/34706c7096b724ccb55a.png"
        },
        34908: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/819639d46c85ba637fba.png"
        },
        68066: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5bfc3b2ad19001811f32.png"
        },
        77733: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c321e3dc19974b0660a3.png"
        },
        68198: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ee5c5b8a61cf0dc03d9f.png"
        },
        50565: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/817f61d9f34928c7c702.png"
        },
        10097: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3e5d669630d747987e1c.png"
        },
        19682: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/34706c7096b724ccb55a.png"
        },
        21851: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/819639d46c85ba637fba.png"
        },
        52547: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c321e3dc19974b0660a3.png"
        },
        4735: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ee5c5b8a61cf0dc03d9f.png"
        },
        40517: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/817f61d9f34928c7c702.png"
        },
        8077: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3e5d669630d747987e1c.png"
        },
        25127: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4e4429777fe39789838f.png"
        },
        63205: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f05c8ec743e9179849a1.png"
        },
        36270: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2e90965502e371f56e5a.png"
        },
        66584: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/75ff5e2fc130e60a675b.png"
        },
        43405: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b131778dc97030802ee6.png"
        },
        87850: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/332e18c572aeb0f034f7.png"
        },
        76894: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2d822665fc776d43bf03.png"
        },
        45943: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2de559c7029e935c59ab.png"
        },
        24362: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dd95c428fa48e151f1a7.png"
        },
        99935: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e1db9c799a691f61e426.png"
        },
        48489: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/87ae29ef917fc6c2db70.png"
        },
        38352: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0932219792f8d71d8020.png"
        },
        9761: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f4c31a92548c3a3b0da0.png"
        },
        18418: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c56c3fc9d6bacfa316bf.png"
        },
        6093: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/07b45e9628ddbc5ec0b4.png"
        },
        36034: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e7ee6f5d8761c8219740.png"
        },
        74742: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cd87d6b0c27e1d17382b.png"
        },
        10555: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/291d0c9b7c84b08acf28.png"
        },
        12136: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/66c716e0b01ff8273edf.png"
        },
        50940: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bb869299994f2831f8a5.png"
        },
        69627: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d1db2d788fdf6b80f21d.png"
        },
        44074: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/195b39d508dd7759e326.png"
        },
        23554: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5d1ff3b4e9be5d3820e8.png"
        },
        62422: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d499c16d1ee202abcee4.png"
        },
        4772: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/014311c8fb82c8ca446e.png"
        },
        70355: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/13007a5c64514192495e.png"
        },
        53803: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bf508eff2f9877cac35d.png"
        },
        25123: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9a7420d8cece356588b7.png"
        },
        53118: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/41216646987342133e5d.png"
        },
        20063: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/33300c4e1e7f7bf93448.png"
        },
        79845: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d2c37bc8b4db96dd9ba7.png"
        },
        65919: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ebf14f9a6f7501d1399d.png"
        },
        75062: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/92fe7199d26e420e30ea.png"
        },
        88973: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/140c9f658ee2f54ec160.png"
        },
        31650: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/73957c02c00cf65de0f5.png"
        },
        30775: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4f3a5af76443ed7c1261.png"
        },
        40555: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/426b21f66cb083983fc4.png"
        },
        54113: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e468e5a58856fcd4a79c.png"
        },
        26518: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/38deb4c55136028e19e7.png"
        },
        63145: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4579ac725952beef9ea8.png"
        },
        15803: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/30c80d5245269bd77662.png"
        },
        90793: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1167e3024b774492b28d.png"
        },
        24749: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/868f8d816b1449e79ab6.png"
        },
        18464: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f068a020f485b331886b.png"
        },
        25357: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6f43f20ca0623fca779b.png"
        },
        34161: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fcfb92d4b9115453bc81.png"
        },
        79613: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fc18db1cadd1012f3d86.png"
        },
        49234: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/15d09395796056558b67.png"
        },
        20849: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5c159c27e6b4bac5dfcf.png"
        },
        38983: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e2e3ac9fb80b3975f53a.png"
        },
        24884: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8b4e9cd41aa9a16e6468.png"
        },
        71544: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f8df90afab1a3c72d4d2.png"
        },
        17847: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e69df446ac9db9a3c621.png"
        },
        99641: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4bff28c4a314cd10776b.png"
        },
        66130: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4773863812e6a2c0c489.png"
        },
        77336: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/30ce7b4ab9053ee3e367.png"
        },
        6131: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1167e3024b774492b28d.png"
        },
        13263: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4271508f5c777e7a76cf.png"
        },
        53001: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/868f8d816b1449e79ab6.png"
        },
        56694: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f068a020f485b331886b.png"
        },
        73508: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/616b54475d165bd7ea72.png"
        },
        18821: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e38b845e43f76beea2e1.png"
        },
        89530: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bd50a2e13f85e4601719.png"
        },
        92496: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/336d0c31d6b91c595a47.png"
        },
        73840: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/345d65beed3ae242143b.png"
        },
        87062: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3599ad535be872db2f05.png"
        },
        13123: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f0e765ef28abeca0ef48.png"
        },
        35542: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/99aeabc8ceda4824dfd3.png"
        },
        10740: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5242ec63f583bab69694.png"
        },
        37032: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4574bd43453e4b7a0052.png"
        },
        87347: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8e3e5b91d51a6ee8456b.png"
        },
        42358: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4f8df9e3b1d2d35a7250.png"
        },
        13977: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9aa5a03ce0db4eddd278.png"
        },
        51312: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0b40020bb7f71bc97756.png"
        },
        38746: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bd73c1fe09f7f4886487.png"
        },
        93035: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/11a7dda1c289f3f7aa6b.png"
        },
        38035: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a014f2fdd1daa75a5490.png"
        },
        49066: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cb30af7e7651df11d816.png"
        },
        52063: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/16eb00d9bf1c21ad1421.png"
        },
        37850: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c3fb849a80ee82cf3255.png"
        },
        64190: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fcdbb0e7cd38bbe1b292.png"
        },
        42769: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6fb9d73d1d2c968d6aea.png"
        },
        26477: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/616cb5d5fc7d8bb7c99a.png"
        },
        53906: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/29dfefc2633a9fdc05c9.png"
        },
        93701: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0547656a44c7d16aa910.png"
        },
        2889: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/91fdc265b9153bde2da9.png"
        },
        99328: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c59d1e669098daae584d.png"
        },
        48469: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c56b092f489ecc088363.png"
        },
        8415: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fb643fc3906c84dca692.png"
        },
        83781: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/36c4c8c0a2eb05694289.png"
        },
        25472: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4b066acf2227d67ad3f9.png"
        },
        47416: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bc7e4c8f279b01170e97.png"
        },
        74304: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9a3c891f661f3fbda9c6.png"
        },
        90484: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/708c694dc2211e435ffc.png"
        },
        43489: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2fbcd4253b52f2537260.png"
        },
        91368: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8e9a44361e00833d7d7d.png"
        },
        47439: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/580eea20284bda1c9305.png"
        },
        91: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/022f2f70f82a180cbffb.png"
        },
        97201: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d08c546f37b0fffbca32.png"
        },
        88788: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/28d9986d44444f3a6030.png"
        },
        3307: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/efca0eadab3220fb6825.png"
        },
        29550: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/56e7b694ecf92c2ae5b8.png"
        },
        55651: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d286d22814c4b90ed81a.png"
        },
        50834: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ceae4ae5172787dcfa15.png"
        },
        72091: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/23743acf1220aeab4654.png"
        },
        44661: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ad97fb7edb2816b60319.png"
        },
        13568: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e9f88bdfb82b3bd0fcde.png"
        },
        41531: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3668fecdde5e23ae059b.png"
        },
        38233: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1390742f563027f6abb5.png"
        },
        71759: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0c54d36d5b42855de312.png"
        },
        29523: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1e51973a11ab08c07ee6.png"
        },
        87439: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8e9cd8855095896201e3.png"
        },
        25128: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/13842b29ef611f5a3dc2.png"
        },
        81760: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a225f8be9fd06506d84b.png"
        },
        11161: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2b9d33e2411f6e7c3a54.png"
        },
        13658: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1379b7b5724fcf699944.png"
        },
        24859: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/79f8cdfa52570401d80b.png"
        },
        10637: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9255521d397dadf79cfd.png"
        },
        84463: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8b7e3565d836c8b54b92.png"
        },
        89252: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c628ef17f7dfa3386e79.png"
        },
        64653: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/833af7109180ae3c5911.png"
        },
        65344: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d5f10b284d136c83753c.png"
        },
        65663: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d348a56f3dee8e527b06.png"
        },
        92209: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/084f5a1b3b648a759d85.png"
        },
        93238: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0fb0c0c6d54e67b09db7.png"
        },
        48959: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4229b6666eeadae42e09.png"
        },
        68557: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/19bdb1cb140ed231156f.png"
        },
        21156: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7d930692afd7de1db7a6.png"
        },
        97137: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f7ef78196888a2178d43.png"
        },
        536: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1470527ef026799554cb.png"
        },
        62531: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/130ca557afda28ff3731.png"
        },
        23328: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0a4fcd55bcd0f8372698.png"
        },
        39097: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9c5baf2814278a7e177c.png"
        },
        67011: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/46dcd84069a8e1454809.png"
        },
        51035: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/987684e5fac43b60c9f2.png"
        },
        77519: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6356db5b39ba07b142d4.png"
        },
        79740: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ad8de898646ce5b6504f.png"
        },
        96461: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/17761c26749c3db573b3.png"
        },
        64776: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/959d6038649eb1ecd7c1.png"
        },
        81759: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/14621d817d29c5cf3977.png"
        },
        49947: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d44c995b53d9dfc6accd.png"
        },
        96574: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e0e1f59401c1cc0c1545.png"
        },
        86280: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9e87594b2e596a3d689c.png"
        },
        4381: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3c8c012ea30cfd25b5c2.png"
        },
        57790: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/431a69c83b847ff44ac5.png"
        },
        46838: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6fcf39232458ac6b16a4.png"
        },
        24969: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/77e4e30ff7ada36a6e7b.png"
        },
        16958: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/412bd5c07a042f8051c5.png"
        },
        41561: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/49389ef57839d60bf6c4.png"
        },
        60252: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/083479796c24fcf6d593.png"
        },
        48729: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/983f909f261d4ac4f729.png"
        },
        38263: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8e7b17fc26a1840b4725.png"
        },
        32826: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ca0de24e2a46570162ca.png"
        },
        45779: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0697eebead45f686fb6e.png"
        },
        85725: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/54d0fcca75c0cd4ecd48.png"
        },
        20832: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/eb053e22e8a5c538c91f.png"
        },
        45835: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c3d8439a9efb4712cdeb.png"
        },
        27875: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d9ce83a1b057d7294226.png"
        },
        84745: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7bb33d50ac0ec909695d.png"
        },
        90200: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3c57b223eb1876888546.png"
        },
        30977: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cbfc2c6812393c2ccc56.png"
        },
        75446: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6f5874521145be7c05d4.png"
        },
        22477: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2a220487856e6b2b8de5.png"
        },
        13855: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/27cc533d67e150f119c2.png"
        },
        72164: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e965dfb4f7c3b0ae07e4.png"
        },
        65038: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8896541274535bafd57f.png"
        },
        21622: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0ed7223d3fd647a1a363.png"
        },
        60597: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fc879ad5f2440ed7f0d0.png"
        },
        34443: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2026ef3449189db4e446.png"
        },
        73556: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c9b4db8aaa8fa0b799bc.png"
        },
        2071: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f8f3d01f882967ea949e.png"
        },
        76849: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cc429254fd01e600262f.png"
        },
        82582: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/362f9ed14ca3f163bb9f.png"
        },
        11934: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6fad60d1cbc552124e69.png"
        },
        97317: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f7b11da951d98bcaa184.png"
        },
        42746: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8fb2ffc86242f7ef7db1.png"
        },
        90582: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/173f14d5c9331e8f63a5.png"
        },
        15526: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/96d142531fdbaf054778.png"
        },
        8872: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/84311b16db115b5de633.png"
        },
        7961: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c1bda735f1ccc8110e79.png"
        },
        62351: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9410dadb6af96975353e.png"
        },
        6426: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f09430396072d89a52c6.png"
        },
        12102: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b73b3a2a0563a028d0bc.png"
        },
        6311: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f0db842e03ae8c705124.png"
        },
        20746: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c7a816d6a1140ececd50.png"
        },
        14399: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3bc549b978078bfdafcf.png"
        },
        55786: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8cc8ac2cfc694dba1977.png"
        },
        52322: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/755df699bcc9106d53ef.png"
        },
        49462: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/30fd489835dcc5948943.png"
        },
        69817: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/74ad72a72c9c8b2e189a.png"
        },
        99819: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ca3f16241320b92722c7.png"
        },
        71474: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f350e6d79c88bdb456f5.png"
        },
        81859: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/13842b29ef611f5a3dc2.png"
        },
        51174: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e41b013802053e9c9154.png"
        },
        26683: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7145d65121cab3218169.png"
        },
        91318: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/365f72d3cff26e61249a.png"
        },
        99163: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c2297cfbaf262584553f.png"
        },
        96033: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6221341cde4b1c0fd79d.png"
        },
        82784: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/20f756c05d2e996374e7.png"
        },
        14647: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ecde2dcd2b067c117019.png"
        },
        34750: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9ebaf800b2371b212ff8.png"
        },
        6447: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/07e70ae232f5e79f07cf.png"
        },
        48064: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c58b25f18e0b97ea752e.png"
        },
        23324: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e36dc34ef7fd284a4f06.png"
        },
        16649: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/be7f4d70c58c1914b0aa.png"
        },
        54529: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f5e015d89ac6638febbc.png"
        },
        82833: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1ce68817dc4355ec0357.png"
        },
        59429: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3f41c15400ca1598ab17.png"
        },
        82104: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/34d70654776618068cdc.png"
        },
        70834: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7a8d623219a66f8750c1.png"
        },
        34826: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bdcd27776eab83db4640.png"
        },
        68541: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3602707fb90d5ad9533a.png"
        },
        95365: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2cfcf81326c8657b7039.png"
        },
        67591: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f5561f190e227af8e19b.png"
        },
        91281: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/45ceee58ece348168be3.png"
        },
        35821: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d918681359b9754c1979.png"
        },
        6580: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ffdb85eea468c4bff727.png"
        },
        18638: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2a48a7a0f9e229a93d49.png"
        },
        90714: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/772e7529cffde56caaee.png"
        },
        15831: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f47925af191f7282b4eb.png"
        },
        30657: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/51b6e0777871d40be193.png"
        },
        12751: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d5fbc72b4ac39e200810.png"
        },
        39765: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1b073a64f17003ebce59.png"
        },
        24342: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/00e1f18af5ce1b84e2b8.png"
        },
        79950: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4577828fcce54b6135ae.png"
        },
        36439: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/12512748555c2c8fb502.png"
        },
        96755: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/04c87354bd20f9e7790b.png"
        },
        14019: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c14d2133a0f34b423c24.png"
        },
        42640: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/37db06054cccf23dd9f7.png"
        },
        62389: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/682be8fdead47563a47f.png"
        },
        12849: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b780ed980084abe92728.png"
        },
        66159: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b28a3098e6f2e1b719d0.png"
        },
        45559: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/02fc3b554866568a4acd.png"
        },
        601: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f86a67c9da6654496172.png"
        },
        4720: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/eb430f0d700dfdf6277a.png"
        },
        20990: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0f3719b578f3f4195339.png"
        },
        50062: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0800afe55ffffeeb98dd.png"
        },
        41812: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/aa7472636e2faedfb508.png"
        },
        73793: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f1568c2a539fcc4e9e0b.png"
        },
        88125: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a7f642079c40dcde19b9.png"
        },
        79686: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/afbb62ea08e3f621ec90.png"
        },
        97828: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c8315e6ae03c7fc782f1.png"
        },
        94217: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/049cbf0ea72e0001df81.png"
        },
        79390: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/434c084620e3470b1d96.png"
        },
        63016: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ef0566e25836d10778c6.png"
        },
        27864: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0e7ce06aa091667637ae.png"
        },
        82099: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/404b7a1e9625652d3362.png"
        },
        20010: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ede008494dfed250b610.png"
        },
        32931: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9f1640db9c39ee609a22.png"
        },
        69482: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1dd4adacd1a2f21ac426.png"
        },
        56374: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6fd4f320e6d4c1e3755b.png"
        },
        95684: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dd198b27d5c0502a40be.png"
        },
        37622: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5cb87c19523697eae19b.png"
        },
        18331: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a8871ac66aabf0cc3403.png"
        },
        66222: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/33575680940d853cc7dd.png"
        },
        45455: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/94841d93421a1f761d1a.png"
        },
        81570: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/eaa9369b3ba023b78751.png"
        },
        52046: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cd8c6b9e8e58dfd9f56e.png"
        },
        99357: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/300762f521fbebd106c2.png"
        },
        31135: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/724db04f183ee59efbd9.png"
        },
        20763: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d78d1d9f2e3b7fda7ed5.png"
        },
        51615: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8d8092c164bfb40059df.png"
        },
        38970: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c4efbcbbcb13681e58c2.png"
        },
        2370: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b548afebeddc4f5d1170.png"
        },
        50542: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ba6233e472a729c98635.png"
        },
        64921: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4d4bf920a30810efc2f9.png"
        },
        35365: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b0bea40c9107e1074d93.png"
        },
        3566: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fea6041a7932fefe78a8.png"
        },
        37327: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/af656f8042b6d0142cda.png"
        },
        60433: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9ebaf800b2371b212ff8.png"
        },
        99712: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/07e70ae232f5e79f07cf.png"
        },
        89926: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c58b25f18e0b97ea752e.png"
        },
        55718: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/09fc18849a5c154998f2.png"
        },
        96634: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1f0b69ee2ad7bd126ef3.png"
        },
        37700: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3a969a6bcef528f3020f.png"
        },
        11432: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a04d3f73612fb223eceb.png"
        },
        11588: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/79527b604df733663e4d.png"
        },
        78692: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/766f8b5b2481db44fc48.png"
        },
        99697: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ab123fc2f700793b1cc4.png"
        },
        15809: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2849b8c5f8c178900067.png"
        },
        51036: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5e58aca6b8e0b14c6ada.png"
        },
        98972: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/41f49b009f05e28e3f69.png"
        },
        67366: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/688362f27a0fa9e688b9.png"
        },
        69099: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3a37349c5481ba29a6eb.png"
        },
        95281: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/76f9fbee3b02449829cf.png"
        },
        30641: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/586b9cce2237fca53a2d.png"
        },
        61501: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e4fd67ec19ca07a7d3ec.png"
        },
        39228: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5640a94dc312b3c34b56.png"
        },
        11053: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3a37349c5481ba29a6eb.png"
        },
        2125: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2849b8c5f8c178900067.png"
        },
        10736: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e4fd67ec19ca07a7d3ec.png"
        },
        88591: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7fc088bd067b2323af79.png"
        },
        42626: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/67b32cdf80c4f52258c2.png"
        },
        58163: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e1c8be7d0d9680252819.png"
        },
        79556: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/49e3d7db9ba1c6f42c04.png"
        },
        27861: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/eabac3374b8a09d33a0a.png"
        },
        9046: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6b2dbaa264923672e6e6.png"
        },
        95090: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0aec8aa9333b9456cdce.png"
        },
        16642: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/35bbc98d866f1d0ce397.png"
        },
        72678: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a54b643d4d561beed9e3.png"
        },
        19469: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/095d29a7ec36b4789c60.png"
        },
        32211: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/43e64d114ae0195393af.png"
        },
        61509: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/93c7c96df841fae469aa.png"
        },
        55310: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/770650d67e9cacdbf07b.png"
        },
        2554: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cc2ba6f94e90388c2f9b.png"
        },
        50398: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/10c7b11e6f50fc5015de.png"
        },
        67400: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7369b063aa3080985680.png"
        },
        3182: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e8dc59398cd6e2d55d1e.png"
        },
        54666: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b5c23f6d2e476d9da115.png"
        },
        97015: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1de14cdc50f123a0605a.png"
        },
        90438: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5d86375c10a2bee625fb.png"
        },
        19284: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f4318d2b3e666b3c65fc.png"
        },
        98624: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d93620dc788eca8fb3e2.png"
        },
        65820: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cc5b5999a83919eb75ee.png"
        },
        92769: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1a8c9ce6c2cc634c6103.png"
        },
        12564: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f6bc2121cb43dbb5c889.png"
        },
        2637: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/88ef0d82bb1465bdf925.png"
        },
        57225: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8d17fa154472483430a6.png"
        },
        61563: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e6f8e0893aed081b72ff.png"
        },
        58240: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4b1616d1fc8ef3247de3.png"
        },
        96689: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8a4a0720a193e99af229.png"
        },
        2372: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6abd8ba26ea934a4766a.png"
        },
        97616: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e4aca7a86842c1e151ec.png"
        },
        18688: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/63f02a3908c2022a6759.png"
        },
        5206: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/99571ea8d80ee597826e.png"
        },
        1667: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b56671f98881d317de87.png"
        },
        14795: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c1bcdfbf0e074a1442b1.png"
        },
        32574: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ae1123e402656ed69414.png"
        },
        66201: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/31f918be245f3894143e.png"
        },
        20981: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/70b87a65d4702e1ee57d.png"
        },
        75203: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/da54762dcac015e4a0f7.png"
        },
        65688: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/62a5bb18e292d1392078.png"
        },
        89544: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/13cd2331c5ed9626bba1.png"
        },
        63481: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c9f984bddbcbabfd767c.png"
        },
        96453: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8cbf8768f2be4159d563.png"
        },
        67384: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1f680ae5b29f01272a41.png"
        },
        18472: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7cdc25ad5938edab469b.png"
        },
        95028: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ab66a5e7a86d14f686f0.png"
        },
        32068: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/816dfa1bfc0e362e16ff.png"
        },
        92673: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e883ae288e08050f316c.png"
        },
        79912: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2b6205e34a2fb649c134.png"
        },
        77766: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6c9a519a383ea95275a9.png"
        },
        44639: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3c48294ba7f386026955.png"
        },
        87864: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5548e237f2b72f6288ac.png"
        },
        16130: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e74eacd0701bd6e8c4c3.png"
        },
        47: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b72e3cd63712e6e16828.png"
        },
        16741: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/40b0d69a4a69c5faff4e.png"
        },
        18908: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/19be82efadaddf21654b.png"
        },
        46163: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/99139df7e85ba963620e.png"
        },
        62706: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9c69051e8220ef5f4da4.png"
        },
        33700: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d28c391afcbdca0ccffe.png"
        },
        32870: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/be9a223a91db42bd5742.png"
        },
        17775: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/634f7b6d3c3096c34e12.png"
        },
        14521: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1e5b3c57bd4dbd7c0c25.png"
        },
        32404: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a3552b84a100a7ae4811.png"
        },
        25304: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6d8de0daac3876c6d8db.png"
        },
        4539: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/17b5c794ca0eba5ff28c.png"
        },
        26565: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3b169677b5d88ea480f8.png"
        },
        82977: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/01725a3d994ee98e2c28.png"
        },
        91492: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7ed4338897d7b541c7f3.png"
        },
        65609: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bc1dc9781dfeb802340e.png"
        },
        43406: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/74c094546aa4dcebc4cb.png"
        },
        51468: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4eb84466ea49c69fcf00.png"
        },
        1802: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ea6add4dc731da6a1d93.png"
        },
        54967: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bf2ac166a143c5834b9d.png"
        },
        16425: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8ef81e85954a37ec55bc.png"
        },
        70670: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8d6b6e2693e4f80a0afb.png"
        },
        16144: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/eb47fb4cae76f5ae6787.png"
        },
        30129: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2b1295fb9398974b7618.png"
        },
        96605: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3d433c2e1569ec98992e.png"
        },
        95321: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0f945919f0da74a9e93d.png"
        },
        26785: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f4da631b83bc57689b01.png"
        },
        14983: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c3bacbccc4ca2b3316b1.png"
        },
        59870: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dc76bdadc513f431f4dc.png"
        },
        89599: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0a02b1f3441a91a8e4cd.png"
        },
        85111: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d14fe12e9e64778a61af.png"
        },
        60960: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/db1fb841db830f96f2c0.png"
        },
        77932: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e96eff54cbd45e194a15.png"
        },
        91402: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dd85c8577663a55a184a.png"
        },
        34025: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fec0f374a9e8c9479865.png"
        },
        2302: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9e6e6bfc5bee4641e7f9.png"
        },
        43262: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4d90757c4a3930bf6eed.png"
        },
        50070: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/69b8bae0d02adb9e406f.png"
        },
        16628: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/586689b57562f831ee07.png"
        },
        37043: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/10469201a7ada49e3db7.png"
        },
        77504: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3ccd3d07cacc5c6d3f13.png"
        },
        33301: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8f4f6b8317f3718e6553.png"
        },
        1864: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c76b5594eeb9af3aaea7.png"
        },
        86629: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f2b58614287616a395c0.png"
        },
        48701: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/beeded7fa3fb7c7c0d1f.png"
        },
        56912: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b44180d7945b11b32678.png"
        },
        62390: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7a1cdab6ef9618aba75c.png"
        },
        26712: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ffd56b506031af7a3241.png"
        },
        8597: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/99af744121a8a9e8fda1.png"
        },
        24301: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0c48a42612243ebca05d.png"
        },
        11624: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/74bba8d9cb9a10de68a5.png"
        },
        90787: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2b3441b4b574219fa129.png"
        },
        21412: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/316ee3298d89769b3692.png"
        },
        54288: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0a46fb07cf3d419a1dba.png"
        },
        94713: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/81f495666c8016b7a2f0.png"
        },
        76792: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0db2fedfb7fe95a69251.png"
        },
        93293: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2b182b8e57371807c632.png"
        },
        72053: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4d3cd34176f419cb7553.png"
        },
        28904: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/252e4262842ecb95baa7.png"
        },
        19888: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ae5c98448712df1d6283.png"
        },
        99731: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/77ce19da0219a578daa1.png"
        },
        25821: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d0b14eae8141ce9d7cff.png"
        },
        23838: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c12b2c0a4d2896d5524b.png"
        },
        78568: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/33d87122039f27e84a15.png"
        },
        12887: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f0bd6a8778d6f07822d0.png"
        },
        53917: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/936bc21113af28fc4bd6.png"
        },
        55341: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8c6f361c385e4b3bdbfa.png"
        },
        98950: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a804f6573fec5109588d.png"
        },
        50249: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c43e44dcfc8b2ff6ef2d.png"
        },
        74050: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0d1082dc290609b61605.png"
        },
        68417: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8836a3f53e5e1d1cba3d.png"
        },
        79851: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6b54d5c767ff305688b0.png"
        },
        19541: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8f7269437ca9d60af125.png"
        },
        82286: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2ec8f3df6d8e56b68dd0.png"
        },
        60643: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b20ddbbd0841e01ad656.png"
        },
        44915: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/111298b5956b5e15f13d.png"
        },
        54045: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/479a79b998c91039a570.png"
        },
        90654: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f7e24d837cb7e4085e90.png"
        },
        6868: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/22e09c67a202c7576c87.png"
        },
        99073: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/176a37cc94039f7f0b07.png"
        },
        94368: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/837811d968ec158f63cc.png"
        },
        36372: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/24d864ef1ec3c02ecb91.png"
        },
        63342: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/90cfb5b5bd76315bf8cd.png"
        },
        50183: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/beaf5ad6260a17233bdd.png"
        },
        73202: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c91e85e601e88bd2df46.png"
        },
        40254: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2c4783c68a93009cecf8.png"
        },
        46495: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9cc949d52703d1a2b7d1.png"
        },
        51242: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d40e47903c032762221e.png"
        },
        81102: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bc3aff399f128f9d099d.png"
        },
        45238: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d473b599be2252255688.png"
        },
        51517: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dff96c636a33dae7e206.png"
        },
        7548: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5fd9fa66a26ab8a86c0e.png"
        },
        30785: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1f96b299d2cee5a5fab5.png"
        },
        77448: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/78a23424e98fc7456e98.png"
        },
        87694: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3cacaf39a59b9ca184f8.png"
        },
        47242: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/04558aad78a353d34fcc.png"
        },
        97369: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d01c9e956e3ee04d1391.png"
        },
        60881: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7ea1c5786cff9614b8b3.png"
        },
        88169: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c3415dd02a318ff20800.png"
        },
        59214: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/142f82f189d947319fbd.png"
        },
        1982: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c38b35a8dbd97f3c2ec5.png"
        },
        87282: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/03315b25a70eab5f9243.png"
        },
        89799: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a986befd71b27c12ed10.png"
        },
        16045: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e88c9eeae08139646019.png"
        },
        59043: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c7b50735cef320211f88.png"
        },
        74007: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e53c871008f54c1997e7.png"
        },
        14671: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ce7dfb82056ea0311a67.png"
        },
        88866: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d03eaf9ce7ec819247ba.png"
        },
        36763: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/eae11f39791b4e3372f0.png"
        },
        7971: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cb8578a711a828fe6c28.png"
        },
        28386: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ba46fd015c6b1721afda.png"
        },
        41389: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e3f270a4570d244a3281.png"
        },
        53273: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/25b45c64248a629627c2.png"
        },
        85670: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e1078e418718d24c5bb9.png"
        },
        91981: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/064790d3174710cb3f8e.png"
        },
        23734: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/25d9137bfd8939281dfb.png"
        },
        14264: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b961af75bad76b6474cb.png"
        },
        77684: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d2106f189f1230100d67.png"
        },
        28344: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/530088cd5eccdf92ef6a.png"
        },
        1803: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8d6d76ecc830b747e99a.png"
        },
        85942: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/26bd3add65fe9b2258d8.png"
        },
        51842: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d0b8a31da74b8db3a36b.png"
        },
        57504: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1324ec3217865aee376d.png"
        },
        34589: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9ec5050e2aef830a87fe.png"
        },
        90981: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3a86742e8aa1c194e1b7.png"
        },
        95451: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/db460407de815e0214ac.png"
        },
        19496: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3ea33c0726acbcbac655.png"
        },
        79509: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/caa832d81bd14c093f04.png"
        },
        39768: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2cad313da1ff7d049fc6.png"
        },
        167: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/179d19d9c4e87be7bee7.png"
        },
        57219: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/86ff6434e1f7bee9c58c.png"
        },
        87495: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0c4f7f691bdbcd9ce73e.png"
        },
        60415: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/df2c8678b47376d17a0b.png"
        },
        15208: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1f5618ba26bdda7d1a62.png"
        },
        2788: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e06d77788cc8ceb12998.png"
        },
        42677: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/424c17be5edce6bb85cf.png"
        },
        39444: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e7ca74f10274702dab6e.png"
        },
        84055: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/444179921a4553f48088.png"
        },
        45925: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6f49b304dceb28107dde.png"
        },
        92659: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/09e0afd0230eab6c1cf9.png"
        },
        23224: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0831a526404cc5b57032.png"
        },
        53865: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/59a5ff670b1de36ac510.png"
        },
        34737: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8d639aeb6acc97393c6e.png"
        },
        99771: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2e42d1ac223ece4fb5b2.png"
        },
        58880: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d9d33bf05cb4f7cc8af3.png"
        },
        57784: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/937cfd9b8291bd36bf5c.png"
        },
        59443: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3fc9189597d4562db201.png"
        },
        41447: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/90542307fbfa3aa1af7b.png"
        },
        2729: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e512b51d3f56d0a18ec7.png"
        },
        358: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0ef456294a6227a7a930.png"
        },
        86617: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d4d0d5e79256eaf86d0f.png"
        },
        10462: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8bf96eaec4a0c9aa8966.png"
        },
        95700: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/272fcba30931ee24493a.png"
        },
        11135: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/36d9ecb42d7d279fb644.png"
        },
        56401: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bfe09bb36c2828970540.png"
        },
        3874: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/276a8d46eac1658a9e0e.png"
        },
        1804: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/26e9e4a39e3e19506ec3.png"
        },
        90077: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0c18ce3865058c18d975.png"
        },
        22409: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/94a6f0b068a1a3378cc9.png"
        },
        12101: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/348db9b618cf1d674c18.png"
        },
        30991: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/36d9ecb42d7d279fb644.png"
        },
        83774: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bfe09bb36c2828970540.png"
        },
        38488: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/276a8d46eac1658a9e0e.png"
        },
        4625: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fe78ae728513ca737924.png"
        },
        79948: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/348db9b618cf1d674c18.png"
        },
        19281: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2cda1976974aa7808b4a.png"
        },
        60822: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ee716718c1d2cc28c421.png"
        },
        16178: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3ed00f0066f43c8ee6ce.png"
        },
        24107: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/28df773db9803cbc56c3.png"
        },
        44339: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3acf56360fd0a2210b74.png"
        },
        36639: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8240cf84f2965db54546.png"
        },
        78963: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4b187f93a3ca63fb28e0.png"
        },
        92158: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e5c9ac10ff9629bed91e.png"
        },
        41719: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4ad7f3e6c0a502711b0c.png"
        },
        1309: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9b40908c444eea3e152b.png"
        },
        4833: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/71651e632f1771b0ed43.png"
        },
        58455: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/528a33aaef0996f65df9.png"
        },
        27175: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/579cfe9d7472569212d4.png"
        },
        14689: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1945ffb072e81715363d.png"
        },
        34869: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ea417a2c5e4bdd864e80.png"
        },
        38972: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/defe79b801a20016ac28.png"
        },
        76432: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/66cb07a56f64ab9d9dd8.png"
        },
        17366: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d62d9df63dba88758f46.png"
        },
        63347: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f14bf8d545076e9c58e7.png"
        },
        43935: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8591c49b6bb8ea4180f0.png"
        },
        16802: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ae80548c7ee344e5ba5a.png"
        },
        36589: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/491eeb2f16d59b8899e8.png"
        },
        13971: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/44192a67ea811f610917.png"
        },
        10595: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/698a52c553bfa7a8ebb3.png"
        },
        88784: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dacdd32a72370304403f.png"
        },
        73424: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7b7cbc18c8888affaa13.png"
        },
        54304: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/893eb88242125b669d77.png"
        },
        85933: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0d4239b61c7decd4d072.png"
        },
        83265: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/76c026432b58d1cb253c.png"
        },
        46419: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/48c032efd7fee253a559.png"
        },
        39262: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/68596492e458612316bb.png"
        },
        50823: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e29f361e331536d82a38.png"
        },
        67803: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6507ac584628a665f983.png"
        },
        65485: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d52b264b5941b6d51733.png"
        },
        99361: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c445772ae9c2cc960d9d.png"
        },
        84893: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/23af49807cfd571067ee.png"
        },
        23007: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7eb7161f28e1a4a74dfe.png"
        },
        50639: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b6108cbdab3b58211b68.png"
        },
        82799: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e30642ff658ed0c37bf9.png"
        },
        48779: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0187b1318a9f54d7e037.png"
        },
        21689: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/810314b31f92c0209735.png"
        },
        51955: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fd247407db24e85e0261.png"
        },
        95327: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4b225a60f018f901bdf9.png"
        },
        94286: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e966e5d9131e75d9d1b7.png"
        },
        90013: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cfc43c308f447ddfcabe.png"
        },
        89010: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/87b4fae12bb49f8d45c2.png"
        },
        9909: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6d68fffc3ca62a6e2729.png"
        },
        41679: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b25b9bb780753fafb555.png"
        },
        16687: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9c1d094004b140a59e6e.png"
        },
        21568: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d47d31dc5ddd61c5a874.png"
        },
        74961: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/637fb09d0e67967de696.png"
        },
        54889: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/932fb788c0f2a97510e0.png"
        },
        7532: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/49e7fc9944b671f5748b.png"
        },
        90420: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d90d771bc9e0e3414d72.png"
        },
        91702: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9f715a7f76b62ba25201.png"
        },
        262: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b94e236340eb55021457.png"
        },
        8673: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f332cbaebd246a252352.png"
        },
        17237: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4ddb1d5b36e53a89e88a.png"
        },
        61756: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/271e18cb744629b2746a.png"
        },
        36112: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3d50f117e4442bbdc3b7.png"
        },
        21827: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/99e16c585802e382bae7.png"
        },
        67351: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7244484a737b3f24d137.png"
        },
        79089: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6ad0e441fa7eca930c62.png"
        },
        82865: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5f20be05f6f97bcd8603.png"
        },
        26312: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4ad7f3e6c0a502711b0c.png"
        },
        79175: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/224284c7a5d691477d82.png"
        },
        12728: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/857cda890c510c9227dd.png"
        },
        76444: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c6d72c9107d2f4f9f3e8.png"
        },
        34605: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4b82557f5ebebb0506f0.png"
        },
        73075: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d6e378aea03bbd6fd780.png"
        },
        24393: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a397d55d1a6a21a7bec6.png"
        },
        84962: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4766b274a015e8f62d8a.png"
        },
        74048: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ba0c4674f204823bd675.png"
        },
        66568: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3006d63f023d7c975b06.png"
        },
        60823: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2cd1c3b30bbf7c45a474.png"
        },
        21153: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6dc908bb4de95af9385f.png"
        },
        982: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7a477950706dd314b26b.png"
        },
        44429: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f4a63d6b88130e201a53.png"
        },
        91795: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0286f77bf368576b7027.png"
        },
        61261: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8924135dbbf4958b3011.png"
        },
        24945: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fa6540e5766b4158a8eb.png"
        },
        85365: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/da3d2d8d3ce801ab118c.png"
        },
        65512: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/230cca58e73fcedf27ae.png"
        },
        31691: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b10c51111211f2ff8c83.png"
        },
        92130: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/65483cc6ea1ef2354af3.png"
        },
        24116: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/df534bd1ef91caabcd9e.png"
        },
        98502: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/00a8833994ccd676d8cd.png"
        },
        36964: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/75626ce058aa847dd546.png"
        },
        89202: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fc8b43fbaa06553e1ff1.png"
        },
        85377: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a8fbfcfa93f2e3a70525.png"
        },
        44475: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f1931a7c32770289bdb2.png"
        },
        67512: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a65e8260136fa17a7fb1.png"
        },
        17465: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f415ff961a459f9a1d24.png"
        },
        11657: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/71655d5e745b00e0977d.png"
        },
        31499: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/559ac24589ee3a1e1fd1.png"
        },
        12181: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ba0fe8faec9e27bae503.png"
        },
        36158: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/768edab1463cdf6f0e85.png"
        },
        27607: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c11c8327e253c5f77758.png"
        },
        43933: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/62d81a1519cf9048dfbe.png"
        },
        97087: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/051afcf911d86cb3f8aa.png"
        },
        24366: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/175568d206c5adb94c42.png"
        },
        50058: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/330349ed4909e9cdbe4e.png"
        },
        1644: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/28f403f12c446f5c9b7b.png"
        },
        23607: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/65efaa7dbbc32d39ca4d.png"
        },
        49054: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dc7b395a7a93feee829f.png"
        },
        98711: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/07cbdddf39285e3518e1.png"
        },
        69055: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/077da05937fb6fd7fa6b.png"
        },
        37421: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/506721f69501bc2f37ed.png"
        },
        37654: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2c7dae1462c176b6226f.png"
        },
        2616: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4eebbba2447e9c5a3765.png"
        },
        47893: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3841fed26ba928b82785.png"
        },
        18022: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/936bdb90577311430023.png"
        },
        61918: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/59fb83407a8fca1989b2.png"
        },
        42846: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0683399dcf20fe49e11c.png"
        },
        73184: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/966e2e917eebb3f99d8a.png"
        },
        31247: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f25d045b9f758b0f3c2a.png"
        },
        74700: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6eb061700dd549047361.png"
        },
        94879: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dd681ab62ab73de4bd90.png"
        },
        18242: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/01cf595c3ec97d4e2f80.png"
        },
        32133: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/de647192835ac065aa0d.png"
        },
        58037: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3f24ae32838eb39b773e.png"
        },
        28094: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/65ea3227edcecf77922f.png"
        },
        53762: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/13efdd72d15bc6750244.png"
        },
        53934: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/62df9ea62b4cdf6858af.png"
        },
        98077: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/961769981c674b0737c8.png"
        },
        44610: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8e04b573f6a58a789305.png"
        },
        115: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/91370d41a659bc2a0226.png"
        },
        28871: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6a07c3bec7406c3dbd3e.png"
        },
        49548: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/023c6c5840318fc014cf.png"
        },
        43370: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/92b27f5f2c6167c11f4a.png"
        },
        85666: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e6790ddd4cfe914bab16.png"
        },
        90635: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fc25100df5c7228e9be8.png"
        },
        5109: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/743ee939147ae0a59097.png"
        },
        46514: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b0dfa3c91685bcb35ebb.png"
        },
        87954: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/7a4399627fcdb5a05225.png"
        },
        11239: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/627b994949e97328f875.png"
        },
        41950: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3daf09dbc76b342e581e.png"
        },
        68123: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a191bae671111b4db661.png"
        },
        18792: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d90dda87442888c4d538.png"
        },
        94325: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ebf14f9a6f7501d1399d.png"
        },
        86602: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b504c229047a98359d7a.png"
        },
        44190: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/05dd57245ca5ae3e95b1.png"
        },
        79593: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1aee68f98ee0943f4cfa.png"
        },
        16249: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/87c2d989b30c1fd1776a.png"
        },
        17394: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/494c2f63b32ec0029b2d.png"
        },
        89559: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d70f71532995a1068993.png"
        },
        61697: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/14c6644ff05513bd0290.png"
        },
        85692: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ce8b522b6ac439cfabc0.png"
        },
        47706: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f017406d5157be912fe5.png"
        },
        33624: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/558165b44d15d4cbaefd.png"
        },
        50157: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8a1b8908cbb89410fc1a.png"
        },
        2057: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a04da1ccaf98820947cc.png"
        },
        13675: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ddef9cbc76dce92e70e1.png"
        },
        72585: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9d5e35f904b612e58c7f.png"
        },
        3425: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1fbcea261bfd4c03503c.png"
        },
        87526: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/11cc398d2ac1f4a5ee71.png"
        },
        81240: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1acb24a8f3c0169e090a.png"
        },
        33503: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e466c529864cc64518de.png"
        },
        34642: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/98396f10c49413f14fb4.png"
        },
        92642: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/94b27de156604bff36aa.png"
        },
        86879: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b344be36756c8e1ae44a.png"
        },
        654: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c694df17b8535968a348.png"
        },
        93290: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f94ee4cb14f34b12e115.png"
        },
        59754: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/49e01659068609d4f315.png"
        },
        97899: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/38d1de287b6f3be05182.png"
        },
        95119: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/979126e980ce45f1eb74.png"
        },
        70803: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b4d3ff808032e7104c6c.png"
        },
        84321: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f66d6a807a3dfa082731.png"
        },
        42300: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a899961e94046731dd83.png"
        },
        79887: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a5ac667a6a33e76dd927.png"
        },
        49136: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0504169d237bcd7e7c2f.png"
        },
        97431: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ad07a56e8d235bd6f884.png"
        },
        64830: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/570e497a6895e9418acc.png"
        },
        9605: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/12d957867ead06d19dad.png"
        },
        84454: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/958ed5b8acea871bb424.png"
        },
        43362: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/04c6c149933c0657d0f0.png"
        },
        82499: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e7d933dd293f41eb9cb8.png"
        },
        24754: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8af7fff41d747b65aa72.png"
        },
        61613: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fdc0a8e7c482e2b03d10.png"
        },
        47148: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6f59f63f949f460b010d.png"
        },
        44425: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/345389553b1bfa607664.png"
        },
        51766: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dffa77c04caac1894380.png"
        },
        45983: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d7d5d0bdd08dfda0e677.png"
        },
        54221: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/03ac3e3fb934e9ede82f.png"
        },
        36966: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e84e3fe01c4037629470.png"
        },
        65331: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d689f00332f1aae2405c.png"
        },
        60348: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a38278b74c166f64e6f9.png"
        },
        95791: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/23ad8c171a4bed0a63ac.png"
        },
        87913: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6936fb3a62f72133bf4c.png"
        },
        59140: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/25e94000b9e234f19127.png"
        },
        47493: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ca3d2d954f5d3beca718.png"
        },
        86883: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0849ddab42d753a0af9e.png"
        },
        59186: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6f1aca673c36d60f83a6.png"
        },
        34119: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ac38094886617d892fb1.png"
        },
        11839: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a9b12e5ecba7b9d869dd.png"
        },
        93248: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/02e834f8b46c941347a5.png"
        },
        20640: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0998927025de89409d33.png"
        },
        55495: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9eba8e22f09238ebc68d.png"
        },
        9949: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b95d14ae06e0b1f5a713.png"
        },
        33369: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8ef5d0ee720f2ae13c82.png"
        },
        10596: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ba928651f30b3b8218bd.png"
        },
        86559: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bae265602e9ed78614ac.png"
        },
        64045: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/dcd27b92fcec4910cbcc.png"
        },
        33442: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c386c3d421db7dff9677.png"
        },
        54808: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/152cba94b0311e356959.png"
        },
        61301: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d90442f25c22cc3509ed.png"
        },
        58253: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f4c553285504f9b5533e.png"
        },
        4321: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6f5cf5489d9257cde1ae.png"
        },
        40815: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d24fe1c66abd12c18249.png"
        },
        46109: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6e238b91a35c97d1fc12.png"
        },
        19381: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/028a74c364885291475c.png"
        },
        21174: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b1de055af1987b80513e.png"
        },
        28698: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f7046c4f8e59ca8a02a4.png"
        },
        99205: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/45a36c7001ab8588554d.png"
        },
        8126: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c625b611b8e87e25070d.png"
        },
        33273: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2e65c88f57384bef4746.png"
        },
        8593: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9a9a82939ee8e1b37e92.png"
        },
        66403: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3ba241d5df6957a1339a.png"
        },
        95961: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ee33c469a26612633c27.png"
        },
        80935: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9e9dbc3bc871258265e7.png"
        },
        53492: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/673e72989ce992634ff6.png"
        },
        31234: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cb4f46bcfc572d65071a.png"
        },
        81826: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6528ef9dd4e05bc2f5e4.png"
        },
        78605: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/940acf9e3d44c04c37ab.png"
        },
        16697: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0db232b2d442bf752efa.png"
        },
        29433: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/93439c038c127943f747.png"
        },
        52477: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/08bb1374250f76e41bfc.png"
        },
        68185: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2f04ca7a70e3e334b96f.png"
        },
        67684: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f89792ebf99152b8423f.png"
        },
        24327: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/48ee9bdefd320afd161c.png"
        },
        58310: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9920c837720dd0d53f9c.png"
        },
        32880: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d13a13d39081e183d12d.png"
        },
        60567: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/65052185488fe68fa05a.png"
        },
        85492: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/cc23f5ca679ba6d0fe57.png"
        },
        75755: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/38d454c69900876a5f00.png"
        },
        5427: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4b861bfafebe0d4616cd.png"
        },
        29737: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6c28eb6d8cdaf961f2dd.png"
        },
        30269: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2e9f39b5524e1e3b57bd.png"
        },
        62005: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f4ae9defb5754cd53569.png"
        },
        22498: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b0978590f466efdd266a.png"
        },
        21082: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5fd36a1701ec6fbaecf4.png"
        },
        16535: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/90a16fe42ac7d01881ca.png"
        },
        3690: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3d8ad7f4341395d6d152.png"
        },
        28255: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c81dca9b5c9fa8b9f40a.png"
        },
        84235: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/9353bd86866f469a4655.png"
        },
        51495: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/45265be2a0d9ba2c84bb.png"
        },
        11073: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/36eb4516c0c73c52903c.png"
        },
        722: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5bbaf59f1a4ecc0633d4.png"
        },
        85798: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/362f979c16f6f22e367e.png"
        },
        63271: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8886636e88fb16ceb3bb.png"
        },
        84010: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f3c60c4be9d74832d0e0.png"
        },
        81592: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/35c7cbc7fb4746728abe.png"
        },
        49195: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0d6021d18eb81da18258.png"
        },
        54386: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/e015feda1b725bc9be08.png"
        },
        75106: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d1157d5c6481c14ad99a.png"
        },
        78267: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/155411d3d6ec22d86aff.png"
        },
        82621: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/929039a4cdcb3552af78.png"
        },
        70310: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5e12ca74d770467ff523.png"
        },
        42697: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/86c849803bd292d379f8.png"
        },
        39702: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/364b483359904140a705.png"
        },
        79819: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/66fadc5d65c5bd28e9c8.png"
        },
        72894: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ee68dfa6cbd411a57ba5.png"
        },
        60481: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/59d98e795be3934014a5.png"
        },
        75870: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3d6ed30be700b91070c0.png"
        },
        6539: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/77ba0ad1eb72b4343676.png"
        },
        26887: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/6e4ac31fd7590ab5ad3c.png"
        },
        71903: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/11b77c380ee3c103d253.png"
        },
        21315: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f927ae0927002fccb725.png"
        },
        67129: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/a60a6f37cc019c0acc29.png"
        },
        68029: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/59e671d530caff26316d.png"
        },
        33844: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/baec01e311b627114254.png"
        },
        72146: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/069c470571e8807043ac.png"
        },
        44621: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d97e1cf81a25b61af406.png"
        },
        71275: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d46307980c4ff1408437.png"
        },
        2514: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/b4ddcc7cd8d45a38c571.png"
        },
        16539: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5bf12bc92de41b5951e3.png"
        },
        78260: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/df488430a77ab4b585bf.png"
        },
        57243: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/5f2cd534cbc941f84d45.png"
        },
        27152: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1cce6d2d88c955f5d8af.png"
        },
        76482: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/37a94e628bec69b7495d.png"
        },
        260: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1cf7d837722271c7e5db.png"
        },
        28756: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/556bfea1fa263dafb75e.png"
        },
        48501: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/01a3d49b9f45c3fb37a0.png"
        },
        59050: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/55a1b4a6c24c99e6270e.png"
        },
        81222: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1a88ba0ecc5f03bd064e.png"
        },
        37567: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/413668cf04d26571d4e4.png"
        },
        32758: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d0dda443971fe1be3b9d.png"
        },
        2516: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/be7f4d70c58c1914b0aa.png"
        },
        46407: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/1577f8783a6e3c2dfc5f.gif"
        },
        1628: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/62a866cbc42222bf9702.png"
        },
        12255: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/bd40e286fcfd911f4636.png"
        },
        96770: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/02ad9f6cea88cecfdc86.png"
        },
        28249: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/0a3485e787543c55a1e9.png"
        },
        25631: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8c5a8ee38e21c363e933.png"
        },
        1549: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3c4719422d56cae4e199.png"
        },
        96192: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8c4e644d5688cd6a6e99.png"
        },
        36033: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/baa0efdc3e41c07385b2.png"
        },
        3475: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/df0494a474ddc1a050b0.png"
        },
        72929: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2002a8ea01d84315a241.png"
        },
        24792: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c05e286ab561993a9778.png"
        },
        70441: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2f6558f17f6d20992d98.png"
        },
        22315: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ff5c6cded67fb8d6d1ec.png"
        },
        70566: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c922c0dd4fb4b7c3590d.png"
        },
        58228: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/673e2c6dca5c06c16118.png"
        },
        48242: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f5bdb06c498261ea8a56.png"
        },
        63810: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f9c83bc30646a78c80ee.png"
        },
        58592: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/f829fb9f6b6f837d2392.png"
        },
        22860: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/212b0995bab1ac0102c8.png"
        },
        38509: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/8f4be1b2cb3b4e0f0f5e.png"
        },
        14430: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/474c8afd2923ccab871e.png"
        },
        29485: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/67e64439ef0a75484eab.png"
        },
        39561: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/462b39c08e1e7cca8a7d.png"
        },
        18539: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ec3f9ea29e11935386fa.png"
        },
        30401: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c6ed418f1860515c4b8d.png"
        },
        73519: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/2cd919ff6dc993bbe7b2.png"
        },
        97760: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c9b5c0b3ab30300b305b.png"
        },
        95971: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c1da10ac391394ba050c.png"
        },
        85704: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/4c341f58bd805e9c5974.png"
        },
        55738: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/ec3f9ea29e11935386fa.png"
        },
        65944: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/12180f5e5212e68d6584.png"
        },
        48349: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c9b5c0b3ab30300b305b.png"
        },
        37663: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/3c7623213d4323a0dc73.png"
        },
        3989: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fbf343c16981ae4fbf55.png"
        },
        21248: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/eb1ee2df27b2211bb0b8.png"
        },
        54334: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/c9b5c0b3ab30300b305b.png"
        },
        16383: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/eb96160c9a23b103e166.png"
        },
        5724: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/fb8f6a057373a2d3e50e.png"
        },
        91653: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/d093346d1ed378c3b5ff.png"
        },
        76840: (e, t, s) => {
            "use strict";
            e.exports = s.p + "games/everyday/81a1ee90ddc97449614c.png"
        }
    }
]);
//# sourceMappingURL=sourcemaps/9725.14f5253d6dab58a9c7b7.js.map